(function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require=="function"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error("Cannot find module '"+o+"'");throw f.code="MODULE_NOT_FOUND",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require=="function"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})({1:[function(require,module,exports){
(function (global){
/* eslint max-len: 0 */

"use strict";

require("core-js/shim");

require("babel-regenerator-runtime");

// Should be removed in the next major release:

require("core-js/fn/regexp/escape");

if (global._babelPolyfill) {
  throw new Error("only one instance of babel-polyfill is allowed");
}
global._babelPolyfill = true;

var DEFINE_PROPERTY = "defineProperty";
function define(O, key, value) {
  O[key] || Object[DEFINE_PROPERTY](O, key, {
    writable: true,
    configurable: true,
    value: value
  });
}

define(String.prototype, "padLeft", "".padStart);
define(String.prototype, "padRight", "".padEnd);

"pop,reverse,shift,keys,values,entries,indexOf,every,some,forEach,map,filter,find,findIndex,includes,join,slice,concat,push,splice,unshift,sort,lastIndexOf,reduce,reduceRight,copyWithin,fill".split(",").forEach(function (key) {
  [][key] && define(Array, key, Function.call.bind([][key]));
});
}).call(this,typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {})

},{"babel-regenerator-runtime":289,"core-js/fn/regexp/escape":2,"core-js/shim":288}],2:[function(require,module,exports){
require('../../modules/core.regexp.escape');
module.exports = require('../../modules/_core').RegExp.escape;
},{"../../modules/_core":22,"../../modules/core.regexp.escape":116}],3:[function(require,module,exports){
module.exports = function(it){
  if(typeof it != 'function')throw TypeError(it + ' is not a function!');
  return it;
};
},{}],4:[function(require,module,exports){
var cof = require('./_cof');
module.exports = function(it, msg){
  if(typeof it != 'number' && cof(it) != 'Number')throw TypeError(msg);
  return +it;
};
},{"./_cof":17}],5:[function(require,module,exports){
// 22.1.3.31 Array.prototype[@@unscopables]
var UNSCOPABLES = require('./_wks')('unscopables')
  , ArrayProto  = Array.prototype;
if(ArrayProto[UNSCOPABLES] == undefined)require('./_hide')(ArrayProto, UNSCOPABLES, {});
module.exports = function(key){
  ArrayProto[UNSCOPABLES][key] = true;
};
},{"./_hide":38,"./_wks":113}],6:[function(require,module,exports){
module.exports = function(it, Constructor, name, forbiddenField){
  if(!(it instanceof Constructor) || (forbiddenField !== undefined && forbiddenField in it)){
    throw TypeError(name + ': incorrect invocation!');
  } return it;
};
},{}],7:[function(require,module,exports){
var isObject = require('./_is-object');
module.exports = function(it){
  if(!isObject(it))throw TypeError(it + ' is not an object!');
  return it;
};
},{"./_is-object":47}],8:[function(require,module,exports){
// 22.1.3.3 Array.prototype.copyWithin(target, start, end = this.length)
'use strict';
var toObject = require('./_to-object')
  , toIndex  = require('./_to-index')
  , toLength = require('./_to-length');

module.exports = [].copyWithin || function copyWithin(target/*= 0*/, start/*= 0, end = @length*/){
  var O     = toObject(this)
    , len   = toLength(O.length)
    , to    = toIndex(target, len)
    , from  = toIndex(start, len)
    , end   = arguments.length > 2 ? arguments[2] : undefined
    , count = Math.min((end === undefined ? len : toIndex(end, len)) - from, len - to)
    , inc   = 1;
  if(from < to && to < from + count){
    inc  = -1;
    from += count - 1;
    to   += count - 1;
  }
  while(count-- > 0){
    if(from in O)O[to] = O[from];
    else delete O[to];
    to   += inc;
    from += inc;
  } return O;
};
},{"./_to-index":103,"./_to-length":106,"./_to-object":107}],9:[function(require,module,exports){
// 22.1.3.6 Array.prototype.fill(value, start = 0, end = this.length)
'use strict';
var toObject = require('./_to-object')
  , toIndex  = require('./_to-index')
  , toLength = require('./_to-length');
module.exports = function fill(value /*, start = 0, end = @length */){
  var O      = toObject(this)
    , length = toLength(O.length)
    , aLen   = arguments.length
    , index  = toIndex(aLen > 1 ? arguments[1] : undefined, length)
    , end    = aLen > 2 ? arguments[2] : undefined
    , endPos = end === undefined ? length : toIndex(end, length);
  while(endPos > index)O[index++] = value;
  return O;
};
},{"./_to-index":103,"./_to-length":106,"./_to-object":107}],10:[function(require,module,exports){
var forOf = require('./_for-of');

module.exports = function(iter, ITERATOR){
  var result = [];
  forOf(iter, false, result.push, result, ITERATOR);
  return result;
};

},{"./_for-of":35}],11:[function(require,module,exports){
// false -> Array#indexOf
// true  -> Array#includes
var toIObject = require('./_to-iobject')
  , toLength  = require('./_to-length')
  , toIndex   = require('./_to-index');
module.exports = function(IS_INCLUDES){
  return function($this, el, fromIndex){
    var O      = toIObject($this)
      , length = toLength(O.length)
      , index  = toIndex(fromIndex, length)
      , value;
    // Array#includes uses SameValueZero equality algorithm
    if(IS_INCLUDES && el != el)while(length > index){
      value = O[index++];
      if(value != value)return true;
    // Array#toIndex ignores holes, Array#includes - not
    } else for(;length > index; index++)if(IS_INCLUDES || index in O){
      if(O[index] === el)return IS_INCLUDES || index;
    } return !IS_INCLUDES && -1;
  };
};
},{"./_to-index":103,"./_to-iobject":105,"./_to-length":106}],12:[function(require,module,exports){
// 0 -> Array#forEach
// 1 -> Array#map
// 2 -> Array#filter
// 3 -> Array#some
// 4 -> Array#every
// 5 -> Array#find
// 6 -> Array#findIndex
var ctx      = require('./_ctx')
  , IObject  = require('./_iobject')
  , toObject = require('./_to-object')
  , toLength = require('./_to-length')
  , asc      = require('./_array-species-create');
module.exports = function(TYPE, $create){
  var IS_MAP        = TYPE == 1
    , IS_FILTER     = TYPE == 2
    , IS_SOME       = TYPE == 3
    , IS_EVERY      = TYPE == 4
    , IS_FIND_INDEX = TYPE == 6
    , NO_HOLES      = TYPE == 5 || IS_FIND_INDEX
    , create        = $create || asc;
  return function($this, callbackfn, that){
    var O      = toObject($this)
      , self   = IObject(O)
      , f      = ctx(callbackfn, that, 3)
      , length = toLength(self.length)
      , index  = 0
      , result = IS_MAP ? create($this, length) : IS_FILTER ? create($this, 0) : undefined
      , val, res;
    for(;length > index; index++)if(NO_HOLES || index in self){
      val = self[index];
      res = f(val, index, O);
      if(TYPE){
        if(IS_MAP)result[index] = res;            // map
        else if(res)switch(TYPE){
          case 3: return true;                    // some
          case 5: return val;                     // find
          case 6: return index;                   // findIndex
          case 2: result.push(val);               // filter
        } else if(IS_EVERY)return false;          // every
      }
    }
    return IS_FIND_INDEX ? -1 : IS_SOME || IS_EVERY ? IS_EVERY : result;
  };
};
},{"./_array-species-create":14,"./_ctx":23,"./_iobject":43,"./_to-length":106,"./_to-object":107}],13:[function(require,module,exports){
var aFunction = require('./_a-function')
  , toObject  = require('./_to-object')
  , IObject   = require('./_iobject')
  , toLength  = require('./_to-length');

module.exports = function(that, callbackfn, aLen, memo, isRight){
  aFunction(callbackfn);
  var O      = toObject(that)
    , self   = IObject(O)
    , length = toLength(O.length)
    , index  = isRight ? length - 1 : 0
    , i      = isRight ? -1 : 1;
  if(aLen < 2)for(;;){
    if(index in self){
      memo = self[index];
      index += i;
      break;
    }
    index += i;
    if(isRight ? index < 0 : length <= index){
      throw TypeError('Reduce of empty array with no initial value');
    }
  }
  for(;isRight ? index >= 0 : length > index; index += i)if(index in self){
    memo = callbackfn(memo, self[index], index, O);
  }
  return memo;
};
},{"./_a-function":3,"./_iobject":43,"./_to-length":106,"./_to-object":107}],14:[function(require,module,exports){
// 9.4.2.3 ArraySpeciesCreate(originalArray, length)
var isObject = require('./_is-object')
  , isArray  = require('./_is-array')
  , SPECIES  = require('./_wks')('species');
module.exports = function(original, length){
  var C;
  if(isArray(original)){
    C = original.constructor;
    // cross-realm fallback
    if(typeof C == 'function' && (C === Array || isArray(C.prototype)))C = undefined;
    if(isObject(C)){
      C = C[SPECIES];
      if(C === null)C = undefined;
    }
  } return new (C === undefined ? Array : C)(length);
};
},{"./_is-array":45,"./_is-object":47,"./_wks":113}],15:[function(require,module,exports){
'use strict';
var aFunction  = require('./_a-function')
  , isObject   = require('./_is-object')
  , invoke     = require('./_invoke')
  , arraySlice = [].slice
  , factories  = {};

var construct = function(F, len, args){
  if(!(len in factories)){
    for(var n = [], i = 0; i < len; i++)n[i] = 'a[' + i + ']';
    factories[len] = Function('F,a', 'return new F(' + n.join(',') + ')');
  } return factories[len](F, args);
};

module.exports = Function.bind || function bind(that /*, args... */){
  var fn       = aFunction(this)
    , partArgs = arraySlice.call(arguments, 1);
  var bound = function(/* args... */){
    var args = partArgs.concat(arraySlice.call(arguments));
    return this instanceof bound ? construct(fn, args.length, args) : invoke(fn, args, that);
  };
  if(isObject(fn.prototype))bound.prototype = fn.prototype;
  return bound;
};
},{"./_a-function":3,"./_invoke":42,"./_is-object":47}],16:[function(require,module,exports){
// getting tag from 19.1.3.6 Object.prototype.toString()
var cof = require('./_cof')
  , TAG = require('./_wks')('toStringTag')
  // ES3 wrong here
  , ARG = cof(function(){ return arguments; }()) == 'Arguments';

// fallback for IE11 Script Access Denied error
var tryGet = function(it, key){
  try {
    return it[key];
  } catch(e){ /* empty */ }
};

module.exports = function(it){
  var O, T, B;
  return it === undefined ? 'Undefined' : it === null ? 'Null'
    // @@toStringTag case
    : typeof (T = tryGet(O = Object(it), TAG)) == 'string' ? T
    // builtinTag case
    : ARG ? cof(O)
    // ES3 arguments fallback
    : (B = cof(O)) == 'Object' && typeof O.callee == 'function' ? 'Arguments' : B;
};
},{"./_cof":17,"./_wks":113}],17:[function(require,module,exports){
var toString = {}.toString;

module.exports = function(it){
  return toString.call(it).slice(8, -1);
};
},{}],18:[function(require,module,exports){
'use strict';
var dP          = require('./_object-dp').f
  , create      = require('./_object-create')
  , hide        = require('./_hide')
  , redefineAll = require('./_redefine-all')
  , ctx         = require('./_ctx')
  , anInstance  = require('./_an-instance')
  , defined     = require('./_defined')
  , forOf       = require('./_for-of')
  , $iterDefine = require('./_iter-define')
  , step        = require('./_iter-step')
  , setSpecies  = require('./_set-species')
  , DESCRIPTORS = require('./_descriptors')
  , fastKey     = require('./_meta').fastKey
  , SIZE        = DESCRIPTORS ? '_s' : 'size';

var getEntry = function(that, key){
  // fast case
  var index = fastKey(key), entry;
  if(index !== 'F')return that._i[index];
  // frozen object case
  for(entry = that._f; entry; entry = entry.n){
    if(entry.k == key)return entry;
  }
};

module.exports = {
  getConstructor: function(wrapper, NAME, IS_MAP, ADDER){
    var C = wrapper(function(that, iterable){
      anInstance(that, C, NAME, '_i');
      that._i = create(null); // index
      that._f = undefined;    // first entry
      that._l = undefined;    // last entry
      that[SIZE] = 0;         // size
      if(iterable != undefined)forOf(iterable, IS_MAP, that[ADDER], that);
    });
    redefineAll(C.prototype, {
      // 23.1.3.1 Map.prototype.clear()
      // 23.2.3.2 Set.prototype.clear()
      clear: function clear(){
        for(var that = this, data = that._i, entry = that._f; entry; entry = entry.n){
          entry.r = true;
          if(entry.p)entry.p = entry.p.n = undefined;
          delete data[entry.i];
        }
        that._f = that._l = undefined;
        that[SIZE] = 0;
      },
      // 23.1.3.3 Map.prototype.delete(key)
      // 23.2.3.4 Set.prototype.delete(value)
      'delete': function(key){
        var that  = this
          , entry = getEntry(that, key);
        if(entry){
          var next = entry.n
            , prev = entry.p;
          delete that._i[entry.i];
          entry.r = true;
          if(prev)prev.n = next;
          if(next)next.p = prev;
          if(that._f == entry)that._f = next;
          if(that._l == entry)that._l = prev;
          that[SIZE]--;
        } return !!entry;
      },
      // 23.2.3.6 Set.prototype.forEach(callbackfn, thisArg = undefined)
      // 23.1.3.5 Map.prototype.forEach(callbackfn, thisArg = undefined)
      forEach: function forEach(callbackfn /*, that = undefined */){
        anInstance(this, C, 'forEach');
        var f = ctx(callbackfn, arguments.length > 1 ? arguments[1] : undefined, 3)
          , entry;
        while(entry = entry ? entry.n : this._f){
          f(entry.v, entry.k, this);
          // revert to the last existing entry
          while(entry && entry.r)entry = entry.p;
        }
      },
      // 23.1.3.7 Map.prototype.has(key)
      // 23.2.3.7 Set.prototype.has(value)
      has: function has(key){
        return !!getEntry(this, key);
      }
    });
    if(DESCRIPTORS)dP(C.prototype, 'size', {
      get: function(){
        return defined(this[SIZE]);
      }
    });
    return C;
  },
  def: function(that, key, value){
    var entry = getEntry(that, key)
      , prev, index;
    // change existing entry
    if(entry){
      entry.v = value;
    // create new entry
    } else {
      that._l = entry = {
        i: index = fastKey(key, true), // <- index
        k: key,                        // <- key
        v: value,                      // <- value
        p: prev = that._l,             // <- previous entry
        n: undefined,                  // <- next entry
        r: false                       // <- removed
      };
      if(!that._f)that._f = entry;
      if(prev)prev.n = entry;
      that[SIZE]++;
      // add to index
      if(index !== 'F')that._i[index] = entry;
    } return that;
  },
  getEntry: getEntry,
  setStrong: function(C, NAME, IS_MAP){
    // add .keys, .values, .entries, [@@iterator]
    // 23.1.3.4, 23.1.3.8, 23.1.3.11, 23.1.3.12, 23.2.3.5, 23.2.3.8, 23.2.3.10, 23.2.3.11
    $iterDefine(C, NAME, function(iterated, kind){
      this._t = iterated;  // target
      this._k = kind;      // kind
      this._l = undefined; // previous
    }, function(){
      var that  = this
        , kind  = that._k
        , entry = that._l;
      // revert to the last existing entry
      while(entry && entry.r)entry = entry.p;
      // get next entry
      if(!that._t || !(that._l = entry = entry ? entry.n : that._t._f)){
        // or finish the iteration
        that._t = undefined;
        return step(1);
      }
      // return step by kind
      if(kind == 'keys'  )return step(0, entry.k);
      if(kind == 'values')return step(0, entry.v);
      return step(0, [entry.k, entry.v]);
    }, IS_MAP ? 'entries' : 'values' , !IS_MAP, true);

    // add [@@species], 23.1.2.2, 23.2.2.2
    setSpecies(NAME);
  }
};
},{"./_an-instance":6,"./_ctx":23,"./_defined":25,"./_descriptors":26,"./_for-of":35,"./_hide":38,"./_iter-define":51,"./_iter-step":53,"./_meta":60,"./_object-create":64,"./_object-dp":65,"./_redefine-all":84,"./_set-species":89}],19:[function(require,module,exports){
// https://github.com/DavidBruant/Map-Set.prototype.toJSON
var classof = require('./_classof')
  , from    = require('./_array-from-iterable');
module.exports = function(NAME){
  return function toJSON(){
    if(classof(this) != NAME)throw TypeError(NAME + "#toJSON isn't generic");
    return from(this);
  };
};
},{"./_array-from-iterable":10,"./_classof":16}],20:[function(require,module,exports){
'use strict';
var redefineAll       = require('./_redefine-all')
  , getWeak           = require('./_meta').getWeak
  , anObject          = require('./_an-object')
  , isObject          = require('./_is-object')
  , anInstance        = require('./_an-instance')
  , forOf             = require('./_for-of')
  , createArrayMethod = require('./_array-methods')
  , $has              = require('./_has')
  , arrayFind         = createArrayMethod(5)
  , arrayFindIndex    = createArrayMethod(6)
  , id                = 0;

// fallback for uncaught frozen keys
var uncaughtFrozenStore = function(that){
  return that._l || (that._l = new UncaughtFrozenStore);
};
var UncaughtFrozenStore = function(){
  this.a = [];
};
var findUncaughtFrozen = function(store, key){
  return arrayFind(store.a, function(it){
    return it[0] === key;
  });
};
UncaughtFrozenStore.prototype = {
  get: function(key){
    var entry = findUncaughtFrozen(this, key);
    if(entry)return entry[1];
  },
  has: function(key){
    return !!findUncaughtFrozen(this, key);
  },
  set: function(key, value){
    var entry = findUncaughtFrozen(this, key);
    if(entry)entry[1] = value;
    else this.a.push([key, value]);
  },
  'delete': function(key){
    var index = arrayFindIndex(this.a, function(it){
      return it[0] === key;
    });
    if(~index)this.a.splice(index, 1);
    return !!~index;
  }
};

module.exports = {
  getConstructor: function(wrapper, NAME, IS_MAP, ADDER){
    var C = wrapper(function(that, iterable){
      anInstance(that, C, NAME, '_i');
      that._i = id++;      // collection id
      that._l = undefined; // leak store for uncaught frozen objects
      if(iterable != undefined)forOf(iterable, IS_MAP, that[ADDER], that);
    });
    redefineAll(C.prototype, {
      // 23.3.3.2 WeakMap.prototype.delete(key)
      // 23.4.3.3 WeakSet.prototype.delete(value)
      'delete': function(key){
        if(!isObject(key))return false;
        var data = getWeak(key);
        if(data === true)return uncaughtFrozenStore(this)['delete'](key);
        return data && $has(data, this._i) && delete data[this._i];
      },
      // 23.3.3.4 WeakMap.prototype.has(key)
      // 23.4.3.4 WeakSet.prototype.has(value)
      has: function has(key){
        if(!isObject(key))return false;
        var data = getWeak(key);
        if(data === true)return uncaughtFrozenStore(this).has(key);
        return data && $has(data, this._i);
      }
    });
    return C;
  },
  def: function(that, key, value){
    var data = getWeak(anObject(key), true);
    if(data === true)uncaughtFrozenStore(that).set(key, value);
    else data[that._i] = value;
    return that;
  },
  ufstore: uncaughtFrozenStore
};
},{"./_an-instance":6,"./_an-object":7,"./_array-methods":12,"./_for-of":35,"./_has":37,"./_is-object":47,"./_meta":60,"./_redefine-all":84}],21:[function(require,module,exports){
'use strict';
var global            = require('./_global')
  , $export           = require('./_export')
  , redefine          = require('./_redefine')
  , redefineAll       = require('./_redefine-all')
  , meta              = require('./_meta')
  , forOf             = require('./_for-of')
  , anInstance        = require('./_an-instance')
  , isObject          = require('./_is-object')
  , fails             = require('./_fails')
  , $iterDetect       = require('./_iter-detect')
  , setToStringTag    = require('./_set-to-string-tag')
  , inheritIfRequired = require('./_inherit-if-required');

module.exports = function(NAME, wrapper, methods, common, IS_MAP, IS_WEAK){
  var Base  = global[NAME]
    , C     = Base
    , ADDER = IS_MAP ? 'set' : 'add'
    , proto = C && C.prototype
    , O     = {};
  var fixMethod = function(KEY){
    var fn = proto[KEY];
    redefine(proto, KEY,
      KEY == 'delete' ? function(a){
        return IS_WEAK && !isObject(a) ? false : fn.call(this, a === 0 ? 0 : a);
      } : KEY == 'has' ? function has(a){
        return IS_WEAK && !isObject(a) ? false : fn.call(this, a === 0 ? 0 : a);
      } : KEY == 'get' ? function get(a){
        return IS_WEAK && !isObject(a) ? undefined : fn.call(this, a === 0 ? 0 : a);
      } : KEY == 'add' ? function add(a){ fn.call(this, a === 0 ? 0 : a); return this; }
        : function set(a, b){ fn.call(this, a === 0 ? 0 : a, b); return this; }
    );
  };
  if(typeof C != 'function' || !(IS_WEAK || proto.forEach && !fails(function(){
    new C().entries().next();
  }))){
    // create collection constructor
    C = common.getConstructor(wrapper, NAME, IS_MAP, ADDER);
    redefineAll(C.prototype, methods);
    meta.NEED = true;
  } else {
    var instance             = new C
      // early implementations not supports chaining
      , HASNT_CHAINING       = instance[ADDER](IS_WEAK ? {} : -0, 1) != instance
      // V8 ~  Chromium 40- weak-collections throws on primitives, but should return false
      , THROWS_ON_PRIMITIVES = fails(function(){ instance.has(1); })
      // most early implementations doesn't supports iterables, most modern - not close it correctly
      , ACCEPT_ITERABLES     = $iterDetect(function(iter){ new C(iter); }) // eslint-disable-line no-new
      // for early implementations -0 and +0 not the same
      , BUGGY_ZERO = !IS_WEAK && fails(function(){
        // V8 ~ Chromium 42- fails only with 5+ elements
        var $instance = new C()
          , index     = 5;
        while(index--)$instance[ADDER](index, index);
        return !$instance.has(-0);
      });
    if(!ACCEPT_ITERABLES){ 
      C = wrapper(function(target, iterable){
        anInstance(target, C, NAME);
        var that = inheritIfRequired(new Base, target, C);
        if(iterable != undefined)forOf(iterable, IS_MAP, that[ADDER], that);
        return that;
      });
      C.prototype = proto;
      proto.constructor = C;
    }
    if(THROWS_ON_PRIMITIVES || BUGGY_ZERO){
      fixMethod('delete');
      fixMethod('has');
      IS_MAP && fixMethod('get');
    }
    if(BUGGY_ZERO || HASNT_CHAINING)fixMethod(ADDER);
    // weak collections should not contains .clear method
    if(IS_WEAK && proto.clear)delete proto.clear;
  }

  setToStringTag(C, NAME);

  O[NAME] = C;
  $export($export.G + $export.W + $export.F * (C != Base), O);

  if(!IS_WEAK)common.setStrong(C, NAME, IS_MAP);

  return C;
};
},{"./_an-instance":6,"./_export":30,"./_fails":32,"./_for-of":35,"./_global":36,"./_inherit-if-required":41,"./_is-object":47,"./_iter-detect":52,"./_meta":60,"./_redefine":85,"./_redefine-all":84,"./_set-to-string-tag":90}],22:[function(require,module,exports){
var core = module.exports = {version: '2.2.1'};
if(typeof __e == 'number')__e = core; // eslint-disable-line no-undef
},{}],23:[function(require,module,exports){
// optional / simple context binding
var aFunction = require('./_a-function');
module.exports = function(fn, that, length){
  aFunction(fn);
  if(that === undefined)return fn;
  switch(length){
    case 1: return function(a){
      return fn.call(that, a);
    };
    case 2: return function(a, b){
      return fn.call(that, a, b);
    };
    case 3: return function(a, b, c){
      return fn.call(that, a, b, c);
    };
  }
  return function(/* ...args */){
    return fn.apply(that, arguments);
  };
};
},{"./_a-function":3}],24:[function(require,module,exports){
'use strict';
var anObject    = require('./_an-object')
  , toPrimitive = require('./_to-primitive')
  , NUMBER      = 'number';

module.exports = function(hint){
  if(hint !== 'string' && hint !== NUMBER && hint !== 'default')throw TypeError('Incorrect hint');
  return toPrimitive(anObject(this), hint != NUMBER);
};
},{"./_an-object":7,"./_to-primitive":108}],25:[function(require,module,exports){
// 7.2.1 RequireObjectCoercible(argument)
module.exports = function(it){
  if(it == undefined)throw TypeError("Can't call method on  " + it);
  return it;
};
},{}],26:[function(require,module,exports){
// Thank's IE8 for his funny defineProperty
module.exports = !require('./_fails')(function(){
  return Object.defineProperty({}, 'a', {get: function(){ return 7; }}).a != 7;
});
},{"./_fails":32}],27:[function(require,module,exports){
var isObject = require('./_is-object')
  , document = require('./_global').document
  // in old IE typeof document.createElement is 'object'
  , is = isObject(document) && isObject(document.createElement);
module.exports = function(it){
  return is ? document.createElement(it) : {};
};
},{"./_global":36,"./_is-object":47}],28:[function(require,module,exports){
// IE 8- don't enum bug keys
module.exports = (
  'constructor,hasOwnProperty,isPrototypeOf,propertyIsEnumerable,toLocaleString,toString,valueOf'
).split(',');
},{}],29:[function(require,module,exports){
// all enumerable object keys, includes symbols
var getKeys = require('./_object-keys')
  , gOPS    = require('./_object-gops')
  , pIE     = require('./_object-pie');
module.exports = function(it){
  var result     = getKeys(it)
    , getSymbols = gOPS.f;
  if(getSymbols){
    var symbols = getSymbols(it)
      , isEnum  = pIE.f
      , i       = 0
      , key;
    while(symbols.length > i)if(isEnum.call(it, key = symbols[i++]))result.push(key);
  } return result;
};
},{"./_object-gops":71,"./_object-keys":74,"./_object-pie":75}],30:[function(require,module,exports){
var global    = require('./_global')
  , core      = require('./_core')
  , hide      = require('./_hide')
  , redefine  = require('./_redefine')
  , ctx       = require('./_ctx')
  , PROTOTYPE = 'prototype';

var $export = function(type, name, source){
  var IS_FORCED = type & $export.F
    , IS_GLOBAL = type & $export.G
    , IS_STATIC = type & $export.S
    , IS_PROTO  = type & $export.P
    , IS_BIND   = type & $export.B
    , target    = IS_GLOBAL ? global : IS_STATIC ? global[name] || (global[name] = {}) : (global[name] || {})[PROTOTYPE]
    , exports   = IS_GLOBAL ? core : core[name] || (core[name] = {})
    , expProto  = exports[PROTOTYPE] || (exports[PROTOTYPE] = {})
    , key, own, out, exp;
  if(IS_GLOBAL)source = name;
  for(key in source){
    // contains in native
    own = !IS_FORCED && target && target[key] !== undefined;
    // export native or passed
    out = (own ? target : source)[key];
    // bind timers to global for call from export context
    exp = IS_BIND && own ? ctx(out, global) : IS_PROTO && typeof out == 'function' ? ctx(Function.call, out) : out;
    // extend global
    if(target)redefine(target, key, out, type & $export.U);
    // export
    if(exports[key] != out)hide(exports, key, exp);
    if(IS_PROTO && expProto[key] != out)expProto[key] = out;
  }
};
global.core = core;
// type bitmap
$export.F = 1;   // forced
$export.G = 2;   // global
$export.S = 4;   // static
$export.P = 8;   // proto
$export.B = 16;  // bind
$export.W = 32;  // wrap
$export.U = 64;  // safe
$export.R = 128; // real proto method for `library` 
module.exports = $export;
},{"./_core":22,"./_ctx":23,"./_global":36,"./_hide":38,"./_redefine":85}],31:[function(require,module,exports){
var MATCH = require('./_wks')('match');
module.exports = function(KEY){
  var re = /./;
  try {
    '/./'[KEY](re);
  } catch(e){
    try {
      re[MATCH] = false;
      return !'/./'[KEY](re);
    } catch(f){ /* empty */ }
  } return true;
};
},{"./_wks":113}],32:[function(require,module,exports){
module.exports = function(exec){
  try {
    return !!exec();
  } catch(e){
    return true;
  }
};
},{}],33:[function(require,module,exports){
'use strict';
var hide     = require('./_hide')
  , redefine = require('./_redefine')
  , fails    = require('./_fails')
  , defined  = require('./_defined')
  , wks      = require('./_wks');

module.exports = function(KEY, length, exec){
  var SYMBOL   = wks(KEY)
    , fns      = exec(defined, SYMBOL, ''[KEY])
    , strfn    = fns[0]
    , rxfn     = fns[1];
  if(fails(function(){
    var O = {};
    O[SYMBOL] = function(){ return 7; };
    return ''[KEY](O) != 7;
  })){
    redefine(String.prototype, KEY, strfn);
    hide(RegExp.prototype, SYMBOL, length == 2
      // 21.2.5.8 RegExp.prototype[@@replace](string, replaceValue)
      // 21.2.5.11 RegExp.prototype[@@split](string, limit)
      ? function(string, arg){ return rxfn.call(string, this, arg); }
      // 21.2.5.6 RegExp.prototype[@@match](string)
      // 21.2.5.9 RegExp.prototype[@@search](string)
      : function(string){ return rxfn.call(string, this); }
    );
  }
};
},{"./_defined":25,"./_fails":32,"./_hide":38,"./_redefine":85,"./_wks":113}],34:[function(require,module,exports){
'use strict';
// 21.2.5.3 get RegExp.prototype.flags
var anObject = require('./_an-object');
module.exports = function(){
  var that   = anObject(this)
    , result = '';
  if(that.global)     result += 'g';
  if(that.ignoreCase) result += 'i';
  if(that.multiline)  result += 'm';
  if(that.unicode)    result += 'u';
  if(that.sticky)     result += 'y';
  return result;
};
},{"./_an-object":7}],35:[function(require,module,exports){
var ctx         = require('./_ctx')
  , call        = require('./_iter-call')
  , isArrayIter = require('./_is-array-iter')
  , anObject    = require('./_an-object')
  , toLength    = require('./_to-length')
  , getIterFn   = require('./core.get-iterator-method');
module.exports = function(iterable, entries, fn, that, ITERATOR){
  var iterFn = ITERATOR ? function(){ return iterable; } : getIterFn(iterable)
    , f      = ctx(fn, that, entries ? 2 : 1)
    , index  = 0
    , length, step, iterator;
  if(typeof iterFn != 'function')throw TypeError(iterable + ' is not iterable!');
  // fast case for arrays with default iterator
  if(isArrayIter(iterFn))for(length = toLength(iterable.length); length > index; index++){
    entries ? f(anObject(step = iterable[index])[0], step[1]) : f(iterable[index]);
  } else for(iterator = iterFn.call(iterable); !(step = iterator.next()).done; ){
    call(iterator, f, step.value, entries);
  }
};
},{"./_an-object":7,"./_ctx":23,"./_is-array-iter":44,"./_iter-call":49,"./_to-length":106,"./core.get-iterator-method":114}],36:[function(require,module,exports){
// https://github.com/zloirock/core-js/issues/86#issuecomment-115759028
var global = module.exports = typeof window != 'undefined' && window.Math == Math
  ? window : typeof self != 'undefined' && self.Math == Math ? self : Function('return this')();
if(typeof __g == 'number')__g = global; // eslint-disable-line no-undef
},{}],37:[function(require,module,exports){
var hasOwnProperty = {}.hasOwnProperty;
module.exports = function(it, key){
  return hasOwnProperty.call(it, key);
};
},{}],38:[function(require,module,exports){
var dP         = require('./_object-dp')
  , createDesc = require('./_property-desc');
module.exports = require('./_descriptors') ? function(object, key, value){
  return dP.f(object, key, createDesc(1, value));
} : function(object, key, value){
  object[key] = value;
  return object;
};
},{"./_descriptors":26,"./_object-dp":65,"./_property-desc":83}],39:[function(require,module,exports){
module.exports = require('./_global').document && document.documentElement;
},{"./_global":36}],40:[function(require,module,exports){
module.exports = !require('./_descriptors') && !require('./_fails')(function(){
  return Object.defineProperty(require('./_dom-create')('div'), 'a', {get: function(){ return 7; }}).a != 7;
});
},{"./_descriptors":26,"./_dom-create":27,"./_fails":32}],41:[function(require,module,exports){
var isObject       = require('./_is-object')
  , setPrototypeOf = require('./_set-proto').set;
module.exports = function(that, target, C){
  var P, S = target.constructor;
  if(S !== C && typeof S == 'function' && (P = S.prototype) !== C.prototype && isObject(P) && setPrototypeOf){
    setPrototypeOf(that, P);
  } return that;
};
},{"./_is-object":47,"./_set-proto":88}],42:[function(require,module,exports){
// fast apply, http://jsperf.lnkit.com/fast-apply/5
module.exports = function(fn, args, that){
  var un = that === undefined;
  switch(args.length){
    case 0: return un ? fn()
                      : fn.call(that);
    case 1: return un ? fn(args[0])
                      : fn.call(that, args[0]);
    case 2: return un ? fn(args[0], args[1])
                      : fn.call(that, args[0], args[1]);
    case 3: return un ? fn(args[0], args[1], args[2])
                      : fn.call(that, args[0], args[1], args[2]);
    case 4: return un ? fn(args[0], args[1], args[2], args[3])
                      : fn.call(that, args[0], args[1], args[2], args[3]);
  } return              fn.apply(that, args);
};
},{}],43:[function(require,module,exports){
// fallback for non-array-like ES3 and non-enumerable old V8 strings
var cof = require('./_cof');
module.exports = Object('z').propertyIsEnumerable(0) ? Object : function(it){
  return cof(it) == 'String' ? it.split('') : Object(it);
};
},{"./_cof":17}],44:[function(require,module,exports){
// check on default Array iterator
var Iterators  = require('./_iterators')
  , ITERATOR   = require('./_wks')('iterator')
  , ArrayProto = Array.prototype;

module.exports = function(it){
  return it !== undefined && (Iterators.Array === it || ArrayProto[ITERATOR] === it);
};
},{"./_iterators":54,"./_wks":113}],45:[function(require,module,exports){
// 7.2.2 IsArray(argument)
var cof = require('./_cof');
module.exports = Array.isArray || function isArray(arg){
  return cof(arg) == 'Array';
};
},{"./_cof":17}],46:[function(require,module,exports){
// 20.1.2.3 Number.isInteger(number)
var isObject = require('./_is-object')
  , floor    = Math.floor;
module.exports = function isInteger(it){
  return !isObject(it) && isFinite(it) && floor(it) === it;
};
},{"./_is-object":47}],47:[function(require,module,exports){
module.exports = function(it){
  return typeof it === 'object' ? it !== null : typeof it === 'function';
};
},{}],48:[function(require,module,exports){
// 7.2.8 IsRegExp(argument)
var isObject = require('./_is-object')
  , cof      = require('./_cof')
  , MATCH    = require('./_wks')('match');
module.exports = function(it){
  var isRegExp;
  return isObject(it) && ((isRegExp = it[MATCH]) !== undefined ? !!isRegExp : cof(it) == 'RegExp');
};
},{"./_cof":17,"./_is-object":47,"./_wks":113}],49:[function(require,module,exports){
// call something on iterator step with safe closing on error
var anObject = require('./_an-object');
module.exports = function(iterator, fn, value, entries){
  try {
    return entries ? fn(anObject(value)[0], value[1]) : fn(value);
  // 7.4.6 IteratorClose(iterator, completion)
  } catch(e){
    var ret = iterator['return'];
    if(ret !== undefined)anObject(ret.call(iterator));
    throw e;
  }
};
},{"./_an-object":7}],50:[function(require,module,exports){
'use strict';
var create         = require('./_object-create')
  , descriptor     = require('./_property-desc')
  , setToStringTag = require('./_set-to-string-tag')
  , IteratorPrototype = {};

// 25.1.2.1.1 %IteratorPrototype%[@@iterator]()
require('./_hide')(IteratorPrototype, require('./_wks')('iterator'), function(){ return this; });

module.exports = function(Constructor, NAME, next){
  Constructor.prototype = create(IteratorPrototype, {next: descriptor(1, next)});
  setToStringTag(Constructor, NAME + ' Iterator');
};
},{"./_hide":38,"./_object-create":64,"./_property-desc":83,"./_set-to-string-tag":90,"./_wks":113}],51:[function(require,module,exports){
'use strict';
var LIBRARY        = require('./_library')
  , $export        = require('./_export')
  , redefine       = require('./_redefine')
  , hide           = require('./_hide')
  , has            = require('./_has')
  , Iterators      = require('./_iterators')
  , $iterCreate    = require('./_iter-create')
  , setToStringTag = require('./_set-to-string-tag')
  , getPrototypeOf = require('./_object-gpo')
  , ITERATOR       = require('./_wks')('iterator')
  , BUGGY          = !([].keys && 'next' in [].keys()) // Safari has buggy iterators w/o `next`
  , FF_ITERATOR    = '@@iterator'
  , KEYS           = 'keys'
  , VALUES         = 'values';

var returnThis = function(){ return this; };

module.exports = function(Base, NAME, Constructor, next, DEFAULT, IS_SET, FORCED){
  $iterCreate(Constructor, NAME, next);
  var getMethod = function(kind){
    if(!BUGGY && kind in proto)return proto[kind];
    switch(kind){
      case KEYS: return function keys(){ return new Constructor(this, kind); };
      case VALUES: return function values(){ return new Constructor(this, kind); };
    } return function entries(){ return new Constructor(this, kind); };
  };
  var TAG        = NAME + ' Iterator'
    , DEF_VALUES = DEFAULT == VALUES
    , VALUES_BUG = false
    , proto      = Base.prototype
    , $native    = proto[ITERATOR] || proto[FF_ITERATOR] || DEFAULT && proto[DEFAULT]
    , $default   = $native || getMethod(DEFAULT)
    , $entries   = DEFAULT ? !DEF_VALUES ? $default : getMethod('entries') : undefined
    , $anyNative = NAME == 'Array' ? proto.entries || $native : $native
    , methods, key, IteratorPrototype;
  // Fix native
  if($anyNative){
    IteratorPrototype = getPrototypeOf($anyNative.call(new Base));
    if(IteratorPrototype !== Object.prototype){
      // Set @@toStringTag to native iterators
      setToStringTag(IteratorPrototype, TAG, true);
      // fix for some old engines
      if(!LIBRARY && !has(IteratorPrototype, ITERATOR))hide(IteratorPrototype, ITERATOR, returnThis);
    }
  }
  // fix Array#{values, @@iterator}.name in V8 / FF
  if(DEF_VALUES && $native && $native.name !== VALUES){
    VALUES_BUG = true;
    $default = function values(){ return $native.call(this); };
  }
  // Define iterator
  if((!LIBRARY || FORCED) && (BUGGY || VALUES_BUG || !proto[ITERATOR])){
    hide(proto, ITERATOR, $default);
  }
  // Plug for library
  Iterators[NAME] = $default;
  Iterators[TAG]  = returnThis;
  if(DEFAULT){
    methods = {
      values:  DEF_VALUES ? $default : getMethod(VALUES),
      keys:    IS_SET     ? $default : getMethod(KEYS),
      entries: $entries
    };
    if(FORCED)for(key in methods){
      if(!(key in proto))redefine(proto, key, methods[key]);
    } else $export($export.P + $export.F * (BUGGY || VALUES_BUG), NAME, methods);
  }
  return methods;
};
},{"./_export":30,"./_has":37,"./_hide":38,"./_iter-create":50,"./_iterators":54,"./_library":56,"./_object-gpo":72,"./_redefine":85,"./_set-to-string-tag":90,"./_wks":113}],52:[function(require,module,exports){
var ITERATOR     = require('./_wks')('iterator')
  , SAFE_CLOSING = false;

try {
  var riter = [7][ITERATOR]();
  riter['return'] = function(){ SAFE_CLOSING = true; };
  Array.from(riter, function(){ throw 2; });
} catch(e){ /* empty */ }

module.exports = function(exec, skipClosing){
  if(!skipClosing && !SAFE_CLOSING)return false;
  var safe = false;
  try {
    var arr  = [7]
      , iter = arr[ITERATOR]();
    iter.next = function(){ safe = true; };
    arr[ITERATOR] = function(){ return iter; };
    exec(arr);
  } catch(e){ /* empty */ }
  return safe;
};
},{"./_wks":113}],53:[function(require,module,exports){
module.exports = function(done, value){
  return {value: value, done: !!done};
};
},{}],54:[function(require,module,exports){
module.exports = {};
},{}],55:[function(require,module,exports){
var getKeys   = require('./_object-keys')
  , toIObject = require('./_to-iobject');
module.exports = function(object, el){
  var O      = toIObject(object)
    , keys   = getKeys(O)
    , length = keys.length
    , index  = 0
    , key;
  while(length > index)if(O[key = keys[index++]] === el)return key;
};
},{"./_object-keys":74,"./_to-iobject":105}],56:[function(require,module,exports){
module.exports = false;
},{}],57:[function(require,module,exports){
// 20.2.2.14 Math.expm1(x)
module.exports = Math.expm1 || function expm1(x){
  return (x = +x) == 0 ? x : x > -1e-6 && x < 1e-6 ? x + x * x / 2 : Math.exp(x) - 1;
};
},{}],58:[function(require,module,exports){
// 20.2.2.20 Math.log1p(x)
module.exports = Math.log1p || function log1p(x){
  return (x = +x) > -1e-8 && x < 1e-8 ? x - x * x / 2 : Math.log(1 + x);
};
},{}],59:[function(require,module,exports){
// 20.2.2.28 Math.sign(x)
module.exports = Math.sign || function sign(x){
  return (x = +x) == 0 || x != x ? x : x < 0 ? -1 : 1;
};
},{}],60:[function(require,module,exports){
var META     = require('./_uid')('meta')
  , isObject = require('./_is-object')
  , has      = require('./_has')
  , setDesc  = require('./_object-dp').f
  , id       = 0;
var isExtensible = Object.isExtensible || function(){
  return true;
};
var FREEZE = !require('./_fails')(function(){
  return isExtensible(Object.preventExtensions({}));
});
var setMeta = function(it){
  setDesc(it, META, {value: {
    i: 'O' + ++id, // object ID
    w: {}          // weak collections IDs
  }});
};
var fastKey = function(it, create){
  // return primitive with prefix
  if(!isObject(it))return typeof it == 'symbol' ? it : (typeof it == 'string' ? 'S' : 'P') + it;
  if(!has(it, META)){
    // can't set metadata to uncaught frozen object
    if(!isExtensible(it))return 'F';
    // not necessary to add metadata
    if(!create)return 'E';
    // add missing metadata
    setMeta(it);
  // return object ID
  } return it[META].i;
};
var getWeak = function(it, create){
  if(!has(it, META)){
    // can't set metadata to uncaught frozen object
    if(!isExtensible(it))return true;
    // not necessary to add metadata
    if(!create)return false;
    // add missing metadata
    setMeta(it);
  // return hash weak collections IDs
  } return it[META].w;
};
// add metadata on freeze-family methods calling
var onFreeze = function(it){
  if(FREEZE && meta.NEED && isExtensible(it) && !has(it, META))setMeta(it);
  return it;
};
var meta = module.exports = {
  KEY:      META,
  NEED:     false,
  fastKey:  fastKey,
  getWeak:  getWeak,
  onFreeze: onFreeze
};
},{"./_fails":32,"./_has":37,"./_is-object":47,"./_object-dp":65,"./_uid":112}],61:[function(require,module,exports){
var Map     = require('./es6.map')
  , $export = require('./_export')
  , shared  = require('./_shared')('metadata')
  , store   = shared.store || (shared.store = new (require('./es6.weak-map')));

var getOrCreateMetadataMap = function(target, targetKey, create){
  var targetMetadata = store.get(target);
  if(!targetMetadata){
    if(!create)return undefined;
    store.set(target, targetMetadata = new Map);
  }
  var keyMetadata = targetMetadata.get(targetKey);
  if(!keyMetadata){
    if(!create)return undefined;
    targetMetadata.set(targetKey, keyMetadata = new Map);
  } return keyMetadata;
};
var ordinaryHasOwnMetadata = function(MetadataKey, O, P){
  var metadataMap = getOrCreateMetadataMap(O, P, false);
  return metadataMap === undefined ? false : metadataMap.has(MetadataKey);
};
var ordinaryGetOwnMetadata = function(MetadataKey, O, P){
  var metadataMap = getOrCreateMetadataMap(O, P, false);
  return metadataMap === undefined ? undefined : metadataMap.get(MetadataKey);
};
var ordinaryDefineOwnMetadata = function(MetadataKey, MetadataValue, O, P){
  getOrCreateMetadataMap(O, P, true).set(MetadataKey, MetadataValue);
};
var ordinaryOwnMetadataKeys = function(target, targetKey){
  var metadataMap = getOrCreateMetadataMap(target, targetKey, false)
    , keys        = [];
  if(metadataMap)metadataMap.forEach(function(_, key){ keys.push(key); });
  return keys;
};
var toMetaKey = function(it){
  return it === undefined || typeof it == 'symbol' ? it : String(it);
};
var exp = function(O){
  $export($export.S, 'Reflect', O);
};

module.exports = {
  store: store,
  map: getOrCreateMetadataMap,
  has: ordinaryHasOwnMetadata,
  get: ordinaryGetOwnMetadata,
  set: ordinaryDefineOwnMetadata,
  keys: ordinaryOwnMetadataKeys,
  key: toMetaKey,
  exp: exp
};
},{"./_export":30,"./_shared":92,"./es6.map":146,"./es6.weak-map":252}],62:[function(require,module,exports){
var global    = require('./_global')
  , macrotask = require('./_task').set
  , Observer  = global.MutationObserver || global.WebKitMutationObserver
  , process   = global.process
  , Promise   = global.Promise
  , isNode    = require('./_cof')(process) == 'process'
  , head, last, notify;

var flush = function(){
  var parent, fn;
  if(isNode && (parent = process.domain))parent.exit();
  while(head){
    fn = head.fn;
    fn(); // <- currently we use it only for Promise - try / catch not required
    head = head.next;
  } last = undefined;
  if(parent)parent.enter();
};

// Node.js
if(isNode){
  notify = function(){
    process.nextTick(flush);
  };
// browsers with MutationObserver
} else if(Observer){
  var toggle = true
    , node   = document.createTextNode('');
  new Observer(flush).observe(node, {characterData: true}); // eslint-disable-line no-new
  notify = function(){
    node.data = toggle = !toggle;
  };
// environments with maybe non-completely correct, but existent Promise
} else if(Promise && Promise.resolve){
  notify = function(){
    Promise.resolve().then(flush);
  };
// for other environments - macrotask based on:
// - setImmediate
// - MessageChannel
// - window.postMessag
// - onreadystatechange
// - setTimeout
} else {
  notify = function(){
    // strange IE + webpack dev server bug - use .call(global)
    macrotask.call(global, flush);
  };
}

module.exports = function(fn){
  var task = {fn: fn, next: undefined};
  if(last)last.next = task;
  if(!head){
    head = task;
    notify();
  } last = task;
};
},{"./_cof":17,"./_global":36,"./_task":102}],63:[function(require,module,exports){
'use strict';
// 19.1.2.1 Object.assign(target, source, ...)
var getKeys  = require('./_object-keys')
  , gOPS     = require('./_object-gops')
  , pIE      = require('./_object-pie')
  , toObject = require('./_to-object')
  , IObject  = require('./_iobject')
  , $assign  = Object.assign;

// should work with symbols and should have deterministic property order (V8 bug)
module.exports = !$assign || require('./_fails')(function(){
  var A = {}
    , B = {}
    , S = Symbol()
    , K = 'abcdefghijklmnopqrst';
  A[S] = 7;
  K.split('').forEach(function(k){ B[k] = k; });
  return $assign({}, A)[S] != 7 || Object.keys($assign({}, B)).join('') != K;
}) ? function assign(target, source){ // eslint-disable-line no-unused-vars
  var T     = toObject(target)
    , aLen  = arguments.length
    , index = 1
    , getSymbols = gOPS.f
    , isEnum     = pIE.f;
  while(aLen > index){
    var S      = IObject(arguments[index++])
      , keys   = getSymbols ? getKeys(S).concat(getSymbols(S)) : getKeys(S)
      , length = keys.length
      , j      = 0
      , key;
    while(length > j)if(isEnum.call(S, key = keys[j++]))T[key] = S[key];
  } return T;
} : $assign;
},{"./_fails":32,"./_iobject":43,"./_object-gops":71,"./_object-keys":74,"./_object-pie":75,"./_to-object":107}],64:[function(require,module,exports){
// 19.1.2.2 / 15.2.3.5 Object.create(O [, Properties])
var anObject    = require('./_an-object')
  , dPs         = require('./_object-dps')
  , enumBugKeys = require('./_enum-bug-keys')
  , IE_PROTO    = require('./_shared-key')('IE_PROTO')
  , Empty       = function(){ /* empty */ }
  , PROTOTYPE   = 'prototype';

// Create object with fake `null` prototype: use iframe Object with cleared prototype
var createDict = function(){
  // Thrash, waste and sodomy: IE GC bug
  var iframe = require('./_dom-create')('iframe')
    , i      = enumBugKeys.length
    , gt     = '>'
    , iframeDocument;
  iframe.style.display = 'none';
  require('./_html').appendChild(iframe);
  iframe.src = 'javascript:'; // eslint-disable-line no-script-url
  // createDict = iframe.contentWindow.Object;
  // html.removeChild(iframe);
  iframeDocument = iframe.contentWindow.document;
  iframeDocument.open();
  iframeDocument.write('<script>document.F=Object</script' + gt);
  iframeDocument.close();
  createDict = iframeDocument.F;
  while(i--)delete createDict[PROTOTYPE][enumBugKeys[i]];
  return createDict();
};

module.exports = Object.create || function create(O, Properties){
  var result;
  if(O !== null){
    Empty[PROTOTYPE] = anObject(O);
    result = new Empty;
    Empty[PROTOTYPE] = null;
    // add "__proto__" for Object.getPrototypeOf polyfill
    result[IE_PROTO] = O;
  } else result = createDict();
  return Properties === undefined ? result : dPs(result, Properties);
};
},{"./_an-object":7,"./_dom-create":27,"./_enum-bug-keys":28,"./_html":39,"./_object-dps":66,"./_shared-key":91}],65:[function(require,module,exports){
var anObject       = require('./_an-object')
  , IE8_DOM_DEFINE = require('./_ie8-dom-define')
  , toPrimitive    = require('./_to-primitive')
  , dP             = Object.defineProperty;

exports.f = require('./_descriptors') ? Object.defineProperty : function defineProperty(O, P, Attributes){
  anObject(O);
  P = toPrimitive(P, true);
  anObject(Attributes);
  if(IE8_DOM_DEFINE)try {
    return dP(O, P, Attributes);
  } catch(e){ /* empty */ }
  if('get' in Attributes || 'set' in Attributes)throw TypeError('Accessors not supported!');
  if('value' in Attributes)O[P] = Attributes.value;
  return O;
};
},{"./_an-object":7,"./_descriptors":26,"./_ie8-dom-define":40,"./_to-primitive":108}],66:[function(require,module,exports){
var dP       = require('./_object-dp')
  , anObject = require('./_an-object')
  , getKeys  = require('./_object-keys');

module.exports = require('./_descriptors') ? Object.defineProperties : function defineProperties(O, Properties){
  anObject(O);
  var keys   = getKeys(Properties)
    , length = keys.length
    , i = 0
    , P;
  while(length > i)dP.f(O, P = keys[i++], Properties[P]);
  return O;
};
},{"./_an-object":7,"./_descriptors":26,"./_object-dp":65,"./_object-keys":74}],67:[function(require,module,exports){
// Forced replacement prototype accessors methods
module.exports = require('./_library')|| !require('./_fails')(function(){
  var K = Math.random();
  // In FF throws only define methods
  __defineSetter__.call(null, K, function(){ /* empty */});
  delete require('./_global')[K];
});
},{"./_fails":32,"./_global":36,"./_library":56}],68:[function(require,module,exports){
var pIE            = require('./_object-pie')
  , createDesc     = require('./_property-desc')
  , toIObject      = require('./_to-iobject')
  , toPrimitive    = require('./_to-primitive')
  , has            = require('./_has')
  , IE8_DOM_DEFINE = require('./_ie8-dom-define')
  , gOPD           = Object.getOwnPropertyDescriptor;

exports.f = require('./_descriptors') ? gOPD : function getOwnPropertyDescriptor(O, P){
  O = toIObject(O);
  P = toPrimitive(P, true);
  if(IE8_DOM_DEFINE)try {
    return gOPD(O, P);
  } catch(e){ /* empty */ }
  if(has(O, P))return createDesc(!pIE.f.call(O, P), O[P]);
};
},{"./_descriptors":26,"./_has":37,"./_ie8-dom-define":40,"./_object-pie":75,"./_property-desc":83,"./_to-iobject":105,"./_to-primitive":108}],69:[function(require,module,exports){
// fallback for IE11 buggy Object.getOwnPropertyNames with iframe and window
var toIObject = require('./_to-iobject')
  , gOPN      = require('./_object-gopn').f
  , toString  = {}.toString;

var windowNames = typeof window == 'object' && window && Object.getOwnPropertyNames
  ? Object.getOwnPropertyNames(window) : [];

var getWindowNames = function(it){
  try {
    return gOPN(it);
  } catch(e){
    return windowNames.slice();
  }
};

module.exports.f = function getOwnPropertyNames(it){
  return windowNames && toString.call(it) == '[object Window]' ? getWindowNames(it) : gOPN(toIObject(it));
};

},{"./_object-gopn":70,"./_to-iobject":105}],70:[function(require,module,exports){
// 19.1.2.7 / 15.2.3.4 Object.getOwnPropertyNames(O)
var $keys      = require('./_object-keys-internal')
  , hiddenKeys = require('./_enum-bug-keys').concat('length', 'prototype');

exports.f = Object.getOwnPropertyNames || function getOwnPropertyNames(O){
  return $keys(O, hiddenKeys);
};
},{"./_enum-bug-keys":28,"./_object-keys-internal":73}],71:[function(require,module,exports){
exports.f = Object.getOwnPropertySymbols;
},{}],72:[function(require,module,exports){
// 19.1.2.9 / 15.2.3.2 Object.getPrototypeOf(O)
var has         = require('./_has')
  , toObject    = require('./_to-object')
  , IE_PROTO    = require('./_shared-key')('IE_PROTO')
  , ObjectProto = Object.prototype;

module.exports = Object.getPrototypeOf || function(O){
  O = toObject(O);
  if(has(O, IE_PROTO))return O[IE_PROTO];
  if(typeof O.constructor == 'function' && O instanceof O.constructor){
    return O.constructor.prototype;
  } return O instanceof Object ? ObjectProto : null;
};
},{"./_has":37,"./_shared-key":91,"./_to-object":107}],73:[function(require,module,exports){
var has          = require('./_has')
  , toIObject    = require('./_to-iobject')
  , arrayIndexOf = require('./_array-includes')(false)
  , IE_PROTO     = require('./_shared-key')('IE_PROTO');

module.exports = function(object, names){
  var O      = toIObject(object)
    , i      = 0
    , result = []
    , key;
  for(key in O)if(key != IE_PROTO)has(O, key) && result.push(key);
  // Don't enum bug & hidden keys
  while(names.length > i)if(has(O, key = names[i++])){
    ~arrayIndexOf(result, key) || result.push(key);
  }
  return result;
};
},{"./_array-includes":11,"./_has":37,"./_shared-key":91,"./_to-iobject":105}],74:[function(require,module,exports){
// 19.1.2.14 / 15.2.3.14 Object.keys(O)
var $keys       = require('./_object-keys-internal')
  , enumBugKeys = require('./_enum-bug-keys');

module.exports = Object.keys || function keys(O){
  return $keys(O, enumBugKeys);
};
},{"./_enum-bug-keys":28,"./_object-keys-internal":73}],75:[function(require,module,exports){
exports.f = {}.propertyIsEnumerable;
},{}],76:[function(require,module,exports){
// most Object methods by ES6 should accept primitives
var $export = require('./_export')
  , core    = require('./_core')
  , fails   = require('./_fails');
module.exports = function(KEY, exec){
  var fn  = (core.Object || {})[KEY] || Object[KEY]
    , exp = {};
  exp[KEY] = exec(fn);
  $export($export.S + $export.F * fails(function(){ fn(1); }), 'Object', exp);
};
},{"./_core":22,"./_export":30,"./_fails":32}],77:[function(require,module,exports){
var getKeys   = require('./_object-keys')
  , toIObject = require('./_to-iobject')
  , isEnum    = require('./_object-pie').f;
module.exports = function(isEntries){
  return function(it){
    var O      = toIObject(it)
      , keys   = getKeys(O)
      , length = keys.length
      , i      = 0
      , result = []
      , key;
    while(length > i)if(isEnum.call(O, key = keys[i++])){
      result.push(isEntries ? [key, O[key]] : O[key]);
    } return result;
  };
};
},{"./_object-keys":74,"./_object-pie":75,"./_to-iobject":105}],78:[function(require,module,exports){
// all object keys, includes non-enumerable and symbols
var gOPN     = require('./_object-gopn')
  , gOPS     = require('./_object-gops')
  , anObject = require('./_an-object')
  , Reflect  = require('./_global').Reflect;
module.exports = Reflect && Reflect.ownKeys || function ownKeys(it){
  var keys       = gOPN.f(anObject(it))
    , getSymbols = gOPS.f;
  return getSymbols ? keys.concat(getSymbols(it)) : keys;
};
},{"./_an-object":7,"./_global":36,"./_object-gopn":70,"./_object-gops":71}],79:[function(require,module,exports){
var $parseFloat = require('./_global').parseFloat
  , $trim       = require('./_string-trim').trim;

module.exports = 1 / $parseFloat(require('./_string-ws') + '-0') !== -Infinity ? function parseFloat(str){
  var string = $trim(String(str), 3)
    , result = $parseFloat(string);
  return result === 0 && string.charAt(0) == '-' ? -0 : result;
} : $parseFloat;
},{"./_global":36,"./_string-trim":100,"./_string-ws":101}],80:[function(require,module,exports){
var $parseInt = require('./_global').parseInt
  , $trim     = require('./_string-trim').trim
  , ws        = require('./_string-ws')
  , hex       = /^[\-+]?0[xX]/;

module.exports = $parseInt(ws + '08') !== 8 || $parseInt(ws + '0x16') !== 22 ? function parseInt(str, radix){
  var string = $trim(String(str), 3);
  return $parseInt(string, (radix >>> 0) || (hex.test(string) ? 16 : 10));
} : $parseInt;
},{"./_global":36,"./_string-trim":100,"./_string-ws":101}],81:[function(require,module,exports){
'use strict';
var path      = require('./_path')
  , invoke    = require('./_invoke')
  , aFunction = require('./_a-function');
module.exports = function(/* ...pargs */){
  var fn     = aFunction(this)
    , length = arguments.length
    , pargs  = Array(length)
    , i      = 0
    , _      = path._
    , holder = false;
  while(length > i)if((pargs[i] = arguments[i++]) === _)holder = true;
  return function(/* ...args */){
    var that = this
      , aLen = arguments.length
      , j = 0, k = 0, args;
    if(!holder && !aLen)return invoke(fn, pargs, that);
    args = pargs.slice();
    if(holder)for(;length > j; j++)if(args[j] === _)args[j] = arguments[k++];
    while(aLen > k)args.push(arguments[k++]);
    return invoke(fn, args, that);
  };
};
},{"./_a-function":3,"./_invoke":42,"./_path":82}],82:[function(require,module,exports){
module.exports = require('./_global');
},{"./_global":36}],83:[function(require,module,exports){
module.exports = function(bitmap, value){
  return {
    enumerable  : !(bitmap & 1),
    configurable: !(bitmap & 2),
    writable    : !(bitmap & 4),
    value       : value
  };
};
},{}],84:[function(require,module,exports){
var redefine = require('./_redefine');
module.exports = function(target, src, safe){
  for(var key in src)redefine(target, key, src[key], safe);
  return target;
};
},{"./_redefine":85}],85:[function(require,module,exports){
var global    = require('./_global')
  , hide      = require('./_hide')
  , has       = require('./_has')
  , SRC       = require('./_uid')('src')
  , TO_STRING = 'toString'
  , $toString = Function[TO_STRING]
  , TPL       = ('' + $toString).split(TO_STRING);

require('./_core').inspectSource = function(it){
  return $toString.call(it);
};

(module.exports = function(O, key, val, safe){
  var isFunction = typeof val == 'function';
  if(isFunction)has(val, 'name') || hide(val, 'name', key);
  if(O[key] === val)return;
  if(isFunction)has(val, SRC) || hide(val, SRC, O[key] ? '' + O[key] : TPL.join(String(key)));
  if(O === global){
    O[key] = val;
  } else {
    if(!safe){
      delete O[key];
      hide(O, key, val);
    } else {
      if(O[key])O[key] = val;
      else hide(O, key, val);
    }
  }
// add fake Function#toString for correct work wrapped methods / constructors with methods like LoDash isNative
})(Function.prototype, TO_STRING, function toString(){
  return typeof this == 'function' && this[SRC] || $toString.call(this);
});
},{"./_core":22,"./_global":36,"./_has":37,"./_hide":38,"./_uid":112}],86:[function(require,module,exports){
module.exports = function(regExp, replace){
  var replacer = replace === Object(replace) ? function(part){
    return replace[part];
  } : replace;
  return function(it){
    return String(it).replace(regExp, replacer);
  };
};
},{}],87:[function(require,module,exports){
// 7.2.9 SameValue(x, y)
module.exports = Object.is || function is(x, y){
  return x === y ? x !== 0 || 1 / x === 1 / y : x != x && y != y;
};
},{}],88:[function(require,module,exports){
// Works with __proto__ only. Old v8 can't work with null proto objects.
/* eslint-disable no-proto */
var isObject = require('./_is-object')
  , anObject = require('./_an-object');
var check = function(O, proto){
  anObject(O);
  if(!isObject(proto) && proto !== null)throw TypeError(proto + ": can't set as prototype!");
};
module.exports = {
  set: Object.setPrototypeOf || ('__proto__' in {} ? // eslint-disable-line
    function(test, buggy, set){
      try {
        set = require('./_ctx')(Function.call, require('./_object-gopd').f(Object.prototype, '__proto__').set, 2);
        set(test, []);
        buggy = !(test instanceof Array);
      } catch(e){ buggy = true; }
      return function setPrototypeOf(O, proto){
        check(O, proto);
        if(buggy)O.__proto__ = proto;
        else set(O, proto);
        return O;
      };
    }({}, false) : undefined),
  check: check
};
},{"./_an-object":7,"./_ctx":23,"./_is-object":47,"./_object-gopd":68}],89:[function(require,module,exports){
'use strict';
var global      = require('./_global')
  , dP          = require('./_object-dp')
  , DESCRIPTORS = require('./_descriptors')
  , SPECIES     = require('./_wks')('species');

module.exports = function(KEY){
  var C = global[KEY];
  if(DESCRIPTORS && C && !C[SPECIES])dP.f(C, SPECIES, {
    configurable: true,
    get: function(){ return this; }
  });
};
},{"./_descriptors":26,"./_global":36,"./_object-dp":65,"./_wks":113}],90:[function(require,module,exports){
var def = require('./_object-dp').f
  , has = require('./_has')
  , TAG = require('./_wks')('toStringTag');

module.exports = function(it, tag, stat){
  if(it && !has(it = stat ? it : it.prototype, TAG))def(it, TAG, {configurable: true, value: tag});
};
},{"./_has":37,"./_object-dp":65,"./_wks":113}],91:[function(require,module,exports){
var shared = require('./_shared')('keys')
  , uid    = require('./_uid');
module.exports = function(key){
  return shared[key] || (shared[key] = uid(key));
};
},{"./_shared":92,"./_uid":112}],92:[function(require,module,exports){
var global = require('./_global')
  , SHARED = '__core-js_shared__'
  , store  = global[SHARED] || (global[SHARED] = {});
module.exports = function(key){
  return store[key] || (store[key] = {});
};
},{"./_global":36}],93:[function(require,module,exports){
// 7.3.20 SpeciesConstructor(O, defaultConstructor)
var anObject  = require('./_an-object')
  , aFunction = require('./_a-function')
  , SPECIES   = require('./_wks')('species');
module.exports = function(O, D){
  var C = anObject(O).constructor, S;
  return C === undefined || (S = anObject(C)[SPECIES]) == undefined ? D : aFunction(S);
};
},{"./_a-function":3,"./_an-object":7,"./_wks":113}],94:[function(require,module,exports){
var fails = require('./_fails');

module.exports = function(method, arg){
  return !!method && fails(function(){
    arg ? method.call(null, function(){}, 1) : method.call(null);
  });
};
},{"./_fails":32}],95:[function(require,module,exports){
var toInteger = require('./_to-integer')
  , defined   = require('./_defined');
// true  -> String#at
// false -> String#codePointAt
module.exports = function(TO_STRING){
  return function(that, pos){
    var s = String(defined(that))
      , i = toInteger(pos)
      , l = s.length
      , a, b;
    if(i < 0 || i >= l)return TO_STRING ? '' : undefined;
    a = s.charCodeAt(i);
    return a < 0xd800 || a > 0xdbff || i + 1 === l || (b = s.charCodeAt(i + 1)) < 0xdc00 || b > 0xdfff
      ? TO_STRING ? s.charAt(i) : a
      : TO_STRING ? s.slice(i, i + 2) : (a - 0xd800 << 10) + (b - 0xdc00) + 0x10000;
  };
};
},{"./_defined":25,"./_to-integer":104}],96:[function(require,module,exports){
// helper for String#{startsWith, endsWith, includes}
var isRegExp = require('./_is-regexp')
  , defined  = require('./_defined');

module.exports = function(that, searchString, NAME){
  if(isRegExp(searchString))throw TypeError('String#' + NAME + " doesn't accept regex!");
  return String(defined(that));
};
},{"./_defined":25,"./_is-regexp":48}],97:[function(require,module,exports){
var $export = require('./_export')
  , fails   = require('./_fails')
  , defined = require('./_defined')
  , quot    = /"/g;
// B.2.3.2.1 CreateHTML(string, tag, attribute, value)
var createHTML = function(string, tag, attribute, value) {
  var S  = String(defined(string))
    , p1 = '<' + tag;
  if(attribute !== '')p1 += ' ' + attribute + '="' + String(value).replace(quot, '&quot;') + '"';
  return p1 + '>' + S + '</' + tag + '>';
};
module.exports = function(NAME, exec){
  var O = {};
  O[NAME] = exec(createHTML);
  $export($export.P + $export.F * fails(function(){
    var test = ''[NAME]('"');
    return test !== test.toLowerCase() || test.split('"').length > 3;
  }), 'String', O);
};
},{"./_defined":25,"./_export":30,"./_fails":32}],98:[function(require,module,exports){
// https://github.com/tc39/proposal-string-pad-start-end
var toLength = require('./_to-length')
  , repeat   = require('./_string-repeat')
  , defined  = require('./_defined');

module.exports = function(that, maxLength, fillString, left){
  var S            = String(defined(that))
    , stringLength = S.length
    , fillStr      = fillString === undefined ? ' ' : String(fillString)
    , intMaxLength = toLength(maxLength);
  if(intMaxLength <= stringLength)return S;
  if(fillStr == '')fillStr = ' ';
  var fillLen = intMaxLength - stringLength
    , stringFiller = repeat.call(fillStr, Math.ceil(fillLen / fillStr.length));
  if(stringFiller.length > fillLen)stringFiller = stringFiller.slice(0, fillLen);
  return left ? stringFiller + S : S + stringFiller;
};

},{"./_defined":25,"./_string-repeat":99,"./_to-length":106}],99:[function(require,module,exports){
'use strict';
var toInteger = require('./_to-integer')
  , defined   = require('./_defined');

module.exports = function repeat(count){
  var str = String(defined(this))
    , res = ''
    , n   = toInteger(count);
  if(n < 0 || n == Infinity)throw RangeError("Count can't be negative");
  for(;n > 0; (n >>>= 1) && (str += str))if(n & 1)res += str;
  return res;
};
},{"./_defined":25,"./_to-integer":104}],100:[function(require,module,exports){
var $export = require('./_export')
  , defined = require('./_defined')
  , fails   = require('./_fails')
  , spaces  = require('./_string-ws')
  , space   = '[' + spaces + ']'
  , non     = '\u200b\u0085'
  , ltrim   = RegExp('^' + space + space + '*')
  , rtrim   = RegExp(space + space + '*$');

var exporter = function(KEY, exec, ALIAS){
  var exp   = {};
  var FORCE = fails(function(){
    return !!spaces[KEY]() || non[KEY]() != non;
  });
  var fn = exp[KEY] = FORCE ? exec(trim) : spaces[KEY];
  if(ALIAS)exp[ALIAS] = fn;
  $export($export.P + $export.F * FORCE, 'String', exp);
};

// 1 -> String#trimLeft
// 2 -> String#trimRight
// 3 -> String#trim
var trim = exporter.trim = function(string, TYPE){
  string = String(defined(string));
  if(TYPE & 1)string = string.replace(ltrim, '');
  if(TYPE & 2)string = string.replace(rtrim, '');
  return string;
};

module.exports = exporter;
},{"./_defined":25,"./_export":30,"./_fails":32,"./_string-ws":101}],101:[function(require,module,exports){
module.exports = '\x09\x0A\x0B\x0C\x0D\x20\xA0\u1680\u180E\u2000\u2001\u2002\u2003' +
  '\u2004\u2005\u2006\u2007\u2008\u2009\u200A\u202F\u205F\u3000\u2028\u2029\uFEFF';
},{}],102:[function(require,module,exports){
var ctx                = require('./_ctx')
  , invoke             = require('./_invoke')
  , html               = require('./_html')
  , cel                = require('./_dom-create')
  , global             = require('./_global')
  , process            = global.process
  , setTask            = global.setImmediate
  , clearTask          = global.clearImmediate
  , MessageChannel     = global.MessageChannel
  , counter            = 0
  , queue              = {}
  , ONREADYSTATECHANGE = 'onreadystatechange'
  , defer, channel, port;
var run = function(){
  var id = +this;
  if(queue.hasOwnProperty(id)){
    var fn = queue[id];
    delete queue[id];
    fn();
  }
};
var listener = function(event){
  run.call(event.data);
};
// Node.js 0.9+ & IE10+ has setImmediate, otherwise:
if(!setTask || !clearTask){
  setTask = function setImmediate(fn){
    var args = [], i = 1;
    while(arguments.length > i)args.push(arguments[i++]);
    queue[++counter] = function(){
      invoke(typeof fn == 'function' ? fn : Function(fn), args);
    };
    defer(counter);
    return counter;
  };
  clearTask = function clearImmediate(id){
    delete queue[id];
  };
  // Node.js 0.8-
  if(require('./_cof')(process) == 'process'){
    defer = function(id){
      process.nextTick(ctx(run, id, 1));
    };
  // Browsers with MessageChannel, includes WebWorkers
  } else if(MessageChannel){
    channel = new MessageChannel;
    port    = channel.port2;
    channel.port1.onmessage = listener;
    defer = ctx(port.postMessage, port, 1);
  // Browsers with postMessage, skip WebWorkers
  // IE8 has postMessage, but it's sync & typeof its postMessage is 'object'
  } else if(global.addEventListener && typeof postMessage == 'function' && !global.importScripts){
    defer = function(id){
      global.postMessage(id + '', '*');
    };
    global.addEventListener('message', listener, false);
  // IE8-
  } else if(ONREADYSTATECHANGE in cel('script')){
    defer = function(id){
      html.appendChild(cel('script'))[ONREADYSTATECHANGE] = function(){
        html.removeChild(this);
        run.call(id);
      };
    };
  // Rest old browsers
  } else {
    defer = function(id){
      setTimeout(ctx(run, id, 1), 0);
    };
  }
}
module.exports = {
  set:   setTask,
  clear: clearTask
};
},{"./_cof":17,"./_ctx":23,"./_dom-create":27,"./_global":36,"./_html":39,"./_invoke":42}],103:[function(require,module,exports){
var toInteger = require('./_to-integer')
  , max       = Math.max
  , min       = Math.min;
module.exports = function(index, length){
  index = toInteger(index);
  return index < 0 ? max(index + length, 0) : min(index, length);
};
},{"./_to-integer":104}],104:[function(require,module,exports){
// 7.1.4 ToInteger
var ceil  = Math.ceil
  , floor = Math.floor;
module.exports = function(it){
  return isNaN(it = +it) ? 0 : (it > 0 ? floor : ceil)(it);
};
},{}],105:[function(require,module,exports){
// to indexed object, toObject with fallback for non-array-like ES3 strings
var IObject = require('./_iobject')
  , defined = require('./_defined');
module.exports = function(it){
  return IObject(defined(it));
};
},{"./_defined":25,"./_iobject":43}],106:[function(require,module,exports){
// 7.1.15 ToLength
var toInteger = require('./_to-integer')
  , min       = Math.min;
module.exports = function(it){
  return it > 0 ? min(toInteger(it), 0x1fffffffffffff) : 0; // pow(2, 53) - 1 == 9007199254740991
};
},{"./_to-integer":104}],107:[function(require,module,exports){
// 7.1.13 ToObject(argument)
var defined = require('./_defined');
module.exports = function(it){
  return Object(defined(it));
};
},{"./_defined":25}],108:[function(require,module,exports){
// 7.1.1 ToPrimitive(input [, PreferredType])
var isObject = require('./_is-object');
// instead of the ES6 spec version, we didn't implement @@toPrimitive case
// and the second argument - flag - preferred type is a string
module.exports = function(it, S){
  if(!isObject(it))return it;
  var fn, val;
  if(S && typeof (fn = it.toString) == 'function' && !isObject(val = fn.call(it)))return val;
  if(typeof (fn = it.valueOf) == 'function' && !isObject(val = fn.call(it)))return val;
  if(!S && typeof (fn = it.toString) == 'function' && !isObject(val = fn.call(it)))return val;
  throw TypeError("Can't convert object to primitive value");
};
},{"./_is-object":47}],109:[function(require,module,exports){
'use strict';
if(require('./_descriptors')){
  var LIBRARY             = require('./_library')
    , global              = require('./_global')
    , fails               = require('./_fails')
    , $export             = require('./_export')
    , $typed              = require('./_typed')
    , $buffer             = require('./_typed-buffer')
    , ctx                 = require('./_ctx')
    , anInstance          = require('./_an-instance')
    , propertyDesc        = require('./_property-desc')
    , hide                = require('./_hide')
    , redefineAll         = require('./_redefine-all')
    , isInteger           = require('./_is-integer')
    , toInteger           = require('./_to-integer')
    , toLength            = require('./_to-length')
    , toIndex             = require('./_to-index')
    , toPrimitive         = require('./_to-primitive')
    , has                 = require('./_has')
    , same                = require('./_same-value')
    , classof             = require('./_classof')
    , isObject            = require('./_is-object')
    , toObject            = require('./_to-object')
    , isArrayIter         = require('./_is-array-iter')
    , create              = require('./_object-create')
    , getPrototypeOf      = require('./_object-gpo')
    , gOPN                = require('./_object-gopn').f
    , isIterable          = require('./core.is-iterable')
    , getIterFn           = require('./core.get-iterator-method')
    , uid                 = require('./_uid')
    , wks                 = require('./_wks')
    , createArrayMethod   = require('./_array-methods')
    , createArrayIncludes = require('./_array-includes')
    , speciesConstructor  = require('./_species-constructor')
    , ArrayIterators      = require('./es6.array.iterator')
    , Iterators           = require('./_iterators')
    , $iterDetect         = require('./_iter-detect')
    , setSpecies          = require('./_set-species')
    , arrayFill           = require('./_array-fill')
    , arrayCopyWithin     = require('./_array-copy-within')
    , $DP                 = require('./_object-dp')
    , $GOPD               = require('./_object-gopd')
    , dP                  = $DP.f
    , gOPD                = $GOPD.f
    , RangeError          = global.RangeError
    , TypeError           = global.TypeError
    , Uint8Array          = global.Uint8Array
    , ARRAY_BUFFER        = 'ArrayBuffer'
    , SHARED_BUFFER       = 'Shared' + ARRAY_BUFFER
    , BYTES_PER_ELEMENT   = 'BYTES_PER_ELEMENT'
    , PROTOTYPE           = 'prototype'
    , ArrayProto          = Array[PROTOTYPE]
    , $ArrayBuffer        = $buffer.ArrayBuffer
    , $DataView           = $buffer.DataView
    , arrayForEach        = createArrayMethod(0)
    , arrayFilter         = createArrayMethod(2)
    , arraySome           = createArrayMethod(3)
    , arrayEvery          = createArrayMethod(4)
    , arrayFind           = createArrayMethod(5)
    , arrayFindIndex      = createArrayMethod(6)
    , arrayIncludes       = createArrayIncludes(true)
    , arrayIndexOf        = createArrayIncludes(false)
    , arrayValues         = ArrayIterators.values
    , arrayKeys           = ArrayIterators.keys
    , arrayEntries        = ArrayIterators.entries
    , arrayLastIndexOf    = ArrayProto.lastIndexOf
    , arrayReduce         = ArrayProto.reduce
    , arrayReduceRight    = ArrayProto.reduceRight
    , arrayJoin           = ArrayProto.join
    , arraySort           = ArrayProto.sort
    , arraySlice          = ArrayProto.slice
    , arrayToString       = ArrayProto.toString
    , arrayToLocaleString = ArrayProto.toLocaleString
    , ITERATOR            = wks('iterator')
    , TAG                 = wks('toStringTag')
    , TYPED_CONSTRUCTOR   = uid('typed_constructor')
    , DEF_CONSTRUCTOR     = uid('def_constructor')
    , ALL_CONSTRUCTORS    = $typed.CONSTR
    , TYPED_ARRAY         = $typed.TYPED
    , VIEW                = $typed.VIEW
    , WRONG_LENGTH        = 'Wrong length!';

  var $map = createArrayMethod(1, function(O, length){
    return allocate(speciesConstructor(O, O[DEF_CONSTRUCTOR]), length);
  });

  var LITTLE_ENDIAN = fails(function(){
    return new Uint8Array(new Uint16Array([1]).buffer)[0] === 1;
  });

  var FORCED_SET = !!Uint8Array && !!Uint8Array[PROTOTYPE].set && fails(function(){
    new Uint8Array(1).set({});
  });

  var strictToLength = function(it, SAME){
    if(it === undefined)throw TypeError(WRONG_LENGTH);
    var number = +it
      , length = toLength(it);
    if(SAME && !same(number, length))throw RangeError(WRONG_LENGTH);
    return length;
  };

  var toOffset = function(it, BYTES){
    var offset = toInteger(it);
    if(offset < 0 || offset % BYTES)throw RangeError('Wrong offset!');
    return offset;
  };

  var validate = function(it){
    if(isObject(it) && TYPED_ARRAY in it)return it;
    throw TypeError(it + ' is not a typed array!');
  };

  var allocate = function(C, length){
    if(!(isObject(C) && TYPED_CONSTRUCTOR in C)){
      throw TypeError('It is not a typed array constructor!');
    } return new C(length);
  };

  var speciesFromList = function(O, list){
    return fromList(speciesConstructor(O, O[DEF_CONSTRUCTOR]), list);
  };

  var fromList = function(C, list){
    var index  = 0
      , length = list.length
      , result = allocate(C, length);
    while(length > index)result[index] = list[index++];
    return result;
  };

  var addGetter = function(it, key, internal){
    dP(it, key, {get: function(){ return this._d[internal]; }});
  };

  var $from = function from(source /*, mapfn, thisArg */){
    var O       = toObject(source)
      , aLen    = arguments.length
      , mapfn   = aLen > 1 ? arguments[1] : undefined
      , mapping = mapfn !== undefined
      , iterFn  = getIterFn(O)
      , i, length, values, result, step, iterator;
    if(iterFn != undefined && !isArrayIter(iterFn)){
      for(iterator = iterFn.call(O), values = [], i = 0; !(step = iterator.next()).done; i++){
        values.push(step.value);
      } O = values;
    }
    if(mapping && aLen > 2)mapfn = ctx(mapfn, arguments[2], 2);
    for(i = 0, length = toLength(O.length), result = allocate(this, length); length > i; i++){
      result[i] = mapping ? mapfn(O[i], i) : O[i];
    }
    return result;
  };

  var $of = function of(/*...items*/){
    var index  = 0
      , length = arguments.length
      , result = allocate(this, length);
    while(length > index)result[index] = arguments[index++];
    return result;
  };

  // iOS Safari 6.x fails here
  var TO_LOCALE_BUG = !!Uint8Array && fails(function(){ arrayToLocaleString.call(new Uint8Array(1)); });

  var $toLocaleString = function toLocaleString(){
    return arrayToLocaleString.apply(TO_LOCALE_BUG ? arraySlice.call(validate(this)) : validate(this), arguments);
  };

  var proto = {
    copyWithin: function copyWithin(target, start /*, end */){
      return arrayCopyWithin.call(validate(this), target, start, arguments.length > 2 ? arguments[2] : undefined);
    },
    every: function every(callbackfn /*, thisArg */){
      return arrayEvery(validate(this), callbackfn, arguments.length > 1 ? arguments[1] : undefined);
    },
    fill: function fill(value /*, start, end */){ // eslint-disable-line no-unused-vars
      return arrayFill.apply(validate(this), arguments);
    },
    filter: function filter(callbackfn /*, thisArg */){
      return speciesFromList(this, arrayFilter(validate(this), callbackfn,
        arguments.length > 1 ? arguments[1] : undefined));
    },
    find: function find(predicate /*, thisArg */){
      return arrayFind(validate(this), predicate, arguments.length > 1 ? arguments[1] : undefined);
    },
    findIndex: function findIndex(predicate /*, thisArg */){
      return arrayFindIndex(validate(this), predicate, arguments.length > 1 ? arguments[1] : undefined);
    },
    forEach: function forEach(callbackfn /*, thisArg */){
      arrayForEach(validate(this), callbackfn, arguments.length > 1 ? arguments[1] : undefined);
    },
    indexOf: function indexOf(searchElement /*, fromIndex */){
      return arrayIndexOf(validate(this), searchElement, arguments.length > 1 ? arguments[1] : undefined);
    },
    includes: function includes(searchElement /*, fromIndex */){
      return arrayIncludes(validate(this), searchElement, arguments.length > 1 ? arguments[1] : undefined);
    },
    join: function join(separator){ // eslint-disable-line no-unused-vars
      return arrayJoin.apply(validate(this), arguments);
    },
    lastIndexOf: function lastIndexOf(searchElement /*, fromIndex */){ // eslint-disable-line no-unused-vars
      return arrayLastIndexOf.apply(validate(this), arguments);
    },
    map: function map(mapfn /*, thisArg */){
      return $map(validate(this), mapfn, arguments.length > 1 ? arguments[1] : undefined);
    },
    reduce: function reduce(callbackfn /*, initialValue */){ // eslint-disable-line no-unused-vars
      return arrayReduce.apply(validate(this), arguments);
    },
    reduceRight: function reduceRight(callbackfn /*, initialValue */){ // eslint-disable-line no-unused-vars
      return arrayReduceRight.apply(validate(this), arguments);
    },
    reverse: function reverse(){
      var that   = this
        , length = validate(that).length
        , middle = Math.floor(length / 2)
        , index  = 0
        , value;
      while(index < middle){
        value         = that[index];
        that[index++] = that[--length];
        that[length]  = value;
      } return that;
    },
    some: function some(callbackfn /*, thisArg */){
      return arraySome(validate(this), callbackfn, arguments.length > 1 ? arguments[1] : undefined);
    },
    sort: function sort(comparefn){
      return arraySort.call(validate(this), comparefn);
    },
    subarray: function subarray(begin, end){
      var O      = validate(this)
        , length = O.length
        , $begin = toIndex(begin, length);
      return new (speciesConstructor(O, O[DEF_CONSTRUCTOR]))(
        O.buffer,
        O.byteOffset + $begin * O.BYTES_PER_ELEMENT,
        toLength((end === undefined ? length : toIndex(end, length)) - $begin)
      );
    }
  };

  var $slice = function slice(start, end){
    return speciesFromList(this, arraySlice.call(validate(this), start, end));
  };

  var $set = function set(arrayLike /*, offset */){
    validate(this);
    var offset = toOffset(arguments[1], 1)
      , length = this.length
      , src    = toObject(arrayLike)
      , len    = toLength(src.length)
      , index  = 0;
    if(len + offset > length)throw RangeError(WRONG_LENGTH);
    while(index < len)this[offset + index] = src[index++];
  };

  var $iterators = {
    entries: function entries(){
      return arrayEntries.call(validate(this));
    },
    keys: function keys(){
      return arrayKeys.call(validate(this));
    },
    values: function values(){
      return arrayValues.call(validate(this));
    }
  };

  var isTAIndex = function(target, key){
    return isObject(target)
      && target[TYPED_ARRAY]
      && typeof key != 'symbol'
      && key in target
      && String(+key) == String(key);
  };
  var $getDesc = function getOwnPropertyDescriptor(target, key){
    return isTAIndex(target, key = toPrimitive(key, true))
      ? propertyDesc(2, target[key])
      : gOPD(target, key);
  };
  var $setDesc = function defineProperty(target, key, desc){
    if(isTAIndex(target, key = toPrimitive(key, true))
      && isObject(desc)
      && has(desc, 'value')
      && !has(desc, 'get')
      && !has(desc, 'set')
      // TODO: add validation descriptor w/o calling accessors
      && !desc.configurable
      && (!has(desc, 'writable') || desc.writable)
      && (!has(desc, 'enumerable') || desc.enumerable)
    ){
      target[key] = desc.value;
      return target;
    } else return dP(target, key, desc);
  };

  if(!ALL_CONSTRUCTORS){
    $GOPD.f = $getDesc;
    $DP.f   = $setDesc;
  }

  $export($export.S + $export.F * !ALL_CONSTRUCTORS, 'Object', {
    getOwnPropertyDescriptor: $getDesc,
    defineProperty:           $setDesc
  });

  if(fails(function(){ arrayToString.call({}); })){
    arrayToString = arrayToLocaleString = function toString(){
      return arrayJoin.call(this);
    }
  }

  var $TypedArrayPrototype$ = redefineAll({}, proto);
  redefineAll($TypedArrayPrototype$, $iterators);
  hide($TypedArrayPrototype$, ITERATOR, $iterators.values);
  redefineAll($TypedArrayPrototype$, {
    slice:          $slice,
    set:            $set,
    constructor:    function(){ /* noop */ },
    toString:       arrayToString,
    toLocaleString: $toLocaleString
  });
  addGetter($TypedArrayPrototype$, 'buffer', 'b');
  addGetter($TypedArrayPrototype$, 'byteOffset', 'o');
  addGetter($TypedArrayPrototype$, 'byteLength', 'l');
  addGetter($TypedArrayPrototype$, 'length', 'e');
  dP($TypedArrayPrototype$, TAG, {
    get: function(){ return this[TYPED_ARRAY]; }
  });

  module.exports = function(KEY, BYTES, wrapper, CLAMPED){
    CLAMPED = !!CLAMPED;
    var NAME       = KEY + (CLAMPED ? 'Clamped' : '') + 'Array'
      , ISNT_UINT8 = NAME != 'Uint8Array'
      , GETTER     = 'get' + KEY
      , SETTER     = 'set' + KEY
      , TypedArray = global[NAME]
      , Base       = TypedArray || {}
      , TAC        = TypedArray && getPrototypeOf(TypedArray)
      , FORCED     = !TypedArray || !$typed.ABV
      , O          = {}
      , TypedArrayPrototype = TypedArray && TypedArray[PROTOTYPE];
    var getter = function(that, index){
      var data = that._d;
      return data.v[GETTER](index * BYTES + data.o, LITTLE_ENDIAN);
    };
    var setter = function(that, index, value){
      var data = that._d;
      if(CLAMPED)value = (value = Math.round(value)) < 0 ? 0 : value > 0xff ? 0xff : value & 0xff;
      data.v[SETTER](index * BYTES + data.o, value, LITTLE_ENDIAN);
    };
    var addElement = function(that, index){
      dP(that, index, {
        get: function(){
          return getter(this, index);
        },
        set: function(value){
          return setter(this, index, value);
        },
        enumerable: true
      });
    };
    if(FORCED){
      TypedArray = wrapper(function(that, data, $offset, $length){
        anInstance(that, TypedArray, NAME, '_d');
        var index  = 0
          , offset = 0
          , buffer, byteLength, length, klass;
        if(!isObject(data)){
          length     = strictToLength(data, true)
          byteLength = length * BYTES;
          buffer     = new $ArrayBuffer(byteLength);
        } else if(data instanceof $ArrayBuffer || (klass = classof(data)) == ARRAY_BUFFER || klass == SHARED_BUFFER){
          buffer = data;
          offset = toOffset($offset, BYTES);
          var $len = data.byteLength;
          if($length === undefined){
            if($len % BYTES)throw RangeError(WRONG_LENGTH);
            byteLength = $len - offset;
            if(byteLength < 0)throw RangeError(WRONG_LENGTH);
          } else {
            byteLength = toLength($length) * BYTES;
            if(byteLength + offset > $len)throw RangeError(WRONG_LENGTH);
          }
          length = byteLength / BYTES;
        } else if(TYPED_ARRAY in data){
          return fromList(TypedArray, data);
        } else {
          return $from.call(TypedArray, data);
        }
        hide(that, '_d', {
          b: buffer,
          o: offset,
          l: byteLength,
          e: length,
          v: new $DataView(buffer)
        });
        while(index < length)addElement(that, index++);
      });
      TypedArrayPrototype = TypedArray[PROTOTYPE] = create($TypedArrayPrototype$);
      hide(TypedArrayPrototype, 'constructor', TypedArray);
    } else if(!$iterDetect(function(iter){
      // V8 works with iterators, but fails in many other cases
      // https://code.google.com/p/v8/issues/detail?id=4552
      new TypedArray(null); // eslint-disable-line no-new
      new TypedArray(iter); // eslint-disable-line no-new
    }, true)){
      TypedArray = wrapper(function(that, data, $offset, $length){
        anInstance(that, TypedArray, NAME);
        var klass;
        // `ws` module bug, temporarily remove validation length for Uint8Array
        // https://github.com/websockets/ws/pull/645
        if(!isObject(data))return new Base(strictToLength(data, ISNT_UINT8));
        if(data instanceof $ArrayBuffer || (klass = classof(data)) == ARRAY_BUFFER || klass == SHARED_BUFFER){
          return $length !== undefined
            ? new Base(data, toOffset($offset, BYTES), $length)
            : $offset !== undefined
              ? new Base(data, toOffset($offset, BYTES))
              : new Base(data);
        }
        if(TYPED_ARRAY in data)return fromList(TypedArray, data);
        return $from.call(TypedArray, data);
      });
      arrayForEach(TAC !== Function.prototype ? gOPN(Base).concat(gOPN(TAC)) : gOPN(Base), function(key){
        if(!(key in TypedArray))hide(TypedArray, key, Base[key]);
      });
      TypedArray[PROTOTYPE] = TypedArrayPrototype;
      if(!LIBRARY)TypedArrayPrototype.constructor = TypedArray;
    }
    var $nativeIterator   = TypedArrayPrototype[ITERATOR]
      , CORRECT_ITER_NAME = !!$nativeIterator && ($nativeIterator.name == 'values' || $nativeIterator.name == undefined)
      , $iterator         = $iterators.values;
    hide(TypedArray, TYPED_CONSTRUCTOR, true);
    hide(TypedArrayPrototype, TYPED_ARRAY, NAME);
    hide(TypedArrayPrototype, VIEW, true);
    hide(TypedArrayPrototype, DEF_CONSTRUCTOR, TypedArray);

    if(CLAMPED ? new TypedArray(1)[TAG] != NAME : !(TAG in TypedArrayPrototype)){
      dP(TypedArrayPrototype, TAG, {
        get: function(){ return NAME; }
      });
    }

    O[NAME] = TypedArray;

    $export($export.G + $export.W + $export.F * (TypedArray != Base), O);

    $export($export.S, NAME, {
      BYTES_PER_ELEMENT: BYTES,
      from: $from,
      of: $of
    });

    if(!(BYTES_PER_ELEMENT in TypedArrayPrototype))hide(TypedArrayPrototype, BYTES_PER_ELEMENT, BYTES);

    $export($export.P, NAME, proto);

    setSpecies(NAME);

    $export($export.P + $export.F * FORCED_SET, NAME, {set: $set});

    $export($export.P + $export.F * !CORRECT_ITER_NAME, NAME, $iterators);

    $export($export.P + $export.F * (TypedArrayPrototype.toString != arrayToString), NAME, {toString: arrayToString});

    $export($export.P + $export.F * fails(function(){
      new TypedArray(1).slice();
    }), NAME, {slice: $slice});

    $export($export.P + $export.F * (fails(function(){
      return [1, 2].toLocaleString() != new TypedArray([1, 2]).toLocaleString()
    }) || !fails(function(){
      TypedArrayPrototype.toLocaleString.call([1, 2]);
    })), NAME, {toLocaleString: $toLocaleString});

    Iterators[NAME] = CORRECT_ITER_NAME ? $nativeIterator : $iterator;
    if(!LIBRARY && !CORRECT_ITER_NAME)hide(TypedArrayPrototype, ITERATOR, $iterator);
  };
} else module.exports = function(){ /* empty */ };
},{"./_an-instance":6,"./_array-copy-within":8,"./_array-fill":9,"./_array-includes":11,"./_array-methods":12,"./_classof":16,"./_ctx":23,"./_descriptors":26,"./_export":30,"./_fails":32,"./_global":36,"./_has":37,"./_hide":38,"./_is-array-iter":44,"./_is-integer":46,"./_is-object":47,"./_iter-detect":52,"./_iterators":54,"./_library":56,"./_object-create":64,"./_object-dp":65,"./_object-gopd":68,"./_object-gopn":70,"./_object-gpo":72,"./_property-desc":83,"./_redefine-all":84,"./_same-value":87,"./_set-species":89,"./_species-constructor":93,"./_to-index":103,"./_to-integer":104,"./_to-length":106,"./_to-object":107,"./_to-primitive":108,"./_typed":111,"./_typed-buffer":110,"./_uid":112,"./_wks":113,"./core.get-iterator-method":114,"./core.is-iterable":115,"./es6.array.iterator":127}],110:[function(require,module,exports){
'use strict';
var global         = require('./_global')
  , DESCRIPTORS    = require('./_descriptors')
  , LIBRARY        = require('./_library')
  , $typed         = require('./_typed')
  , hide           = require('./_hide')
  , redefineAll    = require('./_redefine-all')
  , fails          = require('./_fails')
  , anInstance     = require('./_an-instance')
  , toInteger      = require('./_to-integer')
  , toLength       = require('./_to-length')
  , gOPN           = require('./_object-gopn').f
  , dP             = require('./_object-dp').f
  , arrayFill      = require('./_array-fill')
  , setToStringTag = require('./_set-to-string-tag')
  , ARRAY_BUFFER   = 'ArrayBuffer'
  , DATA_VIEW      = 'DataView'
  , PROTOTYPE      = 'prototype'
  , WRONG_LENGTH   = 'Wrong length!'
  , WRONG_INDEX    = 'Wrong index!'
  , $ArrayBuffer   = global[ARRAY_BUFFER]
  , $DataView      = global[DATA_VIEW]
  , Math           = global.Math
  , parseInt       = global.parseInt
  , RangeError     = global.RangeError
  , Infinity       = global.Infinity
  , BaseBuffer     = $ArrayBuffer
  , abs            = Math.abs
  , pow            = Math.pow
  , min            = Math.min
  , floor          = Math.floor
  , log            = Math.log
  , LN2            = Math.LN2
  , BUFFER         = 'buffer'
  , BYTE_LENGTH    = 'byteLength'
  , BYTE_OFFSET    = 'byteOffset'
  , $BUFFER        = DESCRIPTORS ? '_b' : BUFFER
  , $LENGTH        = DESCRIPTORS ? '_l' : BYTE_LENGTH
  , $OFFSET        = DESCRIPTORS ? '_o' : BYTE_OFFSET;

// IEEE754 conversions based on https://github.com/feross/ieee754
var packIEEE754 = function(value, mLen, nBytes){
  var buffer = Array(nBytes)
    , eLen   = nBytes * 8 - mLen - 1
    , eMax   = (1 << eLen) - 1
    , eBias  = eMax >> 1
    , rt     = mLen === 23 ? pow(2, -24) - pow(2, -77) : 0
    , i      = 0
    , s      = value < 0 || value === 0 && 1 / value < 0 ? 1 : 0
    , e, m, c;
  value = abs(value)
  if(value != value || value === Infinity){
    m = value != value ? 1 : 0;
    e = eMax;
  } else {
    e = floor(log(value) / LN2);
    if(value * (c = pow(2, -e)) < 1){
      e--;
      c *= 2;
    }
    if(e + eBias >= 1){
      value += rt / c;
    } else {
      value += rt * pow(2, 1 - eBias);
    }
    if(value * c >= 2){
      e++;
      c /= 2;
    }
    if(e + eBias >= eMax){
      m = 0;
      e = eMax;
    } else if(e + eBias >= 1){
      m = (value * c - 1) * pow(2, mLen);
      e = e + eBias;
    } else {
      m = value * pow(2, eBias - 1) * pow(2, mLen);
      e = 0;
    }
  }
  for(; mLen >= 8; buffer[i++] = m & 255, m /= 256, mLen -= 8);
  e = e << mLen | m;
  eLen += mLen;
  for(; eLen > 0; buffer[i++] = e & 255, e /= 256, eLen -= 8);
  buffer[--i] |= s * 128;
  return buffer;
};
var unpackIEEE754 = function(buffer, mLen, nBytes){
  var eLen  = nBytes * 8 - mLen - 1
    , eMax  = (1 << eLen) - 1
    , eBias = eMax >> 1
    , nBits = eLen - 7
    , i     = nBytes - 1
    , s     = buffer[i--]
    , e     = s & 127
    , m;
  s >>= 7;
  for(; nBits > 0; e = e * 256 + buffer[i], i--, nBits -= 8);
  m = e & (1 << -nBits) - 1;
  e >>= -nBits;
  nBits += mLen;
  for(; nBits > 0; m = m * 256 + buffer[i], i--, nBits -= 8);
  if(e === 0){
    e = 1 - eBias;
  } else if(e === eMax){
    return m ? NaN : s ? -Infinity : Infinity;
  } else {
    m = m + pow(2, mLen);
    e = e - eBias;
  } return (s ? -1 : 1) * m * pow(2, e - mLen);
};

var unpackI32 = function(bytes){
  return bytes[3] << 24 | bytes[2] << 16 | bytes[1] << 8 | bytes[0];
};
var packI8 = function(it){
  return [it & 0xff];
};
var packI16 = function(it){
  return [it & 0xff, it >> 8 & 0xff];
};
var packI32 = function(it){
  return [it & 0xff, it >> 8 & 0xff, it >> 16 & 0xff, it >> 24 & 0xff];
};
var packF64 = function(it){
  return packIEEE754(it, 52, 8);
};
var packF32 = function(it){
  return packIEEE754(it, 23, 4);
};

var addGetter = function(C, key, internal){
  dP(C[PROTOTYPE], key, {get: function(){ return this[internal]; }});
};

var get = function(view, bytes, index, isLittleEndian){
  var numIndex = +index
    , intIndex = toInteger(numIndex);
  if(numIndex != intIndex || intIndex < 0 || intIndex + bytes > view[$LENGTH])throw RangeError(WRONG_INDEX);
  var store = view[$BUFFER]._b
    , start = intIndex + view[$OFFSET]
    , pack  = store.slice(start, start + bytes);
  return isLittleEndian ? pack : pack.reverse();
};
var set = function(view, bytes, index, conversion, value, isLittleEndian){
  var numIndex = +index
    , intIndex = toInteger(numIndex);
  if(numIndex != intIndex || intIndex < 0 || intIndex + bytes > view[$LENGTH])throw RangeError(WRONG_INDEX);
  var store = view[$BUFFER]._b
    , start = intIndex + view[$OFFSET]
    , pack  = conversion(+value);
  for(var i = 0; i < bytes; i++)store[start + i] = pack[isLittleEndian ? i : bytes - i - 1];
};

var validateArrayBufferArguments = function(that, length){
  anInstance(that, $ArrayBuffer, ARRAY_BUFFER);
  var numberLength = +length
    , byteLength   = toLength(numberLength);
  if(numberLength != byteLength)throw RangeError(WRONG_LENGTH);
  return byteLength;
};

if(!$typed.ABV){
  $ArrayBuffer = function ArrayBuffer(length){
    var byteLength = validateArrayBufferArguments(this, length);
    this._b       = arrayFill.call(Array(byteLength), 0);
    this[$LENGTH] = byteLength;
  };

  $DataView = function DataView(buffer, byteOffset, byteLength){
    anInstance(this, $DataView, DATA_VIEW);
    anInstance(buffer, $ArrayBuffer, DATA_VIEW);
    var bufferLength = buffer[$LENGTH]
      , offset       = toInteger(byteOffset);
    if(offset < 0 || offset > bufferLength)throw RangeError('Wrong offset!');
    byteLength = byteLength === undefined ? bufferLength - offset : toLength(byteLength);
    if(offset + byteLength > bufferLength)throw RangeError(WRONG_LENGTH);
    this[$BUFFER] = buffer;
    this[$OFFSET] = offset;
    this[$LENGTH] = byteLength;
  };

  if(DESCRIPTORS){
    addGetter($ArrayBuffer, BYTE_LENGTH, '_l');
    addGetter($DataView, BUFFER, '_b');
    addGetter($DataView, BYTE_LENGTH, '_l');
    addGetter($DataView, BYTE_OFFSET, '_o');
  }

  redefineAll($DataView[PROTOTYPE], {
    getInt8: function getInt8(byteOffset){
      return get(this, 1, byteOffset)[0] << 24 >> 24;
    },
    getUint8: function getUint8(byteOffset){
      return get(this, 1, byteOffset)[0];
    },
    getInt16: function getInt16(byteOffset /*, littleEndian */){
      var bytes = get(this, 2, byteOffset, arguments[1]);
      return (bytes[1] << 8 | bytes[0]) << 16 >> 16;
    },
    getUint16: function getUint16(byteOffset /*, littleEndian */){
      var bytes = get(this, 2, byteOffset, arguments[1]);
      return bytes[1] << 8 | bytes[0];
    },
    getInt32: function getInt32(byteOffset /*, littleEndian */){
      return unpackI32(get(this, 4, byteOffset, arguments[1]));
    },
    getUint32: function getUint32(byteOffset /*, littleEndian */){
      return unpackI32(get(this, 4, byteOffset, arguments[1])) >>> 0;
    },
    getFloat32: function getFloat32(byteOffset /*, littleEndian */){
      return unpackIEEE754(get(this, 4, byteOffset, arguments[1]), 23, 4);
    },
    getFloat64: function getFloat64(byteOffset /*, littleEndian */){
      return unpackIEEE754(get(this, 8, byteOffset, arguments[1]), 52, 8);
    },
    setInt8: function setInt8(byteOffset, value){
      set(this, 1, byteOffset, packI8, value);
    },
    setUint8: function setUint8(byteOffset, value){
      set(this, 1, byteOffset, packI8, value);
    },
    setInt16: function setInt16(byteOffset, value /*, littleEndian */){
      set(this, 2, byteOffset, packI16, value, arguments[2]);
    },
    setUint16: function setUint16(byteOffset, value /*, littleEndian */){
      set(this, 2, byteOffset, packI16, value, arguments[2]);
    },
    setInt32: function setInt32(byteOffset, value /*, littleEndian */){
      set(this, 4, byteOffset, packI32, value, arguments[2]);
    },
    setUint32: function setUint32(byteOffset, value /*, littleEndian */){
      set(this, 4, byteOffset, packI32, value, arguments[2]);
    },
    setFloat32: function setFloat32(byteOffset, value /*, littleEndian */){
      set(this, 4, byteOffset, packF32, value, arguments[2]);
    },
    setFloat64: function setFloat64(byteOffset, value /*, littleEndian */){
      set(this, 8, byteOffset, packF64, value, arguments[2]);
    }
  });
} else {
  if(!fails(function(){
    new $ArrayBuffer;     // eslint-disable-line no-new
  }) || !fails(function(){
    new $ArrayBuffer(.5); // eslint-disable-line no-new
  })){
    $ArrayBuffer = function ArrayBuffer(length){
      return new BaseBuffer(validateArrayBufferArguments(this, length));
    };
    var ArrayBufferProto = $ArrayBuffer[PROTOTYPE] = BaseBuffer[PROTOTYPE];
    for(var keys = gOPN(BaseBuffer), j = 0, key; keys.length > j; ){
      if(!((key = keys[j++]) in $ArrayBuffer))hide($ArrayBuffer, key, BaseBuffer[key]);
    };
    if(!LIBRARY)ArrayBufferProto.constructor = $ArrayBuffer;
  }
  // iOS Safari 7.x bug
  var view = new $DataView(new $ArrayBuffer(2))
    , $setInt8 = $DataView[PROTOTYPE].setInt8;
  view.setInt8(0, 2147483648);
  view.setInt8(1, 2147483649);
  if(view.getInt8(0) || !view.getInt8(1))redefineAll($DataView[PROTOTYPE], {
    setInt8: function setInt8(byteOffset, value){
      $setInt8.call(this, byteOffset, value << 24 >> 24);
    },
    setUint8: function setUint8(byteOffset, value){
      $setInt8.call(this, byteOffset, value << 24 >> 24);
    }
  }, true);
}
setToStringTag($ArrayBuffer, ARRAY_BUFFER);
setToStringTag($DataView, DATA_VIEW);
hide($DataView[PROTOTYPE], $typed.VIEW, true);
exports[ARRAY_BUFFER] = $ArrayBuffer;
exports[DATA_VIEW] = $DataView;
},{"./_an-instance":6,"./_array-fill":9,"./_descriptors":26,"./_fails":32,"./_global":36,"./_hide":38,"./_library":56,"./_object-dp":65,"./_object-gopn":70,"./_redefine-all":84,"./_set-to-string-tag":90,"./_to-integer":104,"./_to-length":106,"./_typed":111}],111:[function(require,module,exports){
var global = require('./_global')
  , hide   = require('./_hide')
  , uid    = require('./_uid')
  , TYPED  = uid('typed_array')
  , VIEW   = uid('view')
  , ABV    = !!(global.ArrayBuffer && global.DataView)
  , CONSTR = ABV
  , i = 0, l = 9, Typed;

var TypedArrayConstructors = (
  'Int8Array,Uint8Array,Uint8ClampedArray,Int16Array,Uint16Array,Int32Array,Uint32Array,Float32Array,Float64Array'
).split(',');

while(i < l){
  if(Typed = global[TypedArrayConstructors[i++]]){
    hide(Typed.prototype, TYPED, true);
    hide(Typed.prototype, VIEW, true);
  } else CONSTR = false;
}

module.exports = {
  ABV:    ABV,
  CONSTR: CONSTR,
  TYPED:  TYPED,
  VIEW:   VIEW
};
},{"./_global":36,"./_hide":38,"./_uid":112}],112:[function(require,module,exports){
var id = 0
  , px = Math.random();
module.exports = function(key){
  return 'Symbol('.concat(key === undefined ? '' : key, ')_', (++id + px).toString(36));
};
},{}],113:[function(require,module,exports){
var store      = require('./_shared')('wks')
  , uid        = require('./_uid')
  , Symbol     = require('./_global').Symbol
  , USE_SYMBOL = typeof Symbol == 'function';
module.exports = function(name){
  return store[name] || (store[name] =
    USE_SYMBOL && Symbol[name] || (USE_SYMBOL ? Symbol : uid)('Symbol.' + name));
};
},{"./_global":36,"./_shared":92,"./_uid":112}],114:[function(require,module,exports){
var classof   = require('./_classof')
  , ITERATOR  = require('./_wks')('iterator')
  , Iterators = require('./_iterators');
module.exports = require('./_core').getIteratorMethod = function(it){
  if(it != undefined)return it[ITERATOR]
    || it['@@iterator']
    || Iterators[classof(it)];
};
},{"./_classof":16,"./_core":22,"./_iterators":54,"./_wks":113}],115:[function(require,module,exports){
var classof   = require('./_classof')
  , ITERATOR  = require('./_wks')('iterator')
  , Iterators = require('./_iterators');
module.exports = require('./_core').isIterable = function(it){
  var O = Object(it);
  return O[ITERATOR] !== undefined
    || '@@iterator' in O
    || Iterators.hasOwnProperty(classof(O));
};
},{"./_classof":16,"./_core":22,"./_iterators":54,"./_wks":113}],116:[function(require,module,exports){
// https://github.com/benjamingr/RexExp.escape
var $export = require('./_export')
  , $re     = require('./_replacer')(/[\\^$*+?.()|[\]{}]/g, '\\$&');

$export($export.S, 'RegExp', {escape: function escape(it){ return $re(it); }});

},{"./_export":30,"./_replacer":86}],117:[function(require,module,exports){
// 22.1.3.3 Array.prototype.copyWithin(target, start, end = this.length)
var $export = require('./_export');

$export($export.P, 'Array', {copyWithin: require('./_array-copy-within')});

require('./_add-to-unscopables')('copyWithin');
},{"./_add-to-unscopables":5,"./_array-copy-within":8,"./_export":30}],118:[function(require,module,exports){
'use strict';
var $export = require('./_export')
  , $every  = require('./_array-methods')(4);

$export($export.P + $export.F * !require('./_strict-method')([].every, true), 'Array', {
  // 22.1.3.5 / 15.4.4.16 Array.prototype.every(callbackfn [, thisArg])
  every: function every(callbackfn /* , thisArg */){
    return $every(this, callbackfn, arguments[1]);
  }
});
},{"./_array-methods":12,"./_export":30,"./_strict-method":94}],119:[function(require,module,exports){
// 22.1.3.6 Array.prototype.fill(value, start = 0, end = this.length)
var $export = require('./_export');

$export($export.P, 'Array', {fill: require('./_array-fill')});

require('./_add-to-unscopables')('fill');
},{"./_add-to-unscopables":5,"./_array-fill":9,"./_export":30}],120:[function(require,module,exports){
'use strict';
var $export = require('./_export')
  , $filter = require('./_array-methods')(2);

$export($export.P + $export.F * !require('./_strict-method')([].filter, true), 'Array', {
  // 22.1.3.7 / 15.4.4.20 Array.prototype.filter(callbackfn [, thisArg])
  filter: function filter(callbackfn /* , thisArg */){
    return $filter(this, callbackfn, arguments[1]);
  }
});
},{"./_array-methods":12,"./_export":30,"./_strict-method":94}],121:[function(require,module,exports){
'use strict';
// 22.1.3.9 Array.prototype.findIndex(predicate, thisArg = undefined)
var $export = require('./_export')
  , $find   = require('./_array-methods')(6)
  , KEY     = 'findIndex'
  , forced  = true;
// Shouldn't skip holes
if(KEY in [])Array(1)[KEY](function(){ forced = false; });
$export($export.P + $export.F * forced, 'Array', {
  findIndex: function findIndex(callbackfn/*, that = undefined */){
    return $find(this, callbackfn, arguments.length > 1 ? arguments[1] : undefined);
  }
});
require('./_add-to-unscopables')(KEY);
},{"./_add-to-unscopables":5,"./_array-methods":12,"./_export":30}],122:[function(require,module,exports){
'use strict';
// 22.1.3.8 Array.prototype.find(predicate, thisArg = undefined)
var $export = require('./_export')
  , $find   = require('./_array-methods')(5)
  , KEY     = 'find'
  , forced  = true;
// Shouldn't skip holes
if(KEY in [])Array(1)[KEY](function(){ forced = false; });
$export($export.P + $export.F * forced, 'Array', {
  find: function find(callbackfn/*, that = undefined */){
    return $find(this, callbackfn, arguments.length > 1 ? arguments[1] : undefined);
  }
});
require('./_add-to-unscopables')(KEY);
},{"./_add-to-unscopables":5,"./_array-methods":12,"./_export":30}],123:[function(require,module,exports){
'use strict';
var $export  = require('./_export')
  , $forEach = require('./_array-methods')(0)
  , STRICT   = require('./_strict-method')([].forEach, true);

$export($export.P + $export.F * !STRICT, 'Array', {
  // 22.1.3.10 / 15.4.4.18 Array.prototype.forEach(callbackfn [, thisArg])
  forEach: function forEach(callbackfn /* , thisArg */){
    return $forEach(this, callbackfn, arguments[1]);
  }
});
},{"./_array-methods":12,"./_export":30,"./_strict-method":94}],124:[function(require,module,exports){
'use strict';
var ctx         = require('./_ctx')
  , $export     = require('./_export')
  , toObject    = require('./_to-object')
  , call        = require('./_iter-call')
  , isArrayIter = require('./_is-array-iter')
  , toLength    = require('./_to-length')
  , getIterFn   = require('./core.get-iterator-method');
$export($export.S + $export.F * !require('./_iter-detect')(function(iter){ Array.from(iter); }), 'Array', {
  // 22.1.2.1 Array.from(arrayLike, mapfn = undefined, thisArg = undefined)
  from: function from(arrayLike/*, mapfn = undefined, thisArg = undefined*/){
    var O       = toObject(arrayLike)
      , C       = typeof this == 'function' ? this : Array
      , aLen    = arguments.length
      , mapfn   = aLen > 1 ? arguments[1] : undefined
      , mapping = mapfn !== undefined
      , index   = 0
      , iterFn  = getIterFn(O)
      , length, result, step, iterator;
    if(mapping)mapfn = ctx(mapfn, aLen > 2 ? arguments[2] : undefined, 2);
    // if object isn't iterable or it's array with default iterator - use simple case
    if(iterFn != undefined && !(C == Array && isArrayIter(iterFn))){
      for(iterator = iterFn.call(O), result = new C; !(step = iterator.next()).done; index++){
        result[index] = mapping ? call(iterator, mapfn, [step.value, index], true) : step.value;
      }
    } else {
      length = toLength(O.length);
      for(result = new C(length); length > index; index++){
        result[index] = mapping ? mapfn(O[index], index) : O[index];
      }
    }
    result.length = index;
    return result;
  }
});

},{"./_ctx":23,"./_export":30,"./_is-array-iter":44,"./_iter-call":49,"./_iter-detect":52,"./_to-length":106,"./_to-object":107,"./core.get-iterator-method":114}],125:[function(require,module,exports){
'use strict';
var $export  = require('./_export')
  , $indexOf = require('./_array-includes')(false);

$export($export.P + $export.F * !require('./_strict-method')([].indexOf), 'Array', {
  // 22.1.3.11 / 15.4.4.14 Array.prototype.indexOf(searchElement [, fromIndex])
  indexOf: function indexOf(searchElement /*, fromIndex = 0 */){
    return $indexOf(this, searchElement, arguments[1]);
  }
});
},{"./_array-includes":11,"./_export":30,"./_strict-method":94}],126:[function(require,module,exports){
// 22.1.2.2 / 15.4.3.2 Array.isArray(arg)
var $export = require('./_export');

$export($export.S, 'Array', {isArray: require('./_is-array')});
},{"./_export":30,"./_is-array":45}],127:[function(require,module,exports){
'use strict';
var addToUnscopables = require('./_add-to-unscopables')
  , step             = require('./_iter-step')
  , Iterators        = require('./_iterators')
  , toIObject        = require('./_to-iobject');

// 22.1.3.4 Array.prototype.entries()
// 22.1.3.13 Array.prototype.keys()
// 22.1.3.29 Array.prototype.values()
// 22.1.3.30 Array.prototype[@@iterator]()
module.exports = require('./_iter-define')(Array, 'Array', function(iterated, kind){
  this._t = toIObject(iterated); // target
  this._i = 0;                   // next index
  this._k = kind;                // kind
// 22.1.5.2.1 %ArrayIteratorPrototype%.next()
}, function(){
  var O     = this._t
    , kind  = this._k
    , index = this._i++;
  if(!O || index >= O.length){
    this._t = undefined;
    return step(1);
  }
  if(kind == 'keys'  )return step(0, index);
  if(kind == 'values')return step(0, O[index]);
  return step(0, [index, O[index]]);
}, 'values');

// argumentsList[@@iterator] is %ArrayProto_values% (9.4.4.6, 9.4.4.7)
Iterators.Arguments = Iterators.Array;

addToUnscopables('keys');
addToUnscopables('values');
addToUnscopables('entries');
},{"./_add-to-unscopables":5,"./_iter-define":51,"./_iter-step":53,"./_iterators":54,"./_to-iobject":105}],128:[function(require,module,exports){
'use strict';
// 22.1.3.13 Array.prototype.join(separator)
var $export   = require('./_export')
  , toIObject = require('./_to-iobject')
  , arrayJoin = [].join;

// fallback for not array-like strings
$export($export.P + $export.F * (require('./_iobject') != Object || !require('./_strict-method')(arrayJoin)), 'Array', {
  join: function join(separator){
    return arrayJoin.call(toIObject(this), separator === undefined ? ',' : separator);
  }
});
},{"./_export":30,"./_iobject":43,"./_strict-method":94,"./_to-iobject":105}],129:[function(require,module,exports){
'use strict';
var $export   = require('./_export')
  , toIObject = require('./_to-iobject')
  , toInteger = require('./_to-integer')
  , toLength  = require('./_to-length');

$export($export.P + $export.F * !require('./_strict-method')([].lastIndexOf), 'Array', {
  // 22.1.3.14 / 15.4.4.15 Array.prototype.lastIndexOf(searchElement [, fromIndex])
  lastIndexOf: function lastIndexOf(searchElement /*, fromIndex = @[*-1] */){
    var O      = toIObject(this)
      , length = toLength(O.length)
      , index  = length - 1;
    if(arguments.length > 1)index = Math.min(index, toInteger(arguments[1]));
    if(index < 0)index = length + index;
    for(;index >= 0; index--)if(index in O)if(O[index] === searchElement)return index;
    return -1;
  }
});
},{"./_export":30,"./_strict-method":94,"./_to-integer":104,"./_to-iobject":105,"./_to-length":106}],130:[function(require,module,exports){
'use strict';
var $export = require('./_export')
  , $map    = require('./_array-methods')(1);

$export($export.P + $export.F * !require('./_strict-method')([].map, true), 'Array', {
  // 22.1.3.15 / 15.4.4.19 Array.prototype.map(callbackfn [, thisArg])
  map: function map(callbackfn /* , thisArg */){
    return $map(this, callbackfn, arguments[1]);
  }
});
},{"./_array-methods":12,"./_export":30,"./_strict-method":94}],131:[function(require,module,exports){
'use strict';
var $export = require('./_export');

// WebKit Array.of isn't generic
$export($export.S + $export.F * require('./_fails')(function(){
  function F(){}
  return !(Array.of.call(F) instanceof F);
}), 'Array', {
  // 22.1.2.3 Array.of( ...items)
  of: function of(/* ...args */){
    var index  = 0
      , aLen   = arguments.length
      , result = new (typeof this == 'function' ? this : Array)(aLen);
    while(aLen > index)result[index] = arguments[index++];
    result.length = aLen;
    return result;
  }
});
},{"./_export":30,"./_fails":32}],132:[function(require,module,exports){
'use strict';
var $export = require('./_export')
  , $reduce = require('./_array-reduce');

$export($export.P + $export.F * !require('./_strict-method')([].reduceRight, true), 'Array', {
  // 22.1.3.19 / 15.4.4.22 Array.prototype.reduceRight(callbackfn [, initialValue])
  reduceRight: function reduceRight(callbackfn /* , initialValue */){
    return $reduce(this, callbackfn, arguments.length, arguments[1], true);
  }
});
},{"./_array-reduce":13,"./_export":30,"./_strict-method":94}],133:[function(require,module,exports){
'use strict';
var $export = require('./_export')
  , $reduce = require('./_array-reduce');

$export($export.P + $export.F * !require('./_strict-method')([].reduce, true), 'Array', {
  // 22.1.3.18 / 15.4.4.21 Array.prototype.reduce(callbackfn [, initialValue])
  reduce: function reduce(callbackfn /* , initialValue */){
    return $reduce(this, callbackfn, arguments.length, arguments[1], false);
  }
});
},{"./_array-reduce":13,"./_export":30,"./_strict-method":94}],134:[function(require,module,exports){
'use strict';
var $export    = require('./_export')
  , html       = require('./_html')
  , cof        = require('./_cof')
  , toIndex    = require('./_to-index')
  , toLength   = require('./_to-length')
  , arraySlice = [].slice;

// fallback for not array-like ES3 strings and DOM objects
$export($export.P + $export.F * require('./_fails')(function(){
  if(html)arraySlice.call(html);
}), 'Array', {
  slice: function slice(begin, end){
    var len   = toLength(this.length)
      , klass = cof(this);
    end = end === undefined ? len : end;
    if(klass == 'Array')return arraySlice.call(this, begin, end);
    var start  = toIndex(begin, len)
      , upTo   = toIndex(end, len)
      , size   = toLength(upTo - start)
      , cloned = Array(size)
      , i      = 0;
    for(; i < size; i++)cloned[i] = klass == 'String'
      ? this.charAt(start + i)
      : this[start + i];
    return cloned;
  }
});
},{"./_cof":17,"./_export":30,"./_fails":32,"./_html":39,"./_to-index":103,"./_to-length":106}],135:[function(require,module,exports){
'use strict';
var $export = require('./_export')
  , $some   = require('./_array-methods')(3);

$export($export.P + $export.F * !require('./_strict-method')([].some, true), 'Array', {
  // 22.1.3.23 / 15.4.4.17 Array.prototype.some(callbackfn [, thisArg])
  some: function some(callbackfn /* , thisArg */){
    return $some(this, callbackfn, arguments[1]);
  }
});
},{"./_array-methods":12,"./_export":30,"./_strict-method":94}],136:[function(require,module,exports){
'use strict';
var $export   = require('./_export')
  , aFunction = require('./_a-function')
  , toObject  = require('./_to-object')
  , fails     = require('./_fails')
  , $sort     = [].sort
  , test      = [1, 2, 3];

$export($export.P + $export.F * (fails(function(){
  // IE8-
  test.sort(undefined);
}) || !fails(function(){
  // V8 bug
  test.sort(null);
  // Old WebKit
}) || !require('./_strict-method')($sort)), 'Array', {
  // 22.1.3.25 Array.prototype.sort(comparefn)
  sort: function sort(comparefn){
    return comparefn === undefined
      ? $sort.call(toObject(this))
      : $sort.call(toObject(this), aFunction(comparefn));
  }
});
},{"./_a-function":3,"./_export":30,"./_fails":32,"./_strict-method":94,"./_to-object":107}],137:[function(require,module,exports){
require('./_set-species')('Array');
},{"./_set-species":89}],138:[function(require,module,exports){
// 20.3.3.1 / 15.9.4.4 Date.now()
var $export = require('./_export');

$export($export.S, 'Date', {now: function(){ return new Date().getTime(); }});
},{"./_export":30}],139:[function(require,module,exports){
'use strict';
// 20.3.4.36 / 15.9.5.43 Date.prototype.toISOString()
var $export = require('./_export')
  , fails   = require('./_fails')
  , getTime = Date.prototype.getTime;

var lz = function(num){
  return num > 9 ? num : '0' + num;
};

// PhantomJS / old WebKit has a broken implementations
$export($export.P + $export.F * (fails(function(){
  return new Date(-5e13 - 1).toISOString() != '0385-07-25T07:06:39.999Z';
}) || !fails(function(){
  new Date(NaN).toISOString();
})), 'Date', {
  toISOString: function toISOString(){
    if(!isFinite(getTime.call(this)))throw RangeError('Invalid time value');
    var d = this
      , y = d.getUTCFullYear()
      , m = d.getUTCMilliseconds()
      , s = y < 0 ? '-' : y > 9999 ? '+' : '';
    return s + ('00000' + Math.abs(y)).slice(s ? -6 : -4) +
      '-' + lz(d.getUTCMonth() + 1) + '-' + lz(d.getUTCDate()) +
      'T' + lz(d.getUTCHours()) + ':' + lz(d.getUTCMinutes()) +
      ':' + lz(d.getUTCSeconds()) + '.' + (m > 99 ? m : '0' + lz(m)) + 'Z';
  }
});
},{"./_export":30,"./_fails":32}],140:[function(require,module,exports){
'use strict';
var $export     = require('./_export')
  , toObject    = require('./_to-object')
  , toPrimitive = require('./_to-primitive');

$export($export.P + $export.F * require('./_fails')(function(){
  return new Date(NaN).toJSON() !== null || Date.prototype.toJSON.call({toISOString: function(){ return 1; }}) !== 1;
}), 'Date', {
  toJSON: function toJSON(key){
    var O  = toObject(this)
      , pv = toPrimitive(O);
    return typeof pv == 'number' && !isFinite(pv) ? null : O.toISOString();
  }
});
},{"./_export":30,"./_fails":32,"./_to-object":107,"./_to-primitive":108}],141:[function(require,module,exports){
var TO_PRIMITIVE = require('./_wks')('toPrimitive')
  , proto        = Date.prototype;

if(!(TO_PRIMITIVE in proto))require('./_hide')(proto, TO_PRIMITIVE, require('./_date-to-primitive'));
},{"./_date-to-primitive":24,"./_hide":38,"./_wks":113}],142:[function(require,module,exports){
var DateProto    = Date.prototype
  , INVALID_DATE = 'Invalid Date'
  , TO_STRING    = 'toString'
  , $toString    = DateProto[TO_STRING]
  , getTime      = DateProto.getTime;
if(new Date(NaN) + '' != INVALID_DATE){
  require('./_redefine')(DateProto, TO_STRING, function toString(){
    var value = getTime.call(this);
    return value === value ? $toString.call(this) : INVALID_DATE;
  });
}
},{"./_redefine":85}],143:[function(require,module,exports){
// 19.2.3.2 / 15.3.4.5 Function.prototype.bind(thisArg, args...)
var $export = require('./_export');

$export($export.P, 'Function', {bind: require('./_bind')});
},{"./_bind":15,"./_export":30}],144:[function(require,module,exports){
'use strict';
var isObject       = require('./_is-object')
  , getPrototypeOf = require('./_object-gpo')
  , HAS_INSTANCE   = require('./_wks')('hasInstance')
  , FunctionProto  = Function.prototype;
// 19.2.3.6 Function.prototype[@@hasInstance](V)
if(!(HAS_INSTANCE in FunctionProto))require('./_object-dp').f(FunctionProto, HAS_INSTANCE, {value: function(O){
  if(typeof this != 'function' || !isObject(O))return false;
  if(!isObject(this.prototype))return O instanceof this;
  // for environment w/o native `@@hasInstance` logic enough `instanceof`, but add this:
  while(O = getPrototypeOf(O))if(this.prototype === O)return true;
  return false;
}});
},{"./_is-object":47,"./_object-dp":65,"./_object-gpo":72,"./_wks":113}],145:[function(require,module,exports){
var dP         = require('./_object-dp').f
  , createDesc = require('./_property-desc')
  , has        = require('./_has')
  , FProto     = Function.prototype
  , nameRE     = /^\s*function ([^ (]*)/
  , NAME       = 'name';
// 19.2.4.2 name
NAME in FProto || require('./_descriptors') && dP(FProto, NAME, {
  configurable: true,
  get: function(){
    var match = ('' + this).match(nameRE)
      , name  = match ? match[1] : '';
    has(this, NAME) || dP(this, NAME, createDesc(5, name));
    return name;
  }
});
},{"./_descriptors":26,"./_has":37,"./_object-dp":65,"./_property-desc":83}],146:[function(require,module,exports){
'use strict';
var strong = require('./_collection-strong');

// 23.1 Map Objects
module.exports = require('./_collection')('Map', function(get){
  return function Map(){ return get(this, arguments.length > 0 ? arguments[0] : undefined); };
}, {
  // 23.1.3.6 Map.prototype.get(key)
  get: function get(key){
    var entry = strong.getEntry(this, key);
    return entry && entry.v;
  },
  // 23.1.3.9 Map.prototype.set(key, value)
  set: function set(key, value){
    return strong.def(this, key === 0 ? 0 : key, value);
  }
}, strong, true);
},{"./_collection":21,"./_collection-strong":18}],147:[function(require,module,exports){
// 20.2.2.3 Math.acosh(x)
var $export = require('./_export')
  , log1p   = require('./_math-log1p')
  , sqrt    = Math.sqrt
  , $acosh  = Math.acosh;

// V8 bug https://code.google.com/p/v8/issues/detail?id=3509
$export($export.S + $export.F * !($acosh && Math.floor($acosh(Number.MAX_VALUE)) == 710), 'Math', {
  acosh: function acosh(x){
    return (x = +x) < 1 ? NaN : x > 94906265.62425156
      ? Math.log(x) + Math.LN2
      : log1p(x - 1 + sqrt(x - 1) * sqrt(x + 1));
  }
});
},{"./_export":30,"./_math-log1p":58}],148:[function(require,module,exports){
// 20.2.2.5 Math.asinh(x)
var $export = require('./_export');

function asinh(x){
  return !isFinite(x = +x) || x == 0 ? x : x < 0 ? -asinh(-x) : Math.log(x + Math.sqrt(x * x + 1));
}

$export($export.S, 'Math', {asinh: asinh});
},{"./_export":30}],149:[function(require,module,exports){
// 20.2.2.7 Math.atanh(x)
var $export = require('./_export');

$export($export.S, 'Math', {
  atanh: function atanh(x){
    return (x = +x) == 0 ? x : Math.log((1 + x) / (1 - x)) / 2;
  }
});
},{"./_export":30}],150:[function(require,module,exports){
// 20.2.2.9 Math.cbrt(x)
var $export = require('./_export')
  , sign    = require('./_math-sign');

$export($export.S, 'Math', {
  cbrt: function cbrt(x){
    return sign(x = +x) * Math.pow(Math.abs(x), 1 / 3);
  }
});
},{"./_export":30,"./_math-sign":59}],151:[function(require,module,exports){
// 20.2.2.11 Math.clz32(x)
var $export = require('./_export');

$export($export.S, 'Math', {
  clz32: function clz32(x){
    return (x >>>= 0) ? 31 - Math.floor(Math.log(x + 0.5) * Math.LOG2E) : 32;
  }
});
},{"./_export":30}],152:[function(require,module,exports){
// 20.2.2.12 Math.cosh(x)
var $export = require('./_export')
  , exp     = Math.exp;

$export($export.S, 'Math', {
  cosh: function cosh(x){
    return (exp(x = +x) + exp(-x)) / 2;
  }
});
},{"./_export":30}],153:[function(require,module,exports){
// 20.2.2.14 Math.expm1(x)
var $export = require('./_export');

$export($export.S, 'Math', {expm1: require('./_math-expm1')});
},{"./_export":30,"./_math-expm1":57}],154:[function(require,module,exports){
// 20.2.2.16 Math.fround(x)
var $export   = require('./_export')
  , sign      = require('./_math-sign')
  , pow       = Math.pow
  , EPSILON   = pow(2, -52)
  , EPSILON32 = pow(2, -23)
  , MAX32     = pow(2, 127) * (2 - EPSILON32)
  , MIN32     = pow(2, -126);

var roundTiesToEven = function(n){
  return n + 1 / EPSILON - 1 / EPSILON;
};


$export($export.S, 'Math', {
  fround: function fround(x){
    var $abs  = Math.abs(x)
      , $sign = sign(x)
      , a, result;
    if($abs < MIN32)return $sign * roundTiesToEven($abs / MIN32 / EPSILON32) * MIN32 * EPSILON32;
    a = (1 + EPSILON32 / EPSILON) * $abs;
    result = a - (a - $abs);
    if(result > MAX32 || result != result)return $sign * Infinity;
    return $sign * result;
  }
});
},{"./_export":30,"./_math-sign":59}],155:[function(require,module,exports){
// 20.2.2.17 Math.hypot([value1[, value2[, … ]]])
var $export = require('./_export')
  , abs     = Math.abs;

$export($export.S, 'Math', {
  hypot: function hypot(value1, value2){ // eslint-disable-line no-unused-vars
    var sum  = 0
      , i    = 0
      , aLen = arguments.length
      , larg = 0
      , arg, div;
    while(i < aLen){
      arg = abs(arguments[i++]);
      if(larg < arg){
        div  = larg / arg;
        sum  = sum * div * div + 1;
        larg = arg;
      } else if(arg > 0){
        div  = arg / larg;
        sum += div * div;
      } else sum += arg;
    }
    return larg === Infinity ? Infinity : larg * Math.sqrt(sum);
  }
});
},{"./_export":30}],156:[function(require,module,exports){
// 20.2.2.18 Math.imul(x, y)
var $export = require('./_export')
  , $imul   = Math.imul;

// some WebKit versions fails with big numbers, some has wrong arity
$export($export.S + $export.F * require('./_fails')(function(){
  return $imul(0xffffffff, 5) != -5 || $imul.length != 2;
}), 'Math', {
  imul: function imul(x, y){
    var UINT16 = 0xffff
      , xn = +x
      , yn = +y
      , xl = UINT16 & xn
      , yl = UINT16 & yn;
    return 0 | xl * yl + ((UINT16 & xn >>> 16) * yl + xl * (UINT16 & yn >>> 16) << 16 >>> 0);
  }
});
},{"./_export":30,"./_fails":32}],157:[function(require,module,exports){
// 20.2.2.21 Math.log10(x)
var $export = require('./_export');

$export($export.S, 'Math', {
  log10: function log10(x){
    return Math.log(x) / Math.LN10;
  }
});
},{"./_export":30}],158:[function(require,module,exports){
// 20.2.2.20 Math.log1p(x)
var $export = require('./_export');

$export($export.S, 'Math', {log1p: require('./_math-log1p')});
},{"./_export":30,"./_math-log1p":58}],159:[function(require,module,exports){
// 20.2.2.22 Math.log2(x)
var $export = require('./_export');

$export($export.S, 'Math', {
  log2: function log2(x){
    return Math.log(x) / Math.LN2;
  }
});
},{"./_export":30}],160:[function(require,module,exports){
// 20.2.2.28 Math.sign(x)
var $export = require('./_export');

$export($export.S, 'Math', {sign: require('./_math-sign')});
},{"./_export":30,"./_math-sign":59}],161:[function(require,module,exports){
// 20.2.2.30 Math.sinh(x)
var $export = require('./_export')
  , expm1   = require('./_math-expm1')
  , exp     = Math.exp;

// V8 near Chromium 38 has a problem with very small numbers
$export($export.S + $export.F * require('./_fails')(function(){
  return !Math.sinh(-2e-17) != -2e-17;
}), 'Math', {
  sinh: function sinh(x){
    return Math.abs(x = +x) < 1
      ? (expm1(x) - expm1(-x)) / 2
      : (exp(x - 1) - exp(-x - 1)) * (Math.E / 2);
  }
});
},{"./_export":30,"./_fails":32,"./_math-expm1":57}],162:[function(require,module,exports){
// 20.2.2.33 Math.tanh(x)
var $export = require('./_export')
  , expm1   = require('./_math-expm1')
  , exp     = Math.exp;

$export($export.S, 'Math', {
  tanh: function tanh(x){
    var a = expm1(x = +x)
      , b = expm1(-x);
    return a == Infinity ? 1 : b == Infinity ? -1 : (a - b) / (exp(x) + exp(-x));
  }
});
},{"./_export":30,"./_math-expm1":57}],163:[function(require,module,exports){
// 20.2.2.34 Math.trunc(x)
var $export = require('./_export');

$export($export.S, 'Math', {
  trunc: function trunc(it){
    return (it > 0 ? Math.floor : Math.ceil)(it);
  }
});
},{"./_export":30}],164:[function(require,module,exports){
'use strict';
var global            = require('./_global')
  , has               = require('./_has')
  , cof               = require('./_cof')
  , inheritIfRequired = require('./_inherit-if-required')
  , toPrimitive       = require('./_to-primitive')
  , fails             = require('./_fails')
  , gOPN              = require('./_object-gopn').f
  , gOPD              = require('./_object-gopd').f
  , dP                = require('./_object-dp').f
  , $trim             = require('./_string-trim').trim
  , NUMBER            = 'Number'
  , $Number           = global[NUMBER]
  , Base              = $Number
  , proto             = $Number.prototype
  // Opera ~12 has broken Object#toString
  , BROKEN_COF        = cof(require('./_object-create')(proto)) == NUMBER
  , TRIM              = 'trim' in String.prototype;

// 7.1.3 ToNumber(argument)
var toNumber = function(argument){
  var it = toPrimitive(argument, false);
  if(typeof it == 'string' && it.length > 2){
    it = TRIM ? it.trim() : $trim(it, 3);
    var first = it.charCodeAt(0)
      , third, radix, maxCode;
    if(first === 43 || first === 45){
      third = it.charCodeAt(2);
      if(third === 88 || third === 120)return NaN; // Number('+0x1') should be NaN, old V8 fix
    } else if(first === 48){
      switch(it.charCodeAt(1)){
        case 66 : case 98  : radix = 2; maxCode = 49; break; // fast equal /^0b[01]+$/i
        case 79 : case 111 : radix = 8; maxCode = 55; break; // fast equal /^0o[0-7]+$/i
        default : return +it;
      }
      for(var digits = it.slice(2), i = 0, l = digits.length, code; i < l; i++){
        code = digits.charCodeAt(i);
        // parseInt parses a string to a first unavailable symbol
        // but ToNumber should return NaN if a string contains unavailable symbols
        if(code < 48 || code > maxCode)return NaN;
      } return parseInt(digits, radix);
    }
  } return +it;
};

if(!$Number(' 0o1') || !$Number('0b1') || $Number('+0x1')){
  $Number = function Number(value){
    var it = arguments.length < 1 ? 0 : value
      , that = this;
    return that instanceof $Number
      // check on 1..constructor(foo) case
      && (BROKEN_COF ? fails(function(){ proto.valueOf.call(that); }) : cof(that) != NUMBER)
        ? inheritIfRequired(new Base(toNumber(it)), that, $Number) : toNumber(it);
  };
  for(var keys = require('./_descriptors') ? gOPN(Base) : (
    // ES3:
    'MAX_VALUE,MIN_VALUE,NaN,NEGATIVE_INFINITY,POSITIVE_INFINITY,' +
    // ES6 (in case, if modules with ES6 Number statics required before):
    'EPSILON,isFinite,isInteger,isNaN,isSafeInteger,MAX_SAFE_INTEGER,' +
    'MIN_SAFE_INTEGER,parseFloat,parseInt,isInteger'
  ).split(','), j = 0, key; keys.length > j; j++){
    if(has(Base, key = keys[j]) && !has($Number, key)){
      dP($Number, key, gOPD(Base, key));
    }
  }
  $Number.prototype = proto;
  proto.constructor = $Number;
  require('./_redefine')(global, NUMBER, $Number);
}
},{"./_cof":17,"./_descriptors":26,"./_fails":32,"./_global":36,"./_has":37,"./_inherit-if-required":41,"./_object-create":64,"./_object-dp":65,"./_object-gopd":68,"./_object-gopn":70,"./_redefine":85,"./_string-trim":100,"./_to-primitive":108}],165:[function(require,module,exports){
// 20.1.2.1 Number.EPSILON
var $export = require('./_export');

$export($export.S, 'Number', {EPSILON: Math.pow(2, -52)});
},{"./_export":30}],166:[function(require,module,exports){
// 20.1.2.2 Number.isFinite(number)
var $export   = require('./_export')
  , _isFinite = require('./_global').isFinite;

$export($export.S, 'Number', {
  isFinite: function isFinite(it){
    return typeof it == 'number' && _isFinite(it);
  }
});
},{"./_export":30,"./_global":36}],167:[function(require,module,exports){
// 20.1.2.3 Number.isInteger(number)
var $export = require('./_export');

$export($export.S, 'Number', {isInteger: require('./_is-integer')});
},{"./_export":30,"./_is-integer":46}],168:[function(require,module,exports){
// 20.1.2.4 Number.isNaN(number)
var $export = require('./_export');

$export($export.S, 'Number', {
  isNaN: function isNaN(number){
    return number != number;
  }
});
},{"./_export":30}],169:[function(require,module,exports){
// 20.1.2.5 Number.isSafeInteger(number)
var $export   = require('./_export')
  , isInteger = require('./_is-integer')
  , abs       = Math.abs;

$export($export.S, 'Number', {
  isSafeInteger: function isSafeInteger(number){
    return isInteger(number) && abs(number) <= 0x1fffffffffffff;
  }
});
},{"./_export":30,"./_is-integer":46}],170:[function(require,module,exports){
// 20.1.2.6 Number.MAX_SAFE_INTEGER
var $export = require('./_export');

$export($export.S, 'Number', {MAX_SAFE_INTEGER: 0x1fffffffffffff});
},{"./_export":30}],171:[function(require,module,exports){
// 20.1.2.10 Number.MIN_SAFE_INTEGER
var $export = require('./_export');

$export($export.S, 'Number', {MIN_SAFE_INTEGER: -0x1fffffffffffff});
},{"./_export":30}],172:[function(require,module,exports){
var $export     = require('./_export')
  , $parseFloat = require('./_parse-float');
// 20.1.2.12 Number.parseFloat(string)
$export($export.S + $export.F * (Number.parseFloat != $parseFloat), 'Number', {parseFloat: $parseFloat});
},{"./_export":30,"./_parse-float":79}],173:[function(require,module,exports){
var $export   = require('./_export')
  , $parseInt = require('./_parse-int');
// 20.1.2.13 Number.parseInt(string, radix)
$export($export.S + $export.F * (Number.parseInt != $parseInt), 'Number', {parseInt: $parseInt});
},{"./_export":30,"./_parse-int":80}],174:[function(require,module,exports){
'use strict';
var $export      = require('./_export')
  , anInstance   = require('./_an-instance')
  , toInteger    = require('./_to-integer')
  , aNumberValue = require('./_a-number-value')
  , repeat       = require('./_string-repeat')
  , $toFixed     = 1..toFixed
  , floor        = Math.floor
  , data         = [0, 0, 0, 0, 0, 0]
  , ERROR        = 'Number.toFixed: incorrect invocation!'
  , ZERO         = '0';

var multiply = function(n, c){
  var i  = -1
    , c2 = c;
  while(++i < 6){
    c2 += n * data[i];
    data[i] = c2 % 1e7;
    c2 = floor(c2 / 1e7);
  }
};
var divide = function(n){
  var i = 6
    , c = 0;
  while(--i >= 0){
    c += data[i];
    data[i] = floor(c / n);
    c = (c % n) * 1e7;
  }
};
var numToString = function(){
  var i = 6
    , s = '';
  while(--i >= 0){
    if(s !== '' || i === 0 || data[i] !== 0){
      var t = String(data[i]);
      s = s === '' ? t : s + repeat.call(ZERO, 7 - t.length) + t;
    }
  } return s;
};
var pow = function(x, n, acc){
  return n === 0 ? acc : n % 2 === 1 ? pow(x, n - 1, acc * x) : pow(x * x, n / 2, acc);
};
var log = function(x){
  var n  = 0
    , x2 = x;
  while(x2 >= 4096){
    n += 12;
    x2 /= 4096;
  }
  while(x2 >= 2){
    n  += 1;
    x2 /= 2;
  } return n;
};

$export($export.P + $export.F * (!!$toFixed && (
  0.00008.toFixed(3) !== '0.000' ||
  0.9.toFixed(0) !== '1' ||
  1.255.toFixed(2) !== '1.25' ||
  1000000000000000128..toFixed(0) !== '1000000000000000128'
) || !require('./_fails')(function(){
  // V8 ~ Android 4.3-
  $toFixed.call({});
})), 'Number', {
  toFixed: function toFixed(fractionDigits){
    var x = aNumberValue(this, ERROR)
      , f = toInteger(fractionDigits)
      , s = ''
      , m = ZERO
      , e, z, j, k;
    if(f < 0 || f > 20)throw RangeError(ERROR);
    if(x != x)return 'NaN';
    if(x <= -1e21 || x >= 1e21)return String(x);
    if(x < 0){
      s = '-';
      x = -x;
    }
    if(x > 1e-21){
      e = log(x * pow(2, 69, 1)) - 69;
      z = e < 0 ? x * pow(2, -e, 1) : x / pow(2, e, 1);
      z *= 0x10000000000000;
      e = 52 - e;
      if(e > 0){
        multiply(0, z);
        j = f;
        while(j >= 7){
          multiply(1e7, 0);
          j -= 7;
        }
        multiply(pow(10, j, 1), 0);
        j = e - 1;
        while(j >= 23){
          divide(1 << 23);
          j -= 23;
        }
        divide(1 << j);
        multiply(1, 1);
        divide(2);
        m = numToString();
      } else {
        multiply(0, z);
        multiply(1 << -e, 0);
        m = numToString() + repeat.call(ZERO, f);
      }
    }
    if(f > 0){
      k = m.length;
      m = s + (k <= f ? '0.' + repeat.call(ZERO, f - k) + m : m.slice(0, k - f) + '.' + m.slice(k - f));
    } else {
      m = s + m;
    } return m;
  }
});
},{"./_a-number-value":4,"./_an-instance":6,"./_export":30,"./_fails":32,"./_string-repeat":99,"./_to-integer":104}],175:[function(require,module,exports){
'use strict';
var $export      = require('./_export')
  , $fails       = require('./_fails')
  , aNumberValue = require('./_a-number-value')
  , $toPrecision = 1..toPrecision;

$export($export.P + $export.F * ($fails(function(){
  // IE7-
  return $toPrecision.call(1, undefined) !== '1';
}) || !$fails(function(){
  // V8 ~ Android 4.3-
  $toPrecision.call({});
})), 'Number', {
  toPrecision: function toPrecision(precision){
    var that = aNumberValue(this, 'Number#toPrecision: incorrect invocation!');
    return precision === undefined ? $toPrecision.call(that) : $toPrecision.call(that, precision); 
  }
});
},{"./_a-number-value":4,"./_export":30,"./_fails":32}],176:[function(require,module,exports){
// 19.1.3.1 Object.assign(target, source)
var $export = require('./_export');

$export($export.S + $export.F, 'Object', {assign: require('./_object-assign')});
},{"./_export":30,"./_object-assign":63}],177:[function(require,module,exports){
var $export = require('./_export')
// 19.1.2.2 / 15.2.3.5 Object.create(O [, Properties])
$export($export.S, 'Object', {create: require('./_object-create')});
},{"./_export":30,"./_object-create":64}],178:[function(require,module,exports){
var $export = require('./_export');
// 19.1.2.3 / 15.2.3.7 Object.defineProperties(O, Properties)
$export($export.S + $export.F * !require('./_descriptors'), 'Object', {defineProperties: require('./_object-dps')});
},{"./_descriptors":26,"./_export":30,"./_object-dps":66}],179:[function(require,module,exports){
var $export = require('./_export');
// 19.1.2.4 / 15.2.3.6 Object.defineProperty(O, P, Attributes)
$export($export.S + $export.F * !require('./_descriptors'), 'Object', {defineProperty: require('./_object-dp').f});
},{"./_descriptors":26,"./_export":30,"./_object-dp":65}],180:[function(require,module,exports){
// 19.1.2.5 Object.freeze(O)
var isObject = require('./_is-object')
  , meta     = require('./_meta').onFreeze;

require('./_object-sap')('freeze', function($freeze){
  return function freeze(it){
    return $freeze && isObject(it) ? $freeze(meta(it)) : it;
  };
});
},{"./_is-object":47,"./_meta":60,"./_object-sap":76}],181:[function(require,module,exports){
// 19.1.2.6 Object.getOwnPropertyDescriptor(O, P)
var toIObject                 = require('./_to-iobject')
  , $getOwnPropertyDescriptor = require('./_object-gopd').f;

require('./_object-sap')('getOwnPropertyDescriptor', function(){
  return function getOwnPropertyDescriptor(it, key){
    return $getOwnPropertyDescriptor(toIObject(it), key);
  };
});
},{"./_object-gopd":68,"./_object-sap":76,"./_to-iobject":105}],182:[function(require,module,exports){
// 19.1.2.7 Object.getOwnPropertyNames(O)
require('./_object-sap')('getOwnPropertyNames', function(){
  return require('./_object-gopn-ext').f;
});
},{"./_object-gopn-ext":69,"./_object-sap":76}],183:[function(require,module,exports){
// 19.1.2.9 Object.getPrototypeOf(O)
var toObject        = require('./_to-object')
  , $getPrototypeOf = require('./_object-gpo');

require('./_object-sap')('getPrototypeOf', function(){
  return function getPrototypeOf(it){
    return $getPrototypeOf(toObject(it));
  };
});
},{"./_object-gpo":72,"./_object-sap":76,"./_to-object":107}],184:[function(require,module,exports){
// 19.1.2.11 Object.isExtensible(O)
var isObject = require('./_is-object');

require('./_object-sap')('isExtensible', function($isExtensible){
  return function isExtensible(it){
    return isObject(it) ? $isExtensible ? $isExtensible(it) : true : false;
  };
});
},{"./_is-object":47,"./_object-sap":76}],185:[function(require,module,exports){
// 19.1.2.12 Object.isFrozen(O)
var isObject = require('./_is-object');

require('./_object-sap')('isFrozen', function($isFrozen){
  return function isFrozen(it){
    return isObject(it) ? $isFrozen ? $isFrozen(it) : false : true;
  };
});
},{"./_is-object":47,"./_object-sap":76}],186:[function(require,module,exports){
// 19.1.2.13 Object.isSealed(O)
var isObject = require('./_is-object');

require('./_object-sap')('isSealed', function($isSealed){
  return function isSealed(it){
    return isObject(it) ? $isSealed ? $isSealed(it) : false : true;
  };
});
},{"./_is-object":47,"./_object-sap":76}],187:[function(require,module,exports){
// 19.1.3.10 Object.is(value1, value2)
var $export = require('./_export');
$export($export.S, 'Object', {is: require('./_same-value')});
},{"./_export":30,"./_same-value":87}],188:[function(require,module,exports){
// 19.1.2.14 Object.keys(O)
var toObject = require('./_to-object')
  , $keys    = require('./_object-keys');

require('./_object-sap')('keys', function(){
  return function keys(it){
    return $keys(toObject(it));
  };
});
},{"./_object-keys":74,"./_object-sap":76,"./_to-object":107}],189:[function(require,module,exports){
// 19.1.2.15 Object.preventExtensions(O)
var isObject = require('./_is-object')
  , meta     = require('./_meta').onFreeze;

require('./_object-sap')('preventExtensions', function($preventExtensions){
  return function preventExtensions(it){
    return $preventExtensions && isObject(it) ? $preventExtensions(meta(it)) : it;
  };
});
},{"./_is-object":47,"./_meta":60,"./_object-sap":76}],190:[function(require,module,exports){
// 19.1.2.17 Object.seal(O)
var isObject = require('./_is-object')
  , meta     = require('./_meta').onFreeze;

require('./_object-sap')('seal', function($seal){
  return function seal(it){
    return $seal && isObject(it) ? $seal(meta(it)) : it;
  };
});
},{"./_is-object":47,"./_meta":60,"./_object-sap":76}],191:[function(require,module,exports){
// 19.1.3.19 Object.setPrototypeOf(O, proto)
var $export = require('./_export');
$export($export.S, 'Object', {setPrototypeOf: require('./_set-proto').set});
},{"./_export":30,"./_set-proto":88}],192:[function(require,module,exports){
'use strict';
// 19.1.3.6 Object.prototype.toString()
var classof = require('./_classof')
  , test    = {};
test[require('./_wks')('toStringTag')] = 'z';
if(test + '' != '[object z]'){
  require('./_redefine')(Object.prototype, 'toString', function toString(){
    return '[object ' + classof(this) + ']';
  }, true);
}
},{"./_classof":16,"./_redefine":85,"./_wks":113}],193:[function(require,module,exports){
var $export     = require('./_export')
  , $parseFloat = require('./_parse-float');
// 18.2.4 parseFloat(string)
$export($export.G + $export.F * (parseFloat != $parseFloat), {parseFloat: $parseFloat});
},{"./_export":30,"./_parse-float":79}],194:[function(require,module,exports){
var $export   = require('./_export')
  , $parseInt = require('./_parse-int');
// 18.2.5 parseInt(string, radix)
$export($export.G + $export.F * (parseInt != $parseInt), {parseInt: $parseInt});
},{"./_export":30,"./_parse-int":80}],195:[function(require,module,exports){
'use strict';
var LIBRARY            = require('./_library')
  , global             = require('./_global')
  , ctx                = require('./_ctx')
  , classof            = require('./_classof')
  , $export            = require('./_export')
  , isObject           = require('./_is-object')
  , anObject           = require('./_an-object')
  , aFunction          = require('./_a-function')
  , anInstance         = require('./_an-instance')
  , forOf              = require('./_for-of')
  , setProto           = require('./_set-proto').set
  , speciesConstructor = require('./_species-constructor')
  , task               = require('./_task').set
  , microtask          = require('./_microtask')
  , PROMISE            = 'Promise'
  , TypeError          = global.TypeError
  , process            = global.process
  , $Promise           = global[PROMISE]
  , process            = global.process
  , isNode             = classof(process) == 'process'
  , empty              = function(){ /* empty */ }
  , Internal, GenericPromiseCapability, Wrapper;

var USE_NATIVE = !!function(){
  try {
    // correct subclassing with @@species support
    var promise     = $Promise.resolve(1)
      , FakePromise = (promise.constructor = {})[require('./_wks')('species')] = function(exec){ exec(empty, empty); };
    // unhandled rejections tracking support, NodeJS Promise without it fails @@species test
    return (isNode || typeof PromiseRejectionEvent == 'function') && promise.then(empty) instanceof FakePromise;
  } catch(e){ /* empty */ }
}();

// helpers
var sameConstructor = function(a, b){
  // with library wrapper special case
  return a === b || a === $Promise && b === Wrapper;
};
var isThenable = function(it){
  var then;
  return isObject(it) && typeof (then = it.then) == 'function' ? then : false;
};
var newPromiseCapability = function(C){
  return sameConstructor($Promise, C)
    ? new PromiseCapability(C)
    : new GenericPromiseCapability(C);
};
var PromiseCapability = GenericPromiseCapability = function(C){
  var resolve, reject;
  this.promise = new C(function($$resolve, $$reject){
    if(resolve !== undefined || reject !== undefined)throw TypeError('Bad Promise constructor');
    resolve = $$resolve;
    reject  = $$reject;
  });
  this.resolve = aFunction(resolve);
  this.reject  = aFunction(reject);
};
var perform = function(exec){
  try {
    exec();
  } catch(e){
    return {error: e};
  }
};
var notify = function(promise, isReject){
  if(promise._n)return;
  promise._n = true;
  var chain = promise._c;
  microtask(function(){
    var value = promise._v
      , ok    = promise._s == 1
      , i     = 0;
    var run = function(reaction){
      var handler = ok ? reaction.ok : reaction.fail
        , resolve = reaction.resolve
        , reject  = reaction.reject
        , domain  = reaction.domain
        , result, then;
      try {
        if(handler){
          if(!ok){
            if(promise._h == 2)onHandleUnhandled(promise);
            promise._h = 1;
          }
          if(handler === true)result = value;
          else {
            if(domain)domain.enter();
            result = handler(value);
            if(domain)domain.exit();
          }
          if(result === reaction.promise){
            reject(TypeError('Promise-chain cycle'));
          } else if(then = isThenable(result)){
            then.call(result, resolve, reject);
          } else resolve(result);
        } else reject(value);
      } catch(e){
        reject(e);
      }
    };
    while(chain.length > i)run(chain[i++]); // variable length - can't use forEach
    promise._c = [];
    promise._n = false;
    if(isReject && !promise._h)onUnhandled(promise);
  });
};
var onUnhandled = function(promise){
  task.call(global, function(){
    var value = promise._v
      , abrupt, handler, console;
    if(isUnhandled(promise)){
      abrupt = perform(function(){
        if(isNode){
          process.emit('unhandledRejection', value, promise);
        } else if(handler = global.onunhandledrejection){
          handler({promise: promise, reason: value});
        } else if((console = global.console) && console.error){
          console.error('Unhandled promise rejection', value);
        }
      });
      // Browsers should not trigger `rejectionHandled` event if it was handled here, NodeJS - should
      promise._h = isNode || isUnhandled(promise) ? 2 : 1;
    } promise._a = undefined;
    if(abrupt)throw abrupt.error;
  });
};
var isUnhandled = function(promise){
  if(promise._h == 1)return false;
  var chain = promise._a || promise._c
    , i     = 0
    , reaction;
  while(chain.length > i){
    reaction = chain[i++];
    if(reaction.fail || !isUnhandled(reaction.promise))return false;
  } return true;
};
var onHandleUnhandled = function(promise){
  task.call(global, function(){
    var handler;
    if(isNode){
      process.emit('rejectionHandled', promise);
    } else if(handler = global.onrejectionhandled){
      handler({promise: promise, reason: promise._v});
    }
  });
};
var $reject = function(value){
  var promise = this;
  if(promise._d)return;
  promise._d = true;
  promise = promise._w || promise; // unwrap
  promise._v = value;
  promise._s = 2;
  if(!promise._a)promise._a = promise._c.slice();
  notify(promise, true);
};
var $resolve = function(value){
  var promise = this
    , then;
  if(promise._d)return;
  promise._d = true;
  promise = promise._w || promise; // unwrap
  try {
    if(promise === value)throw TypeError("Promise can't be resolved itself");
    if(then = isThenable(value)){
      microtask(function(){
        var wrapper = {_w: promise, _d: false}; // wrap
        try {
          then.call(value, ctx($resolve, wrapper, 1), ctx($reject, wrapper, 1));
        } catch(e){
          $reject.call(wrapper, e);
        }
      });
    } else {
      promise._v = value;
      promise._s = 1;
      notify(promise, false);
    }
  } catch(e){
    $reject.call({_w: promise, _d: false}, e); // wrap
  }
};

// constructor polyfill
if(!USE_NATIVE){
  // 25.4.3.1 Promise(executor)
  $Promise = function Promise(executor){
    anInstance(this, $Promise, PROMISE, '_h');
    aFunction(executor);
    Internal.call(this);
    try {
      executor(ctx($resolve, this, 1), ctx($reject, this, 1));
    } catch(err){
      $reject.call(this, err);
    }
  };
  Internal = function Promise(executor){
    this._c = [];             // <- awaiting reactions
    this._a = undefined;      // <- checked in isUnhandled reactions
    this._s = 0;              // <- state
    this._d = false;          // <- done
    this._v = undefined;      // <- value
    this._h = 0;              // <- rejection state, 0 - default, 1 - handled, 2 - unhandled
    this._n = false;          // <- notify
  };
  Internal.prototype = require('./_redefine-all')($Promise.prototype, {
    // 25.4.5.3 Promise.prototype.then(onFulfilled, onRejected)
    then: function then(onFulfilled, onRejected){
      var reaction    = newPromiseCapability(speciesConstructor(this, $Promise));
      reaction.ok     = typeof onFulfilled == 'function' ? onFulfilled : true;
      reaction.fail   = typeof onRejected == 'function' && onRejected;
      reaction.domain = isNode ? process.domain : undefined;
      this._c.push(reaction);
      if(this._a)this._a.push(reaction);
      if(this._s)notify(this, false);
      return reaction.promise;
    },
    // 25.4.5.1 Promise.prototype.catch(onRejected)
    'catch': function(onRejected){
      return this.then(undefined, onRejected);
    }
  });
  PromiseCapability = function(){
    var promise  = new Internal;
    this.promise = promise;
    this.resolve = ctx($resolve, promise, 1);
    this.reject  = ctx($reject, promise, 1);
  };
}

$export($export.G + $export.W + $export.F * !USE_NATIVE, {Promise: $Promise});
require('./_set-to-string-tag')($Promise, PROMISE);
require('./_set-species')(PROMISE);
Wrapper = require('./_core')[PROMISE];

// statics
$export($export.S + $export.F * !USE_NATIVE, PROMISE, {
  // 25.4.4.5 Promise.reject(r)
  reject: function reject(r){
    var capability = newPromiseCapability(this)
      , $$reject   = capability.reject;
    $$reject(r);
    return capability.promise;
  }
});
$export($export.S + $export.F * (LIBRARY || !USE_NATIVE), PROMISE, {
  // 25.4.4.6 Promise.resolve(x)
  resolve: function resolve(x){
    // instanceof instead of internal slot check because we should fix it without replacement native Promise core
    if(x instanceof $Promise && sameConstructor(x.constructor, this))return x;
    var capability = newPromiseCapability(this)
      , $$resolve  = capability.resolve;
    $$resolve(x);
    return capability.promise;
  }
});
$export($export.S + $export.F * !(USE_NATIVE && require('./_iter-detect')(function(iter){
  $Promise.all(iter)['catch'](empty);
})), PROMISE, {
  // 25.4.4.1 Promise.all(iterable)
  all: function all(iterable){
    var C          = this
      , capability = newPromiseCapability(C)
      , resolve    = capability.resolve
      , reject     = capability.reject;
    var abrupt = perform(function(){
      var values    = []
        , index     = 0
        , remaining = 1;
      forOf(iterable, false, function(promise){
        var $index        = index++
          , alreadyCalled = false;
        values.push(undefined);
        remaining++;
        C.resolve(promise).then(function(value){
          if(alreadyCalled)return;
          alreadyCalled  = true;
          values[$index] = value;
          --remaining || resolve(values);
        }, reject);
      });
      --remaining || resolve(values);
    });
    if(abrupt)reject(abrupt.error);
    return capability.promise;
  },
  // 25.4.4.4 Promise.race(iterable)
  race: function race(iterable){
    var C          = this
      , capability = newPromiseCapability(C)
      , reject     = capability.reject;
    var abrupt = perform(function(){
      forOf(iterable, false, function(promise){
        C.resolve(promise).then(capability.resolve, reject);
      });
    });
    if(abrupt)reject(abrupt.error);
    return capability.promise;
  }
});
},{"./_a-function":3,"./_an-instance":6,"./_an-object":7,"./_classof":16,"./_core":22,"./_ctx":23,"./_export":30,"./_for-of":35,"./_global":36,"./_is-object":47,"./_iter-detect":52,"./_library":56,"./_microtask":62,"./_redefine-all":84,"./_set-proto":88,"./_set-species":89,"./_set-to-string-tag":90,"./_species-constructor":93,"./_task":102,"./_wks":113}],196:[function(require,module,exports){
// 26.1.1 Reflect.apply(target, thisArgument, argumentsList)
var $export = require('./_export')
  , _apply  = Function.apply;

$export($export.S, 'Reflect', {
  apply: function apply(target, thisArgument, argumentsList){
    return _apply.call(target, thisArgument, argumentsList);
  }
});
},{"./_export":30}],197:[function(require,module,exports){
// 26.1.2 Reflect.construct(target, argumentsList [, newTarget])
var $export   = require('./_export')
  , create    = require('./_object-create')
  , aFunction = require('./_a-function')
  , anObject  = require('./_an-object')
  , isObject  = require('./_is-object')
  , bind      = require('./_bind');

// MS Edge supports only 2 arguments
// FF Nightly sets third argument as `new.target`, but does not create `this` from it
$export($export.S + $export.F * require('./_fails')(function(){
  function F(){}
  return !(Reflect.construct(function(){}, [], F) instanceof F);
}), 'Reflect', {
  construct: function construct(Target, args /*, newTarget*/){
    aFunction(Target);
    var newTarget = arguments.length < 3 ? Target : aFunction(arguments[2]);
    if(Target == newTarget){
      // w/o altered newTarget, optimization for 0-4 arguments
      if(args != undefined)switch(anObject(args).length){
        case 0: return new Target;
        case 1: return new Target(args[0]);
        case 2: return new Target(args[0], args[1]);
        case 3: return new Target(args[0], args[1], args[2]);
        case 4: return new Target(args[0], args[1], args[2], args[3]);
      }
      // w/o altered newTarget, lot of arguments case
      var $args = [null];
      $args.push.apply($args, args);
      return new (bind.apply(Target, $args));
    }
    // with altered newTarget, not support built-in constructors
    var proto    = newTarget.prototype
      , instance = create(isObject(proto) ? proto : Object.prototype)
      , result   = Function.apply.call(Target, instance, args);
    return isObject(result) ? result : instance;
  }
});
},{"./_a-function":3,"./_an-object":7,"./_bind":15,"./_export":30,"./_fails":32,"./_is-object":47,"./_object-create":64}],198:[function(require,module,exports){
// 26.1.3 Reflect.defineProperty(target, propertyKey, attributes)
var dP          = require('./_object-dp')
  , $export     = require('./_export')
  , anObject    = require('./_an-object')
  , toPrimitive = require('./_to-primitive');

// MS Edge has broken Reflect.defineProperty - throwing instead of returning false
$export($export.S + $export.F * require('./_fails')(function(){
  Reflect.defineProperty(dP.f({}, 1, {value: 1}), 1, {value: 2});
}), 'Reflect', {
  defineProperty: function defineProperty(target, propertyKey, attributes){
    anObject(target);
    propertyKey = toPrimitive(propertyKey, true);
    anObject(attributes);
    try {
      dP.f(target, propertyKey, attributes);
      return true;
    } catch(e){
      return false;
    }
  }
});
},{"./_an-object":7,"./_export":30,"./_fails":32,"./_object-dp":65,"./_to-primitive":108}],199:[function(require,module,exports){
// 26.1.4 Reflect.deleteProperty(target, propertyKey)
var $export  = require('./_export')
  , gOPD     = require('./_object-gopd').f
  , anObject = require('./_an-object');

$export($export.S, 'Reflect', {
  deleteProperty: function deleteProperty(target, propertyKey){
    var desc = gOPD(anObject(target), propertyKey);
    return desc && !desc.configurable ? false : delete target[propertyKey];
  }
});
},{"./_an-object":7,"./_export":30,"./_object-gopd":68}],200:[function(require,module,exports){
'use strict';
// 26.1.5 Reflect.enumerate(target)
var $export  = require('./_export')
  , anObject = require('./_an-object');
var Enumerate = function(iterated){
  this._t = anObject(iterated); // target
  this._i = 0;                  // next index
  var keys = this._k = []       // keys
    , key;
  for(key in iterated)keys.push(key);
};
require('./_iter-create')(Enumerate, 'Object', function(){
  var that = this
    , keys = that._k
    , key;
  do {
    if(that._i >= keys.length)return {value: undefined, done: true};
  } while(!((key = keys[that._i++]) in that._t));
  return {value: key, done: false};
});

$export($export.S, 'Reflect', {
  enumerate: function enumerate(target){
    return new Enumerate(target);
  }
});
},{"./_an-object":7,"./_export":30,"./_iter-create":50}],201:[function(require,module,exports){
// 26.1.7 Reflect.getOwnPropertyDescriptor(target, propertyKey)
var gOPD     = require('./_object-gopd')
  , $export  = require('./_export')
  , anObject = require('./_an-object');

$export($export.S, 'Reflect', {
  getOwnPropertyDescriptor: function getOwnPropertyDescriptor(target, propertyKey){
    return gOPD.f(anObject(target), propertyKey);
  }
});
},{"./_an-object":7,"./_export":30,"./_object-gopd":68}],202:[function(require,module,exports){
// 26.1.8 Reflect.getPrototypeOf(target)
var $export  = require('./_export')
  , getProto = require('./_object-gpo')
  , anObject = require('./_an-object');

$export($export.S, 'Reflect', {
  getPrototypeOf: function getPrototypeOf(target){
    return getProto(anObject(target));
  }
});
},{"./_an-object":7,"./_export":30,"./_object-gpo":72}],203:[function(require,module,exports){
// 26.1.6 Reflect.get(target, propertyKey [, receiver])
var gOPD           = require('./_object-gopd')
  , getPrototypeOf = require('./_object-gpo')
  , has            = require('./_has')
  , $export        = require('./_export')
  , isObject       = require('./_is-object')
  , anObject       = require('./_an-object');

function get(target, propertyKey/*, receiver*/){
  var receiver = arguments.length < 3 ? target : arguments[2]
    , desc, proto;
  if(anObject(target) === receiver)return target[propertyKey];
  if(desc = gOPD.f(target, propertyKey))return has(desc, 'value')
    ? desc.value
    : desc.get !== undefined
      ? desc.get.call(receiver)
      : undefined;
  if(isObject(proto = getPrototypeOf(target)))return get(proto, propertyKey, receiver);
}

$export($export.S, 'Reflect', {get: get});
},{"./_an-object":7,"./_export":30,"./_has":37,"./_is-object":47,"./_object-gopd":68,"./_object-gpo":72}],204:[function(require,module,exports){
// 26.1.9 Reflect.has(target, propertyKey)
var $export = require('./_export');

$export($export.S, 'Reflect', {
  has: function has(target, propertyKey){
    return propertyKey in target;
  }
});
},{"./_export":30}],205:[function(require,module,exports){
// 26.1.10 Reflect.isExtensible(target)
var $export       = require('./_export')
  , anObject      = require('./_an-object')
  , $isExtensible = Object.isExtensible;

$export($export.S, 'Reflect', {
  isExtensible: function isExtensible(target){
    anObject(target);
    return $isExtensible ? $isExtensible(target) : true;
  }
});
},{"./_an-object":7,"./_export":30}],206:[function(require,module,exports){
// 26.1.11 Reflect.ownKeys(target)
var $export = require('./_export');

$export($export.S, 'Reflect', {ownKeys: require('./_own-keys')});
},{"./_export":30,"./_own-keys":78}],207:[function(require,module,exports){
// 26.1.12 Reflect.preventExtensions(target)
var $export            = require('./_export')
  , anObject           = require('./_an-object')
  , $preventExtensions = Object.preventExtensions;

$export($export.S, 'Reflect', {
  preventExtensions: function preventExtensions(target){
    anObject(target);
    try {
      if($preventExtensions)$preventExtensions(target);
      return true;
    } catch(e){
      return false;
    }
  }
});
},{"./_an-object":7,"./_export":30}],208:[function(require,module,exports){
// 26.1.14 Reflect.setPrototypeOf(target, proto)
var $export  = require('./_export')
  , setProto = require('./_set-proto');

if(setProto)$export($export.S, 'Reflect', {
  setPrototypeOf: function setPrototypeOf(target, proto){
    setProto.check(target, proto);
    try {
      setProto.set(target, proto);
      return true;
    } catch(e){
      return false;
    }
  }
});
},{"./_export":30,"./_set-proto":88}],209:[function(require,module,exports){
// 26.1.13 Reflect.set(target, propertyKey, V [, receiver])
var dP             = require('./_object-dp')
  , gOPD           = require('./_object-gopd')
  , getPrototypeOf = require('./_object-gpo')
  , has            = require('./_has')
  , $export        = require('./_export')
  , createDesc     = require('./_property-desc')
  , anObject       = require('./_an-object')
  , isObject       = require('./_is-object');

function set(target, propertyKey, V/*, receiver*/){
  var receiver = arguments.length < 4 ? target : arguments[3]
    , ownDesc  = gOPD.f(anObject(target), propertyKey)
    , existingDescriptor, proto;
  if(!ownDesc){
    if(isObject(proto = getPrototypeOf(target))){
      return set(proto, propertyKey, V, receiver);
    }
    ownDesc = createDesc(0);
  }
  if(has(ownDesc, 'value')){
    if(ownDesc.writable === false || !isObject(receiver))return false;
    existingDescriptor = gOPD.f(receiver, propertyKey) || createDesc(0);
    existingDescriptor.value = V;
    dP.f(receiver, propertyKey, existingDescriptor);
    return true;
  }
  return ownDesc.set === undefined ? false : (ownDesc.set.call(receiver, V), true);
}

$export($export.S, 'Reflect', {set: set});
},{"./_an-object":7,"./_export":30,"./_has":37,"./_is-object":47,"./_object-dp":65,"./_object-gopd":68,"./_object-gpo":72,"./_property-desc":83}],210:[function(require,module,exports){
var global            = require('./_global')
  , inheritIfRequired = require('./_inherit-if-required')
  , dP                = require('./_object-dp').f
  , gOPN              = require('./_object-gopn').f
  , isRegExp          = require('./_is-regexp')
  , $flags            = require('./_flags')
  , $RegExp           = global.RegExp
  , Base              = $RegExp
  , proto             = $RegExp.prototype
  , re1               = /a/g
  , re2               = /a/g
  // "new" creates a new object, old webkit buggy here
  , CORRECT_NEW       = new $RegExp(re1) !== re1;

if(require('./_descriptors') && (!CORRECT_NEW || require('./_fails')(function(){
  re2[require('./_wks')('match')] = false;
  // RegExp constructor can alter flags and IsRegExp works correct with @@match
  return $RegExp(re1) != re1 || $RegExp(re2) == re2 || $RegExp(re1, 'i') != '/a/i';
}))){
  $RegExp = function RegExp(p, f){
    var tiRE = this instanceof $RegExp
      , piRE = isRegExp(p)
      , fiU  = f === undefined;
    return !tiRE && piRE && p.constructor === $RegExp && fiU ? p
      : inheritIfRequired(CORRECT_NEW
        ? new Base(piRE && !fiU ? p.source : p, f)
        : Base((piRE = p instanceof $RegExp) ? p.source : p, piRE && fiU ? $flags.call(p) : f)
      , tiRE ? this : proto, $RegExp);
  };
  var proxy = function(key){
    key in $RegExp || dP($RegExp, key, {
      configurable: true,
      get: function(){ return Base[key]; },
      set: function(it){ Base[key] = it; }
    });
  };
  for(var keys = gOPN(Base), i = 0; keys.length > i; )proxy(keys[i++]);
  proto.constructor = $RegExp;
  $RegExp.prototype = proto;
  require('./_redefine')(global, 'RegExp', $RegExp);
}

require('./_set-species')('RegExp');
},{"./_descriptors":26,"./_fails":32,"./_flags":34,"./_global":36,"./_inherit-if-required":41,"./_is-regexp":48,"./_object-dp":65,"./_object-gopn":70,"./_redefine":85,"./_set-species":89,"./_wks":113}],211:[function(require,module,exports){
// 21.2.5.3 get RegExp.prototype.flags()
if(require('./_descriptors') && /./g.flags != 'g')require('./_object-dp').f(RegExp.prototype, 'flags', {
  configurable: true,
  get: require('./_flags')
});
},{"./_descriptors":26,"./_flags":34,"./_object-dp":65}],212:[function(require,module,exports){
// @@match logic
require('./_fix-re-wks')('match', 1, function(defined, MATCH, $match){
  // 21.1.3.11 String.prototype.match(regexp)
  return [function match(regexp){
    'use strict';
    var O  = defined(this)
      , fn = regexp == undefined ? undefined : regexp[MATCH];
    return fn !== undefined ? fn.call(regexp, O) : new RegExp(regexp)[MATCH](String(O));
  }, $match];
});
},{"./_fix-re-wks":33}],213:[function(require,module,exports){
// @@replace logic
require('./_fix-re-wks')('replace', 2, function(defined, REPLACE, $replace){
  // 21.1.3.14 String.prototype.replace(searchValue, replaceValue)
  return [function replace(searchValue, replaceValue){
    'use strict';
    var O  = defined(this)
      , fn = searchValue == undefined ? undefined : searchValue[REPLACE];
    return fn !== undefined
      ? fn.call(searchValue, O, replaceValue)
      : $replace.call(String(O), searchValue, replaceValue);
  }, $replace];
});
},{"./_fix-re-wks":33}],214:[function(require,module,exports){
// @@search logic
require('./_fix-re-wks')('search', 1, function(defined, SEARCH, $search){
  // 21.1.3.15 String.prototype.search(regexp)
  return [function search(regexp){
    'use strict';
    var O  = defined(this)
      , fn = regexp == undefined ? undefined : regexp[SEARCH];
    return fn !== undefined ? fn.call(regexp, O) : new RegExp(regexp)[SEARCH](String(O));
  }, $search];
});
},{"./_fix-re-wks":33}],215:[function(require,module,exports){
// @@split logic
require('./_fix-re-wks')('split', 2, function(defined, SPLIT, $split){
  'use strict';
  var isRegExp   = require('./_is-regexp')
    , _split     = $split
    , $push      = [].push
    , $SPLIT     = 'split'
    , LENGTH     = 'length'
    , LAST_INDEX = 'lastIndex';
  if(
    'abbc'[$SPLIT](/(b)*/)[1] == 'c' ||
    'test'[$SPLIT](/(?:)/, -1)[LENGTH] != 4 ||
    'ab'[$SPLIT](/(?:ab)*/)[LENGTH] != 2 ||
    '.'[$SPLIT](/(.?)(.?)/)[LENGTH] != 4 ||
    '.'[$SPLIT](/()()/)[LENGTH] > 1 ||
    ''[$SPLIT](/.?/)[LENGTH]
  ){
    var NPCG = /()??/.exec('')[1] === undefined; // nonparticipating capturing group
    // based on es5-shim implementation, need to rework it
    $split = function(separator, limit){
      var string = String(this);
      if(separator === undefined && limit === 0)return [];
      // If `separator` is not a regex, use native split
      if(!isRegExp(separator))return _split.call(string, separator, limit);
      var output = [];
      var flags = (separator.ignoreCase ? 'i' : '') +
                  (separator.multiline ? 'm' : '') +
                  (separator.unicode ? 'u' : '') +
                  (separator.sticky ? 'y' : '');
      var lastLastIndex = 0;
      var splitLimit = limit === undefined ? 4294967295 : limit >>> 0;
      // Make `global` and avoid `lastIndex` issues by working with a copy
      var separatorCopy = new RegExp(separator.source, flags + 'g');
      var separator2, match, lastIndex, lastLength, i;
      // Doesn't need flags gy, but they don't hurt
      if(!NPCG)separator2 = new RegExp('^' + separatorCopy.source + '$(?!\\s)', flags);
      while(match = separatorCopy.exec(string)){
        // `separatorCopy.lastIndex` is not reliable cross-browser
        lastIndex = match.index + match[0][LENGTH];
        if(lastIndex > lastLastIndex){
          output.push(string.slice(lastLastIndex, match.index));
          // Fix browsers whose `exec` methods don't consistently return `undefined` for NPCG
          if(!NPCG && match[LENGTH] > 1)match[0].replace(separator2, function(){
            for(i = 1; i < arguments[LENGTH] - 2; i++)if(arguments[i] === undefined)match[i] = undefined;
          });
          if(match[LENGTH] > 1 && match.index < string[LENGTH])$push.apply(output, match.slice(1));
          lastLength = match[0][LENGTH];
          lastLastIndex = lastIndex;
          if(output[LENGTH] >= splitLimit)break;
        }
        if(separatorCopy[LAST_INDEX] === match.index)separatorCopy[LAST_INDEX]++; // Avoid an infinite loop
      }
      if(lastLastIndex === string[LENGTH]){
        if(lastLength || !separatorCopy.test(''))output.push('');
      } else output.push(string.slice(lastLastIndex));
      return output[LENGTH] > splitLimit ? output.slice(0, splitLimit) : output;
    };
  // Chakra, V8
  } else if('0'[$SPLIT](undefined, 0)[LENGTH]){
    $split = function(separator, limit){
      return separator === undefined && limit === 0 ? [] : _split.call(this, separator, limit);
    };
  }
  // 21.1.3.17 String.prototype.split(separator, limit)
  return [function split(separator, limit){
    var O  = defined(this)
      , fn = separator == undefined ? undefined : separator[SPLIT];
    return fn !== undefined ? fn.call(separator, O, limit) : $split.call(String(O), separator, limit);
  }, $split];
});
},{"./_fix-re-wks":33,"./_is-regexp":48}],216:[function(require,module,exports){
'use strict';
require('./es6.regexp.flags');
var anObject    = require('./_an-object')
  , $flags      = require('./_flags')
  , DESCRIPTORS = require('./_descriptors')
  , TO_STRING   = 'toString'
  , $toString   = /./[TO_STRING];

var define = function(fn){
  require('./_redefine')(RegExp.prototype, TO_STRING, fn, true);
};

// 21.2.5.14 RegExp.prototype.toString()
if(require('./_fails')(function(){ return $toString.call({source: 'a', flags: 'b'}) != '/a/b'; })){
  define(function toString(){
    var R = anObject(this);
    return '/'.concat(R.source, '/',
      'flags' in R ? R.flags : !DESCRIPTORS && R instanceof RegExp ? $flags.call(R) : undefined);
  });
// FF44- RegExp#toString has a wrong name
} else if($toString.name != TO_STRING){
  define(function toString(){
    return $toString.call(this);
  });
}
},{"./_an-object":7,"./_descriptors":26,"./_fails":32,"./_flags":34,"./_redefine":85,"./es6.regexp.flags":211}],217:[function(require,module,exports){
'use strict';
var strong = require('./_collection-strong');

// 23.2 Set Objects
module.exports = require('./_collection')('Set', function(get){
  return function Set(){ return get(this, arguments.length > 0 ? arguments[0] : undefined); };
}, {
  // 23.2.3.1 Set.prototype.add(value)
  add: function add(value){
    return strong.def(this, value = value === 0 ? 0 : value, value);
  }
}, strong);
},{"./_collection":21,"./_collection-strong":18}],218:[function(require,module,exports){
'use strict';
// B.2.3.2 String.prototype.anchor(name)
require('./_string-html')('anchor', function(createHTML){
  return function anchor(name){
    return createHTML(this, 'a', 'name', name);
  }
});
},{"./_string-html":97}],219:[function(require,module,exports){
'use strict';
// B.2.3.3 String.prototype.big()
require('./_string-html')('big', function(createHTML){
  return function big(){
    return createHTML(this, 'big', '', '');
  }
});
},{"./_string-html":97}],220:[function(require,module,exports){
'use strict';
// B.2.3.4 String.prototype.blink()
require('./_string-html')('blink', function(createHTML){
  return function blink(){
    return createHTML(this, 'blink', '', '');
  }
});
},{"./_string-html":97}],221:[function(require,module,exports){
'use strict';
// B.2.3.5 String.prototype.bold()
require('./_string-html')('bold', function(createHTML){
  return function bold(){
    return createHTML(this, 'b', '', '');
  }
});
},{"./_string-html":97}],222:[function(require,module,exports){
'use strict';
var $export = require('./_export')
  , $at     = require('./_string-at')(false);
$export($export.P, 'String', {
  // 21.1.3.3 String.prototype.codePointAt(pos)
  codePointAt: function codePointAt(pos){
    return $at(this, pos);
  }
});
},{"./_export":30,"./_string-at":95}],223:[function(require,module,exports){
// 21.1.3.6 String.prototype.endsWith(searchString [, endPosition])
'use strict';
var $export   = require('./_export')
  , toLength  = require('./_to-length')
  , context   = require('./_string-context')
  , ENDS_WITH = 'endsWith'
  , $endsWith = ''[ENDS_WITH];

$export($export.P + $export.F * require('./_fails-is-regexp')(ENDS_WITH), 'String', {
  endsWith: function endsWith(searchString /*, endPosition = @length */){
    var that = context(this, searchString, ENDS_WITH)
      , endPosition = arguments.length > 1 ? arguments[1] : undefined
      , len    = toLength(that.length)
      , end    = endPosition === undefined ? len : Math.min(toLength(endPosition), len)
      , search = String(searchString);
    return $endsWith
      ? $endsWith.call(that, search, end)
      : that.slice(end - search.length, end) === search;
  }
});
},{"./_export":30,"./_fails-is-regexp":31,"./_string-context":96,"./_to-length":106}],224:[function(require,module,exports){
'use strict';
// B.2.3.6 String.prototype.fixed()
require('./_string-html')('fixed', function(createHTML){
  return function fixed(){
    return createHTML(this, 'tt', '', '');
  }
});
},{"./_string-html":97}],225:[function(require,module,exports){
'use strict';
// B.2.3.7 String.prototype.fontcolor(color)
require('./_string-html')('fontcolor', function(createHTML){
  return function fontcolor(color){
    return createHTML(this, 'font', 'color', color);
  }
});
},{"./_string-html":97}],226:[function(require,module,exports){
'use strict';
// B.2.3.8 String.prototype.fontsize(size)
require('./_string-html')('fontsize', function(createHTML){
  return function fontsize(size){
    return createHTML(this, 'font', 'size', size);
  }
});
},{"./_string-html":97}],227:[function(require,module,exports){
var $export        = require('./_export')
  , toIndex        = require('./_to-index')
  , fromCharCode   = String.fromCharCode
  , $fromCodePoint = String.fromCodePoint;

// length should be 1, old FF problem
$export($export.S + $export.F * (!!$fromCodePoint && $fromCodePoint.length != 1), 'String', {
  // 21.1.2.2 String.fromCodePoint(...codePoints)
  fromCodePoint: function fromCodePoint(x){ // eslint-disable-line no-unused-vars
    var res  = []
      , aLen = arguments.length
      , i    = 0
      , code;
    while(aLen > i){
      code = +arguments[i++];
      if(toIndex(code, 0x10ffff) !== code)throw RangeError(code + ' is not a valid code point');
      res.push(code < 0x10000
        ? fromCharCode(code)
        : fromCharCode(((code -= 0x10000) >> 10) + 0xd800, code % 0x400 + 0xdc00)
      );
    } return res.join('');
  }
});
},{"./_export":30,"./_to-index":103}],228:[function(require,module,exports){
// 21.1.3.7 String.prototype.includes(searchString, position = 0)
'use strict';
var $export  = require('./_export')
  , context  = require('./_string-context')
  , INCLUDES = 'includes';

$export($export.P + $export.F * require('./_fails-is-regexp')(INCLUDES), 'String', {
  includes: function includes(searchString /*, position = 0 */){
    return !!~context(this, searchString, INCLUDES)
      .indexOf(searchString, arguments.length > 1 ? arguments[1] : undefined);
  }
});
},{"./_export":30,"./_fails-is-regexp":31,"./_string-context":96}],229:[function(require,module,exports){
'use strict';
// B.2.3.9 String.prototype.italics()
require('./_string-html')('italics', function(createHTML){
  return function italics(){
    return createHTML(this, 'i', '', '');
  }
});
},{"./_string-html":97}],230:[function(require,module,exports){
'use strict';
var $at  = require('./_string-at')(true);

// 21.1.3.27 String.prototype[@@iterator]()
require('./_iter-define')(String, 'String', function(iterated){
  this._t = String(iterated); // target
  this._i = 0;                // next index
// 21.1.5.2.1 %StringIteratorPrototype%.next()
}, function(){
  var O     = this._t
    , index = this._i
    , point;
  if(index >= O.length)return {value: undefined, done: true};
  point = $at(O, index);
  this._i += point.length;
  return {value: point, done: false};
});
},{"./_iter-define":51,"./_string-at":95}],231:[function(require,module,exports){
'use strict';
// B.2.3.10 String.prototype.link(url)
require('./_string-html')('link', function(createHTML){
  return function link(url){
    return createHTML(this, 'a', 'href', url);
  }
});
},{"./_string-html":97}],232:[function(require,module,exports){
var $export   = require('./_export')
  , toIObject = require('./_to-iobject')
  , toLength  = require('./_to-length');

$export($export.S, 'String', {
  // 21.1.2.4 String.raw(callSite, ...substitutions)
  raw: function raw(callSite){
    var tpl  = toIObject(callSite.raw)
      , len  = toLength(tpl.length)
      , aLen = arguments.length
      , res  = []
      , i    = 0;
    while(len > i){
      res.push(String(tpl[i++]));
      if(i < aLen)res.push(String(arguments[i]));
    } return res.join('');
  }
});
},{"./_export":30,"./_to-iobject":105,"./_to-length":106}],233:[function(require,module,exports){
var $export = require('./_export');

$export($export.P, 'String', {
  // 21.1.3.13 String.prototype.repeat(count)
  repeat: require('./_string-repeat')
});
},{"./_export":30,"./_string-repeat":99}],234:[function(require,module,exports){
'use strict';
// B.2.3.11 String.prototype.small()
require('./_string-html')('small', function(createHTML){
  return function small(){
    return createHTML(this, 'small', '', '');
  }
});
},{"./_string-html":97}],235:[function(require,module,exports){
// 21.1.3.18 String.prototype.startsWith(searchString [, position ])
'use strict';
var $export     = require('./_export')
  , toLength    = require('./_to-length')
  , context     = require('./_string-context')
  , STARTS_WITH = 'startsWith'
  , $startsWith = ''[STARTS_WITH];

$export($export.P + $export.F * require('./_fails-is-regexp')(STARTS_WITH), 'String', {
  startsWith: function startsWith(searchString /*, position = 0 */){
    var that   = context(this, searchString, STARTS_WITH)
      , index  = toLength(Math.min(arguments.length > 1 ? arguments[1] : undefined, that.length))
      , search = String(searchString);
    return $startsWith
      ? $startsWith.call(that, search, index)
      : that.slice(index, index + search.length) === search;
  }
});
},{"./_export":30,"./_fails-is-regexp":31,"./_string-context":96,"./_to-length":106}],236:[function(require,module,exports){
'use strict';
// B.2.3.12 String.prototype.strike()
require('./_string-html')('strike', function(createHTML){
  return function strike(){
    return createHTML(this, 'strike', '', '');
  }
});
},{"./_string-html":97}],237:[function(require,module,exports){
'use strict';
// B.2.3.13 String.prototype.sub()
require('./_string-html')('sub', function(createHTML){
  return function sub(){
    return createHTML(this, 'sub', '', '');
  }
});
},{"./_string-html":97}],238:[function(require,module,exports){
'use strict';
// B.2.3.14 String.prototype.sup()
require('./_string-html')('sup', function(createHTML){
  return function sup(){
    return createHTML(this, 'sup', '', '');
  }
});
},{"./_string-html":97}],239:[function(require,module,exports){
'use strict';
// 21.1.3.25 String.prototype.trim()
require('./_string-trim')('trim', function($trim){
  return function trim(){
    return $trim(this, 3);
  };
});
},{"./_string-trim":100}],240:[function(require,module,exports){
'use strict';
// ECMAScript 6 symbols shim
var global         = require('./_global')
  , core           = require('./_core')
  , has            = require('./_has')
  , DESCRIPTORS    = require('./_descriptors')
  , $export        = require('./_export')
  , redefine       = require('./_redefine')
  , META           = require('./_meta').KEY
  , $fails         = require('./_fails')
  , shared         = require('./_shared')
  , setToStringTag = require('./_set-to-string-tag')
  , uid            = require('./_uid')
  , wks            = require('./_wks')
  , keyOf          = require('./_keyof')
  , enumKeys       = require('./_enum-keys')
  , isArray        = require('./_is-array')
  , anObject       = require('./_an-object')
  , toIObject      = require('./_to-iobject')
  , toPrimitive    = require('./_to-primitive')
  , createDesc     = require('./_property-desc')
  , _create        = require('./_object-create')
  , gOPNExt        = require('./_object-gopn-ext')
  , $GOPD          = require('./_object-gopd')
  , $DP            = require('./_object-dp')
  , gOPD           = $GOPD.f
  , dP             = $DP.f
  , gOPN           = gOPNExt.f
  , $Symbol        = global.Symbol
  , $JSON          = global.JSON
  , _stringify     = $JSON && $JSON.stringify
  , setter         = false
  , PROTOTYPE      = 'prototype'
  , HIDDEN         = wks('_hidden')
  , TO_PRIMITIVE   = wks('toPrimitive')
  , isEnum         = {}.propertyIsEnumerable
  , SymbolRegistry = shared('symbol-registry')
  , AllSymbols     = shared('symbols')
  , ObjectProto    = Object[PROTOTYPE]
  , USE_NATIVE     = typeof $Symbol == 'function'
  , QObject        = global.QObject;

// fallback for old Android, https://code.google.com/p/v8/issues/detail?id=687
var setSymbolDesc = DESCRIPTORS && $fails(function(){
  return _create(dP({}, 'a', {
    get: function(){ return dP(this, 'a', {value: 7}).a; }
  })).a != 7;
}) ? function(it, key, D){
  var protoDesc = gOPD(ObjectProto, key);
  if(protoDesc)delete ObjectProto[key];
  dP(it, key, D);
  if(protoDesc && it !== ObjectProto)dP(ObjectProto, key, protoDesc);
} : dP;

var wrap = function(tag){
  var sym = AllSymbols[tag] = _create($Symbol[PROTOTYPE]);
  sym._k = tag;
  DESCRIPTORS && setter && setSymbolDesc(ObjectProto, tag, {
    configurable: true,
    set: function(value){
      if(has(this, HIDDEN) && has(this[HIDDEN], tag))this[HIDDEN][tag] = false;
      setSymbolDesc(this, tag, createDesc(1, value));
    }
  });
  return sym;
};

var isSymbol = USE_NATIVE && typeof $Symbol.iterator == 'symbol' ? function(it){
  return typeof it == 'symbol';
} : function(it){
  return it instanceof $Symbol;
};

var $defineProperty = function defineProperty(it, key, D){
  anObject(it);
  key = toPrimitive(key, true);
  anObject(D);
  if(has(AllSymbols, key)){
    if(!D.enumerable){
      if(!has(it, HIDDEN))dP(it, HIDDEN, createDesc(1, {}));
      it[HIDDEN][key] = true;
    } else {
      if(has(it, HIDDEN) && it[HIDDEN][key])it[HIDDEN][key] = false;
      D = _create(D, {enumerable: createDesc(0, false)});
    } return setSymbolDesc(it, key, D);
  } return dP(it, key, D);
};
var $defineProperties = function defineProperties(it, P){
  anObject(it);
  var keys = enumKeys(P = toIObject(P))
    , i    = 0
    , l = keys.length
    , key;
  while(l > i)$defineProperty(it, key = keys[i++], P[key]);
  return it;
};
var $create = function create(it, P){
  return P === undefined ? _create(it) : $defineProperties(_create(it), P);
};
var $propertyIsEnumerable = function propertyIsEnumerable(key){
  var E = isEnum.call(this, key = toPrimitive(key, true));
  return E || !has(this, key) || !has(AllSymbols, key) || has(this, HIDDEN) && this[HIDDEN][key] ? E : true;
};
var $getOwnPropertyDescriptor = function getOwnPropertyDescriptor(it, key){
  var D = gOPD(it = toIObject(it), key = toPrimitive(key, true));
  if(D && has(AllSymbols, key) && !(has(it, HIDDEN) && it[HIDDEN][key]))D.enumerable = true;
  return D;
};
var $getOwnPropertyNames = function getOwnPropertyNames(it){
  var names  = gOPN(toIObject(it))
    , result = []
    , i      = 0
    , key;
  while(names.length > i)if(!has(AllSymbols, key = names[i++]) && key != HIDDEN && key != META)result.push(key);
  return result;
};
var $getOwnPropertySymbols = function getOwnPropertySymbols(it){
  var names  = gOPN(toIObject(it))
    , result = []
    , i      = 0
    , key;
  while(names.length > i)if(has(AllSymbols, key = names[i++]))result.push(AllSymbols[key]);
  return result;
};
var $stringify = function stringify(it){
  if(it === undefined || isSymbol(it))return; // IE8 returns string on undefined
  var args = [it]
    , i    = 1
    , replacer, $replacer;
  while(arguments.length > i)args.push(arguments[i++]);
  replacer = args[1];
  if(typeof replacer == 'function')$replacer = replacer;
  if($replacer || !isArray(replacer))replacer = function(key, value){
    if($replacer)value = $replacer.call(this, key, value);
    if(!isSymbol(value))return value;
  };
  args[1] = replacer;
  return _stringify.apply($JSON, args);
};
var BUGGY_JSON = $fails(function(){
  var S = $Symbol();
  // MS Edge converts symbol values to JSON as {}
  // WebKit converts symbol values to JSON as null
  // V8 throws on boxed symbols
  return _stringify([S]) != '[null]' || _stringify({a: S}) != '{}' || _stringify(Object(S)) != '{}';
});

// 19.4.1.1 Symbol([description])
if(!USE_NATIVE){
  $Symbol = function Symbol(){
    if(this instanceof $Symbol)throw TypeError('Symbol is not a constructor!');
    return wrap(uid(arguments.length > 0 ? arguments[0] : undefined));
  };
  redefine($Symbol[PROTOTYPE], 'toString', function toString(){
    return this._k;
  });

  $GOPD.f = $getOwnPropertyDescriptor;
  $DP.f   = $defineProperty;
  require('./_object-gopn').f = gOPNExt.f = $getOwnPropertyNames;
  require('./_object-pie').f  = $propertyIsEnumerable
  require('./_object-gops').f = $getOwnPropertySymbols;

  if(DESCRIPTORS && !require('./_library')){
    redefine(ObjectProto, 'propertyIsEnumerable', $propertyIsEnumerable, true);
  }
}

$export($export.G + $export.W + $export.F * !USE_NATIVE, {Symbol: $Symbol});

// 19.4.2.2 Symbol.hasInstance
// 19.4.2.3 Symbol.isConcatSpreadable
// 19.4.2.4 Symbol.iterator
// 19.4.2.6 Symbol.match
// 19.4.2.8 Symbol.replace
// 19.4.2.9 Symbol.search
// 19.4.2.10 Symbol.species
// 19.4.2.11 Symbol.split
// 19.4.2.12 Symbol.toPrimitive
// 19.4.2.13 Symbol.toStringTag
// 19.4.2.14 Symbol.unscopables
for(var symbols = (
  'hasInstance,isConcatSpreadable,iterator,match,replace,search,species,split,toPrimitive,toStringTag,unscopables'
).split(','), i = 0; symbols.length > i; ){
  var key     = symbols[i++]
    , Wrapper = core.Symbol
    , sym     = wks(key);
  if(!(key in Wrapper))dP(Wrapper, key, {value: USE_NATIVE ? sym : wrap(sym)});
};

// Don't use setters in Qt Script, https://github.com/zloirock/core-js/issues/173
if(!QObject || !QObject[PROTOTYPE] || !QObject[PROTOTYPE].findChild)setter = true;

$export($export.S + $export.F * !USE_NATIVE, 'Symbol', {
  // 19.4.2.1 Symbol.for(key)
  'for': function(key){
    return has(SymbolRegistry, key += '')
      ? SymbolRegistry[key]
      : SymbolRegistry[key] = $Symbol(key);
  },
  // 19.4.2.5 Symbol.keyFor(sym)
  keyFor: function keyFor(key){
    if(isSymbol(key))return keyOf(SymbolRegistry, key);
    throw TypeError(key + ' is not a symbol!');
  },
  useSetter: function(){ setter = true; },
  useSimple: function(){ setter = false; }
});

$export($export.S + $export.F * !USE_NATIVE, 'Object', {
  // 19.1.2.2 Object.create(O [, Properties])
  create: $create,
  // 19.1.2.4 Object.defineProperty(O, P, Attributes)
  defineProperty: $defineProperty,
  // 19.1.2.3 Object.defineProperties(O, Properties)
  defineProperties: $defineProperties,
  // 19.1.2.6 Object.getOwnPropertyDescriptor(O, P)
  getOwnPropertyDescriptor: $getOwnPropertyDescriptor,
  // 19.1.2.7 Object.getOwnPropertyNames(O)
  getOwnPropertyNames: $getOwnPropertyNames,
  // 19.1.2.8 Object.getOwnPropertySymbols(O)
  getOwnPropertySymbols: $getOwnPropertySymbols
});

// 24.3.2 JSON.stringify(value [, replacer [, space]])
$JSON && $export($export.S + $export.F * (!USE_NATIVE || BUGGY_JSON), 'JSON', {stringify: $stringify});

// 19.4.3.4 Symbol.prototype[@@toPrimitive](hint)
$Symbol[PROTOTYPE][TO_PRIMITIVE] || require('./_hide')($Symbol[PROTOTYPE], TO_PRIMITIVE, $Symbol[PROTOTYPE].valueOf);
// 19.4.3.5 Symbol.prototype[@@toStringTag]
setToStringTag($Symbol, 'Symbol');
// 20.2.1.9 Math[@@toStringTag]
setToStringTag(Math, 'Math', true);
// 24.3.3 JSON[@@toStringTag]
setToStringTag(global.JSON, 'JSON', true);
},{"./_an-object":7,"./_core":22,"./_descriptors":26,"./_enum-keys":29,"./_export":30,"./_fails":32,"./_global":36,"./_has":37,"./_hide":38,"./_is-array":45,"./_keyof":55,"./_library":56,"./_meta":60,"./_object-create":64,"./_object-dp":65,"./_object-gopd":68,"./_object-gopn":70,"./_object-gopn-ext":69,"./_object-gops":71,"./_object-pie":75,"./_property-desc":83,"./_redefine":85,"./_set-to-string-tag":90,"./_shared":92,"./_to-iobject":105,"./_to-primitive":108,"./_uid":112,"./_wks":113}],241:[function(require,module,exports){
'use strict';
var $export      = require('./_export')
  , $typed       = require('./_typed')
  , buffer       = require('./_typed-buffer')
  , anObject     = require('./_an-object')
  , toIndex      = require('./_to-index')
  , toLength     = require('./_to-length')
  , isObject     = require('./_is-object')
  , TYPED_ARRAY  = require('./_wks')('typed_array')
  , ArrayBuffer  = require('./_global').ArrayBuffer
  , speciesConstructor = require('./_species-constructor')
  , $ArrayBuffer = buffer.ArrayBuffer
  , $DataView    = buffer.DataView
  , $isView      = $typed.ABV && ArrayBuffer.isView
  , $slice       = $ArrayBuffer.prototype.slice
  , VIEW         = $typed.VIEW
  , ARRAY_BUFFER = 'ArrayBuffer';

$export($export.G + $export.W + $export.F * (ArrayBuffer !== $ArrayBuffer), {ArrayBuffer: $ArrayBuffer});

$export($export.S + $export.F * !$typed.CONSTR, ARRAY_BUFFER, {
  // 24.1.3.1 ArrayBuffer.isView(arg)
  isView: function isView(it){
    return $isView && $isView(it) || isObject(it) && VIEW in it;
  }
});

$export($export.P + $export.U + $export.F * require('./_fails')(function(){
  return !new $ArrayBuffer(2).slice(1, undefined).byteLength;
}), ARRAY_BUFFER, {
  // 24.1.4.3 ArrayBuffer.prototype.slice(start, end)
  slice: function slice(start, end){
    if($slice !== undefined && end === undefined)return $slice.call(anObject(this), start); // FF fix
    var len    = anObject(this).byteLength
      , first  = toIndex(start, len)
      , final  = toIndex(end === undefined ? len : end, len)
      , result = new (speciesConstructor(this, $ArrayBuffer))(toLength(final - first))
      , viewS  = new $DataView(this)
      , viewT  = new $DataView(result)
      , index  = 0;
    while(first < final){
      viewT.setUint8(index++, viewS.getUint8(first++));
    } return result;
  }
});

require('./_set-species')(ARRAY_BUFFER);
},{"./_an-object":7,"./_export":30,"./_fails":32,"./_global":36,"./_is-object":47,"./_set-species":89,"./_species-constructor":93,"./_to-index":103,"./_to-length":106,"./_typed":111,"./_typed-buffer":110,"./_wks":113}],242:[function(require,module,exports){
var $export = require('./_export');
$export($export.G + $export.W + $export.F * !require('./_typed').ABV, {
  DataView: require('./_typed-buffer').DataView
});
},{"./_export":30,"./_typed":111,"./_typed-buffer":110}],243:[function(require,module,exports){
require('./_typed-array')('Float32', 4, function(init){
  return function Float32Array(data, byteOffset, length){
    return init(this, data, byteOffset, length);
  };
});
},{"./_typed-array":109}],244:[function(require,module,exports){
require('./_typed-array')('Float64', 8, function(init){
  return function Float64Array(data, byteOffset, length){
    return init(this, data, byteOffset, length);
  };
});
},{"./_typed-array":109}],245:[function(require,module,exports){
require('./_typed-array')('Int16', 2, function(init){
  return function Int16Array(data, byteOffset, length){
    return init(this, data, byteOffset, length);
  };
});
},{"./_typed-array":109}],246:[function(require,module,exports){
require('./_typed-array')('Int32', 4, function(init){
  return function Int32Array(data, byteOffset, length){
    return init(this, data, byteOffset, length);
  };
});
},{"./_typed-array":109}],247:[function(require,module,exports){
require('./_typed-array')('Int8', 1, function(init){
  return function Int8Array(data, byteOffset, length){
    return init(this, data, byteOffset, length);
  };
});
},{"./_typed-array":109}],248:[function(require,module,exports){
require('./_typed-array')('Uint16', 2, function(init){
  return function Uint16Array(data, byteOffset, length){
    return init(this, data, byteOffset, length);
  };
});
},{"./_typed-array":109}],249:[function(require,module,exports){
require('./_typed-array')('Uint32', 4, function(init){
  return function Uint32Array(data, byteOffset, length){
    return init(this, data, byteOffset, length);
  };
});
},{"./_typed-array":109}],250:[function(require,module,exports){
require('./_typed-array')('Uint8', 1, function(init){
  return function Uint8Array(data, byteOffset, length){
    return init(this, data, byteOffset, length);
  };
});
},{"./_typed-array":109}],251:[function(require,module,exports){
require('./_typed-array')('Uint8', 1, function(init){
  return function Uint8ClampedArray(data, byteOffset, length){
    return init(this, data, byteOffset, length);
  };
}, true);
},{"./_typed-array":109}],252:[function(require,module,exports){
'use strict';
var each         = require('./_array-methods')(0)
  , redefine     = require('./_redefine')
  , meta         = require('./_meta')
  , assign       = require('./_object-assign')
  , weak         = require('./_collection-weak')
  , isObject     = require('./_is-object')
  , has          = require('./_has')
  , getWeak      = meta.getWeak
  , isExtensible = Object.isExtensible
  , uncaughtFrozenStore = weak.ufstore
  , tmp          = {}
  , InternalMap;

var wrapper = function(get){
  return function WeakMap(){
    return get(this, arguments.length > 0 ? arguments[0] : undefined);
  };
};

var methods = {
  // 23.3.3.3 WeakMap.prototype.get(key)
  get: function get(key){
    if(isObject(key)){
      var data = getWeak(key);
      if(data === true)return uncaughtFrozenStore(this).get(key);
      return data ? data[this._i] : undefined;
    }
  },
  // 23.3.3.5 WeakMap.prototype.set(key, value)
  set: function set(key, value){
    return weak.def(this, key, value);
  }
};

// 23.3 WeakMap Objects
var $WeakMap = module.exports = require('./_collection')('WeakMap', wrapper, methods, weak, true, true);

// IE11 WeakMap frozen keys fix
if(new $WeakMap().set((Object.freeze || Object)(tmp), 7).get(tmp) != 7){
  InternalMap = weak.getConstructor(wrapper);
  assign(InternalMap.prototype, methods);
  meta.NEED = true;
  each(['delete', 'has', 'get', 'set'], function(key){
    var proto  = $WeakMap.prototype
      , method = proto[key];
    redefine(proto, key, function(a, b){
      // store frozen objects on internal weakmap shim
      if(isObject(a) && !isExtensible(a)){
        if(!this._f)this._f = new InternalMap;
        var result = this._f[key](a, b);
        return key == 'set' ? this : result;
      // store all the rest on native weakmap
      } return method.call(this, a, b);
    });
  });
}
},{"./_array-methods":12,"./_collection":21,"./_collection-weak":20,"./_has":37,"./_is-object":47,"./_meta":60,"./_object-assign":63,"./_redefine":85}],253:[function(require,module,exports){
'use strict';
var weak = require('./_collection-weak');

// 23.4 WeakSet Objects
require('./_collection')('WeakSet', function(get){
  return function WeakSet(){ return get(this, arguments.length > 0 ? arguments[0] : undefined); };
}, {
  // 23.4.3.1 WeakSet.prototype.add(value)
  add: function add(value){
    return weak.def(this, value, true);
  }
}, weak, false, true);
},{"./_collection":21,"./_collection-weak":20}],254:[function(require,module,exports){
'use strict';
// https://github.com/tc39/Array.prototype.includes
var $export   = require('./_export')
  , $includes = require('./_array-includes')(true);

$export($export.P, 'Array', {
  includes: function includes(el /*, fromIndex = 0 */){
    return $includes(this, el, arguments.length > 1 ? arguments[1] : undefined);
  }
});

require('./_add-to-unscopables')('includes');
},{"./_add-to-unscopables":5,"./_array-includes":11,"./_export":30}],255:[function(require,module,exports){
// https://github.com/ljharb/proposal-is-error
var $export = require('./_export')
  , cof     = require('./_cof');

$export($export.S, 'Error', {
  isError: function isError(it){
    return cof(it) === 'Error';
  }
});
},{"./_cof":17,"./_export":30}],256:[function(require,module,exports){
// https://github.com/DavidBruant/Map-Set.prototype.toJSON
var $export  = require('./_export');

$export($export.P + $export.R, 'Map', {toJSON: require('./_collection-to-json')('Map')});
},{"./_collection-to-json":19,"./_export":30}],257:[function(require,module,exports){
// https://gist.github.com/BrendanEich/4294d5c212a6d2254703
var $export = require('./_export');

$export($export.S, 'Math', {
  iaddh: function iaddh(x0, x1, y0, y1){
    var $x0 = x0 >>> 0
      , $x1 = x1 >>> 0
      , $y0 = y0 >>> 0;
    return $x1 + (y1 >>> 0) + (($x0 & $y0 | ($x0 | $y0) & ~($x0 + $y0 >>> 0)) >>> 31) | 0;
  }
});
},{"./_export":30}],258:[function(require,module,exports){
// https://gist.github.com/BrendanEich/4294d5c212a6d2254703
var $export = require('./_export');

$export($export.S, 'Math', {
  imulh: function imulh(u, v){
    var UINT16 = 0xffff
      , $u = +u
      , $v = +v
      , u0 = $u & UINT16
      , v0 = $v & UINT16
      , u1 = $u >> 16
      , v1 = $v >> 16
      , t  = (u1 * v0 >>> 0) + (u0 * v0 >>> 16);
    return u1 * v1 + (t >> 16) + ((u0 * v1 >>> 0) + (t & UINT16) >> 16);
  }
});
},{"./_export":30}],259:[function(require,module,exports){
// https://gist.github.com/BrendanEich/4294d5c212a6d2254703
var $export = require('./_export');

$export($export.S, 'Math', {
  isubh: function isubh(x0, x1, y0, y1){
    var $x0 = x0 >>> 0
      , $x1 = x1 >>> 0
      , $y0 = y0 >>> 0;
    return $x1 - (y1 >>> 0) - ((~$x0 & $y0 | ~($x0 ^ $y0) & $x0 - $y0 >>> 0) >>> 31) | 0;
  }
});
},{"./_export":30}],260:[function(require,module,exports){
// https://gist.github.com/BrendanEich/4294d5c212a6d2254703
var $export = require('./_export');

$export($export.S, 'Math', {
  umulh: function umulh(u, v){
    var UINT16 = 0xffff
      , $u = +u
      , $v = +v
      , u0 = $u & UINT16
      , v0 = $v & UINT16
      , u1 = $u >>> 16
      , v1 = $v >>> 16
      , t  = (u1 * v0 >>> 0) + (u0 * v0 >>> 16);
    return u1 * v1 + (t >>> 16) + ((u0 * v1 >>> 0) + (t & UINT16) >>> 16);
  }
});
},{"./_export":30}],261:[function(require,module,exports){
'use strict';
var $export         = require('./_export')
  , toObject        = require('./_to-object')
  , aFunction       = require('./_a-function')
  , $defineProperty = require('./_object-dp');

// B.2.2.2 Object.prototype.__defineGetter__(P, getter)
require('./_descriptors') && $export($export.P + require('./_object-forced-pam'), 'Object', {
  __defineGetter__: function __defineGetter__(P, getter){
    $defineProperty.f(toObject(this), P, {get: aFunction(getter), enumerable: true, configurable: true});
  }
});
},{"./_a-function":3,"./_descriptors":26,"./_export":30,"./_object-dp":65,"./_object-forced-pam":67,"./_to-object":107}],262:[function(require,module,exports){
'use strict';
var $export         = require('./_export')
  , toObject        = require('./_to-object')
  , aFunction       = require('./_a-function')
  , $defineProperty = require('./_object-dp');

// B.2.2.3 Object.prototype.__defineSetter__(P, setter)
require('./_descriptors') && $export($export.P + require('./_object-forced-pam'), 'Object', {
  __defineSetter__: function __defineSetter__(P, setter){
    $defineProperty.f(toObject(this), P, {set: aFunction(setter), enumerable: true, configurable: true});
  }
});
},{"./_a-function":3,"./_descriptors":26,"./_export":30,"./_object-dp":65,"./_object-forced-pam":67,"./_to-object":107}],263:[function(require,module,exports){
// https://github.com/tc39/proposal-object-values-entries
var $export  = require('./_export')
  , $entries = require('./_object-to-array')(true);

$export($export.S, 'Object', {
  entries: function entries(it){
    return $entries(it);
  }
});
},{"./_export":30,"./_object-to-array":77}],264:[function(require,module,exports){
// https://github.com/tc39/proposal-object-getownpropertydescriptors
var $export    = require('./_export')
  , ownKeys    = require('./_own-keys')
  , toIObject  = require('./_to-iobject')
  , createDesc = require('./_property-desc')
  , gOPD       = require('./_object-gopd')
  , dP         = require('./_object-dp');

$export($export.S, 'Object', {
  getOwnPropertyDescriptors: function getOwnPropertyDescriptors(object){
    var O       = toIObject(object)
      , getDesc = gOPD.f
      , keys    = ownKeys(O)
      , result  = {}
      , i       = 0
      , key, D;
    while(keys.length > i){
      D = getDesc(O, key = keys[i++]);
      if(key in result)dP.f(result, key, createDesc(0, D));
      else result[key] = D;
    } return result;
  }
});
},{"./_export":30,"./_object-dp":65,"./_object-gopd":68,"./_own-keys":78,"./_property-desc":83,"./_to-iobject":105}],265:[function(require,module,exports){
'use strict';
var $export                  = require('./_export')
  , toObject                 = require('./_to-object')
  , toPrimitive              = require('./_to-primitive')
  , getPrototypeOf           = require('./_object-gpo')
  , getOwnPropertyDescriptor = require('./_object-gopd').f;

// B.2.2.4 Object.prototype.__lookupGetter__(P)
require('./_descriptors') && $export($export.P + require('./_object-forced-pam'), 'Object', {
  __lookupGetter__: function __lookupGetter__(P){
    var O = toObject(this)
      , K = toPrimitive(P, true)
      , D;
    do {
      if(D = getOwnPropertyDescriptor(O, K))return D.get;
    } while(O = getPrototypeOf(O));
  }
});
},{"./_descriptors":26,"./_export":30,"./_object-forced-pam":67,"./_object-gopd":68,"./_object-gpo":72,"./_to-object":107,"./_to-primitive":108}],266:[function(require,module,exports){
'use strict';
var $export                  = require('./_export')
  , toObject                 = require('./_to-object')
  , toPrimitive              = require('./_to-primitive')
  , getPrototypeOf           = require('./_object-gpo')
  , getOwnPropertyDescriptor = require('./_object-gopd').f;

// B.2.2.5 Object.prototype.__lookupSetter__(P)
require('./_descriptors') && $export($export.P + require('./_object-forced-pam'), 'Object', {
  __lookupSetter__: function __lookupSetter__(P){
    var O = toObject(this)
      , K = toPrimitive(P, true)
      , D;
    do {
      if(D = getOwnPropertyDescriptor(O, K))return D.set;
    } while(O = getPrototypeOf(O));
  }
});
},{"./_descriptors":26,"./_export":30,"./_object-forced-pam":67,"./_object-gopd":68,"./_object-gpo":72,"./_to-object":107,"./_to-primitive":108}],267:[function(require,module,exports){
// https://github.com/tc39/proposal-object-values-entries
var $export = require('./_export')
  , $values = require('./_object-to-array')(false);

$export($export.S, 'Object', {
  values: function values(it){
    return $values(it);
  }
});
},{"./_export":30,"./_object-to-array":77}],268:[function(require,module,exports){
var metadata                  = require('./_metadata')
  , anObject                  = require('./_an-object')
  , toMetaKey                 = metadata.key
  , ordinaryDefineOwnMetadata = metadata.set;

metadata.exp({defineMetadata: function defineMetadata(metadataKey, metadataValue, target, targetKey){
  ordinaryDefineOwnMetadata(metadataKey, metadataValue, anObject(target), toMetaKey(targetKey));
}});
},{"./_an-object":7,"./_metadata":61}],269:[function(require,module,exports){
var metadata               = require('./_metadata')
  , anObject               = require('./_an-object')
  , toMetaKey              = metadata.key
  , getOrCreateMetadataMap = metadata.map
  , store                  = metadata.store;

metadata.exp({deleteMetadata: function deleteMetadata(metadataKey, target /*, targetKey */){
  var targetKey   = arguments.length < 3 ? undefined : toMetaKey(arguments[2])
    , metadataMap = getOrCreateMetadataMap(anObject(target), targetKey, false);
  if(metadataMap === undefined || !metadataMap['delete'](metadataKey))return false;
  if(metadataMap.size)return true;
  var targetMetadata = store.get(target);
  targetMetadata['delete'](targetKey);
  return !!targetMetadata.size || store['delete'](target);
}});
},{"./_an-object":7,"./_metadata":61}],270:[function(require,module,exports){
var Set                     = require('./es6.set')
  , from                    = require('./_array-from-iterable')
  , metadata                = require('./_metadata')
  , anObject                = require('./_an-object')
  , getPrototypeOf          = require('./_object-gpo')
  , ordinaryOwnMetadataKeys = metadata.keys
  , toMetaKey               = metadata.key;

var ordinaryMetadataKeys = function(O, P){
  var oKeys  = ordinaryOwnMetadataKeys(O, P)
    , parent = getPrototypeOf(O);
  if(parent === null)return oKeys;
  var pKeys  = ordinaryMetadataKeys(parent, P);
  return pKeys.length ? oKeys.length ? from(new Set(oKeys.concat(pKeys))) : pKeys : oKeys;
};

metadata.exp({getMetadataKeys: function getMetadataKeys(target /*, targetKey */){
  return ordinaryMetadataKeys(anObject(target), arguments.length < 2 ? undefined : toMetaKey(arguments[1]));
}});
},{"./_an-object":7,"./_array-from-iterable":10,"./_metadata":61,"./_object-gpo":72,"./es6.set":217}],271:[function(require,module,exports){
var metadata               = require('./_metadata')
  , anObject               = require('./_an-object')
  , getPrototypeOf         = require('./_object-gpo')
  , ordinaryHasOwnMetadata = metadata.has
  , ordinaryGetOwnMetadata = metadata.get
  , toMetaKey              = metadata.key;

var ordinaryGetMetadata = function(MetadataKey, O, P){
  var hasOwn = ordinaryHasOwnMetadata(MetadataKey, O, P);
  if(hasOwn)return ordinaryGetOwnMetadata(MetadataKey, O, P);
  var parent = getPrototypeOf(O);
  return parent !== null ? ordinaryGetMetadata(MetadataKey, parent, P) : undefined;
};

metadata.exp({getMetadata: function getMetadata(metadataKey, target /*, targetKey */){
  return ordinaryGetMetadata(metadataKey, anObject(target), arguments.length < 3 ? undefined : toMetaKey(arguments[2]));
}});
},{"./_an-object":7,"./_metadata":61,"./_object-gpo":72}],272:[function(require,module,exports){
var metadata                = require('./_metadata')
  , anObject                = require('./_an-object')
  , ordinaryOwnMetadataKeys = metadata.keys
  , toMetaKey               = metadata.key;

metadata.exp({getOwnMetadataKeys: function getOwnMetadataKeys(target /*, targetKey */){
  return ordinaryOwnMetadataKeys(anObject(target), arguments.length < 2 ? undefined : toMetaKey(arguments[1]));
}});
},{"./_an-object":7,"./_metadata":61}],273:[function(require,module,exports){
var metadata               = require('./_metadata')
  , anObject               = require('./_an-object')
  , ordinaryGetOwnMetadata = metadata.get
  , toMetaKey              = metadata.key;

metadata.exp({getOwnMetadata: function getOwnMetadata(metadataKey, target /*, targetKey */){
  return ordinaryGetOwnMetadata(metadataKey, anObject(target)
    , arguments.length < 3 ? undefined : toMetaKey(arguments[2]));
}});
},{"./_an-object":7,"./_metadata":61}],274:[function(require,module,exports){
var metadata               = require('./_metadata')
  , anObject               = require('./_an-object')
  , getPrototypeOf         = require('./_object-gpo')
  , ordinaryHasOwnMetadata = metadata.has
  , toMetaKey              = metadata.key;

var ordinaryHasMetadata = function(MetadataKey, O, P){
  var hasOwn = ordinaryHasOwnMetadata(MetadataKey, O, P);
  if(hasOwn)return true;
  var parent = getPrototypeOf(O);
  return parent !== null ? ordinaryHasMetadata(MetadataKey, parent, P) : false;
};

metadata.exp({hasMetadata: function hasMetadata(metadataKey, target /*, targetKey */){
  return ordinaryHasMetadata(metadataKey, anObject(target), arguments.length < 3 ? undefined : toMetaKey(arguments[2]));
}});
},{"./_an-object":7,"./_metadata":61,"./_object-gpo":72}],275:[function(require,module,exports){
var metadata               = require('./_metadata')
  , anObject               = require('./_an-object')
  , ordinaryHasOwnMetadata = metadata.has
  , toMetaKey              = metadata.key;

metadata.exp({hasOwnMetadata: function hasOwnMetadata(metadataKey, target /*, targetKey */){
  return ordinaryHasOwnMetadata(metadataKey, anObject(target)
    , arguments.length < 3 ? undefined : toMetaKey(arguments[2]));
}});
},{"./_an-object":7,"./_metadata":61}],276:[function(require,module,exports){
var metadata                  = require('./_metadata')
  , anObject                  = require('./_an-object')
  , aFunction                 = require('./_a-function')
  , toMetaKey                 = metadata.key
  , ordinaryDefineOwnMetadata = metadata.set;

metadata.exp({metadata: function metadata(metadataKey, metadataValue){
  return function decorator(target, targetKey){
    ordinaryDefineOwnMetadata(
      metadataKey, metadataValue,
      (targetKey !== undefined ? anObject : aFunction)(target),
      toMetaKey(targetKey)
    );
  };
}});
},{"./_a-function":3,"./_an-object":7,"./_metadata":61}],277:[function(require,module,exports){
// https://github.com/DavidBruant/Map-Set.prototype.toJSON
var $export  = require('./_export');

$export($export.P + $export.R, 'Set', {toJSON: require('./_collection-to-json')('Set')});
},{"./_collection-to-json":19,"./_export":30}],278:[function(require,module,exports){
'use strict';
// https://github.com/mathiasbynens/String.prototype.at
var $export = require('./_export')
  , $at     = require('./_string-at')(true);

$export($export.P, 'String', {
  at: function at(pos){
    return $at(this, pos);
  }
});
},{"./_export":30,"./_string-at":95}],279:[function(require,module,exports){
'use strict';
// https://tc39.github.io/String.prototype.matchAll/
var $export     = require('./_export')
  , defined     = require('./_defined')
  , toLength    = require('./_to-length')
  , isRegExp    = require('./_is-regexp')
  , getFlags    = require('./_flags')
  , RegExpProto = RegExp.prototype;

var $RegExpStringIterator = function(regexp, string){
  this._r = regexp;
  this._s = string;
};

require('./_iter-create')($RegExpStringIterator, 'RegExp String', function next(){
  var match = this._r.exec(this._s);
  return {value: match, done: match === null};
});

$export($export.P, 'String', {
  matchAll: function matchAll(regexp){
    defined(this);
    if(!isRegExp(regexp))throw TypeError(regexp + ' is not a regexp!');
    var S     = String(this)
      , flags = 'flags' in RegExpProto ? String(regexp.flags) : getFlags.call(regexp)
      , rx    = new RegExp(regexp.source, ~flags.indexOf('g') ? flags : 'g' + flags);
    rx.lastIndex = toLength(regexp.lastIndex);
    return new $RegExpStringIterator(rx, S);
  }
});
},{"./_defined":25,"./_export":30,"./_flags":34,"./_is-regexp":48,"./_iter-create":50,"./_to-length":106}],280:[function(require,module,exports){
'use strict';
// https://github.com/tc39/proposal-string-pad-start-end
var $export = require('./_export')
  , $pad    = require('./_string-pad');

$export($export.P, 'String', {
  padEnd: function padEnd(maxLength /*, fillString = ' ' */){
    return $pad(this, maxLength, arguments.length > 1 ? arguments[1] : undefined, false);
  }
});
},{"./_export":30,"./_string-pad":98}],281:[function(require,module,exports){
'use strict';
// https://github.com/tc39/proposal-string-pad-start-end
var $export = require('./_export')
  , $pad    = require('./_string-pad');

$export($export.P, 'String', {
  padStart: function padStart(maxLength /*, fillString = ' ' */){
    return $pad(this, maxLength, arguments.length > 1 ? arguments[1] : undefined, true);
  }
});
},{"./_export":30,"./_string-pad":98}],282:[function(require,module,exports){
'use strict';
// https://github.com/sebmarkbage/ecmascript-string-left-right-trim
require('./_string-trim')('trimLeft', function($trim){
  return function trimLeft(){
    return $trim(this, 1);
  };
}, 'trimStart');
},{"./_string-trim":100}],283:[function(require,module,exports){
'use strict';
// https://github.com/sebmarkbage/ecmascript-string-left-right-trim
require('./_string-trim')('trimRight', function($trim){
  return function trimRight(){
    return $trim(this, 2);
  };
}, 'trimEnd');
},{"./_string-trim":100}],284:[function(require,module,exports){
// https://github.com/ljharb/proposal-global
var $export = require('./_export');

$export($export.S, 'System', {global: require('./_global')});
},{"./_export":30,"./_global":36}],285:[function(require,module,exports){
var $iterators    = require('./es6.array.iterator')
  , redefine      = require('./_redefine')
  , global        = require('./_global')
  , hide          = require('./_hide')
  , Iterators     = require('./_iterators')
  , wks           = require('./_wks')
  , ITERATOR      = wks('iterator')
  , TO_STRING_TAG = wks('toStringTag')
  , ArrayValues   = Iterators.Array;

for(var collections = ['NodeList', 'DOMTokenList', 'MediaList', 'StyleSheetList', 'CSSRuleList'], i = 0; i < 5; i++){
  var NAME       = collections[i]
    , Collection = global[NAME]
    , proto      = Collection && Collection.prototype
    , key;
  if(proto){
    if(!proto[ITERATOR])hide(proto, ITERATOR, ArrayValues);
    if(!proto[TO_STRING_TAG])hide(proto, TO_STRING_TAG, NAME);
    Iterators[NAME] = ArrayValues;
    for(key in $iterators)if(!proto[key])redefine(proto, key, $iterators[key], true);
  }
}
},{"./_global":36,"./_hide":38,"./_iterators":54,"./_redefine":85,"./_wks":113,"./es6.array.iterator":127}],286:[function(require,module,exports){
var $export = require('./_export')
  , $task   = require('./_task');
$export($export.G + $export.B, {
  setImmediate:   $task.set,
  clearImmediate: $task.clear
});
},{"./_export":30,"./_task":102}],287:[function(require,module,exports){
// ie9- setTimeout & setInterval additional parameters fix
var global     = require('./_global')
  , $export    = require('./_export')
  , invoke     = require('./_invoke')
  , partial    = require('./_partial')
  , navigator  = global.navigator
  , MSIE       = !!navigator && /MSIE .\./.test(navigator.userAgent); // <- dirty ie9- check
var wrap = function(set){
  return MSIE ? function(fn, time /*, ...args */){
    return set(invoke(
      partial,
      [].slice.call(arguments, 2),
      typeof fn == 'function' ? fn : Function(fn)
    ), time);
  } : set;
};
$export($export.G + $export.B + $export.F * MSIE, {
  setTimeout:  wrap(global.setTimeout),
  setInterval: wrap(global.setInterval)
});
},{"./_export":30,"./_global":36,"./_invoke":42,"./_partial":81}],288:[function(require,module,exports){
require('./modules/es6.symbol');
require('./modules/es6.object.create');
require('./modules/es6.object.define-property');
require('./modules/es6.object.define-properties');
require('./modules/es6.object.get-own-property-descriptor');
require('./modules/es6.object.get-prototype-of');
require('./modules/es6.object.keys');
require('./modules/es6.object.get-own-property-names');
require('./modules/es6.object.freeze');
require('./modules/es6.object.seal');
require('./modules/es6.object.prevent-extensions');
require('./modules/es6.object.is-frozen');
require('./modules/es6.object.is-sealed');
require('./modules/es6.object.is-extensible');
require('./modules/es6.object.assign');
require('./modules/es6.object.is');
require('./modules/es6.object.set-prototype-of');
require('./modules/es6.object.to-string');
require('./modules/es6.function.bind');
require('./modules/es6.function.name');
require('./modules/es6.function.has-instance');
require('./modules/es6.parse-int');
require('./modules/es6.parse-float');
require('./modules/es6.number.constructor');
require('./modules/es6.number.to-fixed');
require('./modules/es6.number.to-precision');
require('./modules/es6.number.epsilon');
require('./modules/es6.number.is-finite');
require('./modules/es6.number.is-integer');
require('./modules/es6.number.is-nan');
require('./modules/es6.number.is-safe-integer');
require('./modules/es6.number.max-safe-integer');
require('./modules/es6.number.min-safe-integer');
require('./modules/es6.number.parse-float');
require('./modules/es6.number.parse-int');
require('./modules/es6.math.acosh');
require('./modules/es6.math.asinh');
require('./modules/es6.math.atanh');
require('./modules/es6.math.cbrt');
require('./modules/es6.math.clz32');
require('./modules/es6.math.cosh');
require('./modules/es6.math.expm1');
require('./modules/es6.math.fround');
require('./modules/es6.math.hypot');
require('./modules/es6.math.imul');
require('./modules/es6.math.log10');
require('./modules/es6.math.log1p');
require('./modules/es6.math.log2');
require('./modules/es6.math.sign');
require('./modules/es6.math.sinh');
require('./modules/es6.math.tanh');
require('./modules/es6.math.trunc');
require('./modules/es6.string.from-code-point');
require('./modules/es6.string.raw');
require('./modules/es6.string.trim');
require('./modules/es6.string.iterator');
require('./modules/es6.string.code-point-at');
require('./modules/es6.string.ends-with');
require('./modules/es6.string.includes');
require('./modules/es6.string.repeat');
require('./modules/es6.string.starts-with');
require('./modules/es6.string.anchor');
require('./modules/es6.string.big');
require('./modules/es6.string.blink');
require('./modules/es6.string.bold');
require('./modules/es6.string.fixed');
require('./modules/es6.string.fontcolor');
require('./modules/es6.string.fontsize');
require('./modules/es6.string.italics');
require('./modules/es6.string.link');
require('./modules/es6.string.small');
require('./modules/es6.string.strike');
require('./modules/es6.string.sub');
require('./modules/es6.string.sup');
require('./modules/es6.date.now');
require('./modules/es6.date.to-json');
require('./modules/es6.date.to-iso-string');
require('./modules/es6.date.to-string');
require('./modules/es6.date.to-primitive');
require('./modules/es6.array.is-array');
require('./modules/es6.array.from');
require('./modules/es6.array.of');
require('./modules/es6.array.join');
require('./modules/es6.array.slice');
require('./modules/es6.array.sort');
require('./modules/es6.array.for-each');
require('./modules/es6.array.map');
require('./modules/es6.array.filter');
require('./modules/es6.array.some');
require('./modules/es6.array.every');
require('./modules/es6.array.reduce');
require('./modules/es6.array.reduce-right');
require('./modules/es6.array.index-of');
require('./modules/es6.array.last-index-of');
require('./modules/es6.array.copy-within');
require('./modules/es6.array.fill');
require('./modules/es6.array.find');
require('./modules/es6.array.find-index');
require('./modules/es6.array.species');
require('./modules/es6.array.iterator');
require('./modules/es6.regexp.constructor');
require('./modules/es6.regexp.to-string');
require('./modules/es6.regexp.flags');
require('./modules/es6.regexp.match');
require('./modules/es6.regexp.replace');
require('./modules/es6.regexp.search');
require('./modules/es6.regexp.split');
require('./modules/es6.promise');
require('./modules/es6.map');
require('./modules/es6.set');
require('./modules/es6.weak-map');
require('./modules/es6.weak-set');
require('./modules/es6.typed.array-buffer');
require('./modules/es6.typed.data-view');
require('./modules/es6.typed.int8-array');
require('./modules/es6.typed.uint8-array');
require('./modules/es6.typed.uint8-clamped-array');
require('./modules/es6.typed.int16-array');
require('./modules/es6.typed.uint16-array');
require('./modules/es6.typed.int32-array');
require('./modules/es6.typed.uint32-array');
require('./modules/es6.typed.float32-array');
require('./modules/es6.typed.float64-array');
require('./modules/es6.reflect.apply');
require('./modules/es6.reflect.construct');
require('./modules/es6.reflect.define-property');
require('./modules/es6.reflect.delete-property');
require('./modules/es6.reflect.enumerate');
require('./modules/es6.reflect.get');
require('./modules/es6.reflect.get-own-property-descriptor');
require('./modules/es6.reflect.get-prototype-of');
require('./modules/es6.reflect.has');
require('./modules/es6.reflect.is-extensible');
require('./modules/es6.reflect.own-keys');
require('./modules/es6.reflect.prevent-extensions');
require('./modules/es6.reflect.set');
require('./modules/es6.reflect.set-prototype-of');
require('./modules/es7.array.includes');
require('./modules/es7.string.at');
require('./modules/es7.string.pad-start');
require('./modules/es7.string.pad-end');
require('./modules/es7.string.trim-left');
require('./modules/es7.string.trim-right');
require('./modules/es7.string.match-all');
require('./modules/es7.object.get-own-property-descriptors');
require('./modules/es7.object.values');
require('./modules/es7.object.entries');
require('./modules/es7.object.define-getter');
require('./modules/es7.object.define-setter');
require('./modules/es7.object.lookup-getter');
require('./modules/es7.object.lookup-setter');
require('./modules/es7.map.to-json');
require('./modules/es7.set.to-json');
require('./modules/es7.system.global');
require('./modules/es7.error.is-error');
require('./modules/es7.math.iaddh');
require('./modules/es7.math.isubh');
require('./modules/es7.math.imulh');
require('./modules/es7.math.umulh');
require('./modules/es7.reflect.define-metadata');
require('./modules/es7.reflect.delete-metadata');
require('./modules/es7.reflect.get-metadata');
require('./modules/es7.reflect.get-metadata-keys');
require('./modules/es7.reflect.get-own-metadata');
require('./modules/es7.reflect.get-own-metadata-keys');
require('./modules/es7.reflect.has-metadata');
require('./modules/es7.reflect.has-own-metadata');
require('./modules/es7.reflect.metadata');
require('./modules/web.timers');
require('./modules/web.immediate');
require('./modules/web.dom.iterable');
module.exports = require('./modules/_core');
},{"./modules/_core":22,"./modules/es6.array.copy-within":117,"./modules/es6.array.every":118,"./modules/es6.array.fill":119,"./modules/es6.array.filter":120,"./modules/es6.array.find":122,"./modules/es6.array.find-index":121,"./modules/es6.array.for-each":123,"./modules/es6.array.from":124,"./modules/es6.array.index-of":125,"./modules/es6.array.is-array":126,"./modules/es6.array.iterator":127,"./modules/es6.array.join":128,"./modules/es6.array.last-index-of":129,"./modules/es6.array.map":130,"./modules/es6.array.of":131,"./modules/es6.array.reduce":133,"./modules/es6.array.reduce-right":132,"./modules/es6.array.slice":134,"./modules/es6.array.some":135,"./modules/es6.array.sort":136,"./modules/es6.array.species":137,"./modules/es6.date.now":138,"./modules/es6.date.to-iso-string":139,"./modules/es6.date.to-json":140,"./modules/es6.date.to-primitive":141,"./modules/es6.date.to-string":142,"./modules/es6.function.bind":143,"./modules/es6.function.has-instance":144,"./modules/es6.function.name":145,"./modules/es6.map":146,"./modules/es6.math.acosh":147,"./modules/es6.math.asinh":148,"./modules/es6.math.atanh":149,"./modules/es6.math.cbrt":150,"./modules/es6.math.clz32":151,"./modules/es6.math.cosh":152,"./modules/es6.math.expm1":153,"./modules/es6.math.fround":154,"./modules/es6.math.hypot":155,"./modules/es6.math.imul":156,"./modules/es6.math.log10":157,"./modules/es6.math.log1p":158,"./modules/es6.math.log2":159,"./modules/es6.math.sign":160,"./modules/es6.math.sinh":161,"./modules/es6.math.tanh":162,"./modules/es6.math.trunc":163,"./modules/es6.number.constructor":164,"./modules/es6.number.epsilon":165,"./modules/es6.number.is-finite":166,"./modules/es6.number.is-integer":167,"./modules/es6.number.is-nan":168,"./modules/es6.number.is-safe-integer":169,"./modules/es6.number.max-safe-integer":170,"./modules/es6.number.min-safe-integer":171,"./modules/es6.number.parse-float":172,"./modules/es6.number.parse-int":173,"./modules/es6.number.to-fixed":174,"./modules/es6.number.to-precision":175,"./modules/es6.object.assign":176,"./modules/es6.object.create":177,"./modules/es6.object.define-properties":178,"./modules/es6.object.define-property":179,"./modules/es6.object.freeze":180,"./modules/es6.object.get-own-property-descriptor":181,"./modules/es6.object.get-own-property-names":182,"./modules/es6.object.get-prototype-of":183,"./modules/es6.object.is":187,"./modules/es6.object.is-extensible":184,"./modules/es6.object.is-frozen":185,"./modules/es6.object.is-sealed":186,"./modules/es6.object.keys":188,"./modules/es6.object.prevent-extensions":189,"./modules/es6.object.seal":190,"./modules/es6.object.set-prototype-of":191,"./modules/es6.object.to-string":192,"./modules/es6.parse-float":193,"./modules/es6.parse-int":194,"./modules/es6.promise":195,"./modules/es6.reflect.apply":196,"./modules/es6.reflect.construct":197,"./modules/es6.reflect.define-property":198,"./modules/es6.reflect.delete-property":199,"./modules/es6.reflect.enumerate":200,"./modules/es6.reflect.get":203,"./modules/es6.reflect.get-own-property-descriptor":201,"./modules/es6.reflect.get-prototype-of":202,"./modules/es6.reflect.has":204,"./modules/es6.reflect.is-extensible":205,"./modules/es6.reflect.own-keys":206,"./modules/es6.reflect.prevent-extensions":207,"./modules/es6.reflect.set":209,"./modules/es6.reflect.set-prototype-of":208,"./modules/es6.regexp.constructor":210,"./modules/es6.regexp.flags":211,"./modules/es6.regexp.match":212,"./modules/es6.regexp.replace":213,"./modules/es6.regexp.search":214,"./modules/es6.regexp.split":215,"./modules/es6.regexp.to-string":216,"./modules/es6.set":217,"./modules/es6.string.anchor":218,"./modules/es6.string.big":219,"./modules/es6.string.blink":220,"./modules/es6.string.bold":221,"./modules/es6.string.code-point-at":222,"./modules/es6.string.ends-with":223,"./modules/es6.string.fixed":224,"./modules/es6.string.fontcolor":225,"./modules/es6.string.fontsize":226,"./modules/es6.string.from-code-point":227,"./modules/es6.string.includes":228,"./modules/es6.string.italics":229,"./modules/es6.string.iterator":230,"./modules/es6.string.link":231,"./modules/es6.string.raw":232,"./modules/es6.string.repeat":233,"./modules/es6.string.small":234,"./modules/es6.string.starts-with":235,"./modules/es6.string.strike":236,"./modules/es6.string.sub":237,"./modules/es6.string.sup":238,"./modules/es6.string.trim":239,"./modules/es6.symbol":240,"./modules/es6.typed.array-buffer":241,"./modules/es6.typed.data-view":242,"./modules/es6.typed.float32-array":243,"./modules/es6.typed.float64-array":244,"./modules/es6.typed.int16-array":245,"./modules/es6.typed.int32-array":246,"./modules/es6.typed.int8-array":247,"./modules/es6.typed.uint16-array":248,"./modules/es6.typed.uint32-array":249,"./modules/es6.typed.uint8-array":250,"./modules/es6.typed.uint8-clamped-array":251,"./modules/es6.weak-map":252,"./modules/es6.weak-set":253,"./modules/es7.array.includes":254,"./modules/es7.error.is-error":255,"./modules/es7.map.to-json":256,"./modules/es7.math.iaddh":257,"./modules/es7.math.imulh":258,"./modules/es7.math.isubh":259,"./modules/es7.math.umulh":260,"./modules/es7.object.define-getter":261,"./modules/es7.object.define-setter":262,"./modules/es7.object.entries":263,"./modules/es7.object.get-own-property-descriptors":264,"./modules/es7.object.lookup-getter":265,"./modules/es7.object.lookup-setter":266,"./modules/es7.object.values":267,"./modules/es7.reflect.define-metadata":268,"./modules/es7.reflect.delete-metadata":269,"./modules/es7.reflect.get-metadata":271,"./modules/es7.reflect.get-metadata-keys":270,"./modules/es7.reflect.get-own-metadata":273,"./modules/es7.reflect.get-own-metadata-keys":272,"./modules/es7.reflect.has-metadata":274,"./modules/es7.reflect.has-own-metadata":275,"./modules/es7.reflect.metadata":276,"./modules/es7.set.to-json":277,"./modules/es7.string.at":278,"./modules/es7.string.match-all":279,"./modules/es7.string.pad-end":280,"./modules/es7.string.pad-start":281,"./modules/es7.string.trim-left":282,"./modules/es7.string.trim-right":283,"./modules/es7.system.global":284,"./modules/web.dom.iterable":285,"./modules/web.immediate":286,"./modules/web.timers":287}],289:[function(require,module,exports){
(function (process,global){
/**
 * Copyright (c) 2014, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * https://raw.github.com/facebook/regenerator/master/LICENSE file. An
 * additional grant of patent rights can be found in the PATENTS file in
 * the same directory.
 */

!(function(global) {
  "use strict";

  var hasOwn = Object.prototype.hasOwnProperty;
  var undefined; // More compressible than void 0.
  var iteratorSymbol =
    typeof Symbol === "function" && Symbol.iterator || "@@iterator";

  var inModule = typeof module === "object";
  var runtime = global.regeneratorRuntime;
  if (runtime) {
    if (inModule) {
      // If regeneratorRuntime is defined globally and we're in a module,
      // make the exports object identical to regeneratorRuntime.
      module.exports = runtime;
    }
    // Don't bother evaluating the rest of this file if the runtime was
    // already defined globally.
    return;
  }

  // Define the runtime globally (as expected by generated code) as either
  // module.exports (if we're in a module) or a new, empty object.
  runtime = global.regeneratorRuntime = inModule ? module.exports : {};

  function wrap(innerFn, outerFn, self, tryLocsList) {
    // If outerFn provided, then outerFn.prototype instanceof Generator.
    var generator = Object.create((outerFn || Generator).prototype);
    var context = new Context(tryLocsList || []);

    // The ._invoke method unifies the implementations of the .next,
    // .throw, and .return methods.
    generator._invoke = makeInvokeMethod(innerFn, self, context);

    return generator;
  }
  runtime.wrap = wrap;

  // Try/catch helper to minimize deoptimizations. Returns a completion
  // record like context.tryEntries[i].completion. This interface could
  // have been (and was previously) designed to take a closure to be
  // invoked without arguments, but in all the cases we care about we
  // already have an existing method we want to call, so there's no need
  // to create a new function object. We can even get away with assuming
  // the method takes exactly one argument, since that happens to be true
  // in every case, so we don't have to touch the arguments object. The
  // only additional allocation required is the completion record, which
  // has a stable shape and so hopefully should be cheap to allocate.
  function tryCatch(fn, obj, arg) {
    try {
      return { type: "normal", arg: fn.call(obj, arg) };
    } catch (err) {
      return { type: "throw", arg: err };
    }
  }

  var GenStateSuspendedStart = "suspendedStart";
  var GenStateSuspendedYield = "suspendedYield";
  var GenStateExecuting = "executing";
  var GenStateCompleted = "completed";

  // Returning this object from the innerFn has the same effect as
  // breaking out of the dispatch switch statement.
  var ContinueSentinel = {};

  // Dummy constructor functions that we use as the .constructor and
  // .constructor.prototype properties for functions that return Generator
  // objects. For full spec compliance, you may wish to configure your
  // minifier not to mangle the names of these two functions.
  function Generator() {}
  function GeneratorFunction() {}
  function GeneratorFunctionPrototype() {}

  var Gp = GeneratorFunctionPrototype.prototype = Generator.prototype;
  GeneratorFunction.prototype = Gp.constructor = GeneratorFunctionPrototype;
  GeneratorFunctionPrototype.constructor = GeneratorFunction;
  GeneratorFunction.displayName = "GeneratorFunction";

  // Helper for defining the .next, .throw, and .return methods of the
  // Iterator interface in terms of a single ._invoke method.
  function defineIteratorMethods(prototype) {
    ["next", "throw", "return"].forEach(function(method) {
      prototype[method] = function(arg) {
        return this._invoke(method, arg);
      };
    });
  }

  runtime.isGeneratorFunction = function(genFun) {
    var ctor = typeof genFun === "function" && genFun.constructor;
    return ctor
      ? ctor === GeneratorFunction ||
        // For the native GeneratorFunction constructor, the best we can
        // do is to check its .name property.
        (ctor.displayName || ctor.name) === "GeneratorFunction"
      : false;
  };

  runtime.mark = function(genFun) {
    if (Object.setPrototypeOf) {
      Object.setPrototypeOf(genFun, GeneratorFunctionPrototype);
    } else {
      genFun.__proto__ = GeneratorFunctionPrototype;
    }
    genFun.prototype = Object.create(Gp);
    return genFun;
  };

  // Within the body of any async function, `await x` is transformed to
  // `yield regeneratorRuntime.awrap(x)`, so that the runtime can test
  // `value instanceof AwaitArgument` to determine if the yielded value is
  // meant to be awaited. Some may consider the name of this method too
  // cutesy, but they are curmudgeons.
  runtime.awrap = function(arg) {
    return new AwaitArgument(arg);
  };

  function AwaitArgument(arg) {
    this.arg = arg;
  }

  function AsyncIterator(generator) {
    // This invoke function is written in a style that assumes some
    // calling function (or Promise) will handle exceptions.
    function invoke(method, arg) {
      var result = generator[method](arg);
      var value = result.value;
      return value instanceof AwaitArgument
        ? Promise.resolve(value.arg).then(invokeNext, invokeThrow)
        : Promise.resolve(value).then(function(unwrapped) {
            // When a yielded Promise is resolved, its final value becomes
            // the .value of the Promise<{value,done}> result for the
            // current iteration. If the Promise is rejected, however, the
            // result for this iteration will be rejected with the same
            // reason. Note that rejections of yielded Promises are not
            // thrown back into the generator function, as is the case
            // when an awaited Promise is rejected. This difference in
            // behavior between yield and await is important, because it
            // allows the consumer to decide what to do with the yielded
            // rejection (swallow it and continue, manually .throw it back
            // into the generator, abandon iteration, whatever). With
            // await, by contrast, there is no opportunity to examine the
            // rejection reason outside the generator function, so the
            // only option is to throw it from the await expression, and
            // let the generator function handle the exception.
            result.value = unwrapped;
            return result;
          });
    }

    if (typeof process === "object" && process.domain) {
      invoke = process.domain.bind(invoke);
    }

    var invokeNext = invoke.bind(generator, "next");
    var invokeThrow = invoke.bind(generator, "throw");
    var invokeReturn = invoke.bind(generator, "return");
    var previousPromise;

    function enqueue(method, arg) {
      function callInvokeWithMethodAndArg() {
        return invoke(method, arg);
      }

      return previousPromise =
        // If enqueue has been called before, then we want to wait until
        // all previous Promises have been resolved before calling invoke,
        // so that results are always delivered in the correct order. If
        // enqueue has not been called before, then it is important to
        // call invoke immediately, without waiting on a callback to fire,
        // so that the async generator function has the opportunity to do
        // any necessary setup in a predictable way. This predictability
        // is why the Promise constructor synchronously invokes its
        // executor callback, and why async functions synchronously
        // execute code before the first await. Since we implement simple
        // async functions in terms of async generators, it is especially
        // important to get this right, even though it requires care.
        previousPromise ? previousPromise.then(
          callInvokeWithMethodAndArg,
          // Avoid propagating failures to Promises returned by later
          // invocations of the iterator.
          callInvokeWithMethodAndArg
        ) : new Promise(function (resolve) {
          resolve(callInvokeWithMethodAndArg());
        });
    }

    // Define the unified helper method that is used to implement .next,
    // .throw, and .return (see defineIteratorMethods).
    this._invoke = enqueue;
  }

  defineIteratorMethods(AsyncIterator.prototype);

  // Note that simple async functions are implemented on top of
  // AsyncIterator objects; they just return a Promise for the value of
  // the final result produced by the iterator.
  runtime.async = function(innerFn, outerFn, self, tryLocsList) {
    var iter = new AsyncIterator(
      wrap(innerFn, outerFn, self, tryLocsList)
    );

    return runtime.isGeneratorFunction(outerFn)
      ? iter // If outerFn is a generator, return the full iterator.
      : iter.next().then(function(result) {
          return result.done ? result.value : iter.next();
        });
  };

  function makeInvokeMethod(innerFn, self, context) {
    var state = GenStateSuspendedStart;

    return function invoke(method, arg) {
      if (state === GenStateExecuting) {
        throw new Error("Generator is already running");
      }

      if (state === GenStateCompleted) {
        if (method === "throw") {
          throw arg;
        }

        // Be forgiving, per 25.3.3.3.3 of the spec:
        // https://people.mozilla.org/~jorendorff/es6-draft.html#sec-generatorresume
        return doneResult();
      }

      while (true) {
        var delegate = context.delegate;
        if (delegate) {
          if (method === "return" ||
              (method === "throw" && delegate.iterator[method] === undefined)) {
            // A return or throw (when the delegate iterator has no throw
            // method) always terminates the yield* loop.
            context.delegate = null;

            // If the delegate iterator has a return method, give it a
            // chance to clean up.
            var returnMethod = delegate.iterator["return"];
            if (returnMethod) {
              var record = tryCatch(returnMethod, delegate.iterator, arg);
              if (record.type === "throw") {
                // If the return method threw an exception, let that
                // exception prevail over the original return or throw.
                method = "throw";
                arg = record.arg;
                continue;
              }
            }

            if (method === "return") {
              // Continue with the outer return, now that the delegate
              // iterator has been terminated.
              continue;
            }
          }

          var record = tryCatch(
            delegate.iterator[method],
            delegate.iterator,
            arg
          );

          if (record.type === "throw") {
            context.delegate = null;

            // Like returning generator.throw(uncaught), but without the
            // overhead of an extra function call.
            method = "throw";
            arg = record.arg;
            continue;
          }

          // Delegate generator ran and handled its own exceptions so
          // regardless of what the method was, we continue as if it is
          // "next" with an undefined arg.
          method = "next";
          arg = undefined;

          var info = record.arg;
          if (info.done) {
            context[delegate.resultName] = info.value;
            context.next = delegate.nextLoc;
          } else {
            state = GenStateSuspendedYield;
            return info;
          }

          context.delegate = null;
        }

        if (method === "next") {
          context._sent = arg;

          if (state === GenStateSuspendedYield) {
            context.sent = arg;
          } else {
            context.sent = undefined;
          }
        } else if (method === "throw") {
          if (state === GenStateSuspendedStart) {
            state = GenStateCompleted;
            throw arg;
          }

          if (context.dispatchException(arg)) {
            // If the dispatched exception was caught by a catch block,
            // then let that catch block handle the exception normally.
            method = "next";
            arg = undefined;
          }

        } else if (method === "return") {
          context.abrupt("return", arg);
        }

        state = GenStateExecuting;

        var record = tryCatch(innerFn, self, context);
        if (record.type === "normal") {
          // If an exception is thrown from innerFn, we leave state ===
          // GenStateExecuting and loop back for another invocation.
          state = context.done
            ? GenStateCompleted
            : GenStateSuspendedYield;

          var info = {
            value: record.arg,
            done: context.done
          };

          if (record.arg === ContinueSentinel) {
            if (context.delegate && method === "next") {
              // Deliberately forget the last sent value so that we don't
              // accidentally pass it on to the delegate.
              arg = undefined;
            }
          } else {
            return info;
          }

        } else if (record.type === "throw") {
          state = GenStateCompleted;
          // Dispatch the exception by looping back around to the
          // context.dispatchException(arg) call above.
          method = "throw";
          arg = record.arg;
        }
      }
    };
  }

  // Define Generator.prototype.{next,throw,return} in terms of the
  // unified ._invoke helper method.
  defineIteratorMethods(Gp);

  Gp[iteratorSymbol] = function() {
    return this;
  };

  Gp.toString = function() {
    return "[object Generator]";
  };

  function pushTryEntry(locs) {
    var entry = { tryLoc: locs[0] };

    if (1 in locs) {
      entry.catchLoc = locs[1];
    }

    if (2 in locs) {
      entry.finallyLoc = locs[2];
      entry.afterLoc = locs[3];
    }

    this.tryEntries.push(entry);
  }

  function resetTryEntry(entry) {
    var record = entry.completion || {};
    record.type = "normal";
    delete record.arg;
    entry.completion = record;
  }

  function Context(tryLocsList) {
    // The root entry object (effectively a try statement without a catch
    // or a finally block) gives us a place to store values thrown from
    // locations where there is no enclosing try statement.
    this.tryEntries = [{ tryLoc: "root" }];
    tryLocsList.forEach(pushTryEntry, this);
    this.reset(true);
  }

  runtime.keys = function(object) {
    var keys = [];
    for (var key in object) {
      keys.push(key);
    }
    keys.reverse();

    // Rather than returning an object with a next method, we keep
    // things simple and return the next function itself.
    return function next() {
      while (keys.length) {
        var key = keys.pop();
        if (key in object) {
          next.value = key;
          next.done = false;
          return next;
        }
      }

      // To avoid creating an additional object, we just hang the .value
      // and .done properties off the next function object itself. This
      // also ensures that the minifier will not anonymize the function.
      next.done = true;
      return next;
    };
  };

  function values(iterable) {
    if (iterable) {
      var iteratorMethod = iterable[iteratorSymbol];
      if (iteratorMethod) {
        return iteratorMethod.call(iterable);
      }

      if (typeof iterable.next === "function") {
        return iterable;
      }

      if (!isNaN(iterable.length)) {
        var i = -1, next = function next() {
          while (++i < iterable.length) {
            if (hasOwn.call(iterable, i)) {
              next.value = iterable[i];
              next.done = false;
              return next;
            }
          }

          next.value = undefined;
          next.done = true;

          return next;
        };

        return next.next = next;
      }
    }

    // Return an iterator with no values.
    return { next: doneResult };
  }
  runtime.values = values;

  function doneResult() {
    return { value: undefined, done: true };
  }

  Context.prototype = {
    constructor: Context,

    reset: function(skipTempReset) {
      this.prev = 0;
      this.next = 0;
      this.sent = undefined;
      this.done = false;
      this.delegate = null;

      this.tryEntries.forEach(resetTryEntry);

      if (!skipTempReset) {
        for (var name in this) {
          // Not sure about the optimal order of these conditions:
          if (name.charAt(0) === "t" &&
              hasOwn.call(this, name) &&
              !isNaN(+name.slice(1))) {
            this[name] = undefined;
          }
        }
      }
    },

    stop: function() {
      this.done = true;

      var rootEntry = this.tryEntries[0];
      var rootRecord = rootEntry.completion;
      if (rootRecord.type === "throw") {
        throw rootRecord.arg;
      }

      return this.rval;
    },

    dispatchException: function(exception) {
      if (this.done) {
        throw exception;
      }

      var context = this;
      function handle(loc, caught) {
        record.type = "throw";
        record.arg = exception;
        context.next = loc;
        return !!caught;
      }

      for (var i = this.tryEntries.length - 1; i >= 0; --i) {
        var entry = this.tryEntries[i];
        var record = entry.completion;

        if (entry.tryLoc === "root") {
          // Exception thrown outside of any try block that could handle
          // it, so set the completion value of the entire function to
          // throw the exception.
          return handle("end");
        }

        if (entry.tryLoc <= this.prev) {
          var hasCatch = hasOwn.call(entry, "catchLoc");
          var hasFinally = hasOwn.call(entry, "finallyLoc");

          if (hasCatch && hasFinally) {
            if (this.prev < entry.catchLoc) {
              return handle(entry.catchLoc, true);
            } else if (this.prev < entry.finallyLoc) {
              return handle(entry.finallyLoc);
            }

          } else if (hasCatch) {
            if (this.prev < entry.catchLoc) {
              return handle(entry.catchLoc, true);
            }

          } else if (hasFinally) {
            if (this.prev < entry.finallyLoc) {
              return handle(entry.finallyLoc);
            }

          } else {
            throw new Error("try statement without catch or finally");
          }
        }
      }
    },

    abrupt: function(type, arg) {
      for (var i = this.tryEntries.length - 1; i >= 0; --i) {
        var entry = this.tryEntries[i];
        if (entry.tryLoc <= this.prev &&
            hasOwn.call(entry, "finallyLoc") &&
            this.prev < entry.finallyLoc) {
          var finallyEntry = entry;
          break;
        }
      }

      if (finallyEntry &&
          (type === "break" ||
           type === "continue") &&
          finallyEntry.tryLoc <= arg &&
          arg <= finallyEntry.finallyLoc) {
        // Ignore the finally entry if control is not jumping to a
        // location outside the try/catch block.
        finallyEntry = null;
      }

      var record = finallyEntry ? finallyEntry.completion : {};
      record.type = type;
      record.arg = arg;

      if (finallyEntry) {
        this.next = finallyEntry.finallyLoc;
      } else {
        this.complete(record);
      }

      return ContinueSentinel;
    },

    complete: function(record, afterLoc) {
      if (record.type === "throw") {
        throw record.arg;
      }

      if (record.type === "break" ||
          record.type === "continue") {
        this.next = record.arg;
      } else if (record.type === "return") {
        this.rval = record.arg;
        this.next = "end";
      } else if (record.type === "normal" && afterLoc) {
        this.next = afterLoc;
      }
    },

    finish: function(finallyLoc) {
      for (var i = this.tryEntries.length - 1; i >= 0; --i) {
        var entry = this.tryEntries[i];
        if (entry.finallyLoc === finallyLoc) {
          this.complete(entry.completion, entry.afterLoc);
          resetTryEntry(entry);
          return ContinueSentinel;
        }
      }
    },

    "catch": function(tryLoc) {
      for (var i = this.tryEntries.length - 1; i >= 0; --i) {
        var entry = this.tryEntries[i];
        if (entry.tryLoc === tryLoc) {
          var record = entry.completion;
          if (record.type === "throw") {
            var thrown = record.arg;
            resetTryEntry(entry);
          }
          return thrown;
        }
      }

      // The context.catch method must only be called with a location
      // argument that corresponds to a known catch block.
      throw new Error("illegal catch attempt");
    },

    delegateYield: function(iterable, resultName, nextLoc) {
      this.delegate = {
        iterator: values(iterable),
        resultName: resultName,
        nextLoc: nextLoc
      };

      return ContinueSentinel;
    }
  };
})(
  // Among the various tricks for obtaining a reference to the global
  // object, this seems to be the most reliable technique that does not
  // use indirect eval (which violates Content Security Policy).
  typeof global === "object" ? global :
  typeof window === "object" ? window :
  typeof self === "object" ? self : this
);

}).call(this,require('_process'),typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {})

},{"_process":290}],290:[function(require,module,exports){
// shim for using process in browser

var process = module.exports = {};
var queue = [];
var draining = false;
var currentQueue;
var queueIndex = -1;

function cleanUpNextTick() {
    draining = false;
    if (currentQueue.length) {
        queue = currentQueue.concat(queue);
    } else {
        queueIndex = -1;
    }
    if (queue.length) {
        drainQueue();
    }
}

function drainQueue() {
    if (draining) {
        return;
    }
    var timeout = setTimeout(cleanUpNextTick);
    draining = true;

    var len = queue.length;
    while(len) {
        currentQueue = queue;
        queue = [];
        while (++queueIndex < len) {
            if (currentQueue) {
                currentQueue[queueIndex].run();
            }
        }
        queueIndex = -1;
        len = queue.length;
    }
    currentQueue = null;
    draining = false;
    clearTimeout(timeout);
}

process.nextTick = function (fun) {
    var args = new Array(arguments.length - 1);
    if (arguments.length > 1) {
        for (var i = 1; i < arguments.length; i++) {
            args[i - 1] = arguments[i];
        }
    }
    queue.push(new Item(fun, args));
    if (queue.length === 1 && !draining) {
        setTimeout(drainQueue, 0);
    }
};

// v8 likes predictible objects
function Item(fun, array) {
    this.fun = fun;
    this.array = array;
}
Item.prototype.run = function () {
    this.fun.apply(null, this.array);
};
process.title = 'browser';
process.browser = true;
process.env = {};
process.argv = [];
process.version = ''; // empty string to avoid regexp issues
process.versions = {};

function noop() {}

process.on = noop;
process.addListener = noop;
process.once = noop;
process.off = noop;
process.removeListener = noop;
process.removeAllListeners = noop;
process.emit = noop;

process.binding = function (name) {
    throw new Error('process.binding is not supported');
};

process.cwd = function () { return '/' };
process.chdir = function (dir) {
    throw new Error('process.chdir is not supported');
};
process.umask = function() { return 0; };

},{}],291:[function(require,module,exports){
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = {
  tempo: 120,
  octave: 4,
  length: 4,
  velocity: 100,
  quantize: 75,
  loopCount: 2
};

},{}],292:[function(require,module,exports){
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _Syntax = require("./Syntax");

var _Syntax2 = _interopRequireDefault(_Syntax);

var _Scanner = require("./Scanner");

var _Scanner2 = _interopRequireDefault(_Scanner);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

var NOTE_INDEXES = { c: 0, d: 2, e: 4, f: 5, g: 7, a: 9, b: 11 };

var MMLParser = function () {
  function MMLParser(source) {
    _classCallCheck(this, MMLParser);

    this.scanner = new _Scanner2.default(source);
  }

  _createClass(MMLParser, [{
    key: "parse",
    value: function parse() {
      var _this = this;

      var result = [];

      this._readUntil(";", function () {
        result = result.concat(_this.advance());
      });

      return result;
    }
  }, {
    key: "advance",
    value: function advance() {
      switch (this.scanner.peek()) {
        case "c":
        case "d":
        case "e":
        case "f":
        case "g":
        case "a":
        case "b":
          return this.readNote();
        case "[":
          return this.readChord();
        case "r":
          return this.readRest();
        case "o":
          return this.readOctave();
        case ">":
          return this.readOctaveShift(+1);
        case "<":
          return this.readOctaveShift(-1);
        case "l":
          return this.readNoteLength();
        case "q":
          return this.readNoteQuantize();
        case "v":
          return this.readNoteVelocity();
        case "t":
          return this.readTempo();
        case "$":
          return this.readInfiniteLoop();
        case "/":
          return this.readLoop();
        case "@":
          return this.readTone();
        case "w":
          return this.readWaveForm();
        case "s":
          return this.readEnvelope();
        default:
        // do nothing
      }
      this.scanner.throwUnexpectedToken();
    }
  }, {
    key: "readNote",
    value: function readNote() {
      return {
        type: _Syntax2.default.Note,
        noteNumbers: [this._readNoteNumber(0)],
        noteLength: this._readLength()
      };
    }
  }, {
    key: "readChord",
    value: function readChord() {
      var _this2 = this;

      this.scanner.expect("[");

      var noteList = [];
      var offset = 0;

      this._readUntil("]", function () {
        switch (_this2.scanner.peek()) {
          case "c":
          case "d":
          case "e":
          case "f":
          case "g":
          case "a":
          case "b":
            noteList.push(_this2._readNoteNumber(offset));
            break;
          case ">":
            _this2.scanner.next();
            offset += 12;
            break;
          case "<":
            _this2.scanner.next();
            offset -= 12;
            break;
          default:
            _this2.scanner.throwUnexpectedToken();
        }
      });

      this.scanner.expect("]");

      return {
        type: _Syntax2.default.Note,
        noteNumbers: noteList,
        noteLength: this._readLength()
      };
    }
  }, {
    key: "readRest",
    value: function readRest() {
      this.scanner.expect("r");

      return {
        type: _Syntax2.default.Rest,
        noteLength: this._readLength()
      };
    }
  }, {
    key: "readOctave",
    value: function readOctave() {
      this.scanner.expect("o");

      return {
        type: _Syntax2.default.Octave,
        value: this._readArgument(/\d+/)
      };
    }
  }, {
    key: "readOctaveShift",
    value: function readOctaveShift(direction) {
      this.scanner.expect(/<|>/);

      return {
        type: _Syntax2.default.OctaveShift,
        direction: direction | 0,
        value: this._readArgument(/\d+/)
      };
    }
  }, {
    key: "readNoteLength",
    value: function readNoteLength() {
      this.scanner.expect("l");

      return {
        type: _Syntax2.default.NoteLength,
        noteLength: this._readLength()
      };
    }
  }, {
    key: "readNoteQuantize",
    value: function readNoteQuantize() {
      this.scanner.expect("q");

      return {
        type: _Syntax2.default.NoteQuantize,
        value: this._readArgument(/\d+/)
      };
    }
  }, {
    key: "readNoteVelocity",
    value: function readNoteVelocity() {
      this.scanner.expect("v");

      return {
        type: _Syntax2.default.NoteVelocity,
        value: this._readArgument(/\d+/)
      };
    }
  }, {
    key: "readTempo",
    value: function readTempo() {
      this.scanner.expect("t");

      return {
        type: _Syntax2.default.Tempo,
        value: this._readArgument(/\d+(\.\d+)?/)
      };
    }
  }, {
    key: "readInfiniteLoop",
    value: function readInfiniteLoop() {
      this.scanner.expect("$");

      return {
        type: _Syntax2.default.InfiniteLoop
      };
    }
  }, {
    key: "readLoop",
    value: function readLoop() {
      var _this3 = this;

      this.scanner.expect("/");
      this.scanner.expect(":");

      var result = [];
      var loopBegin = { type: _Syntax2.default.LoopBegin };
      var loopEnd = { type: _Syntax2.default.LoopEnd };

      result = result.concat(loopBegin);
      this._readUntil(/[|:]/, function () {
        result = result.concat(_this3.advance());
      });
      result = result.concat(this._readLoopExit());

      this.scanner.expect(":");
      this.scanner.expect("/");

      loopBegin.value = this._readArgument(/\d+/) || null;

      result = result.concat(loopEnd);

      return result;
    }
  }, {
    key: "readTone",
    value: function readTone() {
      this.scanner.expect("@");
      return {
        type: _Syntax2.default.Tone,
        value: this._readArgument(/\d+/)
      };
    }
  }, {
    key: "readWaveForm",
    value: function readWaveForm() {
      this.scanner.expect("w");
      this.scanner.expect("\"");
      var waveData = this.scanner.scan(/[0-9a-fA-F]+?/);
      this.scanner.expect("\"");
      return {
        type: _Syntax2.default.WaveForm,
        value: waveData
      };
    }
  }, {
    key: "readEnvelope",
    value: function readEnvelope() {
      this.scanner.expect("s");
      var a = this._readArgument(/\d+(\.\d+)?/);
      this.scanner.expect(",");
      var d = this._readArgument(/\d+(\.\d+)?/);
      this.scanner.expect(",");
      var s = this._readArgument(/\d+(\.\d+)?/);
      this.scanner.expect(",");
      var r = this._readArgument(/\d+(\.\d+)?/);
      return {
        type: _Syntax2.default.Envelope,
        a: a, d: d, s: s, r: r
      };
    }
  }, {
    key: "_readUntil",
    value: function _readUntil(matcher, callback) {
      while (this.scanner.hasNext()) {
        this.scanner.forward();
        if (!this.scanner.hasNext() || this.scanner.match(matcher)) {
          break;
        }
        callback();
      }
    }
  }, {
    key: "_readArgument",
    value: function _readArgument(matcher) {
      var num = this.scanner.scan(matcher);

      return num !== null ? +num : null;
    }
  }, {
    key: "_readNoteNumber",
    value: function _readNoteNumber(offset) {
      var noteIndex = NOTE_INDEXES[this.scanner.next()];

      return noteIndex + this._readAccidental() + offset;
    }
  }, {
    key: "_readAccidental",
    value: function _readAccidental() {
      if (this.scanner.match("+")) {
        return +1 * this.scanner.scan(/\++/).length;
      }
      if (this.scanner.match("-")) {
        return -1 * this.scanner.scan(/\-+/).length;
      }
      return 0;
    }
  }, {
    key: "_readDot",
    value: function _readDot() {
      var len = (this.scanner.scan(/\.+/) || "").length;
      var result = new Array(len);

      for (var i = 0; i < len; i++) {
        result[i] = 0;
      }

      return result;
    }
  }, {
    key: "_readLength",
    value: function _readLength() {
      var result = [];

      result = result.concat(this._readArgument(/\d+/));
      result = result.concat(this._readDot());

      var tie = this._readTie();

      if (tie) {
        result = result.concat(tie);
      }

      return result;
    }
  }, {
    key: "_readTie",
    value: function _readTie() {
      this.scanner.forward();

      if (this.scanner.match("^")) {
        this.scanner.next();
        return this._readLength();
      }

      return null;
    }
  }, {
    key: "_readLoopExit",
    value: function _readLoopExit() {
      var _this4 = this;

      var result = [];

      if (this.scanner.match("|")) {
        this.scanner.next();

        var loopExit = { type: _Syntax2.default.LoopExit };

        result = result.concat(loopExit);

        this._readUntil(":", function () {
          result = result.concat(_this4.advance());
        });
      }

      return result;
    }
  }]);

  return MMLParser;
}();

exports.default = MMLParser;

},{"./Scanner":293,"./Syntax":294}],293:[function(require,module,exports){
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

var Scanner = function () {
  function Scanner(source) {
    _classCallCheck(this, Scanner);

    this.source = source;
    this.index = 0;
  }

  _createClass(Scanner, [{
    key: "hasNext",
    value: function hasNext() {
      return this.index < this.source.length;
    }
  }, {
    key: "peek",
    value: function peek() {
      return this.source.charAt(this.index) || "";
    }
  }, {
    key: "next",
    value: function next() {
      return this.source.charAt(this.index++) || "";
    }
  }, {
    key: "forward",
    value: function forward() {
      while (this.hasNext() && this.match(/\s/)) {
        this.index += 1;
      }
    }
  }, {
    key: "match",
    value: function match(matcher) {
      if (matcher instanceof RegExp) {
        return matcher.test(this.peek());
      }
      return this.peek() === matcher;
    }
  }, {
    key: "expect",
    value: function expect(matcher) {
      if (!this.match(matcher)) {
        this.throwUnexpectedToken();
      }
      this.index += 1;
    }
  }, {
    key: "scan",
    value: function scan(matcher) {
      var target = this.source.substr(this.index);
      var result = null;

      if (matcher instanceof RegExp) {
        var matched = matcher.exec(target);

        if (matched && matched.index === 0) {
          result = matched[0];
        }
      } else if (target.substr(0, matcher.length) === matcher) {
        result = matcher;
      }

      if (result) {
        this.index += result.length;
      }

      return result;
    }
  }, {
    key: "throwUnexpectedToken",
    value: function throwUnexpectedToken() {
      var identifier = this.peek() || "ILLEGAL";

      throw new SyntaxError("Unexpected token: " + identifier);
    }
  }]);

  return Scanner;
}();

exports.default = Scanner;

},{}],294:[function(require,module,exports){
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = {
  Note: "Note",
  Rest: "Rest",
  Octave: "Octave",
  OctaveShift: "OctaveShift",
  NoteLength: "NoteLength",
  NoteVelocity: "NoteVelocity",
  NoteQuantize: "NoteQuantize",
  Tempo: "Tempo",
  InfiniteLoop: "InfiniteLoop",
  LoopBegin: "LoopBegin",
  LoopExit: "LoopExit",
  LoopEnd: "LoopEnd",
  Tone: "Tone",
  WaveForm: "WaveForm",
  Envelope: "Envelope"
};

},{}],295:[function(require,module,exports){
"use strict";
//// Web Audio API ラッパークラス ////

// MMLParserはmohayonaoさんのもの
// https://github.com/mohayonao/mml-iterator

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.Sequencer = exports.Note = exports.Audio = exports.OscVoice = exports.Voice = exports.EnvelopeGenerator = undefined;

var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol ? "symbol" : typeof obj; };

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

exports.decodeStr = decodeStr;
exports.WaveSample = WaveSample;
exports.createWaveSampleFromWaves = createWaveSampleFromWaves;

var _Syntax = require("./Syntax");

var _Syntax2 = _interopRequireDefault(_Syntax);

var _Scanner = require("./Scanner");

var _Scanner2 = _interopRequireDefault(_Scanner);

var _MMLParser = require("./MMLParser");

var _MMLParser2 = _interopRequireDefault(_MMLParser);

var _DefaultParams = require("./DefaultParams");

var _DefaultParams2 = _interopRequireDefault(_DefaultParams);

var _lzbase = require("./lzbase62.min");

var _lzbase2 = _interopRequireDefault(_lzbase);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

// var fft = new FFT(4096, 44100);
var BUFFER_SIZE = 1024;
var TIME_BASE = 96;

// MIDIノート => 再生レート変換テーブル
var noteFreq = [];
for (var i = -69; i < 58; ++i) {
  noteFreq.push(Math.pow(2, i / 12));
}

// MIDIノート周波数 変換テーブル
var midiFreq = [];
for (var _i = 0; _i < 127; ++_i) {
  midiFreq.push(midicps(_i));
}
function midicps(noteNumber) {
  return 440 * Math.pow(2, (noteNumber - 69) * 1 / 12);
}

function decodeStr(bits, wavestr) {
  var arr = [];
  var n = bits / 4 | 0;
  var c = 0;
  var zeropos = 1 << bits - 1;
  while (c < wavestr.length) {
    var d = 0;
    for (var i = 0; i < n; ++i) {
      d = (d << 4) + parseInt(wavestr.charAt(c++), '16');
    }
    arr.push((d - zeropos) / zeropos);
  }
  return arr;
}

var waves = [decodeStr(4, 'EEEEEEEEEEEEEEEE0000000000000000'), decodeStr(4, '00112233445566778899AABBCCDDEEFF'), decodeStr(4, '023466459AA8A7A977965656ACAACDEF'), decodeStr(4, 'BDCDCA999ACDCDB94212367776321247'), decodeStr(4, '7ACDEDCA742101247BDEDB7320137E78'), decodeStr(4, 'ACCA779BDEDA66679994101267742247'), decodeStr(4, '7EC9CEA7CFD8AB728D94572038513531'), decodeStr(4, 'EE77EE77EE77EE770077007700770077'), decodeStr(4, 'EEEE8888888888880000888888888888') //ノイズ用のダミー波形
];

var waveSamples = [];
function WaveSample(audioctx, ch, sampleLength, sampleRate) {

  this.sample = audioctx.createBuffer(ch, sampleLength, sampleRate || audioctx.sampleRate);
  this.loop = false;
  this.start = 0;
  this.end = (sampleLength - 1) / (sampleRate || audioctx.sampleRate);
}

function createWaveSampleFromWaves(audioctx, sampleLength) {
  for (var i = 0, end = waves.length; i < end; ++i) {
    var sample = new WaveSample(audioctx, 1, sampleLength);
    waveSamples.push(sample);
    if (i != 8) {
      var wavedata = waves[i];
      var delta = 440.0 * wavedata.length / audioctx.sampleRate;
      var stime = 0;
      var output = sample.sample.getChannelData(0);
      var len = wavedata.length;
      var index = 0;
      var endsample = 0;
      for (var j = 0; j < sampleLength; ++j) {
        index = stime | 0;
        output[j] = wavedata[index];
        stime += delta;
        if (stime >= len) {
          stime = stime - len;
          endsample = j;
        }
      }
      sample.end = endsample / audioctx.sampleRate;
      sample.loop = true;
    } else {
      // ボイス8はノイズ波形とする
      var output = sample.sample.getChannelData(0);
      for (var j = 0; j < sampleLength; ++j) {
        output[j] = Math.random() * 2.0 - 1.0;
      }
      sample.end = sampleLength / audioctx.sampleRate;
      sample.loop = true;
    }
  }
}

// 参考：http://www.g200kg.com/archives/2014/12/webaudioapiperi.html
function fourier(waveform, len) {
  var real = new Float32Array(len),
      imag = new Float32Array(len);
  var wavlen = waveform.length;
  for (var i = 0; i < len; ++i) {
    for (var j = 0; j < len; ++j) {
      var wavj = j / len * wavlen;
      var d = waveform[wavj | 0];
      var th = i * j / len * 2 * Math.PI;
      real[i] += Math.cos(th) * d;
      imag[i] += Math.sin(th) * d;
    }
  }
  return [real, imag];
}

function createPeriodicWaveFromWaves(audioctx) {
  return waves.map(function (d, i) {
    if (i != 8) {
      var waveData = waves[i];
      var freqData = fourier(waveData, waveData.length);
      return audioctx.createPeriodicWave(freqData[0], freqData[1]);
    } else {
      var _waveData = [];
      for (var j = 0, e = waves[i].length; j < e; ++j) {
        _waveData.push(Math.random() * 2.0 - 1.0);
      }
      var _freqData = fourier(_waveData, _waveData.length);
      return audioctx.createPeriodicWave(_freqData[0], _freqData[1]);
    }
  });
}

// ドラムサンプル

var drumSamples = [{ name: 'bass1', path: 'bd1_lz.json' }, // @9
{ name: 'bass2', path: 'bd2_lz.json' }, // @10
{ name: 'closed', path: 'closed_lz.json' }, // @11
{ name: 'cowbell', path: 'cowbell_lz.json' }, // @12
{ name: 'crash', path: 'crash_lz.json' }, // @13
{ name: 'handclap', path: 'handclap_lz.json' }, // @14
{ name: 'hitom', path: 'hitom_lz.json' }, // @15
{ name: 'lowtom', path: 'lowtom_lz.json' }, // @16
{ name: 'midtom', path: 'midtom_lz.json' }, // @17
{ name: 'open', path: 'open_lz.json' }, // @18
{ name: 'ride', path: 'ride_lz.json' }, // @19
{ name: 'rimshot', path: 'rimshot_lz.json' }, // @20
{ name: 'sd1', path: 'sd1_lz.json' }, // @21
{ name: 'sd2', path: 'sd2_lz.json' }, // @22
{ name: 'tamb', path: 'tamb_lz.json' } // @23
];

var xhr = new XMLHttpRequest();
function json(url) {
  return new Promise(function (resolve, reject) {
    xhr.open("get", url, true);
    xhr.onload = function () {
      if (xhr.status == 200) {
        resolve(JSON.parse(this.responseText));
      } else {
        reject(new Error('XMLHttpRequest Error:' + xhr.status));
      }
    };
    xhr.onerror = function (err) {
      reject(err);
    };
    xhr.send(null);
  });
}

function readDrumSample(audioctx) {
  var pr = Promise.resolve(0);

  drumSamples.forEach(function (d) {
    pr = pr.then(json.bind(null, './res/' + d.path)).then(function (data) {
      var sampleStr = _lzbase2.default.decompress(data.samples);
      var samples = decodeStr(4, sampleStr);
      var ws = new WaveSample(audioctx, 1, samples.length, data.sampleRate);
      var sb = ws.sample.getChannelData(0);
      for (var _i2 = 0, e = sb.length; _i2 < e; ++_i2) {
        sb[_i2] = samples[_i2];
      }
      waveSamples.push(ws);
    });
  });

  return pr;
}

// export class WaveTexture {
//   constructor(wave) {
//     this.wave = wave || waves[0];
//     this.tex = new CanvasTexture(320, 10 * 16);
//     this.render();
//   }

//   render() {
//     var ctx = this.tex.ctx;
//     var wave = this.wave;
//     ctx.clearRect(0, 0, ctx.canvas.width, ctx.canvas.height);
//     ctx.beginPath();
//     ctx.strokeStyle = 'white';
//     for (var i = 0; i < 320; i += 10) {
//       ctx.moveTo(i, 0);
//       ctx.lineTo(i, 255);
//     }
//     for (var i = 0; i < 160; i += 10) {
//       ctx.moveTo(0, i);
//       ctx.lineTo(320, i);
//     }
//     ctx.fillStyle = 'rgba(255,255,255,0.7)';
//     ctx.rect(0, 0, ctx.canvas.width, ctx.canvas.height);
//     ctx.stroke();
//     for (var i = 0, c = 0; i < ctx.canvas.width; i += 10, ++c) {
//       ctx.fillRect(i, (wave[c] > 0) ? 80 - wave[c] * 80 : 80, 10, Math.abs(wave[c]) * 80);
//     }
//     this.tex.texture.needsUpdate = true;
//   }
// };

/// エンベロープジェネレーター

var EnvelopeGenerator = exports.EnvelopeGenerator = function () {
  function EnvelopeGenerator(voice, attack, decay, sustain, release) {
    _classCallCheck(this, EnvelopeGenerator);

    this.voice = voice;
    //this.keyon = false;
    this.attackTime = attack || 0.0005;
    this.decayTime = decay || 0.05;
    this.sustainLevel = sustain || 0.5;
    this.releaseTime = release || 0.5;
    this.v = 1.0;
    this.keyOnTime = 0;
    this.keyOffTime = 0;
    this.keyOn = false;
  }

  _createClass(EnvelopeGenerator, [{
    key: "keyon",
    value: function keyon(t, vel) {
      this.v = vel || 1.0;
      var v = this.v;
      var t0 = t || this.voice.audioctx.currentTime;
      var t1 = t0 + this.attackTime;
      var gain = this.voice.gain.gain;
      gain.cancelScheduledValues(t0);
      gain.setValueAtTime(0, t0);
      gain.linearRampToValueAtTime(v, t1);
      gain.linearRampToValueAtTime(this.sustainLevel * v, t1 + this.decayTime);
      //gain.setTargetAtTime(this.sustain * v, t1, t1 + this.decay / v);
      this.keyOnTime = t0;
      this.keyOffTime = 0;
      this.keyOn = true;
    }
  }, {
    key: "keyoff",
    value: function keyoff(t) {
      var voice = this.voice;
      var gain = voice.gain.gain;
      var t0 = t || voice.audioctx.currentTime;
      //    gain.cancelScheduledValues(this.keyOnTime);
      gain.cancelScheduledValues(t0);
      var release_time = t0 + this.releaseTime;
      gain.linearRampToValueAtTime(0, release_time);
      this.keyOffTime = t0;
      this.keyOnTime = 0;
      this.keyOn = false;
      return release_time;
    }
  }]);

  return EnvelopeGenerator;
}();

;

var Voice = exports.Voice = function () {
  function Voice(audioctx) {
    _classCallCheck(this, Voice);

    this.audioctx = audioctx;
    this.sample = waveSamples[6];
    this.volume = audioctx.createGain();
    this.envelope = new EnvelopeGenerator(this, 0.5, 0.25, 0.8, 2.5);
    this.initProcessor();
    this.detune = 1.0;
    this.volume.gain.value = 1.0;
    this.output = this.volume;
  }

  _createClass(Voice, [{
    key: "initProcessor",
    value: function initProcessor() {
      // if(this.processor){
      //   this.stop();
      //   this.processor.disconnect();
      //   this.processor = null;
      // }
      var processor = this.processor = this.audioctx.createBufferSource();
      var gain = this.gain = this.audioctx.createGain();
      gain.gain.value = 0.0;

      this.processor.buffer = this.sample.sample;
      this.processor.loop = this.sample.loop;
      this.processor.loopStart = 0;
      this.processor.playbackRate.value = 1.0;
      this.processor.loopEnd = this.sample.end;
      this.processor.connect(this.gain);
      this.processor.onended = function () {
        processor.disconnect();
        gain.disconnect();
      };
      gain.connect(this.volume);
    }

    // setSample (sample) {
    //     this.envelope.keyoff(0);
    //     this.processor.disconnect(this.gain);
    //     this.sample = sample;
    //     this.initProcessor();
    //     this.processor.start();
    // }

  }, {
    key: "start",
    value: function start(startTime) {
      //   this.processor.disconnect(this.gain);
      this.initProcessor();
      this.processor.start(startTime);
    }
  }, {
    key: "stop",
    value: function stop(time) {
      this.processor.stop(time);
      //this.reset();
    }
  }, {
    key: "keyon",
    value: function keyon(t, note, vel) {
      this.start(t);
      this.processor.playbackRate.setValueAtTime(noteFreq[note] * this.detune, t);
      this.keyOnTime = t;
      this.envelope.keyon(t, vel);
    }
  }, {
    key: "keyoff",
    value: function keyoff(t) {
      this.gain.gain.cancelScheduledValues(t /*this.keyOnTime*/);
      this.keyOffTime = this.envelope.keyoff(t);
      this.processor.stop(this.keyOffTime);
    }
  }, {
    key: "isKeyOn",
    value: function isKeyOn(t) {
      return this.envelope.keyOn && this.keyOnTime <= t;
    }
  }, {
    key: "isKeyOff",
    value: function isKeyOff(t) {
      return !this.envelope.keyOn && this.keyOffTime <= t;
    }
  }, {
    key: "reset",
    value: function reset() {
      this.processor.playbackRate.cancelScheduledValues(0);
      this.gain.gain.cancelScheduledValues(0);
      this.gain.gain.value = 0;
    }
  }]);

  return Voice;
}();

/// ボイス


var OscVoice = exports.OscVoice = function () {
  function OscVoice(audioctx, periodicWave) {
    _classCallCheck(this, OscVoice);

    this.audioctx = audioctx;
    this.sample = periodicWave;
    this.volume = audioctx.createGain();
    this.envelope = new EnvelopeGenerator(this, 0.5, 0.25, 0.8, 2.5);
    this.initProcessor();
    this.detune = 1.0;
    this.volume.gain.value = 1.0;
    this.output = this.volume;
  }

  _createClass(OscVoice, [{
    key: "initProcessor",
    value: function initProcessor() {
      var processor = this.processor = this.audioctx.createOscillator();
      var gain = this.gain = this.audioctx.createGain();
      this.gain.gain.value = 0.0;
      this.processor.setPeriodicWave(this.sample);
      this.processor.connect(this.gain);
      this.processor.onended = function () {
        processor.disconnect();
        gain.disconnect();
      };
      this.gain.connect(this.volume);
    }
  }, {
    key: "start",
    value: function start(startTime) {
      this.initProcessor();
      this.processor.start(startTime);
    }
  }, {
    key: "stop",
    value: function stop(time) {
      this.processor.stop(time);
    }
  }, {
    key: "keyon",
    value: function keyon(t, note, vel) {
      this.start(t);
      this.processor.frequency.setValueAtTime(midiFreq[note] * this.detune, t);
      this.keyOnTime = t;
      this.envelope.keyon(t, vel);
    }
  }, {
    key: "keyoff",
    value: function keyoff(t) {
      this.gain.gain.cancelScheduledValues(t /*this.keyOnTime*/);
      this.keyOffTime = this.envelope.keyoff(t);
      this.processor.stop(this.keyOffTime);
    }
  }, {
    key: "isKeyOn",
    value: function isKeyOn(t) {
      return this.envelope.keyOn && this.keyOnTime <= t;
    }
  }, {
    key: "isKeyOff",
    value: function isKeyOff(t) {
      return !this.envelope.keyOn && this.keyOffTime <= t;
    }
  }, {
    key: "reset",
    value: function reset() {
      this.processor.playbackRate.cancelScheduledValues(0);
      this.gain.gain.cancelScheduledValues(0);
      this.gain.gain.value = 0;
    }
  }]);

  return OscVoice;
}();

var Audio = exports.Audio = function () {
  function Audio() {
    _classCallCheck(this, Audio);

    this.VOICES = 16;
    this.enable = false;
    this.audioContext = window.AudioContext || window.webkitAudioContext || window.mozAudioContext;

    if (this.audioContext) {
      this.audioctx = new this.audioContext();
      this.enable = true;
    }

    this.voices = [];
    if (this.enable) {
      createWaveSampleFromWaves(this.audioctx, BUFFER_SIZE);
      this.periodicWaves = createPeriodicWaveFromWaves(this.audioctx);
      this.filter = this.audioctx.createBiquadFilter();
      this.filter.type = 'lowpass';
      this.filter.frequency.value = 20000;
      this.filter.Q.value = 0.0001;
      this.noiseFilter = this.audioctx.createBiquadFilter();
      this.noiseFilter.type = 'lowpass';
      this.noiseFilter.frequency.value = 1000;
      this.noiseFilter.Q.value = 1.8;
      this.comp = this.audioctx.createDynamicsCompressor();
      this.filter.connect(this.comp);
      this.noiseFilter.connect(this.comp);
      this.comp.connect(this.audioctx.destination);
      // this.filter.connect(this.audioctx.destination);
      // this.noiseFilter.connect(this.audioctx.destination);
      for (var i = 0, end = this.VOICES; i < end; ++i) {
        //var v = new OscVoice(this.audioctx,this.periodicWaves[0]);
        var v = new Voice(this.audioctx);
        this.voices.push(v);
        if (i == this.VOICES - 1) {
          v.output.connect(this.noiseFilter);
        } else {
          v.output.connect(this.filter);
        }
      }
      this.readDrumSample = readDrumSample(this.audioctx);
      //  this.started = false;
      //this.voices[0].output.connect();
    }
  }

  _createClass(Audio, [{
    key: "start",
    value: function start() {
      // var voices = this.voices;
      // for (var i = 0, end = voices.length; i < end; ++i)
      // {
      //   voices[i].start(0);
      // }
    }
  }, {
    key: "stop",
    value: function stop() {
      //if(this.started)
      //{
      var voices = this.voices;
      for (var i = 0, end = voices.length; i < end; ++i) {
        voices[i].stop(0);
      }
      //  this.started = false;
      //}
    }
  }]);

  return Audio;
}();

/**********************************************/
/* シーケンサーコマンド                       */
/**********************************************/

function calcStep(noteLength) {
  // 長さからステップを計算する
  var prev = null;
  var dotted = 0;

  var map = noteLength.map(function (elem) {
    switch (elem) {
      case null:
        elem = prev;
        break;
      case 0:
        elem = dotted *= 2;
        break;
      default:
        prev = dotted = elem;
        break;
    }

    var length = elem !== null ? elem : _DefaultParams2.default.length;

    return TIME_BASE * (4 / length);
  });
  return map.reduce(function (a, b) {
    return a + b;
  }, 0);
}

var Note = exports.Note = function () {
  function Note(notes, length) {
    _classCallCheck(this, Note);

    this.notes = notes;
    if (length[0]) {
      this.step = calcStep(length);
    }
  }

  _createClass(Note, [{
    key: "process",
    value: function process(track) {
      var _this = this;

      this.notes.forEach(function (n, i) {
        var back = track.back;
        var note = n;
        var oct = _this.oct || back.oct;
        var step = _this.step || back.step;
        var gate = _this.gate || back.gate;
        var vel = _this.vel || back.vel;
        setQueue(track, note, oct, i == 0 ? step : 0, gate, vel);
      });
    }
  }]);

  return Note;
}();

var SeqData = function () {
  function SeqData(note, oct, step, gate, vel) {
    _classCallCheck(this, SeqData);

    this.note = note;
    this.oct = oct;
    //this.no = note.no + oct * 12;
    this.step = step;
    this.gate = gate;
    this.vel = vel;
    this.sample = wave;
  }

  _createClass(SeqData, [{
    key: "process",
    value: function process(track) {
      var back = track.back;
      var note = this.note || back.note;
      var oct = this.oct || back.oct;
      var step = this.step || back.step;
      var gate = this.gate || back.gate;
      var vel = this.vel || back.vel;
      setQueue(track, note, oct, step, gate, vel);
    }
  }]);

  return SeqData;
}();

function setQueue(track, note, oct, step, gate, vel) {
  var no = note + oct * 12;
  var back = track.back;
  var step_time = step ? track.playingTime : back.playingTime;
  // var gate_time = ((gate >= 0) ? gate * 60 : step * gate * 60 * -1.0) / (TIME_BASE * track.localTempo) + track.playingTime;

  var gate_time = (step == 0 ? back.codeStep : step) * gate * 60 / (TIME_BASE * track.localTempo) + (step ? track.playingTime : back.playingTime);
  //let voice = track.audio.voices[track.channel];
  var voice = track.assignVoice(step_time);
  //voice.reset();
  voice.sample = back.sample;
  voice.envelope.attackTime = back.attack;
  voice.envelope.decayTime = back.decay;
  voice.envelope.sustainLevel = back.sustain;
  voice.envelope.releaseTime = back.release;
  voice.detune = back.detune;
  voice.volume.gain.setValueAtTime(back.volume, step_time);

  //voice.initProcessor();

  //console.log(track.sequencer.tempo);
  voice.keyon(step_time, no, vel);
  voice.keyoff(gate_time);
  if (step) {
    back.codeStep = step;
    back.playingTime = track.playingTime;
  }

  track.playingTime = step * 60 / (TIME_BASE * track.localTempo) + track.playingTime;
  // back.voice = voice;
  // back.note = note;
  // back.oct = oct;
  // back.gate = gate;
  // back.vel = vel;
}

function S(note, oct, step, gate, vel) {
  var args = Array.prototype.slice.call(arguments);
  if (S.length != args.length) {
    if (_typeof(args[args.length - 1]) == 'object' && !(args[args.length - 1] instanceof Note)) {
      var args1 = args[args.length - 1];
      var l = args.length - 1;
      return new SeqData((l != 0 ? note : false) || args1.note || args1.n || null, (l != 1 ? oct : false) || args1.oct || args1.o || null, (l != 2 ? step : false) || args1.step || args1.s || null, (l != 3 ? gate : false) || args1.gate || args1.g || null, (l != 4 ? vel : false) || args1.vel || args1.v || null);
    }
  }
  return new SeqData(note || null, oct || null, step || null, gate || null, vel || null);
}

function S1(note, oct, step, gate, vel) {
  return S(note, oct, l(step), gate, vel);
}

function S2(note, len, dot, oct, gate, vel) {
  return S(note, oct, l(len, dot), gate, vel);
}

function S3(note, step, gate, vel, oct) {
  return S(note, oct, step, gate, vel);
}

/// 音符の長さ指定

var Length = function () {
  function Length(len) {
    _classCallCheck(this, Length);

    this.step = calcStep(len);
  }

  _createClass(Length, [{
    key: "process",
    value: function process(track) {
      track.back.step = this.step;
    }
  }]);

  return Length;
}();

var Step = function () {
  function Step(step) {
    _classCallCheck(this, Step);

    this.step = step;
  }

  _createClass(Step, [{
    key: "process",
    value: function process(track) {
      track.back.step = this.step;
    }
  }]);

  return Step;
}();

/// ゲートタイム指定

var GateTime = function () {
  function GateTime(gate) {
    _classCallCheck(this, GateTime);

    this.gate = gate / 100;
  }

  _createClass(GateTime, [{
    key: "process",
    value: function process(track) {
      track.back.gate = this.gate;
    }
  }]);

  return GateTime;
}();

/// ベロシティ指定

var Velocity = function () {
  function Velocity(vel) {
    _classCallCheck(this, Velocity);

    this.vel = vel / 100;
  }

  _createClass(Velocity, [{
    key: "process",
    value: function process(track) {
      track.back.vel = this.vel;
    }
  }]);

  return Velocity;
}();

/// 音色設定


var Tone = function () {
  function Tone(no) {
    _classCallCheck(this, Tone);

    this.no = no;
    //this.sample = waveSamples[this.no];
  }

  _createClass(Tone, [{
    key: "process",
    value: function process(track) {
      //    track.back.sample = track.audio.periodicWaves[this.no];
      track.back.sample = waveSamples[this.no];
      //    track.audio.voices[track.channel].setSample(waveSamples[this.no]);
    }
  }]);

  return Tone;
}();

var Rest = function () {
  function Rest(length) {
    _classCallCheck(this, Rest);

    this.step = calcStep(length);
  }

  _createClass(Rest, [{
    key: "process",
    value: function process(track) {
      var step = this.step || track.back.step;
      track.playingTime = track.playingTime + this.step * 60 / (TIME_BASE * track.localTempo);
      //track.back.step = this.step;
    }
  }]);

  return Rest;
}();

var Octave = function () {
  function Octave(oct) {
    _classCallCheck(this, Octave);

    this.oct = oct;
  }

  _createClass(Octave, [{
    key: "process",
    value: function process(track) {
      track.back.oct = this.oct;
    }
  }]);

  return Octave;
}();

var OctaveUp = function () {
  function OctaveUp(v) {
    _classCallCheck(this, OctaveUp);

    this.v = v;
  }

  _createClass(OctaveUp, [{
    key: "process",
    value: function process(track) {
      track.back.oct += this.v;
    }
  }]);

  return OctaveUp;
}();

var OctaveDown = function () {
  function OctaveDown(v) {
    _classCallCheck(this, OctaveDown);

    this.v = v;
  }

  _createClass(OctaveDown, [{
    key: "process",
    value: function process(track) {
      track.back.oct -= this.v;
    }
  }]);

  return OctaveDown;
}();

var Tempo = function () {
  function Tempo(tempo) {
    _classCallCheck(this, Tempo);

    this.tempo = tempo;
  }

  _createClass(Tempo, [{
    key: "process",
    value: function process(track) {
      track.localTempo = this.tempo;
      //track.sequencer.tempo = this.tempo;
    }
  }]);

  return Tempo;
}();

var Envelope = function () {
  function Envelope(attack, decay, sustain, release) {
    _classCallCheck(this, Envelope);

    this.attack = attack;
    this.decay = decay;
    this.sustain = sustain;
    this.release = release;
  }

  _createClass(Envelope, [{
    key: "process",
    value: function process(track) {
      //var envelope = track.audio.voices[track.channel].envelope;
      track.back.attack = this.attack;
      track.back.decay = this.decay;
      track.back.sustain = this.sustain;
      track.back.release = this.release;
    }
  }]);

  return Envelope;
}();

/// デチューン


var Detune = function () {
  function Detune(detune) {
    _classCallCheck(this, Detune);

    this.detune = detune;
  }

  _createClass(Detune, [{
    key: "process",
    value: function process(track) {
      //var voice = track.audio.voices[track.channel];
      track.back.detune = this.detune;
    }
  }]);

  return Detune;
}();

var Volume = function () {
  function Volume(volume) {
    _classCallCheck(this, Volume);

    this.volume = volume / 100.0;
  }

  _createClass(Volume, [{
    key: "process",
    value: function process(track) {
      //
      track.back.volume = this.volume;
      // track.audio.voices[track.channel].volume.gain.setValueAtTime(this.volume, track.playingTime);
    }
  }]);

  return Volume;
}();

var LoopData = function () {
  function LoopData(obj, varname, count, seqPos) {
    _classCallCheck(this, LoopData);

    this.varname = varname;
    this.count = count || _DefaultParams2.default.loopCount;
    this.obj = obj;
    this.seqPos = seqPos;
    this.outSeqPos = -1;
  }

  _createClass(LoopData, [{
    key: "process",
    value: function process(track) {
      var stack = track.stack;
      if (stack.length == 0 || stack[stack.length - 1].obj !== this) {
        var ld = this;
        stack.push(new LoopData(this, ld.varname, ld.count, track.seqPos));
      }
    }
  }]);

  return LoopData;
}();

var LoopEnd = function () {
  function LoopEnd(seqPos) {
    _classCallCheck(this, LoopEnd);

    this.seqPos = seqPos;
  }

  _createClass(LoopEnd, [{
    key: "process",
    value: function process(track) {
      var ld = track.stack[track.stack.length - 1];
      if (ld.outSeqPos == -1) ld.outSeqPos = this.seqPos;
      ld.count--;
      if (ld.count > 0) {
        track.seqPos = ld.seqPos;
      } else {
        track.stack.pop();
      }
    }
  }]);

  return LoopEnd;
}();

var LoopExit = function () {
  function LoopExit() {
    _classCallCheck(this, LoopExit);
  }

  _createClass(LoopExit, [{
    key: "process",
    value: function process(track) {
      var ld = track.stack[track.stack.length - 1];
      if (ld.count <= 1 && ld.outSeqPos != -1) {
        track.seqPos = ld.outSeqPos;
        track.stack.pop();
      }
    }
  }]);

  return LoopExit;
}();

var InfiniteLoop = function () {
  function InfiniteLoop() {
    _classCallCheck(this, InfiniteLoop);
  }

  _createClass(InfiniteLoop, [{
    key: "process",
    value: function process(track) {
      track.infinitLoopIndex = track.seqPos;
    }
  }]);

  return InfiniteLoop;
}();
/////////////////////////////////
/// シーケンサートラック


var Track = function () {
  function Track(sequencer, seqdata, audio) {
    _classCallCheck(this, Track);

    this.name = '';
    this.end = false;
    this.oneshot = false;
    this.sequencer = sequencer;
    this.seqData = seqdata;
    this.seqPos = 0;
    this.mute = false;
    this.playingTime = -1;
    this.localTempo = sequencer.tempo;
    this.trackVolume = 1.0;
    this.transpose = 0;
    this.solo = false;
    this.channel = -1;
    this.track = -1;
    this.audio = audio;
    this.infinitLoopIndex = -1;
    this.back = {
      note: 72,
      oct: 5,
      step: 96,
      gate: 0.5,
      vel: 1.0,
      attack: 0.01,
      decay: 0.05,
      sustain: 0.6,
      release: 0.07,
      detune: 1.0,
      volume: 0.5,
      //      sample:audio.periodicWaves[0]
      sample: waveSamples[0]
    };
    this.stack = [];
  }

  _createClass(Track, [{
    key: "process",
    value: function process(currentTime) {

      if (this.end) return;

      if (this.oneshot) {
        this.reset();
      }

      var seqSize = this.seqData.length;
      if (this.seqPos >= seqSize) {
        if (this.sequencer.repeat) {
          this.seqPos = 0;
        } else if (this.infinitLoopIndex >= 0) {
          this.seqPos = this.infinitLoopIndex;
        } else {
          this.end = true;
          return;
        }
      }

      var seq = this.seqData;
      this.playingTime = this.playingTime > -1 ? this.playingTime : currentTime;
      var endTime = currentTime + 0.2 /*sec*/;

      while (this.seqPos < seqSize) {
        if (this.playingTime >= endTime && !this.oneshot) {
          break;
        } else {
          var d = seq[this.seqPos];
          d.process(this);
          this.seqPos++;
        }
      }
    }
  }, {
    key: "reset",
    value: function reset() {
      // var curVoice = this.audio.voices[this.channel];
      // curVoice.gain.gain.cancelScheduledValues(0);
      // curVoice.processor.playbackRate.cancelScheduledValues(0);
      // curVoice.gain.gain.value = 0;
      this.playingTime = -1;
      this.seqPos = 0;
      this.infinitLoopIndex = -1;
      this.end = false;
      this.stack.length = 0;
    }
  }, {
    key: "assignVoice",
    value: function assignVoice(t) {
      var ret = null;
      this.audio.voices.some(function (d, i) {
        if (d.isKeyOff(t)) {
          ret = d;
          return true;
        }
        return false;
      });
      if (!ret) {
        var oldestKeyOnData = this.audio.voices.map(function (d, i) {
          return { time: d.envelope.keyOnTime, d: d, i: i };
        }).sort(function (a, b) {
          return a.time - b.time;
        })[0];
        ret = oldestKeyOnData.d;
      }
      return ret;
    }
  }]);

  return Track;
}();

function loadTracks(self, tracks, trackdata) {
  for (var i = 0; i < trackdata.length; ++i) {
    var track = new Track(self, trackdata[i].data, self.audio);
    track.channel = trackdata[i].channel;
    track.oneshot = !trackdata[i].oneshot ? false : true;
    track.track = i;
    tracks.push(track);
  }
}

function createTracks(trackdata) {
  var tracks = [];
  loadTracks(this, tracks, trackdata);
  return tracks;
}

////////////////////////////
/// シーケンサー本体

var Sequencer = exports.Sequencer = function () {
  function Sequencer(audio) {
    _classCallCheck(this, Sequencer);

    this.STOP = 0 | 0;
    this.PLAY = 1 | 0;
    this.PAUSE = 2 | 0;

    this.audio = audio;
    this.tempo = 100.0;
    this.repeat = false;
    this.play = false;
    this.tracks = [];
    this.pauseTime = 0;
    this.status = this.STOP;
  }

  _createClass(Sequencer, [{
    key: "load",
    value: function load(data) {
      parseMML(data);
      if (this.play) {
        this.stop();
      }
      this.tracks.length = 0;
      loadTracks(this, this.tracks, data.tracks, this.audio);
    }
  }, {
    key: "start",
    value: function start() {
      var _this2 = this;

      //    this.handle = window.setTimeout(function () { self.process() }, 50);
      this.audio.readDrumSample.then(function () {
        _this2.status = _this2.PLAY;
        _this2.process();
      });
    }
  }, {
    key: "process",
    value: function process() {
      if (this.status == this.PLAY) {
        this.playTracks(this.tracks);
        this.handle = window.setTimeout(this.process.bind(this), 100);
      }
    }
  }, {
    key: "playTracks",
    value: function playTracks(tracks) {
      var currentTime = this.audio.audioctx.currentTime;
      //   console.log(this.audio.audioctx.currentTime);
      for (var i = 0, end = tracks.length; i < end; ++i) {
        tracks[i].process(currentTime);
      }
    }
  }, {
    key: "pause",
    value: function pause() {
      this.status = this.PAUSE;
      this.pauseTime = this.audio.audioctx.currentTime;
    }
  }, {
    key: "resume",
    value: function resume() {
      if (this.status == this.PAUSE) {
        this.status = this.PLAY;
        var tracks = this.tracks;
        var adjust = this.audio.audioctx.currentTime - this.pauseTime;
        for (var i = 0, end = tracks.length; i < end; ++i) {
          tracks[i].playingTime += adjust;
        }
        this.process();
      }
    }
  }, {
    key: "stop",
    value: function stop() {
      if (this.status != this.STOP) {
        clearTimeout(this.handle);
        //    clearInterval(this.handle);
        this.status = this.STOP;
        this.reset();
      }
    }
  }, {
    key: "reset",
    value: function reset() {
      for (var i = 0, end = this.tracks.length; i < end; ++i) {
        this.tracks[i].reset();
      }
    }
  }]);

  return Sequencer;
}();

function parseMML(data) {
  data.tracks.forEach(function (d) {
    d.data = parseMML_(d.mml);
  });
}

function parseMML_(mml) {
  var parser = new _MMLParser2.default(mml);
  var commands = parser.parse();
  var seqArray = [];
  commands.forEach(function (command) {
    switch (command.type) {
      case _Syntax2.default.Note:
        seqArray.push(new Note(command.noteNumbers, command.noteLength));
        break;
      case _Syntax2.default.Rest:
        seqArray.push(new Rest(command.noteLength));
        break;
      case _Syntax2.default.Octave:
        seqArray.push(new Octave(command.value));
        break;
      case _Syntax2.default.OctaveShift:
        if (command.direction >= 0) {
          seqArray.push(new OctaveUp(1));
        } else {
          seqArray.push(new OctaveDown(1));
        }
        break;
      case _Syntax2.default.NoteLength:
        seqArray.push(new Length(command.noteLength));
        break;
      case _Syntax2.default.NoteVelocity:
        seqArray.push(new Velocity(command.value));
        break;
      case _Syntax2.default.Tempo:
        seqArray.push(new Tempo(command.value));
        break;
      case _Syntax2.default.NoteQuantize:
        seqArray.push(new GateTime(command.value));
        break;
      case _Syntax2.default.InfiniteLoop:
        seqArray.push(new InfiniteLoop());
        break;
      case _Syntax2.default.LoopBegin:
        seqArray.push(new LoopData(null, '', command.value, null));
        break;
      case _Syntax2.default.LoopExit:
        seqArray.push(new LoopExit());
        break;
      case _Syntax2.default.LoopEnd:
        seqArray.push(new LoopEnd());
        break;
      case _Syntax2.default.Tone:
        seqArray.push(new Tone(command.value));
      case _Syntax2.default.WaveForm:
        break;
      case _Syntax2.default.Envelope:
        seqArray.push(new Envelope(command.a, command.d, command.s, command.r));
        break;
    }
  });
  return seqArray;
}

// export var seqData = {
//   name: 'Test',
//   tracks: [
//     {
//       name: 'part1',
//       channel: 0,
//       data:
//       [
//         ENV(0.01, 0.02, 0.5, 0.07),
//         TEMPO(180), TONE(0), VOLUME(0.5), L(8), GT(-0.5),O(4),
//         LOOP('i',4),
//         C, C, C, C, C, C, C, C,
//         LOOP_END,
//         JUMP(5)
//       ]
//     },
//     {
//       name: 'part2',
//       channel: 1,
//       data:
//         [
//         ENV(0.01, 0.05, 0.6, 0.07),
//         TEMPO(180),TONE(6), VOLUME(0.2), L(8), GT(-0.8),
//         R(1), R(1),
//         O(6),L(1), F,
//         E,
//         OD, L(8, true), Bb, G, L(4), Bb, OU, L(4), F, L(8), D,
//         L(4, true), E, L(2), C,R(8),
//         JUMP(8)
//         ]
//     },
//     {
//       name: 'part3',
//       channel: 2,
//       data:
//         [
//         ENV(0.01, 0.05, 0.6, 0.07),
//         TEMPO(180),TONE(6), VOLUME(0.1), L(8), GT(-0.5),
//         R(1), R(1),
//         O(6),L(1), C,C,
//         OD, L(8, true), G, D, L(4), G, OU, L(4), D, L(8),OD, G,
//         L(4, true), OU,C, L(2),OD, G, R(8),
//         JUMP(7)
//         ]
//     }
//   ]
// }

// export function SoundEffects(sequencer) {
//    this.soundEffects =
//     [
//     // Effect 0 ////////////////////////////////////
//     createTracks.call(sequencer,[
//     {
//       channel: 8,
//       oneshot:true,
//       data: [VOLUME(0.5),
//         ENV(0.0001, 0.01, 1.0, 0.0001),GT(-0.999),TONE(0), TEMPO(200), O(8),ST(3), C, D, E, F, G, A, B, OU, C, D, E, G, A, B,B,B,B
//       ]
//     },
//     {
//       channel: 9,
//       oneshot: true,
//       data: [VOLUME(0.5),
//         ENV(0.0001, 0.01, 1.0, 0.0001), DETUNE(0.9), GT(-0.999), TONE(0), TEMPO(200), O(5), ST(3), C, D, E, F, G, A, B, OU, C, D, E, G, A, B,B,B,B
//       ]
//     }
//     ]),
//     // Effect 1 /////////////////////////////////////
//     createTracks.call(sequencer,
//       [
//         {
//           channel: 10,
//           oneshot: true,
//           data: [
//            TONE(4), TEMPO(150), ST(4), GT(-0.9999), ENV(0.0001, 0.0001, 1.0, 0.0001),
//            O(6), G, A, B, O(7), B, A, G, F, E, D, C, E, G, A, B, OD, B, A, G, F, E, D, C, OD, B, A, G, F, E, D, C
//           ]
//         }
//       ]),
//     // Effect 2//////////////////////////////////////
//     createTracks.call(sequencer,
//       [
//         {
//           channel: 10,
//           oneshot: true,
//           data: [
//            TONE(0), TEMPO(150), ST(2), GT(-0.9999), ENV(0.0001, 0.0001, 1.0, 0.0001),
//            O(8), C,D,E,F,G,A,B,OU,C,D,E,F,OD,G,OU,A,OD,B,OU,A,OD,G,OU,F,OD,E,OU,E
//           ]
//         }
//       ]),
//       // Effect 3 ////////////////////////////////////
//       createTracks.call(sequencer,
//         [
//           {
//             channel: 10,
//             oneshot: true,
//             data: [
//              TONE(5), TEMPO(150), L(64), GT(-0.9999), ENV(0.0001, 0.0001, 1.0, 0.0001),
//              O(6),C,OD,C,OU,C,OD,C,OU,C,OD,C,OU,C,OD
//             ]
//           }
//         ]),
//       // Effect 4 ////////////////////////////////////////
//       createTracks.call(sequencer,
//         [
//           {
//             channel: 11,
//             oneshot: true,
//             data: [
//              TONE(8), VOLUME(2.0),TEMPO(120), L(2), GT(-0.9999), ENV(0.0001, 0.0001, 1.0, 0.25),
//              O(1), C
//             ]
//           }
//         ])
//    ];
//  }

},{"./DefaultParams":291,"./MMLParser":292,"./Scanner":293,"./Syntax":294,"./lzbase62.min":297}],296:[function(require,module,exports){
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
var charCodes = exports.charCodes = [
// 0x00
[0x00, 0x00], [0x00, 0x00], [0x00, 0x00], [0x00, 0x00], [0x00, 0x00], [0x00, 0x00], [0x00, 0x00], [0x00, 0x00], [0x00, 0x00], [0x00, 0x00], [0x00, 0x00], [0x00, 0x00], [0x00, 0x00], [0x00, 0x00], [0x00, 0x00], [0x00, 0x00],
// 0x10
[0x00, 0x00], [0x00, 0x00], [0x00, 0x00], [0x00, 0x00], [0x00, 0x00], [0x00, 0x00], [0x00, 0x00], [0x00, 0x00], [0x00, 0x00], [0x00, 0x00], [0x00, 0x00], [0x00, 0x00], [0x00, 0x00], [0x00, 0x00], [0x00, 0x00], [0x00, 0x00],
// 0x20
[0x00, 0x00], [0x61, 0x00], [0x62, 0x00], [0x63, 0x00], [0x64, 0x00], [0x65, 0x00], [0x66, 0x00], [0x67, 0x00], [0x68, 0x00], [0x69, 0x00], [0x6b, 0x00], [0x6a, 0x00], [0x2f, 0x00], [0x2a, 0x00], [0x2e, 0x00], [0x2d, 0x00],
// 0x30
[0x20, 0x00], [0x21, 0x00], [0x22, 0x00], [0x23, 0x00], [0x24, 0x00], [0x25, 0x00], [0x26, 0x00], [0x27, 0x00], [0x28, 0x00], [0x29, 0x00], [0x4f, 0x00], [0x2c, 0x00], [0x51, 0x00], [0x2b, 0x00], [0x57, 0x00], [0x49, 0x00],
// 0x40
[0x55, 0x00], [0x01, 0x00], [0x02, 0x00], [0x03, 0x00], [0x04, 0x00], [0x05, 0x00], [0x06, 0x00], [0x07, 0x00], [0x08, 0x00], [0x09, 0x00], [0x0a, 0x00], [0x0b, 0x00], [0x0c, 0x00], [0x0d, 0x00], [0x0e, 0x00], [0x0f, 0x00],
// 0x50
[0x10, 0x00], [0x11, 0x00], [0x12, 0x00], [0x13, 0x00], [0x14, 0x00], [0x15, 0x00], [0x16, 0x00], [0x17, 0x00], [0x18, 0x00], [0x19, 0x00], [0x1a, 0x00], [0x52, 0x00], [0xdd, 0x00], [0x54, 0x00], [0x00, 0x00], [0x3c, 0x00],
// 0x60
[0x00, 0x00], [0x01, 0x80], [0x02, 0x80], [0x03, 0x80], [0x04, 0x80], [0x05, 0x80], [0x06, 0x80], [0x07, 0x80], [0x08, 0x80], [0x09, 0x80], [0x0a, 0x80], [0x0b, 0x80], [0x0c, 0x80], [0x0d, 0x80], [0x0e, 0x80], [0x0f, 0x80],
// 0x7f
[0x10, 0x80], [0x11, 0x80], [0x12, 0x80], [0x13, 0x80], [0x14, 0x80], [0x15, 0x80], [0x16, 0x80], [0x17, 0x80], [0x18, 0x80], [0x19, 0x80], [0x1a, 0x80], [0x00, 0x00], [0x00, 0x00], [0x00, 0x00], [0x00, 0x00], [0x00, 0x00]];

var canaCodes = exports.canaCodes = [
// 0xff60
[0x00, 0x00], //
[0xbd, 0x00], // ｡
[0x9d, 0x00], // ｢
[0xb1, 0x00], // ｣
[0xb5, 0x00], // ､
[0xb9, 0x00], // ･
[0xb4, 0x00], // ｦ
[0x9e, 0x00], // ｧ
[0xb2, 0x00], // ｨ
[0xb6, 0x00], // ｩ
[0xba, 0x00], // ｪ
[0xbe, 0x00], // ｫ
[0x9f, 0x00], // ｬ
[0xb3, 0x00], // ｭ
[0xb7, 0x00], // ｮ
[0xbb, 0x00], // ｯ

[0xbf, 0x00], // -
[0xa3, 0x00], // ｱ
[0x85, 0x00], // ｲ
[0xa4, 0x00], // ｳ
[0xa5, 0x00], // ｴ
[0xa6, 0x00], // ｵ
[0x94, 0x00], // ｶ
[0x87, 0x00], // ｷ
[0x88, 0x00], // ｸ
[0x9c, 0x00], // ｹ
[0x82, 0x00], // ｺ
[0x98, 0x00], // ｻ
[0x84, 0x00], // ｼ
[0x92, 0x00], // ｽ
[0x90, 0x00], // ｾ
[0x83, 0x00], // ｿ

[0x91, 0x00], // ﾀ
[0x81, 0x00], // ﾁ
[0x9a, 0x00], // ﾂ
[0x97, 0x00], // ﾃ
[0x93, 0x00], // ﾄ
[0x95, 0x00], // ﾅ
[0x89, 0x00], // ﾆ
[0xa1, 0x00], // ﾇ
[0xaf, 0x00], // ﾈ
[0x8b, 0x00], // ﾉ
[0x86, 0x00], // ﾊ
[0x96, 0x00], // ﾋ
[0xa2, 0x00], // ﾌ
[0xab, 0x00], // ﾍ
[0xaa, 0x00], // ﾎ
[0x8a, 0x00], // ﾏ

[0x8e, 0x00], // ﾐ
[0xb0, 0x00], // ﾑ
[0xad, 0x00], // ﾒ
[0x8d, 0x00], // ﾓ
[0xa7, 0x00], // ﾔ
[0xa8, 0x00], // ﾕ
[0xa9, 0x00], // ﾖ
[0x8f, 0x00], // ﾗ
[0x8c, 0x00], // ﾘ
[0xae, 0x00], // ﾙ
[0xac, 0x00], // ﾚ
[0x9b, 0x00], // ﾛ
[0xa0, 0x00], // ﾜ
[0x99, 0x00], // ﾝ
[0xbc, 0x00], // ﾞ
[0xb8, 0x00]];

},{}],297:[function(require,module,exports){
"use strict";

/*!
 * lzbase62 v1.4.6 - LZ77(LZSS) based compression algorithm in base62 for JavaScript.
 * Copyright (c) 2014-2015 polygon planet <polygon.planet.aqua@gmail.com>
 * @license MIT
 */
!function (a, b, c) {
  "undefined" != typeof exports ? "undefined" != typeof module && module.exports ? module.exports = c() : exports[a] = c() : "function" == typeof define && define.amd ? define(c) : b[a] = c();
}("lzbase62", undefined, function () {
  "use strict";
  function a(a) {
    this._init(a);
  }function b(a) {
    this._init(a);
  }function c() {
    var a,
        b,
        c,
        d,
        e = "abcdefghijklmnopqrstuvwxyz",
        f = "",
        g = e.length;for (a = 0; g > a; a++) {
      for (c = e.charAt(a), b = g - 1; b > 15 && f.length < v; b--) {
        d = e.charAt(b), f += " " + c + " " + d;
      }
    }for (; f.length < v;) {
      f = " " + f;
    }return f = f.slice(0, v);
  }function d(a, b) {
    return a.length === b ? a : a.subarray ? a.subarray(0, b) : (a.length = b, a);
  }function e(a, b) {
    if (null == b ? b = a.length : a = d(a, b), l && m && o > b) {
      if (p) return j.apply(null, a);if (null === p) try {
        var c = j.apply(null, a);return b > o && (p = !0), c;
      } catch (e) {
        p = !1;
      }
    }return f(a);
  }function f(a) {
    for (var b, c = "", d = a.length, e = 0; d > e;) {
      if (b = a.subarray ? a.subarray(e, e + o) : a.slice(e, e + o), e += o, !p) {
        if (null === p) try {
          c += j.apply(null, b), b.length > o && (p = !0);continue;
        } catch (f) {
          p = !1;
        }return g(a);
      }c += j.apply(null, b);
    }return c;
  }function g(a) {
    for (var b = "", c = a.length, d = 0; c > d; d++) {
      b += j(a[d]);
    }return b;
  }function h(a, b) {
    if (!k) return new Array(b);switch (a) {case 8:
        return new Uint8Array(b);case 16:
        return new Uint16Array(b);}
  }function i(a) {
    for (var b = [], c = a && a.length, d = 0; c > d; d++) {
      b[d] = a.charCodeAt(d);
    }return b;
  }var j = String.fromCharCode,
      k = "undefined" != typeof Uint8Array && "undefined" != typeof Uint16Array,
      l = !1,
      m = !1;try {
    "a" === j.apply(null, [97]) && (l = !0);
  } catch (n) {}if (k) try {
    "a" === j.apply(null, new Uint8Array([97])) && (m = !0);
  } catch (n) {}var o = 65533,
      p = null,
      q = !1;-1 !== "abcほげ".lastIndexOf("ほげ", 1) && (q = !0);var r = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789",
      s = r.length,
      t = Math.max(s, 62) - Math.min(s, 62),
      u = s - 1,
      v = 1024,
      w = 304,
      x = o,
      y = x - s,
      z = o,
      A = z + 2 * v,
      B = 11,
      C = B * (B + 1),
      D = 40,
      E = D * (D + 1),
      F = s + 1,
      G = t + 20,
      H = s + 5,
      I = s - t - 19,
      J = D + 7,
      K = J + 1,
      L = K + 1,
      M = L + 5,
      N = M + 5;a.prototype = { _init: function _init(a) {
      a = a || {}, this._data = null, this._table = null, this._result = null, this._onDataCallback = a.onData, this._onEndCallback = a.onEnd;
    }, _createTable: function _createTable() {
      for (var a = h(8, s), b = 0; s > b; b++) {
        a[b] = r.charCodeAt(b);
      }return a;
    }, _onData: function _onData(a, b) {
      var c = e(a, b);this._onDataCallback ? this._onDataCallback(c) : this._result += c;
    }, _onEnd: function _onEnd() {
      this._onEndCallback && this._onEndCallback(), this._data = this._table = null;
    }, _search: function _search() {
      var a = 2,
          b = this._data,
          c = this._offset,
          d = u;if (this._dataLen - c < d && (d = this._dataLen - c), a > d) return !1;var e,
          f,
          g,
          h,
          i,
          j,
          k = c - w,
          l = b.substring(k, c + d),
          m = c + a - 3 - k;do {
        if (2 === a) {
          if (f = b.charAt(c) + b.charAt(c + 1), g = l.indexOf(f), ! ~g || g > m) break;
        } else 3 === a ? f += b.charAt(c + 2) : f = b.substr(c, a);if (q ? (j = b.substring(k, c + a - 1), h = j.lastIndexOf(f)) : h = l.lastIndexOf(f, m), ! ~h) break;i = h, e = k + h;do {
          if (b.charCodeAt(c + a) !== b.charCodeAt(e + a)) break;
        } while (++a < d);if (g === h) {
          a++;break;
        }
      } while (++a < d);return 2 === a ? !1 : (this._index = w - i, this._length = a - 1, !0);
    }, compress: function compress(a) {
      if (null == a || 0 === a.length) return "";var b = "",
          d = this._createTable(),
          e = c(),
          f = h(8, x),
          g = 0;this._result = "", this._offset = e.length, this._data = e + a, this._dataLen = this._data.length, e = a = null;for (var i, j, k, l, m, n = -1, o = -1; this._offset < this._dataLen;) {
        this._search() ? (this._index < u ? (j = this._index, k = 0) : (j = this._index % u, k = (this._index - j) / u), 2 === this._length ? (f[g++] = d[k + M], f[g++] = d[j]) : (f[g++] = d[k + L], f[g++] = d[j], f[g++] = d[this._length]), this._offset += this._length, ~o && (o = -1)) : (i = this._data.charCodeAt(this._offset++), C > i ? (D > i ? (j = i, k = 0, n = F) : (j = i % D, k = (i - j) / D, n = k + F), o === n ? f[g++] = d[j] : (f[g++] = d[n - G], f[g++] = d[j], o = n)) : (E > i ? (j = i, k = 0, n = H) : (j = i % E, k = (i - j) / E, n = k + H), D > j ? (l = j, m = 0) : (l = j % D, m = (j - l) / D), o === n ? (f[g++] = d[l], f[g++] = d[m]) : (f[g++] = d[K], f[g++] = d[n - s], f[g++] = d[l], f[g++] = d[m], o = n))), g >= y && (this._onData(f, g), g = 0);
      }return g > 0 && this._onData(f, g), this._onEnd(), b = this._result, this._result = null, null === b ? "" : b;
    } }, b.prototype = { _init: function _init(a) {
      a = a || {}, this._result = null, this._onDataCallback = a.onData, this._onEndCallback = a.onEnd;
    }, _createTable: function _createTable() {
      for (var a = {}, b = 0; s > b; b++) {
        a[r.charAt(b)] = b;
      }return a;
    }, _onData: function _onData(a) {
      var b;if (this._onDataCallback) {
        if (a) b = this._result, this._result = [];else {
          var c = z - v;b = this._result.slice(v, v + c), this._result = this._result.slice(0, v).concat(this._result.slice(v + c));
        }b.length > 0 && this._onDataCallback(e(b));
      }
    }, _onEnd: function _onEnd() {
      this._onEndCallback && this._onEndCallback();
    }, decompress: function decompress(a) {
      if (null == a || 0 === a.length) return "";this._result = i(c());for (var b, d, f, g, h, j, k, l, m, n, o = "", p = this._createTable(), q = !1, r = null, s = a.length, t = 0; s > t; t++) {
        if (d = p[a.charAt(t)], void 0 !== d) {
          if (I > d) q ? (g = p[a.charAt(++t)], h = g * D + d + E * r) : h = r * D + d, this._result[this._result.length] = h;else if (J > d) r = d - I, q = !1;else if (d === K) f = p[a.charAt(++t)], r = f - 5, q = !0;else if (N > d) {
            if (f = p[a.charAt(++t)], M > d ? (j = (d - L) * u + f, k = p[a.charAt(++t)]) : (j = (d - M) * u + f, k = 2), l = this._result.slice(-j), l.length > k && (l.length = k), m = l.length, l.length > 0) for (n = 0; k > n;) {
              for (b = 0; m > b && (this._result[this._result.length] = l[b], !(++n >= k)); b++) {}
            }r = null;
          }this._result.length >= A && this._onData();
        }
      }return this._result = this._result.slice(v), this._onData(!0), this._onEnd(), o = e(this._result), this._result = null, o;
    } };var O = { compress: function compress(b, c) {
      return new a(c).compress(b);
    }, decompress: function decompress(a, c) {
      return new b(c).decompress(a);
    } };return O;
});

},{}],298:[function(require,module,exports){
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
var fontData = exports.fontData = [
// #0x000
["00000000", "00000000", "00000000", "00000000", "00000000", "00000000", "00000000", "00000000"],
// #0x001
["00011000", "00100100", "01000010", "01111110", "01000010", "01000010", "01000010", "00000000"],
// #0x002
["01111100", "00100010", "00100010", "00111100", "00100010", "00100010", "01111100", "00000000"],
// #0x003
["00011100", "00100010", "01000000", "01000000", "01000000", "00100010", "00011100", "00000000"],
// #0x004
["01111000", "00100100", "00100010", "00100010", "00100010", "00100100", "01111000", "00000000"],
// #0x005
["01111110", "01000000", "01000000", "01111000", "01000000", "01000000", "01111110", "00000000"],
// #0x006
["01111110", "01000000", "01000000", "01111000", "01000000", "01000000", "01000000", "00000000"],
// #0x007
["00011100", "00100010", "01000000", "01001110", "01000010", "00100010", "00011100", "00000000"],
// #0x008
["01000010", "01000010", "01000010", "01111110", "01000010", "01000010", "01000010", "00000000"],
// #0x009
["00011100", "00001000", "00001000", "00001000", "00001000", "00001000", "00011100", "00000000"],
// #0x00a
["00001110", "00000100", "00000100", "00000100", "00000100", "01000100", "00111000", "00000000"],
// #0x00b
["01000010", "01000100", "01001000", "01110000", "01001000", "01000100", "01000010", "00000000"],
// #0x00c
["01000000", "01000000", "01000000", "01000000", "01000000", "01000000", "01111110", "00000000"],
// #0x00d
["01000010", "01100110", "01011010", "01011010", "01000010", "01000010", "01000010", "00000000"],
// #0x00e
["01000010", "01100010", "01010010", "01001010", "01000110", "01000010", "01000010", "00000000"],
// #0x00f
["00011000", "00100100", "01000010", "01000010", "01000010", "00100100", "00011000", "00000000"],
// #0x010
["01111100", "01000010", "01000010", "01111100", "01000000", "01000000", "01000000", "00000000"],
// #0x011
["00011000", "00100100", "01000010", "01000010", "01001010", "00100100", "00011010", "00000000"],
// #0x012
["01111100", "01000010", "01000010", "01111100", "01001000", "01000100", "01000010", "00000000"],
// #0x013
["00111100", "01000010", "01000000", "00111100", "00000010", "01000010", "00111100", "00000000"],
// #0x014
["00111110", "00001000", "00001000", "00001000", "00001000", "00001000", "00001000", "00000000"],
// #0x015
["01000010", "01000010", "01000010", "01000010", "01000010", "01000010", "00111100", "00000000"],
// #0x016
["01000010", "01000010", "01000010", "00100100", "00100100", "00011000", "00011000", "00000000"],
// #0x017
["01000010", "01000010", "01000010", "01011010", "01011010", "01100110", "01000010", "00000000"],
// #0x018
["01000010", "01000010", "00100100", "00011000", "00100100", "01000010", "01000010", "00000000"],
// #0x019
["00100010", "00100010", "00100010", "00011100", "00001000", "00001000", "00001000", "00000000"],
// #0x01a
["01111110", "00000010", "00000100", "00011000", "00100000", "01000000", "01111110", "00000000"],
// #0x01b
["00001000", "00001000", "00001000", "00001000", "11111111", "00001000", "00001000", "00001000"],
// #0x01c
["00001000", "00001000", "00001000", "00001000", "00001111", "00000000", "00000000", "00000000"],
// #0x01d
["00001000", "00001000", "00001000", "00001000", "11111000", "00000000", "00000000", "00000000"],
// #0x01e
["00001000", "00001000", "00001000", "00001000", "00001111", "00001000", "00001000", "00001000"],
// #0x01f
["00001000", "00001000", "00001000", "00001000", "11111111", "00000000", "00000000", "00000000"],
// #0x020
["00111100", "01000010", "01000110", "01011010", "01100010", "01000010", "00111100", "00000000"],
// #0x021
["00001000", "00011000", "00101000", "00001000", "00001000", "00001000", "00111110", "00000000"],
// #0x022
["00111100", "01000010", "00000010", "00001100", "00110000", "01000000", "01111110", "00000000"],
// #0x023
["00111100", "01000010", "00000010", "00111100", "00000010", "01000010", "00111100", "00000000"],
// #0x024
["00000100", "00001100", "00010100", "00100100", "01111110", "00000100", "00000100", "00000000"],
// #0x025
["01111110", "01000000", "01111000", "00000100", "00000010", "01000100", "00111000", "00000000"],
// #0x026
["00011100", "00100000", "01000000", "01111100", "01000010", "01000010", "00111100", "00000000"],
// #0x027
["01111110", "01000010", "00000100", "00001000", "00010000", "00010000", "00010000", "00000000"],
// #0x028
["00111100", "01000010", "01000010", "00111100", "01000010", "01000010", "00111100", "00000000"],
// #0x029
["00111100", "01000010", "01000010", "00111110", "00000010", "00000100", "00111000", "00000000"],
// #0x02a
["00000000", "00000000", "00000000", "01111110", "00000000", "00000000", "00000000", "00000000"],
// #0x02b
["00000000", "00000000", "01111110", "00000000", "01111110", "00000000", "00000000", "00000000"],
// #0x02c
["00000000", "00000000", "00001000", "00000000", "00000000", "00001000", "00001000", "00010000"],
// #0x02d
["00000000", "00000010", "00000100", "00001000", "00010000", "00100000", "01000000", "00000000"],
// #0x02e
["00000000", "00000000", "00000000", "00000000", "00000000", "00011000", "00011000", "00000000"],
// #0x02f
["00000000", "00000000", "00000000", "00000000", "00000000", "00001000", "00001000", "00010000"],
// #0x030
["00000000", "11111111", "00000000", "00000000", "00000000", "00000000", "00000000", "00000000"],
// #0x031
["01000000", "01000000", "01000000", "01000000", "01000000", "01000000", "01000000", "01000000"],
// #0x032
["10000000", "10000000", "10000000", "10000000", "10000000", "10000000", "10000000", "11111111"],
// #0x033
["00000001", "00000001", "00000001", "00000001", "00000001", "00000001", "00000001", "11111111"],
// #0x034
["00000000", "00000000", "00000000", "11111111", "00000000", "00000000", "00000000", "00000000"],
// #0x035
["00010000", "00010000", "00010000", "00010000", "00010000", "00010000", "00010000", "00010000"],
// #0x036
["11111111", "11111111", "00000000", "00000000", "00000000", "00000000", "00000000", "00000000"],
// #0x037
["11000000", "11000000", "11000000", "11000000", "11000000", "11000000", "11000000", "11000000"],
// #0x038
["00000000", "00000000", "00000000", "00000000", "00000000", "11111111", "00000000", "00000000"],
// #0x039
["00000100", "00000100", "00000100", "00000100", "00000100", "00000100", "00000100", "00000100"],
// #0x03a
["00000000", "00000000", "00000000", "00000000", "11111111", "11111111", "11111111", "11111111"],
// #0x03b
["00001111", "00001111", "00001111", "00001111", "00001111", "00001111", "00001111", "00001111"],
// #0x03c
["00000000", "00000000", "00000000", "00000000", "00000000", "00000000", "00000000", "11111111"],
// #0x03d
["00000001", "00000001", "00000001", "00000001", "00000001", "00000001", "00000001", "00000001"],
// #0x03e
["00000000", "00000000", "00000000", "00000000", "00000000", "00000000", "11111111", "11111111"],
// #0x03f
["00000011", "00000011", "00000011", "00000011", "00000011", "00000011", "00000011", "00000011"],
// #0x040
["00000000", "00000000", "00001000", "00000100", "11111110", "00000100", "00001000", "00000000"],
// #0x041
["00001000", "00011100", "00111110", "01111111", "01111111", "00011100", "00111110", "00000000"],
// #0x042
["11111111", "01111111", "00111111", "00011111", "00001111", "00000111", "00000011", "00000001"],
// #0x043
["11111111", "11111111", "11111111", "11111111", "11111111", "11111111", "11111111", "11111111"],
// #0x044
["00001000", "00011100", "00111110", "01111111", "00111110", "00011100", "00001000", "00000000"],
// #0x045
["00000000", "00000000", "00010000", "00100000", "01111111", "00100000", "00010000", "00000000"],
// #0x046
["00001000", "00011100", "00101010", "01111111", "00101010", "00001000", "00001000", "00000000"],
// #0x047
["00000000", "00111100", "01111110", "01111110", "01111110", "01111110", "00111100", "00000000"],
// #0x048
["00000000", "00111100", "01000010", "01000010", "01000010", "01000010", "00111100", "00000000"],
// #0x049
["00111100", "01000010", "00000010", "00001100", "00010000", "00000000", "00010000", "00000000"],
// #0x04a
["11111111", "11000011", "10000001", "10000001", "10000001", "10000001", "11000011", "11111111"],
// #0x04b
["00000000", "00000000", "00000000", "00000000", "00000011", "00000100", "00001000", "00001000"],
// #0x04c
["00000000", "00000000", "00000000", "00000000", "11000000", "00100000", "00010000", "00010000"],
// #0x04d
["10000000", "11000000", "11100000", "11110000", "11111000", "11111100", "11111110", "11111111"],
// #0x04e
["00000001", "00000011", "00000111", "00001111", "00011111", "00111111", "01111111", "11111111"],
// #0x04f
["00000000", "00000000", "00001000", "00000000", "00000000", "00001000", "00000000", "00000000"],
// #0x050
["00000000", "00001000", "00011100", "00101010", "00001000", "00001000", "00001000", "00000000"],
// #0x051
["00001110", "00011000", "00110000", "01100000", "00110000", "00011000", "00001110", "00000000"],
// #0x052
["00111100", "00100000", "00100000", "00100000", "00100000", "00100000", "00111100", "00000000"],
// #0x053
["00110110", "01111111", "01111111", "01111111", "00111110", "00011100", "00001000", "00000000"],
// #0x054
["00111100", "00000100", "00000100", "00000100", "00000100", "00000100", "00111100", "00000000"],
// #0x055
["00011100", "00100010", "01001010", "01010110", "01001100", "00100000", "00011110", "00000000"],
// #0x056
["11111111", "11111110", "11111100", "11111000", "11110000", "11100000", "11000000", "10000000"],
// #0x057
["01110000", "00011000", "00001100", "00000110", "00001100", "00011000", "01110000", "00000000"],
// #0x058
["10100000", "01010000", "10100000", "01010000", "10100000", "01010000", "10100000", "01010000"],
// #0x059
["00000000", "01000000", "00100000", "00010000", "00001000", "00000100", "00000010", "00000000"],
// #0x05a
["10101010", "01010101", "10101010", "01010101", "10101010", "01010101", "10101010", "01010101"],
// #0x05b
["11110000", "11110000", "11110000", "11110000", "00001111", "00001111", "00001111", "00001111"],
// #0x05c
["00000000", "00000000", "00000000", "00000000", "00001111", "00001000", "00001000", "00001000"],
// #0x05d
["00000000", "00000000", "00000000", "00000000", "11111000", "00001000", "00001000", "00001000"],
// #0x05e
["00001000", "00001000", "00001000", "00001000", "11111000", "00001000", "00001000", "00001000"],
// #0x05f
["00000000", "00000000", "00000000", "00000000", "11111111", "00001000", "00001000", "00001000"],
// #0x060
["00000000", "00000000", "00000001", "00111110", "01010100", "00010100", "00010100", "00000000"],
// #0x061
["00001000", "00001000", "00001000", "00001000", "00000000", "00000000", "00001000", "00000000"],
// #0x062
["00100100", "00100100", "00100100", "00000000", "00000000", "00000000", "00000000", "00000000"],
// #0x063
["00100100", "00100100", "01111110", "00100100", "01111110", "00100100", "00100100", "00000000"],
// #0x064
["00001000", "00011110", "00101000", "00011100", "00001010", "00111100", "00001000", "00000000"],
// #0x065
["00000000", "01100010", "01100100", "00001000", "00010000", "00100110", "01000110", "00000000"],
// #0x066
["00110000", "01001000", "01001000", "00110000", "01001010", "01000100", "00111010", "00000000"],
// #0x067
["00000100", "00001000", "00010000", "00000000", "00000000", "00000000", "00000000", "00000000"],
// #0x068
["00000100", "00001000", "00010000", "00010000", "00010000", "00001000", "00000100", "00000000"],
// #0x069
["00100000", "00010000", "00001000", "00001000", "00001000", "00010000", "00100000", "00000000"],
// #0x06a
["00000000", "00001000", "00001000", "00111110", "00001000", "00001000", "00000000", "00000000"],
// #0x06b
["00001000", "00101010", "00011100", "00111110", "00011100", "00101010", "00001000", "00000000"],
// #0x06c
["00001111", "00001111", "00001111", "00001111", "11110000", "11110000", "11110000", "11110000"],
// #0x06d
["10000001", "01000010", "00100100", "00011000", "00011000", "00100100", "01000010", "10000001"],
// #0x06e
["00010000", "00010000", "00100000", "11000000", "00000000", "00000000", "00000000", "00000000"],
// #0x06f
["00001000", "00001000", "00000100", "00000011", "00000000", "00000000", "00000000", "00000000"],
// #0x070
["11111111", "00000000", "00000000", "00000000", "00000000", "00000000", "00000000", "00000000"],
// #0x071
["10000000", "10000000", "10000000", "10000000", "10000000", "10000000", "10000000", "10000000"],
// #0x072
["11111111", "10000000", "10000000", "10000000", "10000000", "10000000", "10000000", "10000000"],
// #0x073
["11111111", "00000001", "00000001", "00000001", "00000001", "00000001", "00000001", "00000001"],
// #0x074
["00000000", "00000000", "11111111", "00000000", "00000000", "00000000", "00000000", "00000000"],
// #0x075
["00100000", "00100000", "00100000", "00100000", "00100000", "00100000", "00100000", "00100000"],
// #0x076
["00000001", "00000010", "00000100", "00001000", "00010000", "00100000", "01000000", "10000000"],
// #0x077
["10000000", "01000000", "00100000", "00010000", "00001000", "00000100", "00000010", "00000001"],
// #0x078
["00000000", "00000000", "00000000", "00000000", "11111111", "00000000", "00000000", "00000000"],
// #0x079
["00001000", "00001000", "00001000", "00001000", "00001000", "00001000", "00001000", "00001000"],
// #0x07a
["11111111", "11111111", "11111111", "11111111", "00000000", "00000000", "00000000", "00000000"],
// #0x07b
["11110000", "11110000", "11110000", "11110000", "11110000", "11110000", "11110000", "11110000"],
// #0x07c
["00000000", "00000000", "00000000", "00000000", "00000000", "00000000", "11111111", "00000000"],
// #0x07d
["00000010", "00000010", "00000010", "00000010", "00000010", "00000010", "00000010", "00000010"],
// #0x07e
["00000000", "00000000", "00000000", "00000000", "00000000", "11111111", "11111111", "11111111"],
// #0x07f
["00000111", "00000111", "00000111", "00000111", "00000111", "00000111", "00000111", "00000111"],
// #0x080
["00000000", "00001000", "00001000", "00001000", "00101010", "00011100", "00001000", "00000000"],
// #0x081
["00000100", "00111000", "00001000", "00111110", "00001000", "00001000", "00010000", "00000000"],
// #0x082
["00000000", "00111110", "00000010", "00000010", "00000010", "00000010", "00111110", "00000000"],
// #0x083
["00000000", "00100010", "00100010", "00010010", "00000010", "00000100", "00011000", "00000000"],
// #0x084
["00000000", "00110000", "00000010", "00110010", "00000010", "00000100", "00111000", "00000000"],
// #0x085
["00000010", "00000100", "00001000", "00011000", "00101000", "00001000", "00001000", "00000000"],
// #0x086
["00000000", "00001000", "00000100", "00100010", "00100010", "00100010", "00100010", "00000000"],
// #0x087
["00001000", "00111110", "00001000", "00111110", "00001000", "00001000", "00001000", "00000000"],
// #0x088
["00000000", "00011110", "00010010", "00100010", "00000010", "00000100", "00011000", "00000000"],
// #0x089
["00000000", "00011100", "00000000", "00000000", "00000000", "00000000", "00111110", "00000000"],
// #0x08a
["00000000", "00111110", "00000010", "00000010", "00010100", "00001000", "00000100", "00000000"],
// #0x08b
["00000100", "00000100", "00000100", "00000100", "00000100", "00001000", "00010000", "00000000"],
// #0x08c
["00100100", "00100100", "00100100", "00100100", "00000100", "00001000", "00010000", "00000000"],
// #0x08d
["00000000", "00111110", "00010000", "00111110", "00010000", "00010000", "00001110", "00000000"],
// #0x08e
["00000000", "00011100", "00000000", "00011100", "00000000", "00111100", "00000010", "00000000"],
// #0x08f
["00011100", "00000000", "00111110", "00000010", "00000010", "00000100", "00001000", "00000000"],
// #0x090
["00010000", "00111110", "00010010", "00010100", "00010000", "00010000", "00001110", "00000000"],
// #0x091
["00000000", "00011110", "00010010", "00101010", "00000110", "00000100", "00011000", "00000000"],
// #0x092
["00000000", "00111110", "00000010", "00000100", "00001000", "00010100", "00100010", "00000000"],
// #0x093
["00010000", "00010000", "00010000", "00011000", "00010100", "00010000", "00010000", "00000000"],
// #0x094
["00010000", "00111110", "00010010", "00010010", "00010010", "00010010", "00100100", "00000000"],
// #0x095
["00001000", "00001000", "00111110", "00001000", "00001000", "00010000", "00100000", "00000000"],
// #0x096
["00100000", "00100000", "00111110", "00100000", "00100000", "00100000", "00011110", "00000000"],
// #0x097
["00011100", "00000000", "00111110", "00001000", "00001000", "00001000", "00010000", "00000000"],
// #0x098
["00010100", "00111110", "00010100", "00010100", "00000100", "00001000", "00010000", "00000000"],
// #0x099
["00000000", "00110000", "00000000", "00000010", "00000010", "00000100", "00111000", "00000000"],
// #0x09a
["00000000", "00101010", "00101010", "00101010", "00000010", "00000100", "00001000", "00000000"],
// #0x09b
["00000000", "00111110", "00100010", "00100010", "00100010", "00100010", "00111110", "00000000"],
// #0x09c
["00010000", "00011110", "00100100", "00000100", "00000100", "00000100", "00001000", "00000000"],
// #0x09d
["00011110", "00010000", "00010000", "00010000", "00000000", "00000000", "00000000", "00000000"],
// #0x09e
["00000000", "00000000", "00111110", "00000010", "00001100", "00001000", "00010000", "00000000"],
// #0x09f
["00000000", "00000000", "00010000", "00111110", "00010010", "00010100", "00010000", "00000000"],
// #0x0a0
["00000000", "00111110", "00100010", "00100010", "00000010", "00000100", "00001000", "00000000"],
// #0x0a1
["00000000", "00111110", "00000010", "00010100", "00001000", "00010100", "00100000", "00000000"],
// #0x0a2
["00000000", "00111110", "00000010", "00000010", "00000010", "00000100", "00011000", "00000000"],
// #0x0a3
["00111110", "00000010", "00001010", "00001100", "00001000", "00001000", "00010000", "00000000"],
// #0x0a4
["00001000", "00111110", "00100010", "00100010", "00000010", "00000100", "00001000", "00000000"],
// #0x0a5
["00000000", "00111110", "00001000", "00001000", "00001000", "00001000", "00111110", "00000000"],
// #0x0a6
["00000100", "00111110", "00000100", "00001100", "00010100", "00100100", "00000100", "00000000"],
// #0x0a7
["00010000", "00010000", "00111110", "00010010", "00010100", "00010000", "00010000", "00000000"],
// #0x0a8
["00000000", "00011100", "00000100", "00000100", "00000100", "00000100", "00111110", "00000000"],
// #0x0a9
["00000000", "00111110", "00000010", "00111110", "00000010", "00000010", "00111110", "00000000"],
// #0x0aa
["00001000", "00111110", "00001000", "00001000", "00101010", "00101010", "00001000", "00000000"],
// #0x0ab
["00000000", "00010000", "00101000", "00000100", "00000010", "00000010", "00000000", "00000000"],
// #0x0ac
["00000000", "00100000", "00100000", "00100010", "00100100", "00101000", "00110000", "00000000"],
// #0x0ad
["00000000", "00000010", "00000010", "00010100", "00001000", "00010100", "00100000", "00000000"],
// #0x0ae
["00000000", "00001000", "00101000", "00101000", "00101010", "00101010", "00101100", "00000000"],
// #0x0af
["00001000", "00111110", "00000100", "00001000", "00011100", "00101010", "00001000", "00000000"],
// #0x0b0
["00000000", "00001000", "00010000", "00100000", "00100010", "00111110", "00000010", "00000000"],
// #0x0b1
["00000000", "00000000", "00000000", "00001000", "00001000", "00001000", "01111000", "00000000"],
// #0x0b2
["00000000", "00000000", "00000100", "00001000", "00011000", "00101000", "00001000", "00000000"],
// #0x0b3
["00000000", "00000000", "00000000", "00011100", "00000100", "00000100", "00111110", "00000000"],
// #0x0b4
["00000000", "00111110", "00000010", "00111110", "00000010", "00000100", "00001000", "00000000"],
// #0x0b5
["00000000", "00000000", "00000000", "00000000", "01000000", "00100000", "00010000", "00000000"],
// #0x0b6
["00000000", "00000000", "00001000", "00111110", "00100010", "00000010", "00001100", "00000000"],
// #0x0b7
["00000000", "00000000", "00111100", "00000100", "00111100", "00000100", "00111100", "00000000"],
// #0x0b8
["01110000", "01010000", "01110000", "00000000", "00000000", "00000000", "00000000", "00000000"],
// #0x0b9
["00000000", "00000000", "00000000", "00000000", "00000000", "00000000", "00100000", "00000000"],
// #0x0ba
["00000000", "00000000", "00000000", "00111110", "00001000", "00001000", "00111110", "00000000"],
// #0x0bb
["00000000", "00000000", "00000000", "00101010", "00101010", "00000010", "00001100", "00000000"],
// #0x0bc
["00010000", "01001000", "00100000", "00000000", "00000000", "00000000", "00000000", "00000000"],
// #0x0bd
["00000000", "00000000", "00000000", "00000000", "01110000", "01010000", "01110000", "00000000"],
// #0x0be
["00000000", "00000000", "00000100", "00111110", "00001100", "00010100", "00100100", "00000000"],
// #0x0bf
["00000000", "00000000", "00000000", "00011100", "00000000", "00000000", "00000000", "00000000"],
// #0x0c0
["00011100", "00011100", "00111110", "00011100", "00001000", "00000000", "00111110", "00000000"],
// #0x0c1
["11111111", "11110111", "11110111", "11110111", "11010101", "11100011", "11110111", "11111111"],
// #0x0c2
["11111111", "11110111", "11100011", "11010101", "11110111", "11110111", "11110111", "11111111"],
// #0x0c3
["11111111", "11111111", "11110111", "11111011", "10000001", "11111011", "11110111", "11111111"],
// #0x0c4
["11111111", "11111111", "11101111", "11011111", "10000001", "11011111", "11101111", "11111111"],
// #0x0c5
["10111011", "10111011", "10111011", "10000011", "10111011", "10111011", "10111011", "11111111"],
// #0x0c6
["11100011", "11011101", "10111111", "10111111", "10111111", "11011101", "11100011", "11111111"],
// #0x0c7
["00011000", "00100100", "01111110", "11111111", "01011010", "00100100", "00000000", "00000000"],
// #0x0c8
["11100000", "01000111", "01000010", "01111110", "01000010", "01000111", "11100000", "00000000"],
// #0x0c9
["00100010", "00111110", "00101010", "00001000", "00001000", "01001001", "01111111", "01000001"],
// #0x0ca
["00011100", "00011100", "00001000", "00111110", "00001000", "00001000", "00010100", "00100010"],
// #0x0cb
["00000000", "00010001", "11010010", "11111100", "11010010", "00010001", "00000000", "00000000"],
// #0x0cc
["00000000", "10001000", "01001011", "00111111", "01001011", "10001000", "00000000", "00000000"],
// #0x0cd
["00100010", "00010100", "00001000", "00001000", "00111110", "00001000", "00011100", "00011100"],
// #0x0ce
["00111100", "01111110", "11111111", "11011011", "11111111", "11100111", "01111110", "00111100"],
// #0x0cf
["00111100", "01000010", "10000001", "10100101", "10000001", "10011001", "01000010", "00111100"],
// #0x0d0
["00111110", "00100010", "00100010", "00111110", "00100010", "00100010", "00111110", "00000000"],
// #0x0d1
["00111110", "00100010", "00111110", "00100010", "00111110", "00100010", "01000010", "00000000"],
// #0x0d2
["00001000", "00101010", "00101010", "00001000", "00010100", "00100010", "01000001", "00000000"],
// #0x0d3
["00001000", "00001001", "00111010", "00001100", "00011100", "00101010", "01001001", "00000000"],
// #0x0d4
["00001000", "00001000", "00111110", "00001000", "00011100", "00101010", "01001001", "00000000"],
// #0x0d5
["00001000", "00010100", "00111110", "01001001", "00111110", "00011100", "01111111", "00000000"],
// #0x0d6
["00000000", "00001000", "00001000", "00111110", "00001000", "00001000", "01111111", "00000000"],
// #0x0d7
["00001000", "01001000", "01111110", "01001000", "00111110", "00001000", "01111111", "00000000"],
// #0x0d8
["00100000", "00111110", "01001000", "00111100", "00101000", "01111110", "00001000", "00000000"],
// #0x0d9
["00000100", "01111110", "01010100", "01111111", "01010010", "01111111", "00001010", "00000000"],
// #0x0da
["00001000", "00010100", "00100010", "01111111", "00010010", "00010010", "00100100", "00000000"],
// #0x0db
["00111000", "00010010", "01111111", "00010111", "00111011", "01010010", "00010100", "00000000"],
// #0x0dc
["01111111", "01001001", "01001001", "01111111", "01000001", "01000001", "01000001", "00000000"],
// #0x0dd
["00100010", "00010100", "00111110", "00001000", "00111110", "00001000", "00001000", "00000000"],
// #0x0de
["00001100", "00010010", "00010000", "00111000", "00010000", "00010000", "00111110", "00000000"],
// #0x0df
["00000000", "11000000", "11001000", "01010100", "01010100", "01010101", "00100010", "00000000"],
// #0x0e0
["00000000", "00000000", "00000000", "00000000", "00000000", "00000010", "11111111", "00000010"],
// #0x0e1
["00000010", "00000010", "00000010", "00000010", "00000010", "00000010", "00000111", "00000010"],
// #0x0e2
["00000010", "00000010", "00000010", "00000010", "00000010", "00000010", "11111111", "00000010"],
// #0x0e3
["00000000", "00000000", "00100000", "01010000", "10001000", "00000101", "00000010", "00000000"],
// #0x0e4
["00000000", "00001110", "00010001", "00100010", "11000100", "00000100", "00000010", "00000001"],
// #0x0e5
["00000000", "11111111", "00000000", "10000001", "01000010", "01000010", "10000001", "00000000"],
// #0x0e6
["00000000", "01110000", "10001000", "01000100", "00100011", "00100000", "01000000", "10000000"],
// #0x0e7
["00000000", "11000100", "10100100", "10010100", "10001111", "10010100", "10100100", "11000100"],
// #0x0e8
["00000000", "00100011", "00100101", "00101001", "11110001", "00101001", "00100101", "00100011"],
// #0x0e9
["10001000", "10010000", "10100000", "11000000", "11000000", "10101000", "10011000", "10111000"],
// #0x0ea
["10101000", "10110000", "10111000", "11000000", "11000000", "10100000", "10010000", "10001000"],
// #0x0eb
["10000000", "01000000", "00100000", "00010000", "00011111", "00100000", "01000000", "10000000"],
// #0x0ec
["00000000", "00000000", "00100100", "00100100", "11100111", "00100100", "00100100", "00000000"],
// #0x0ed
["00001000", "00001000", "00111110", "00000000", "00000000", "00111110", "00001000", "00001000"],
// #0x0ee
["00001000", "00010000", "00100000", "00010000", "00001000", "00000100", "00000010", "00000100"],
// #0x0ef
["01010101", "10101010", "01010101", "10101010", "01010101", "10101010", "01010101", "10101010"],
// #0x0f0
["00000000", "00000000", "00000000", "00000000", "00000000", "00000000", "00000000", "00000000"],
// #0x0f1
["00000000", "01110000", "01110000", "01110000", "00000000", "00000000", "00000000", "00000000"],
// #0x0f2
["00000000", "00000111", "00000111", "00000111", "00000000", "00000000", "00000000", "00000000"],
// #0x0f3
["00000000", "01110111", "01110111", "01110111", "00000000", "00000000", "00000000", "00000000"],
// #0x0f4
["00000000", "00000000", "00000000", "00000000", "00000000", "01110000", "01110000", "01110000"],
// #0x0f5
["00000000", "01110000", "01110000", "01110000", "00000000", "01110000", "01110000", "01110000"],
// #0x0f6
["00000000", "00000111", "00000111", "00000111", "00000000", "01110000", "01110000", "01110000"],
// #0x0f7
["00000000", "01110111", "01110111", "01110111", "00000000", "01110000", "01110000", "01110000"],
// #0x0f8
["00000000", "00000000", "00000000", "00000000", "00000000", "00000111", "00000111", "00000111"],
// #0x0f9
["00000000", "01110000", "01110000", "01110000", "00000000", "00000111", "00000111", "00000111"],
// #0x0fa
["00000000", "00000111", "00000111", "00000111", "00000000", "00000111", "00000111", "00000111"],
// #0x0fb
["00000000", "01110111", "01110111", "01110111", "00000000", "00000111", "00000111", "00000111"],
// #0x0fc
["00000000", "00000000", "00000000", "00000000", "00000000", "01110111", "01110111", "01110111"],
// #0x0fd
["00000000", "01110000", "01110000", "01110000", "00000000", "01110111", "01110111", "01110111"],
// #0x0fe
["00000000", "00000111", "00000111", "00000111", "00000000", "01110111", "01110111", "01110111"],
// #0x0ff
["00000000", "01110111", "01110111", "01110111", "00000000", "01110111", "01110111", "01110111"],
// #0x100
["00000000", "00000000", "00000000", "00000000", "00000000", "00000000", "00000000", "00000000"],
// #0x101
["00000000", "00000000", "00111000", "00000100", "00111100", "01000100", "00111010", "00000000"],
// #0x102
["01000000", "01000000", "01011100", "01100010", "01000010", "01100010", "01011100", "00000000"],
// #0x103
["00000000", "00000000", "00111100", "01000010", "01000000", "01000010", "00111100", "00000000"],
// #0x104
["00000010", "00000010", "00111010", "01000110", "01000010", "01000110", "00111010", "00000000"],
// #0x105
["00000000", "00000000", "00111100", "01000010", "01111110", "01000000", "00111100", "00000000"],
// #0x106
["00001100", "00010010", "00010000", "01111100", "00010000", "00010000", "00010000", "00000000"],
// #0x107
["00000000", "00000000", "00111010", "01000110", "01000110", "00111010", "00000010", "00111100"],
// #0x108
["01000000", "01000000", "01011100", "01100010", "01000010", "01000010", "01000010", "00000000"],
// #0x109
["00001000", "00000000", "00011000", "00001000", "00001000", "00001000", "00011100", "00000000"],
// #0x10a
["00000100", "00000000", "00001100", "00000100", "00000100", "00000100", "01000100", "00111000"],
// #0x10b
["01000000", "01000000", "01000100", "01001000", "01010000", "01101000", "01000100", "00000000"],
// #0x10c
["00011000", "00001000", "00001000", "00001000", "00001000", "00001000", "00011100", "00000000"],
// #0x10d
["00000000", "00000000", "01110110", "01001001", "01001001", "01001001", "01001001", "00000000"],
// #0x10e
["00000000", "00000000", "01011100", "01100010", "01000010", "01000010", "01000010", "00000000"],
// #0x10f
["00000000", "00000000", "00111100", "01000010", "01000010", "01000010", "00111100", "00000000"],
// #0x110
["00000000", "00000000", "01011100", "01100010", "01100010", "01011100", "01000000", "01000000"],
// #0x111
["00000000", "00000000", "00111010", "01000110", "01000110", "00111010", "00000010", "00000010"],
// #0x112
["00000000", "00000000", "01011100", "01100010", "01000000", "01000000", "01000000", "00000000"],
// #0x113
["00000000", "00000000", "00111110", "01000000", "00111100", "00000010", "01111100", "00000000"],
// #0x114
["00010000", "00010000", "01111100", "00010000", "00010000", "00010010", "00001100", "00000000"],
// #0x115
["00000000", "00000000", "01000010", "01000010", "01000010", "01000010", "00111100", "00000000"],
// #0x116
["00000000", "00000000", "01000010", "01000010", "01000010", "00100100", "00011000", "00000000"],
// #0x117
["00000000", "00000000", "01000001", "01001001", "01001001", "01001001", "00110110", "00000000"],
// #0x118
["00000000", "00000000", "01000100", "00101000", "00010000", "00101000", "01000100", "00000000"],
// #0x119
["00000000", "00000000", "01000010", "01000010", "01000110", "00111010", "00000010", "00111100"],
// #0x11a
["00000000", "00000000", "01111110", "00000100", "00011000", "00100000", "01111110", "00000000"],
// #0x11b
["00001000", "00001000", "00001000", "00001000", "11111111", "00001000", "00001000", "00001000"],
// #0x11c
["00001000", "00001000", "00001000", "00001000", "00001111", "00000000", "00000000", "00000000"],
// #0x11d
["00001000", "00001000", "00001000", "00001000", "11111000", "00000000", "00000000", "00000000"],
// #0x11e
["00001000", "00001000", "00001000", "00001000", "00001111", "00001000", "00001000", "00001000"],
// #0x11f
["00001000", "00001000", "00001000", "00001000", "11111111", "00000000", "00000000", "00000000"],
// #0x120
["00111100", "01000010", "01000110", "01011010", "01100010", "01000010", "00111100", "00000000"],
// #0x121
["00001000", "00011000", "00101000", "00001000", "00001000", "00001000", "00111110", "00000000"],
// #0x122
["00111100", "01000010", "00000010", "00001100", "00110000", "01000000", "01111110", "00000000"],
// #0x123
["00111100", "01000010", "00000010", "00111100", "00000010", "01000010", "00111100", "00000000"],
// #0x124
["00000100", "00001100", "00010100", "00100100", "01111110", "00000100", "00000100", "00000000"],
// #0x125
["01111110", "01000000", "01111000", "00000100", "00000010", "01000100", "00111000", "00000000"],
// #0x126
["00011100", "00100000", "01000000", "01111100", "01000010", "01000010", "00111100", "00000000"],
// #0x127
["01111110", "01000010", "00000100", "00001000", "00010000", "00010000", "00010000", "00000000"],
// #0x128
["00111100", "01000010", "01000010", "00111100", "01000010", "01000010", "00111100", "00000000"],
// #0x129
["00111100", "01000010", "01000010", "00111110", "00000010", "00000100", "00111000", "00000000"],
// #0x12a
["00000000", "00000000", "00000000", "01111110", "00000000", "00000000", "00000000", "00000000"],
// #0x12b
["00000000", "00000000", "01111110", "00000000", "01111110", "00000000", "00000000", "00000000"],
// #0x12c
["00000000", "00000000", "00001000", "00000000", "00000000", "00001000", "00001000", "00010000"],
// #0x12d
["00000000", "00000010", "00000100", "00001000", "00010000", "00100000", "01000000", "00000000"],
// #0x12e
["00000000", "00000000", "00000000", "00000000", "00000000", "00011000", "00011000", "00000000"],
// #0x12f
["00000000", "00000000", "00000000", "00000000", "00000000", "00001000", "00001000", "00010000"],
// #0x130
["00000000", "11111111", "00000000", "00000000", "00000000", "00000000", "00000000", "00000000"],
// #0x131
["01000000", "01000000", "01000000", "01000000", "01000000", "01000000", "01000000", "01000000"],
// #0x132
["10000000", "10000000", "10000000", "10000000", "10000000", "10000000", "10000000", "11111111"],
// #0x133
["00000001", "00000001", "00000001", "00000001", "00000001", "00000001", "00000001", "11111111"],
// #0x134
["00000000", "00000000", "00000000", "11111111", "00000000", "00000000", "00000000", "00000000"],
// #0x135
["00010000", "00010000", "00010000", "00010000", "00010000", "00010000", "00010000", "00010000"],
// #0x136
["11111111", "11111111", "00000000", "00000000", "00000000", "00000000", "00000000", "00000000"],
// #0x137
["11000000", "11000000", "11000000", "11000000", "11000000", "11000000", "11000000", "11000000"],
// #0x138
["00000000", "00000000", "00000000", "00000000", "00000000", "11111111", "00000000", "00000000"],
// #0x139
["00000100", "00000100", "00000100", "00000100", "00000100", "00000100", "00000100", "00000100"],
// #0x13a
["00000000", "00000000", "00000000", "00000000", "11111111", "11111111", "11111111", "11111111"],
// #0x13b
["00001111", "00001111", "00001111", "00001111", "00001111", "00001111", "00001111", "00001111"],
// #0x13c
["00000000", "00000000", "00000000", "00000000", "00000000", "00000000", "00000000", "11111111"],
// #0x13d
["00000001", "00000001", "00000001", "00000001", "00000001", "00000001", "00000001", "00000001"],
// #0x13e
["00000000", "00000000", "00000000", "00000000", "00000000", "00000000", "11111111", "11111111"],
// #0x13f
["00000011", "00000011", "00000011", "00000011", "00000011", "00000011", "00000011", "00000011"],
// #0x140
["00000000", "00000000", "00001000", "00000100", "11111110", "00000100", "00001000", "00000000"],
// #0x141
["00001000", "00011100", "00111110", "01111111", "01111111", "00011100", "00111110", "00000000"],
// #0x142
["11111111", "01111111", "00111111", "00011111", "00001111", "00000111", "00000011", "00000001"],
// #0x143
["11111111", "11111111", "11111111", "11111111", "11111111", "11111111", "11111111", "11111111"],
// #0x144
["00001000", "00011100", "00111110", "01111111", "00111110", "00011100", "00001000", "00000000"],
// #0x145
["00000000", "00000000", "00010000", "00100000", "01111111", "00100000", "00010000", "00000000"],
// #0x146
["00001000", "00011100", "00101010", "01111111", "00101010", "00001000", "00001000", "00000000"],
// #0x147
["00000000", "00111100", "01111110", "01111110", "01111110", "01111110", "00111100", "00000000"],
// #0x148
["00000000", "00111100", "01000010", "01000010", "01000010", "01000010", "00111100", "00000000"],
// #0x149
["00111100", "01000010", "00000010", "00001100", "00010000", "00000000", "00010000", "00000000"],
// #0x14a
["11111111", "11000011", "10000001", "10000001", "10000001", "10000001", "11000011", "11111111"],
// #0x14b
["00000000", "00000000", "00000000", "00000000", "00000011", "00000100", "00001000", "00001000"],
// #0x14c
["00000000", "00000000", "00000000", "00000000", "11000000", "00100000", "00010000", "00010000"],
// #0x14d
["10000000", "11000000", "11100000", "11110000", "11111000", "11111100", "11111110", "11111111"],
// #0x14e
["00000001", "00000011", "00000111", "00001111", "00011111", "00111111", "01111111", "11111111"],
// #0x14f
["00000000", "00000000", "00001000", "00000000", "00000000", "00001000", "00000000", "00000000"],
// #0x150
["00000000", "00001000", "00011100", "00101010", "00001000", "00001000", "00001000", "00000000"],
// #0x151
["00001110", "00011000", "00110000", "01100000", "00110000", "00011000", "00001110", "00000000"],
// #0x152
["00111100", "00100000", "00100000", "00100000", "00100000", "00100000", "00111100", "00000000"],
// #0x153
["00110110", "01111111", "01111111", "01111111", "00111110", "00011100", "00001000", "00000000"],
// #0x154
["00111100", "00000100", "00000100", "00000100", "00000100", "00000100", "00111100", "00000000"],
// #0x155
["00011100", "00100010", "01001010", "01010110", "01001100", "00100000", "00011110", "00000000"],
// #0x156
["11111111", "11111110", "11111100", "11111000", "11110000", "11100000", "11000000", "10000000"],
// #0x157
["01110000", "00011000", "00001100", "00000110", "00001100", "00011000", "01110000", "00000000"],
// #0x158
["10100000", "01010000", "10100000", "01010000", "10100000", "01010000", "10100000", "01010000"],
// #0x159
["00000000", "01000000", "00100000", "00010000", "00001000", "00000100", "00000010", "00000000"],
// #0x15a
["10101010", "01010101", "10101010", "01010101", "10101010", "01010101", "10101010", "01010101"],
// #0x15b
["11110000", "11110000", "11110000", "11110000", "00001111", "00001111", "00001111", "00001111"],
// #0x15c
["00000000", "00000000", "00000000", "00000000", "00001111", "00001000", "00001000", "00001000"],
// #0x15d
["00000000", "00000000", "00000000", "00000000", "11111000", "00001000", "00001000", "00001000"],
// #0x15e
["00001000", "00001000", "00001000", "00001000", "11111000", "00001000", "00001000", "00001000"],
// #0x15f
["00000000", "00000000", "00000000", "00000000", "11111111", "00001000", "00001000", "00001000"],
// #0x160
["00000000", "00000000", "00000001", "00111110", "01010100", "00010100", "00010100", "00000000"],
// #0x161
["00001000", "00001000", "00001000", "00001000", "00000000", "00000000", "00001000", "00000000"],
// #0x162
["00100100", "00100100", "00100100", "00000000", "00000000", "00000000", "00000000", "00000000"],
// #0x163
["00100100", "00100100", "01111110", "00100100", "01111110", "00100100", "00100100", "00000000"],
// #0x164
["00001000", "00011110", "00101000", "00011100", "00001010", "00111100", "00001000", "00000000"],
// #0x165
["00000000", "01100010", "01100100", "00001000", "00010000", "00100110", "01000110", "00000000"],
// #0x166
["00110000", "01001000", "01001000", "00110000", "01001010", "01000100", "00111010", "00000000"],
// #0x167
["00000100", "00001000", "00010000", "00000000", "00000000", "00000000", "00000000", "00000000"],
// #0x168
["00000100", "00001000", "00010000", "00010000", "00010000", "00001000", "00000100", "00000000"],
// #0x169
["00100000", "00010000", "00001000", "00001000", "00001000", "00010000", "00100000", "00000000"],
// #0x16a
["00000000", "00001000", "00001000", "00111110", "00001000", "00001000", "00000000", "00000000"],
// #0x16b
["00001000", "00101010", "00011100", "00111110", "00011100", "00101010", "00001000", "00000000"],
// #0x16c
["00001111", "00001111", "00001111", "00001111", "11110000", "11110000", "11110000", "11110000"],
// #0x16d
["10000001", "01000010", "00100100", "00011000", "00011000", "00100100", "01000010", "10000001"],
// #0x16e
["00010000", "00010000", "00100000", "11000000", "00000000", "00000000", "00000000", "00000000"],
// #0x16f
["00001000", "00001000", "00000100", "00000011", "00000000", "00000000", "00000000", "00000000"],
// #0x170
["11111111", "00000000", "00000000", "00000000", "00000000", "00000000", "00000000", "00000000"],
// #0x171
["10000000", "10000000", "10000000", "10000000", "10000000", "10000000", "10000000", "10000000"],
// #0x172
["11111111", "10000000", "10000000", "10000000", "10000000", "10000000", "10000000", "10000000"],
// #0x173
["11111111", "00000001", "00000001", "00000001", "00000001", "00000001", "00000001", "00000001"],
// #0x174
["00000000", "00000000", "11111111", "00000000", "00000000", "00000000", "00000000", "00000000"],
// #0x175
["00100000", "00100000", "00100000", "00100000", "00100000", "00100000", "00100000", "00100000"],
// #0x176
["00000100", "00001000", "00010001", "00100010", "01000100", "10001000", "00010000", "00100000"],
// #0x177
["00100000", "00010000", "10001000", "01000100", "00100010", "00010001", "00001000", "00000100"],
// #0x178
["00000000", "00000000", "00000000", "00000000", "11111111", "00000000", "00000000", "00000000"],
// #0x179
["00001000", "00001000", "00001000", "00001000", "00001000", "00001000", "00001000", "00001000"],
// #0x17a
["11111111", "11111111", "11111111", "11111111", "00000000", "00000000", "00000000", "00000000"],
// #0x17b
["11110000", "11110000", "11110000", "11110000", "11110000", "11110000", "11110000", "11110000"],
// #0x17c
["00000000", "00000000", "00000000", "00000000", "00000000", "00000000", "11111111", "00000000"],
// #0x17d
["00000010", "00000010", "00000010", "00000010", "00000010", "00000010", "00000010", "00000010"],
// #0x17e
["00000000", "00000000", "00000000", "00000000", "00000000", "11111111", "11111111", "11111111"],
// #0x17f
["00000111", "00000111", "00000111", "00000111", "00000111", "00000111", "00000111", "00000111"],
// #0x180
["00000000", "00001000", "00001000", "00001000", "00101010", "00011100", "00001000", "00000000"],
// #0x181
["00010000", "11111110", "00100000", "01111100", "00000010", "00000010", "11111100", "00000000"],
// #0x182
["00000000", "11111100", "00000010", "00000000", "00000000", "10000000", "01111110", "00000000"],
// #0x183
["00111100", "00001000", "00010000", "01111110", "00001000", "00010000", "00001100", "00000000"],
// #0x184
["01000000", "01000000", "01000000", "01000000", "01000100", "01000100", "00111000", "00000000"],
// #0x185
["10000100", "10000010", "10000010", "10000010", "10000010", "10010000", "01100000", "00000000"],
// #0x186
["10000100", "10011110", "10000100", "10000100", "10011100", "10100110", "01011100", "00000000"],
// #0x187
["00010000", "01111110", "00001000", "01111110", "00000100", "00000010", "01100000", "00011000"],
// #0x188
["00001100", "00011000", "00110000", "01100000", "00110000", "00011000", "00001100", "00000000"],
// #0x189
["10011110", "10000000", "10000000", "10000000", "10000000", "10010000", "11011110", "00000000"],
// #0x18a
["00010000", "01111110", "00010000", "01111110", "00010000", "01110000", "10011100", "01110010"],
// #0x18b
["00111000", "01010100", "10010010", "10010010", "10010010", "10010010", "01100100", "00000000"],
// #0x18c
["01000100", "01000100", "01000100", "01100100", "00000100", "00001000", "00010000", "00000000"],
// #0x18d
["00100000", "11111000", "00100000", "11111000", "00100010", "00100010", "00011100", "00000000"],
// #0x18e
["01110000", "00010000", "00010100", "01111110", "10010100", "10010100", "01100100", "00000000"],
// #0x18f
["01100000", "00000000", "10011100", "10100010", "11000010", "10000010", "00011100", "00000000"],
// #0x190
["01000100", "01000100", "11111110", "01000100", "01011000", "01000000", "00111110", "00000000"],
// #0x191
["00100000", "11111100", "01000000", "01011110", "10000000", "10100000", "10111110", "00000000"],
// #0x192
["00001000", "11111110", "00001000", "00111000", "01001000", "00111000", "00001000", "00010000"],
// #0x193
["00100000", "00100010", "00101100", "00110000", "01000000", "10000000", "01111110", "00000000"],
// #0x194
["00100010", "11111001", "00100101", "00100100", "00100100", "00100100", "01001000", "00000000"],
// #0x195
["00100000", "11111010", "01000001", "01000100", "10011100", "10100110", "00011100", "00000000"],
// #0x196
["11100000", "00100110", "01000101", "10000100", "10000100", "10001000", "01110000", "00000000"],
// #0x197
["11111110", "00000100", "00001000", "00010000", "00010000", "00001000", "00000100", "00000000"],
// #0x198
["00100000", "11111110", "00010000", "00001000", "01000100", "00100000", "00011000", "00000000"],
// #0x199
["00010000", "00100000", "00100000", "01110000", "01001000", "10001000", "10000110", "00000000"],
// #0x19a
["10000000", "01111100", "00000010", "00000010", "00000010", "00000100", "00011000", "00000000"],
// #0x19b
["01111100", "00001000", "00010000", "00101100", "01000010", "00000010", "00100100", "00011000"],
// #0x19c
["10000100", "10111110", "10000100", "10000100", "10000100", "10000100", "01001000", "00000000"],
// #0x19d
["00011110", "00010000", "00010000", "00010000", "00000000", "00000000", "00000000", "00000000"],
// #0x19e
["00000000", "00100000", "01110000", "00100000", "01111000", "10010100", "01101000", "00000000"],
// #0x19f
["00000000", "00000000", "01011000", "11100100", "00101000", "00100000", "00010000", "00000000"],
// #0x1a0
["00100000", "11100100", "00101010", "00110010", "01100010", "10100010", "00100100", "00000000"],
// #0x1a1
["00000100", "01000100", "01111100", "01001010", "10110010", "10010111", "01100110", "00000000"],
// #0x1a2
["00111000", "00000000", "00010000", "01001010", "01001010", "10001010", "00110000", "00000000"],
// #0x1a3
["00100000", "11111100", "00100000", "01111100", "10101010", "10010010", "01100100", "00000000"],
// #0x1a4
["00011000", "00000000", "00111100", "01000010", "00000010", "00000100", "00001000", "00000000"],
// #0x1a5
["00010000", "00000000", "01111100", "00001000", "00010000", "00101000", "01000110", "00000000"],
// #0x1a6
["00100000", "11111101", "00100001", "01111100", "10100010", "10100010", "01100100", "00000000"],
// #0x1a7
["01001000", "01001100", "00110010", "11100010", "00100100", "00010000", "00010000", "00001000"],
// #0x1a8
["00001000", "10011100", "10101010", "11001010", "11001010", "10001100", "00011000", "00000000"],
// #0x1a9
["00001000", "00001110", "00001000", "00001000", "01111000", "10001110", "01111000", "00000000"],
// #0x1aa
["10011110", "10000100", "10011110", "10000100", "10011100", "10100110", "11011100", "00000000"],
// #0x1ab
["00000000", "00100000", "01010000", "10001000", "00000100", "00000010", "00000010", "00000000"],
// #0x1ac
["00100000", "11100110", "00101100", "00110100", "01100100", "10100100", "00100010", "00000000"],
// #0x1ad
["00000100", "01000100", "01111100", "01001010", "10110010", "10010010", "01100100", "00000000"],
// #0x1ae
["01111100", "00001000", "00010000", "00111100", "01000010", "00011010", "00100100", "00011000"],
// #0x1af
["00100000", "11100100", "00101010", "00110010", "01100110", "10101011", "00100110", "00000000"],
// #0x1b0
["00100000", "11111101", "00100001", "01100000", "10100000", "01100010", "00111110", "00000000"],
// #0x1b1
["00000000", "00000000", "00000000", "00000000", "00001000", "00001000", "00001000", "01111000"],
// #0x1b2
["00000000", "00000000", "01001000", "01000100", "01000100", "01000100", "00100000", "00000000"],
// #0x1b3
["00000000", "00000000", "00010000", "10111000", "11010100", "10011000", "00110000", "00000000"],
// #0x1b4
["00010000", "11111110", "00100000", "01110100", "10111000", "01001000", "01111110", "00000000"],
// #0x1b5
["00000000", "00000000", "00000000", "00000000", "00000000", "01000000", "00100000", "00010000"],
// #0x1b6
["00000000", "00100000", "00000000", "01111000", "00000100", "00000100", "00001000", "00000000"],
// #0x1b7
["00000000", "00000000", "00100000", "00111000", "00100000", "01111000", "01100000", "00000000"],
// #0x1b8
["01110000", "01010000", "01110000", "00000000", "00000000", "00000000", "00000000", "00000000"],
// #0x1b9
["00000000", "00000000", "00000000", "00000000", "00000000", "00000000", "00100000", "00000000"],
// #0x1ba
["00000000", "00100000", "00000000", "01111000", "00010000", "00110000", "01001100", "00000000"],
// #0x1bb
["00000000", "00000000", "00000000", "11111000", "00000100", "00000100", "00011000", "00000000"],
// #0x1bc
["00100000", "10010000", "01000000", "00000000", "00000000", "00000000", "00000000", "00000000"],
// #0x1bd
["00000000", "00000000", "00000000", "00000000", "00000000", "01110000", "01010000", "01110000"],
// #0x1be
["00000000", "00100000", "01110100", "00100000", "01111000", "10100100", "01101000", "00000000"],
// #0x1bf
["00000000", "00000000", "00000000", "00011100", "00000000", "00000000", "00000000", "00000000"],
// #0x1c0
["00011100", "00011100", "00111110", "00011100", "00001000", "00000000", "00111110", "00000000"],
// #0x1c1
["11111111", "11110111", "11110111", "11110111", "11010101", "11100011", "11110111", "11111111"],
// #0x1c2
["11111111", "11110111", "11100011", "11010101", "11110111", "11110111", "11110111", "11111111"],
// #0x1c3
["11111111", "11111111", "11110111", "11111011", "10000001", "11111011", "11110111", "11111111"],
// #0x1c4
["11111111", "11111111", "11101111", "11011111", "10000001", "11011111", "11101111", "11111111"],
// #0x1c5
["10111011", "10111011", "10111011", "10000011", "10111011", "10111011", "10111011", "11111111"],
// #0x1c6
["11100011", "11011101", "10111111", "10111111", "10111111", "11011101", "11100011", "11111111"],
// #0x1c7
["00011000", "00100100", "01111110", "11111111", "01011010", "00100100", "00000000", "00000000"],
// #0x1c8
["11100000", "01000111", "01000010", "01111110", "01000010", "01000111", "11100000", "00000000"],
// #0x1c9
["00100010", "00111110", "00101010", "00001000", "00001000", "01001001", "01111111", "01000001"],
// #0x1ca
["00011100", "00011100", "00001000", "00111110", "00001000", "00001000", "00010100", "00100010"],
// #0x1cb
["00000000", "00010001", "11010010", "11111100", "11010010", "00010001", "00000000", "00000000"],
// #0x1cc
["00000000", "10001000", "01001011", "00111111", "01001011", "10001000", "00000000", "00000000"],
// #0x1cd
["00100010", "00010100", "00001000", "00001000", "00111110", "00001000", "00011100", "00011100"],
// #0x1ce
["00111100", "01111110", "11111111", "11011011", "11111111", "11100111", "01111110", "00111100"],
// #0x1cf
["00111100", "01000010", "10000001", "10100101", "10000001", "10011001", "01000010", "00111100"],
// #0x1d0
["00111110", "00100010", "00100010", "00111110", "00100010", "00100010", "00111110", "00000000"],
// #0x1d1
["00111110", "00100010", "00111110", "00100010", "00111110", "00100010", "01000010", "00000000"],
// #0x1d2
["00001000", "00101010", "00101010", "00001000", "00010100", "00100010", "01000001", "00000000"],
// #0x1d3
["00001000", "00001001", "00111010", "00001100", "00011100", "00101010", "01001001", "00000000"],
// #0x1d4
["00001000", "00001000", "00111110", "00001000", "00011100", "00101010", "01001001", "00000000"],
// #0x1d5
["00001000", "00010100", "00111110", "01001001", "00111110", "00011100", "01111111", "00000000"],
// #0x1d6
["00000000", "00001000", "00001000", "00111110", "00001000", "00001000", "01111111", "00000000"],
// #0x1d7
["00001000", "01001000", "01111110", "01001000", "00111110", "00001000", "01111111", "00000000"],
// #0x1d8
["00100000", "00111110", "01001000", "00111100", "00101000", "01111110", "00001000", "00000000"],
// #0x1d9
["00000100", "01111110", "01010100", "01111111", "01010010", "01111111", "00001010", "00000000"],
// #0x1da
["00001000", "00010100", "00100010", "01111111", "00010010", "00010010", "00100100", "00000000"],
// #0x1db
["00111000", "00010010", "01111111", "00010111", "00111011", "01010010", "00010100", "00000000"],
// #0x1dc
["01111111", "01001001", "01001001", "01111111", "01000001", "01000001", "01000001", "00000000"],
// #0x1dd
["00100010", "00010100", "00111110", "00001000", "00111110", "00001000", "00001000", "00000000"],
// #0x1de
["00001100", "00010010", "00010000", "00111000", "00010000", "00010000", "00111110", "00000000"],
// #0x1df
["00000000", "11000000", "11001000", "01010100", "01010100", "01010101", "00100010", "00000000"],
// #0x1e0
["00000000", "00000000", "00000000", "00000000", "00000000", "00000010", "11111111", "00000010"],
// #0x1e1
["00000010", "00000010", "00000010", "00000010", "00000010", "00000010", "00000111", "00000010"],
// #0x1e2
["00000010", "00000010", "00000010", "00000010", "00000010", "00000010", "11111111", "00000010"],
// #0x1e3
["00000000", "00000000", "00100000", "01010000", "10001000", "00000101", "00000010", "00000000"],
// #0x1e4
["00000000", "00001110", "00010001", "00100010", "11000100", "00000100", "00000010", "00000001"],
// #0x1e5
["00000000", "11111111", "00000000", "10000001", "01000010", "01000010", "10000001", "00000000"],
// #0x1e6
["00000000", "01110000", "10001000", "01000100", "00100011", "00100000", "01000000", "10000000"],
// #0x1e7
["00000000", "11000100", "10100100", "10010100", "10001111", "10010100", "10100100", "11000100"],
// #0x1e8
["00000000", "00100011", "00100101", "00101001", "11110001", "00101001", "00100101", "00100011"],
// #0x1e9
["10001000", "10010000", "10100000", "11000000", "11000000", "10101000", "10011000", "10111000"],
// #0x1ea
["10101000", "10110000", "10111000", "11000000", "11000000", "10100000", "10010000", "10001000"],
// #0x1eb
["10000000", "01000000", "00100000", "00010000", "00011111", "00100000", "01000000", "10000000"],
// #0x1ec
["00000000", "00000000", "00100100", "00100100", "11100111", "00100100", "00100100", "00000000"],
// #0x1ed
["00001000", "00001000", "00111110", "00000000", "00000000", "00111110", "00001000", "00001000"],
// #0x1ee
["00001000", "00010000", "00100000", "00010000", "00001000", "00000100", "00000010", "00000100"],
// #0x1ef
["01010101", "10101010", "01010101", "10101010", "01010101", "10101010", "01010101", "10101010"],
// #0x1f0
["00000000", "00000000", "00000000", "00000000", "00000000", "00000000", "00000000", "00000000"],
// #0x1f1
["00000000", "01110000", "01110000", "01110000", "00000000", "00000000", "00000000", "00000000"],
// #0x1f2
["00000000", "00000111", "00000111", "00000111", "00000000", "00000000", "00000000", "00000000"],
// #0x1f3
["00000000", "01110111", "01110111", "01110111", "00000000", "00000000", "00000000", "00000000"],
// #0x1f4
["00000000", "00000000", "00000000", "00000000", "00000000", "01110000", "01110000", "01110000"],
// #0x1f5
["00000000", "01110000", "01110000", "01110000", "00000000", "01110000", "01110000", "01110000"],
// #0x1f6
["00000000", "00000111", "00000111", "00000111", "00000000", "01110000", "01110000", "01110000"],
// #0x1f7
["00000000", "01110111", "01110111", "01110111", "00000000", "01110000", "01110000", "01110000"],
// #0x1f8
["00000000", "00000000", "00000000", "00000000", "00000000", "00000111", "00000111", "00000111"],
// #0x1f9
["00000000", "01110000", "01110000", "01110000", "00000000", "00000111", "00000111", "00000111"],
// #0x1fa
["00000000", "00000111", "00000111", "00000111", "00000000", "00000111", "00000111", "00000111"],
// #0x1fb
["00000000", "01110111", "01110111", "01110111", "00000000", "00000111", "00000111", "00000111"],
// #0x1fc
["00000000", "00000000", "00000000", "00000000", "00000000", "01110111", "01110111", "01110111"],
// #0x1fd
["00000000", "01110000", "01110000", "01110000", "00000000", "01110111", "01110111", "01110111"],
// #0x1fe
["00000000", "00000111", "00000111", "00000111", "00000000", "01110111", "01110111", "01110111"], // #0x1ff
["00000000", "01110111", "01110111", "01110111", "00000000", "01110111", "01110111", "01110111"]];

},{}],299:[function(require,module,exports){
"use strict";

require("babel-polyfill");

var _mz700fon = require("./mz700fon");

var _charCodes = require("./charCodes");

var _audio = require("./audio");

var audio = _interopRequireWildcard(_audio);

var _seqData = require("./seqData");

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj.default = obj; return newObj; } }

// フレームバッファに書き込むシェーダー
// var vshaderFSrc =
// `precision mediump float;
// attribute vec2 position;
// attribute float color;
// uniform vec2 bufferSize;
// varying float vcolor;

// void main(void) {
//     vec2 bs = bufferSize - bufferSize /  2.0;
//     bs.y = -bs.y;
//     gl_Position = vec4(position / bs, 0.0,1.0);
//     vcolor = color;
// }
// `;

// var fshaderFSrc =
// `precision mediump float;
// varying float vcolor;
// void main(void){
//  gl_FragColor = vec4(vcolor, 0. , 0. , 1.);
// }
// `;

// パレットエミュレートシェーダー
var vshaderPSrc = "precision mediump float;\nattribute vec2 position;\nattribute vec2 texture_coord;\nvarying vec2 vtexture_coord;\n \nvoid main(void) {\n    gl_Position = vec4(position,0.0,1.0);\n    vtexture_coord = texture_coord;\n}\n";

var fshaderPSrc = "precision mediump float;\n\nuniform sampler2D textureB;\nuniform sampler2D textureG;\nuniform sampler2D textureR;\nuniform sampler2D pallet_color;\nuniform sampler2D textureFont;\nuniform sampler2D textureCharCode;\nuniform sampler2D textureCharAttr;\nuniform float time;\n\nvarying vec2 vtexture_coord;\n\n// グラフィック表示\nvec4 graphicPlane(void)\n{\n  //テクスチャ座標よりビット位置を求め、そのビットが立った2進数値を得る。\n  float t = exp2(floor(mod(vtexture_coord.x * 512.0,8.0)));\n  // RGB各プレーンの現在座標のバイトデータを読み込む\n  vec4 rt = texture2D(textureR, vtexture_coord);\n  vec4 gt = texture2D(textureG, vtexture_coord);\n  vec4 bt = texture2D(textureB, vtexture_coord);\n  \n  // バイトデータの中でビットが立っているかどうかを調べる\n  // Rプレーン\n  float r = floor(mod(min(rt.x * 256.0,255.0) / t,2.0)) * 4.0;\n  // Gプレーン\n  float g = floor(mod(min(gt.x * 256.0,255.0) / t,2.0)) * 2.0;\n  // Bプレーン\n  float b = floor(mod(min(bt.x * 256.0,255.0) / t,2.0));\n\n  // 各色の値を足して正規化を行い、パレットインデックスから実際の色を得る \n  vec4 p = texture2D(pallet_color,vec2((r + g + b) / 8.0 ,0.5));\n  float i = min(p.x * 256.0,255.0);\n  float ar = floor(mod(i * 0.5,2.0)); // bit3\n  float ag = floor(mod(i * 0.25,2.0));  // bit2\n  float ab = floor(mod(i,2.0)); // bit1\n  return vec4(ar,ag,ab,1.0);\n}\n\n// 文字表示\nvec4 textPlane(void){\n  // キャラクタコードを読み出し\n  vec4 cct = texture2D(textureCharCode, vtexture_coord);\n  float cc = min(cct.x * 256.0,255.0);// キャラクターコード\n\n  // アトリビュートを読み出し\n  vec4 attrt = texture2D(textureCharAttr, vtexture_coord);\n  \n  // 表示対象の文字のビット位置を求める\n  float x = exp2(floor(mod(vtexture_coord.x * 512.0,8.0)));\n  // 表示対象の文字のY位置を求める\n  float y = floor(mod(vtexture_coord.y * 256.0,8.0));\n  \n  // アトリビュートの評価 \n\n  float i = min(attrt.x * 256.0,255.0);// アトリビュートデータ\n  \n  // キャラクタセット(0.0 .. セット0, 1.0 .. セット1 )\n  float att = floor(mod(i / 128.0,2.0)) * 8.0;// bit 7\n\n  // 文字色\n  float ccg = floor(mod(i / 64.0,2.0));// bit 6\n  float ccr = floor(mod(i / 32.0,2.0));// bit 5\n  float ccb = floor(mod(i / 16.0,2.0));// bit 4\n\n  // 背景色\n  float bgg = floor(mod(i / 4.0,2.0));// bit 2\n  float bgr = floor(mod(i / 2.0,2.0));// bit 1\n  float bgb = floor(mod(i ,2.0));// bit 0\n  \n\n  // フォント読み出し位置\n  vec2 fontpos = vec2(cc / 256.0,(y + att) / 16.0);\n  // フォントデータの読み出し\n  vec4 pixByte = texture2D(textureFont,fontpos);\n  // 指定位置のビットが立っているかチェック\n  float pixBit = floor(mod(min(pixByte.x * 256.0,255.0) / x,2.0));\n  \n  if(pixBit == 1.0){\n    // ビットが立っているときは、文字色を設定\n    return vec4(ccr,ccg,ccb,1.0);\n  } \n  // ビットが立っていないときは背景色を設定\n  return vec4(bgr,bgg,bgb,1.0);\n}\n\nvoid main(void){\n  vec4 textColor = textPlane();\n  if((textColor.r + textColor.g + textColor.b) > 0.0){\n    gl_FragColor = textColor;  \n  } else {\n    vec4 color = graphicPlane();\n    gl_FragColor = color;\n  }\n}\n";
// `precision mediump float;

// uniform sampler2D tex;
// uniform sampler2D pallet_color;

// varying vec2 vtexture_coord;

// void main(void){
//  vec4 sampcolor = texture2D(tex, vtexture_coord);
//  vec4 color = texture2D(pallet_color,vec2(sampcolor.x * 32.0,0.5));
//  gl_FragColor = color;
// }
// `;

window.addEventListener('load', function () {
  var _marked = [circleLoop, rectLoop].map(regeneratorRuntime.mark);

  // コンソールの作成
  var view = document.getElementById('view');
  var gl;
  var width, height;
  var virtualWidth = 320,
      virtualHeight = 200;
  var bufferWidth = 512,
      bufferHeight = 256,
      bufferXSize = bufferWidth / 8;
  var fontTexWidth = 256,
      fontTexHeight = 16; //8 * 16 * 2;
  var charCodeBufferWidth = 512 / 8,
      charCodeBufferHeight = 32,
      consoleWidth = 40,
      consoleHeight = 25;
  var runBtn = document.getElementById('run'),
      pauseBtn = document.getElementById('pause'),
      stopBtn = document.getElementById('stop');
  //      resetBtn = document.getElementById('reset');
  var bufferB = new Uint8Array(bufferXSize * bufferHeight),
      bufferG = new Uint8Array(bufferXSize * bufferHeight),
      bufferR = new Uint8Array(bufferXSize * bufferHeight),
      palletColors = new Uint8Array([0, 1, 2, 3, 4, 5, 6, 7]);
  var charCodeBuffer = new Uint8Array(charCodeBufferWidth * charCodeBufferHeight),
      charAttrBuffer = new Uint8Array(charCodeBufferWidth * charCodeBufferHeight);
  var fontBuffer = new Uint8Array(fontTexWidth * fontTexHeight);

  // ビットのMSBとLSBを入れ替えるメソッド
  function rev(x) {
    x = x & 0xff;
    // 0bitと1bit、2bitと3bit、4bitと5bit、6bitと7ビットの反転
    x = (x & 0x55) << 1 | x >>> 1 & 0x55;
    // 0-1bitと2-3bit、4-5bitと6-7bitの反転
    x = (x & 0x33) << 2 | x >>> 2 & 0x33;
    // 0-3bit、4-7bitの反転
    x = (x & 0x0F) << 4 | x >>> 4 & 0x0F;
    return x;
  }

  // フォントデータの読み込み
  {
    (function () {
      var idx = 0;
      var offset = 0;
      _mz700fon.fontData.forEach(function (d, i) {
        offset = (i / 256 | 0) * 8;
        idx = i % 256;
        d.forEach(function (byteChar, iy) {
          var byte = parseInt(byteChar, 2);
          fontBuffer[idx + (iy + offset) * 256] = rev(byte);
        });
      });
    })();
  }

  var main;

  runBtn.disabled = "disabled";
  pauseBtn.disabled = "disabled";
  stopBtn.disabled = "disabled";
  //  resetBtn.disabled = "disabled";

  var STATUS = {
    stop: 0,
    run: 1,
    pause: 2,
    reset: 3
  };

  var status = STATUS.stop;

  // con.width = con.offsetWidth;
  // con.height = (con.offsetWidth * 3 / 4) | 0 ;
  gl = view.getContext('webgl', { antialias: false }) || view.getContext('experimental-webgl', { antialias: false });

  // シェーダの作成
  function createShader(src, shaderType) {
    var shader = void 0;
    shader = gl.createShader(shaderType);
    gl.shaderSource(shader, src);
    gl.compileShader(shader);
    if (!gl.getShaderParameter(shader, gl.COMPILE_STATUS)) {
      throw new Error(gl.getShaderInfoLog(shader));
    }
    return shader;
  }

  // プログラムオブジェクトの作成
  function createProgram(vs, fs) {
    // プログラムオブジェクトの生成
    var program = gl.createProgram();

    // プログラムオブジェクトにシェーダを割り当てる
    gl.attachShader(program, vs);
    gl.attachShader(program, fs);

    // シェーダをリンク
    gl.linkProgram(program);

    // シェーダのリンクが正しく行なわれたかチェック
    if (!gl.getProgramParameter(program, gl.LINK_STATUS)) {
      throw new Error(gl.getProgramInfoLog(program));
    }
    gl.useProgram(program);
    return program;
  }

  //VBOの作成
  function createVbo(data) {
    var vbo = gl.createBuffer();
    gl.bindBuffer(gl.ARRAY_BUFFER, vbo);
    gl.bufferData(gl.ARRAY_BUFFER, new Float32Array(data), gl.STATIC_DRAW);
    gl.bindBuffer(gl.ARRAY_BUFFER, null);
    return vbo;
  }

  // フレームバッファをオブジェクトとして生成する関数
  function createFramebuffer(width, height) {
    var frameBuffer = gl.createFramebuffer();

    gl.bindFramebuffer(gl.FRAMEBUFFER, frameBuffer);

    var depthRenderBuffer = gl.createRenderbuffer();
    gl.bindRenderbuffer(gl.RENDERBUFFER, depthRenderBuffer);
    gl.renderbufferStorage(gl.RENDERBUFFER, gl.DEPTH_COMPONENT16, width, height);
    gl.framebufferRenderbuffer(gl.FRAMEBUFFER, gl.DEPTH_ATTACHMENT, gl.RENDERBUFFER, depthRenderBuffer);

    var fTexture = gl.createTexture();
    gl.bindTexture(gl.TEXTURE_2D, fTexture);
    gl.texImage2D(gl.TEXTURE_2D, 0, gl.RGBA, width, height, 0, gl.RGBA, gl.UNSIGNED_BYTE, null);
    gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MAG_FILTER, gl.LINEAR);
    gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MIN_FILTER, gl.LINEAR);
    gl.framebufferTexture2D(gl.FRAMEBUFFER, gl.COLOR_ATTACHMENT0, gl.TEXTURE_2D, fTexture, 0);

    gl.bindTexture(gl.TEXTURE_2D, null);
    gl.bindRenderbuffer(gl.RENDERBUFFER, null);
    gl.bindFramebuffer(gl.FRAMEBUFFER, null);

    return { f: frameBuffer, d: depthRenderBuffer, t: fTexture };
  }

  // VBOをバインドし登録する関数
  function setAttribute(vbo, attL, attS) {
    for (var i in vbo) {
      gl.bindBuffer(gl.ARRAY_BUFFER, vbo[i]);
      gl.enableVertexAttribArray(attL[i]);
      gl.vertexAttribPointer(attL[i], attS[i], gl.FLOAT, false, 0, 0);
    }
  }

  // IBOを生成する関数
  function createIbo(data) {
    var ibo = gl.createBuffer();

    gl.bindBuffer(gl.ELEMENT_ARRAY_BUFFER, ibo);
    gl.bufferData(gl.ELEMENT_ARRAY_BUFFER, new Int16Array(data), gl.STATIC_DRAW);
    gl.bindBuffer(gl.ELEMENT_ARRAY_BUFFER, null);
    return ibo;
  }

  // 板ポリゴン
  var position = [-1.0, 1.0, 1.0, 1.0, -1.0, -1.0, 1.0, -1.0];

  var texCoord = [0.0, 0.0, virtualWidth / bufferWidth, 0.0, 0.0, virtualHeight / bufferHeight, virtualWidth / bufferWidth, virtualHeight / bufferHeight];

  var index = [0, 2, 1, 2, 3, 1];

  var vPosition = createVbo(position);
  var vTexCoord = createVbo(texCoord);
  var iIndex = createIbo(index);

  // canvasを黒でクリア(初期化)する
  gl.clearColor(0.0, 0.0, 0.0, 1.0);
  gl.viewport(0, 0, virtualWidth, virtualHeight);
  gl.clearDepth(1.0);
  gl.clear(gl.COLOR_BUFFER_BIT | gl.DEPTH_BUFFER_BIT);

  var vsP = createShader(vshaderPSrc, gl.VERTEX_SHADER);
  var fsP = createShader(fshaderPSrc, gl.FRAGMENT_SHADER);

  var prgP = createProgram(vsP, fsP);

  var prgPPos = gl.getAttribLocation(prgP, 'position');
  var prgPTexCoord = gl.getAttribLocation(prgP, 'texture_coord');

  var attStride = 4;

  setAttribute([vPosition, vTexCoord], [prgPPos, prgPTexCoord], [2, 2]);
  //setAttribute([vPosition],[prgPPos],[2]);
  gl.bindBuffer(gl.ELEMENT_ARRAY_BUFFER, iIndex);

  var prgPTexBPos = gl.getUniformLocation(prgP, 'textureB');
  var prgPTexGPos = gl.getUniformLocation(prgP, 'textureG');
  var prgPTexRPos = gl.getUniformLocation(prgP, 'textureR');
  var prgPPalettPos = gl.getUniformLocation(prgP, 'pallet_color');
  var prgPTexFont = gl.getUniformLocation(prgP, 'textureFont');
  var prgPTexCharCode = gl.getUniformLocation(prgP, 'textureCharCode');
  var prgPTexCharAttr = gl.getUniformLocation(prgP, 'textureCharAttr');
  var prgPTime = gl.getUniformLocation(prgP, 'time');

  // 仮想ビットマップテクスチャを作る

  function createLuminaceTexture(textureNo, width, height, srcBuffer) {
    var texture = gl.createTexture();
    gl.activeTexture(textureNo);
    gl.bindTexture(gl.TEXTURE_2D, texture);
    //	gl.pixelStorei(gl.UNPACK_FLIP_Y_WEBGL, true);
    gl.texImage2D(gl.TEXTURE_2D, 0, gl.LUMINANCE, width, height, 0, gl.LUMINANCE, gl.UNSIGNED_BYTE, srcBuffer);
    gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MAG_FILTER, gl.NEAREST);
    gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MIN_FILTER, gl.NEAREST);
    gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_S, gl.CLAMP_TO_EDGE);
    gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_T, gl.CLAMP_TO_EDGE);
    return texture;
  }

  function updateLuminanceTexture(textureNo, texture, width, height, srcBuffer) {
    gl.activeTexture(textureNo);
    gl.bindTexture(gl.TEXTURE_2D, texture);
    gl.texImage2D(gl.TEXTURE_2D, 0, gl.LUMINANCE, width, height, 0, gl.LUMINANCE, gl.UNSIGNED_BYTE, srcBuffer);
  }

  var textureB = createLuminaceTexture(gl.TEXTURE0, bufferXSize, bufferHeight, bufferB);
  var textureG = createLuminaceTexture(gl.TEXTURE1, bufferXSize, bufferHeight, bufferG);
  var textureR = createLuminaceTexture(gl.TEXTURE2, bufferXSize, bufferHeight, bufferR);

  var paletteTexture = createLuminaceTexture(gl.TEXTURE3, palletColors.length, 1, palletColors);
  var fontTexture = createLuminaceTexture(gl.TEXTURE4, fontTexWidth, fontTexHeight, fontBuffer);
  var charCodeTexture = createLuminaceTexture(gl.TEXTURE5, charCodeBufferWidth, charCodeBufferHeight, charCodeBuffer);
  var charAttrTexture = createLuminaceTexture(gl.TEXTURE6, charCodeBufferWidth, charCodeBufferHeight, charAttrBuffer);

  gl.uniform1i(prgPTexBPos, 0);
  gl.uniform1i(prgPTexGPos, 1);
  gl.uniform1i(prgPTexRPos, 2);
  gl.uniform1i(prgPPalettPos, 3);
  gl.uniform1i(prgPTexFont, 4);
  gl.uniform1i(prgPTexCharCode, 5);
  gl.uniform1i(prgPTexCharAttr, 6);

  function resize() {
    var cont = document.getElementById('content');
    if (cont.offsetWidth > 700) {
      view.width = virtualWidth * 2; //cont.offsetWidth;
      view.height = virtualHeight * 2; //cont.offsetWidth * 3 / 4;
    } else {
        view.width = virtualWidth;
        view.height = virtualHeight;
      }
    width = view.offsetWidth;
    height = view.offsetHeight;

    gl.viewport(0, 0, width, height);

    gl.clearColor(0.0, 0.0, 0.0, 1.0);
    gl.clear(gl.COLOR_BUFFER_BIT);
  }
  resize();
  window.addEventListener('resize', resize);

  // レンダリング
  function render() {
    requestAnimationFrame(render);
    gl.clearColor(0.0, 0.0, 0.0, 1.0);
    gl.clear(gl.COLOR_BUFFER_BIT | gl.DEPTH_BUFFER_BIT);

    updateLuminanceTexture(gl.TEXTURE0, textureB, bufferXSize, bufferHeight, bufferB);
    updateLuminanceTexture(gl.TEXTURE1, textureG, bufferXSize, bufferHeight, bufferG);
    updateLuminanceTexture(gl.TEXTURE2, textureR, bufferXSize, bufferHeight, bufferR);

    updateLuminanceTexture(gl.TEXTURE3, paletteTexture, palletColors.length, 1, palletColors);

    updateLuminanceTexture(gl.TEXTURE5, charCodeTexture, charCodeBufferWidth, charCodeBufferHeight, charCodeBuffer);
    updateLuminanceTexture(gl.TEXTURE6, charAttrTexture, charCodeBufferWidth, charCodeBufferHeight, charAttrBuffer);

    gl.drawElements(gl.TRIANGLES, index.length, gl.UNSIGNED_SHORT, 0);
    gl.flush();
    if (status == STATUS.run) {
      main && main();
    }
  }

  function updateStatus(s) {
    status = s;
    switch (s) {
      case STATUS.stop:
        runBtn.disabled = "";
        pauseBtn.disabled = "disabled";
        stopBtn.disabled = "disabled";
        break;
      case STATUS.run:
        runBtn.disabled = "disabled";
        pauseBtn.disabled = "";
        stopBtn.disabled = "";
        break;
      case STATUS.pause:
        runBtn.disabled = "disabled";
        pauseBtn.disabled = "";
        stopBtn.disabled = "";
        break;
    }
  }

  // グラフィックのメソッドたち

  function pset(x, y, color) {
    var offset = y * bufferXSize + x / 8 | 0;
    var bitpos = x % 8;

    var b = (color & 1) << bitpos;
    var m = ~(1 << bitpos) & 0xff;
    var g = (color >>> 1 & 1) << bitpos;
    var r = (color >>> 2 & 1) << bitpos;

    bufferB[offset] = bufferB[offset] & m | b;
    bufferG[offset] = bufferG[offset] & m | g;
    bufferR[offset] = bufferR[offset] & m | r;
  }

  function preset(x, y) {
    var offset = y * bufferXSize + x / 8 | 0;
    var bit = ~(1 << x % 8);
    bufferB[offset] &= bit;
    bufferG[offset] &= bit;
    bufferR[offset] &= bit;
  }

  function cls() {
    for (var i = 0, e = bufferXSize * bufferHeight; i < e; ++i) {
      bufferB[i] = 0;
      bufferG[i] = 0;
      bufferR[i] = 0;
    }

    for (var i = 0, e = charCodeBufferWidth * charCodeBufferHeight; i < e; ++i) {
      charCodeBuffer[i] = 0;
      charAttrBuffer[i] = 0;
    }
  }

  // 文字列の表示
  function addPosition(offset, delta) {
    offset += delta;
  }

  function print(x, y, str, color, bgcolor) {
    var hirakana = arguments.length <= 5 || arguments[5] === undefined ? false : arguments[5];

    var offset = x + y * charCodeBufferWidth;
    for (var i = 0, e = str.length; i < e; ++i) {
      var code = str.charCodeAt(i);
      if (code >= 0xff60 && code < 0xffa0) {
        code -= 0xff60;
        charCodeBuffer[offset] = _charCodes.canaCodes[code][0];
        charAttrBuffer[offset] = color << 4 | bgcolor | _charCodes.canaCodes[code][1];
        if (hirakana) charAttrBuffer[offset] |= 0x80;
        offset += 1;
      } else if (code < 0x80) {
        charCodeBuffer[offset] = _charCodes.charCodes[code][0];
        charAttrBuffer[offset] = color << 4 | bgcolor | _charCodes.charCodes[code][1];
        if (hirakana) charAttrBuffer[offset] |= 0x80;
        offset += 1;
      } else if (code <= 0xff) {
        charCodeBuffer[offset] = code;
        charAttrBuffer[offset] = color << 4 | bgcolor;
        if (hirakana) charAttrBuffer[offset] |= 0x80;
        offset += 1;
      } else {
        offset += 1;
      }
    }
  }

  function printDirect(x, y, str, color, bgcolor) {
    var charset = arguments.length <= 5 || arguments[5] === undefined ? 0 : arguments[5];

    var offset = x + y * charCodeBufferWidth;
    for (var i = 0, e = str.length; i < e; ++i) {
      var code = str.charCodeAt(i);
      charCodeBuffer[offset] = code;
      charAttrBuffer[offset] = color << 4 | bgcolor;
      charAttrBuffer[offset] |= charset << 7;
      offset += 1;
    }
  }

  function setColor(x, y, color, bgcolor) {
    var offset = x + y * charCodeBufferWidth;
    charAttrBuffer[offset] = color << 4 | bgcolor | charAttrBuffer[offset] & 0x80;
  }

  function circleLoop(colors, cx, cy, t) {
    var i, x, ex, y, ey, dx, dy, c;
    return regeneratorRuntime.wrap(function circleLoop$(_context) {
      while (1) {
        switch (_context.prev = _context.next) {
          case 0:
            i = 0;

          case 1:
            if (!(i < 256)) {
              _context.next = 9;
              break;
            }

            for (x = 0, ex = 40; x < ex; ++x) {
              for (y = 0, ey = 25; y < ey; ++y) {
                dx = Math.abs(x - cx), dy = Math.abs(y - cy);
                c = colors[Math.sin(Math.sqrt(dx * dx + dy * dy) + t) * 18 + 18 | 0];

                setColor(x, y, c.back, c.front);
              }
            }
            t += 0.2;
            _context.next = 6;
            return;

          case 6:
            ++i;
            _context.next = 1;
            break;

          case 9:
            return _context.abrupt("return", t);

          case 10:
          case "end":
            return _context.stop();
        }
      }
    }, _marked[0], this);
  }

  function rectLoop(colors, cx, cy, t) {
    var i, x, ex, y, ey, dx, dy, c;
    return regeneratorRuntime.wrap(function rectLoop$(_context2) {
      while (1) {
        switch (_context2.prev = _context2.next) {
          case 0:
            i = 0;

          case 1:
            if (!(i < 256)) {
              _context2.next = 9;
              break;
            }

            for (x = 0, ex = 40; x < ex; ++x) {
              for (y = 0, ey = 25; y < ey; ++y) {
                dx = Math.abs(x - cx), dy = Math.abs(y - cy);
                c = void 0;

                if (dx > dy) {
                  c = colors[Math.sin(dx + t) * 18 + 18 | 0];
                } else {
                  c = colors[Math.sin(dy + t) * 18 + 18 | 0];
                }
                setColor(x, y, c.back, c.front);
              }
            }
            t += 0.2;
            _context2.next = 6;
            return;

          case 6:
            ++i;
            _context2.next = 1;
            break;

          case 9:
            return _context2.abrupt("return", t);

          case 10:
          case "end":
            return _context2.stop();
        }
      }
    }, _marked[1], this);
  }

  // メイン
  function run() {
    var gen = regeneratorRuntime.mark(function _callee() {
      var cx, cy, i, colors, checker, back, front, x, ex, y, ey;
      return regeneratorRuntime.wrap(function _callee$(_context3) {
        while (1) {
          switch (_context3.prev = _context3.next) {
            case 0:
              //while (true) {
              // palletColors.set([0,1,2,3,4,5,6,7]);
              // for (let y = 0; y < virtualHeight; ++y) {
              //   for (let x = 0; x < virtualWidth; ++x) {
              //     if((((y / 8) | 0) & 1) > 0){
              //       if(x % 16 < 8){
              //         pset(x, y, y % 8);
              //       } else {
              //         pset(x, y, x % 8);
              //       }
              //     } else {
              //       if(x % 16 >= 8){
              //         pset(x, y, 7 - y % 8);
              //       } else {
              //         pset(x, y, 7 - x % 8);
              //       }
              //     }
              //   }
              //   yield;
              // }

              // パレットのスクロール
              // for(let t = 0;t < 128;++t)
              // {
              //   let p = palletColors[0];
              //   for (let i = 0; i < 7; ++i) {
              //     palletColors[i] = palletColors[i + 1];
              //   }
              //   palletColors[7] = p;
              //   yield;
              //   yield;
              // }

              // for(let t = 0;t < 640;++t){
              //   for(let u = 0;u < 128;++u){
              //     pset(Math.random() * 320,Math.random() * 240,Math.random() * 8);
              //   }
              //   yield;
              // }
              // //パレットのスクロール
              // for(let t = 0;t < 128;++t)
              // {
              //   for (let i = 0; i < 8; ++i) {
              //     palletColors[i] = 0;
              //   }

              //   palletColors[t % 7 + 1] = t % 7 + 1;

              //   for(let i = 0;i < 4;++i){
              //     yield;
              //   }
              // }
              // {
              //   for(let color = 0;color < 8;++color){
              //     let i = 0x0;
              //     for(let y = 0;y < 16;++y){
              //       for(let x = 0;x < 16;++x){
              //         charCodeBuffer[x + y * charCodeBufferWidth] = i % 256;
              //         charAttrBuffer[x + y * charCodeBufferWidth] = color << 4 | (7 - color);
              //         charCodeBuffer[x + 16 + y * charCodeBufferWidth] = i % 256;
              //         charAttrBuffer[x + 16 + y * charCodeBufferWidth] = 0x80 | color << 4 | (7-color);
              //         ++i;
              //       }
              //       yield;
              //     }
              //   }
              // }

              // yield;
              // for(let i = 256;i < 512;++i){
              //   charCodeBuffer[(i / 40 * 64) | 0 + i % 40] = i - 256;
              //   charAttrBuffer[(i / 40 * 64) | 0 + i % 40] =0x17;
              // }
              // yield;
              // for(let i = 512;i < 768;++i){
              //   charCodeBuffer[(i / 40 * 64) | 0 + i % 40] = i - 512;
              //   charAttrBuffer[(i / 40 * 64) | 0 + i % 40] =0xf1;
              // }
              // yield;
              // let mes =  'MZ-700ﾌｫﾝﾄｦﾋｮｳｼﾞﾃﾞﾓ';
              // let mes1 = '                   ';

              // for(let i = 0;i < 5;++i){
              //   print(20 - (mes.length / 2) | 0,10,mes,7,0);
              //   for(let j = 0;j < 16;++j){
              //     yield;
              //   }
              //   print(20 - (mes1.length / 2) | 0,10,mes1,7,0);
              //   for(let j = 0;j < 16;++j){
              //     yield;
              //   }
              // }
              // {
              //   let i = 0;
              //   let xs = 0, xe = 40 ,ys = 0,ye = 25;
              //   let x = 0 , y = 0, c = 0;
              //   while(true){
              //     for(x = xs; x < xe; ++x){
              //       printDirect(x,y,String.fromCharCode(i % 256),c % 8,7 - c % 8,i > 255?1:0);
              //       ++i;
              //       i = i % 512;
              //       yield;
              //     }
              //     ++c;
              //     --x;
              //     ++ys;
              //     if((xs >= xe) || (ys >= ye)) break;
              //     for(y = ys; y < ye; ++y){
              //       printDirect(x,y,String.fromCharCode(i % 256),c % 8,7 - c % 8,i > 255?1:0);
              //       ++i;
              //       i = i % 512;
              //       yield;
              //     }
              //     ++c;
              //     --y;
              //     --xe;
              //     if((xs >= xe) || (ys >= ye)) break;
              //     for(x = xe - 1; x >= xs ; --x){
              //       printDirect(x,y,String.fromCharCode(i % 256),c % 8,7 - c % 8,i > 255?1:0);
              //       ++i;
              //       i = i % 512;
              //       yield;
              //     }
              //     ++c;
              //     --ye;
              //     ++x;
              //     if((xs >= xe) || (ys >= ye)) break;
              //     for(y = ye - 1; y >= ys;--y){
              //       printDirect(x,y,String.fromCharCode(i % 256),c % 8,7 - c % 8,i > 255?1:0);
              //       ++i;
              //       i = i % 512;
              //       yield;
              //     }
              //     ++c;
              //     ++y;
              //     ++xs;
              //     if((xs >= xe) || (ys >= ye)) break;
              //   }

              // }
              // for(let j = 0;j < 64;++j){
              //   yield;
              // }
              // cls();
              //}

              cx = 20, cy = 13;
              i = 0;
              colors = [];
              checker = String.fromCharCode(0xef);

              for (back = 0; back < 8; ++back) {
                for (front = back; front < 8; ++front) {
                  colors.push({ back: back, front: front });
                }
              }

              for (x = 0, ex = 40; x < ex; ++x) {
                for (y = 0, ey = 25; y < ey; ++y) {
                  printDirect(x, y, checker, 0, 0);
                }
              }

            case 6:
              if (!true) {
                _context3.next = 13;
                break;
              }

              return _context3.delegateYield(circleLoop(colors, cx, cy, i), "t0", 8);

            case 8:
              i = _context3.t0;
              return _context3.delegateYield(rectLoop(colors, cx, cy, i), "t1", 10);

            case 10:
              i = _context3.t1;
              _context3.next = 6;
              break;

            case 13:

              updateStatus(STATUS.stop);

            case 14:
            case "end":
              return _context3.stop();
          }
        }
      }, _callee, this);
    })();
    main = gen.next.bind(gen);
  }
  var audio_ = new audio.Audio();
  var sequencer = new audio.Sequencer(audio_);
  sequencer.load(_seqData.seqData);

  runBtn.addEventListener('click', function () {
    updateStatus(STATUS.run);
    sequencer.start();
    run();
  });

  pauseBtn.addEventListener('click', function () {
    if (status == STATUS.pause) {
      updateStatus(STATUS.run);
      sequencer.resume();
    } else {
      sequencer.pause();
      updateStatus(STATUS.pause);
    }
  });

  stopBtn.addEventListener('click', function () {
    sequencer.stop();
    updateStatus(STATUS.stop);
  });

  document.addEventListener("visibilitychange", function () {
    if (document.hidden) {
      if (sequencer.status == sequencer.PLAY) {
        sequencer.pause();
        sequencer.isHiddenPause = true;
      }
    } else {
      if (sequencer.isHiddenPause) {
        sequencer.resume();
        sequencer.isHiddenPause = false;
      }
    }
  });
  // resetBtn.addEventListener('click',()=>{
  //   updateStatus(STATUS.reset);
  // });

  updateStatus(STATUS.stop);
  render();
});

},{"./audio":295,"./charCodes":296,"./mz700fon":298,"./seqData":300,"babel-polyfill":1}],300:[function(require,module,exports){
'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});
var seqData = exports.seqData = {
  name: 'Test',
  tracks: [
  // {
  //   name: 'part1',
  //   channel: 0,
  //   mml:
  //   `
  //    s0.01,0.2,0.2,0.03 @2
  //    t140  q35 v30 l1r1r1r1r1 $l16o3 cccccccc<ggggaabb> cccccccc<gggg>cc<bb b-b-b-b-b-b-b-b-ffffggg+g+ g+g+g+g+g+g+g+g+ggggaabb >
  //          `
  //   },
  {
    name: 'part3',
    channel: 1,
    mml: 's0.01,0.01,1.0,0.05 o5 t150 @10 v50 q30 $l4grg8g8r'
  }, {
    name: 'part4',
    channel: 2,
    mml: 's0.01,0.01,1.0,0.05 o5 t150 @22 v60 q80 $/:l4rv60b8.v30b16rl16v60b8r8:/3l4rb8.b16rl16br16bb'
  }, {
    name: 'part5',
    channel: 3,
    mml: 's0.01,0.01,1.0,0.05 o5 t150 @11 l8 $ q20 v30 r8a8 r8a8'
  }
  //  ,
  // {
  //   name: 'part5',
  //   channel: 4,
  //   mml:
  //   `s0.01,0.01,1.0,0.05 o5 t150 @14 q95 $v45 l4 `
  // }
  ]
};

},{}]},{},[299])
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIm5vZGVfbW9kdWxlcy9icm93c2VyLXBhY2svX3ByZWx1ZGUuanMiLCJub2RlX21vZHVsZXMvYmFiZWwtcG9seWZpbGwvbGliL2luZGV4LmpzIiwibm9kZV9tb2R1bGVzL2JhYmVsLXBvbHlmaWxsL25vZGVfbW9kdWxlcy9jb3JlLWpzL2ZuL3JlZ2V4cC9lc2NhcGUuanMiLCJub2RlX21vZHVsZXMvYmFiZWwtcG9seWZpbGwvbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9fYS1mdW5jdGlvbi5qcyIsIm5vZGVfbW9kdWxlcy9iYWJlbC1wb2x5ZmlsbC9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL19hLW51bWJlci12YWx1ZS5qcyIsIm5vZGVfbW9kdWxlcy9iYWJlbC1wb2x5ZmlsbC9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL19hZGQtdG8tdW5zY29wYWJsZXMuanMiLCJub2RlX21vZHVsZXMvYmFiZWwtcG9seWZpbGwvbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9fYW4taW5zdGFuY2UuanMiLCJub2RlX21vZHVsZXMvYmFiZWwtcG9seWZpbGwvbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9fYW4tb2JqZWN0LmpzIiwibm9kZV9tb2R1bGVzL2JhYmVsLXBvbHlmaWxsL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvX2FycmF5LWNvcHktd2l0aGluLmpzIiwibm9kZV9tb2R1bGVzL2JhYmVsLXBvbHlmaWxsL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvX2FycmF5LWZpbGwuanMiLCJub2RlX21vZHVsZXMvYmFiZWwtcG9seWZpbGwvbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9fYXJyYXktZnJvbS1pdGVyYWJsZS5qcyIsIm5vZGVfbW9kdWxlcy9iYWJlbC1wb2x5ZmlsbC9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL19hcnJheS1pbmNsdWRlcy5qcyIsIm5vZGVfbW9kdWxlcy9iYWJlbC1wb2x5ZmlsbC9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL19hcnJheS1tZXRob2RzLmpzIiwibm9kZV9tb2R1bGVzL2JhYmVsLXBvbHlmaWxsL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvX2FycmF5LXJlZHVjZS5qcyIsIm5vZGVfbW9kdWxlcy9iYWJlbC1wb2x5ZmlsbC9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL19hcnJheS1zcGVjaWVzLWNyZWF0ZS5qcyIsIm5vZGVfbW9kdWxlcy9iYWJlbC1wb2x5ZmlsbC9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL19iaW5kLmpzIiwibm9kZV9tb2R1bGVzL2JhYmVsLXBvbHlmaWxsL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvX2NsYXNzb2YuanMiLCJub2RlX21vZHVsZXMvYmFiZWwtcG9seWZpbGwvbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9fY29mLmpzIiwibm9kZV9tb2R1bGVzL2JhYmVsLXBvbHlmaWxsL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvX2NvbGxlY3Rpb24tc3Ryb25nLmpzIiwibm9kZV9tb2R1bGVzL2JhYmVsLXBvbHlmaWxsL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvX2NvbGxlY3Rpb24tdG8tanNvbi5qcyIsIm5vZGVfbW9kdWxlcy9iYWJlbC1wb2x5ZmlsbC9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL19jb2xsZWN0aW9uLXdlYWsuanMiLCJub2RlX21vZHVsZXMvYmFiZWwtcG9seWZpbGwvbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9fY29sbGVjdGlvbi5qcyIsIm5vZGVfbW9kdWxlcy9iYWJlbC1wb2x5ZmlsbC9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL19jb3JlLmpzIiwibm9kZV9tb2R1bGVzL2JhYmVsLXBvbHlmaWxsL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvX2N0eC5qcyIsIm5vZGVfbW9kdWxlcy9iYWJlbC1wb2x5ZmlsbC9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL19kYXRlLXRvLXByaW1pdGl2ZS5qcyIsIm5vZGVfbW9kdWxlcy9iYWJlbC1wb2x5ZmlsbC9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL19kZWZpbmVkLmpzIiwibm9kZV9tb2R1bGVzL2JhYmVsLXBvbHlmaWxsL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvX2Rlc2NyaXB0b3JzLmpzIiwibm9kZV9tb2R1bGVzL2JhYmVsLXBvbHlmaWxsL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvX2RvbS1jcmVhdGUuanMiLCJub2RlX21vZHVsZXMvYmFiZWwtcG9seWZpbGwvbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9fZW51bS1idWcta2V5cy5qcyIsIm5vZGVfbW9kdWxlcy9iYWJlbC1wb2x5ZmlsbC9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL19lbnVtLWtleXMuanMiLCJub2RlX21vZHVsZXMvYmFiZWwtcG9seWZpbGwvbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9fZXhwb3J0LmpzIiwibm9kZV9tb2R1bGVzL2JhYmVsLXBvbHlmaWxsL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvX2ZhaWxzLWlzLXJlZ2V4cC5qcyIsIm5vZGVfbW9kdWxlcy9iYWJlbC1wb2x5ZmlsbC9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL19mYWlscy5qcyIsIm5vZGVfbW9kdWxlcy9iYWJlbC1wb2x5ZmlsbC9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL19maXgtcmUtd2tzLmpzIiwibm9kZV9tb2R1bGVzL2JhYmVsLXBvbHlmaWxsL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvX2ZsYWdzLmpzIiwibm9kZV9tb2R1bGVzL2JhYmVsLXBvbHlmaWxsL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvX2Zvci1vZi5qcyIsIm5vZGVfbW9kdWxlcy9iYWJlbC1wb2x5ZmlsbC9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL19nbG9iYWwuanMiLCJub2RlX21vZHVsZXMvYmFiZWwtcG9seWZpbGwvbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9faGFzLmpzIiwibm9kZV9tb2R1bGVzL2JhYmVsLXBvbHlmaWxsL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvX2hpZGUuanMiLCJub2RlX21vZHVsZXMvYmFiZWwtcG9seWZpbGwvbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9faHRtbC5qcyIsIm5vZGVfbW9kdWxlcy9iYWJlbC1wb2x5ZmlsbC9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL19pZTgtZG9tLWRlZmluZS5qcyIsIm5vZGVfbW9kdWxlcy9iYWJlbC1wb2x5ZmlsbC9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL19pbmhlcml0LWlmLXJlcXVpcmVkLmpzIiwibm9kZV9tb2R1bGVzL2JhYmVsLXBvbHlmaWxsL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvX2ludm9rZS5qcyIsIm5vZGVfbW9kdWxlcy9iYWJlbC1wb2x5ZmlsbC9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL19pb2JqZWN0LmpzIiwibm9kZV9tb2R1bGVzL2JhYmVsLXBvbHlmaWxsL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvX2lzLWFycmF5LWl0ZXIuanMiLCJub2RlX21vZHVsZXMvYmFiZWwtcG9seWZpbGwvbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9faXMtYXJyYXkuanMiLCJub2RlX21vZHVsZXMvYmFiZWwtcG9seWZpbGwvbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9faXMtaW50ZWdlci5qcyIsIm5vZGVfbW9kdWxlcy9iYWJlbC1wb2x5ZmlsbC9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL19pcy1vYmplY3QuanMiLCJub2RlX21vZHVsZXMvYmFiZWwtcG9seWZpbGwvbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9faXMtcmVnZXhwLmpzIiwibm9kZV9tb2R1bGVzL2JhYmVsLXBvbHlmaWxsL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvX2l0ZXItY2FsbC5qcyIsIm5vZGVfbW9kdWxlcy9iYWJlbC1wb2x5ZmlsbC9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL19pdGVyLWNyZWF0ZS5qcyIsIm5vZGVfbW9kdWxlcy9iYWJlbC1wb2x5ZmlsbC9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL19pdGVyLWRlZmluZS5qcyIsIm5vZGVfbW9kdWxlcy9iYWJlbC1wb2x5ZmlsbC9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL19pdGVyLWRldGVjdC5qcyIsIm5vZGVfbW9kdWxlcy9iYWJlbC1wb2x5ZmlsbC9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL19pdGVyLXN0ZXAuanMiLCJub2RlX21vZHVsZXMvYmFiZWwtcG9seWZpbGwvbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9faXRlcmF0b3JzLmpzIiwibm9kZV9tb2R1bGVzL2JhYmVsLXBvbHlmaWxsL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvX2tleW9mLmpzIiwibm9kZV9tb2R1bGVzL2JhYmVsLXBvbHlmaWxsL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvX2xpYnJhcnkuanMiLCJub2RlX21vZHVsZXMvYmFiZWwtcG9seWZpbGwvbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9fbWF0aC1leHBtMS5qcyIsIm5vZGVfbW9kdWxlcy9iYWJlbC1wb2x5ZmlsbC9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL19tYXRoLWxvZzFwLmpzIiwibm9kZV9tb2R1bGVzL2JhYmVsLXBvbHlmaWxsL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvX21hdGgtc2lnbi5qcyIsIm5vZGVfbW9kdWxlcy9iYWJlbC1wb2x5ZmlsbC9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL19tZXRhLmpzIiwibm9kZV9tb2R1bGVzL2JhYmVsLXBvbHlmaWxsL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvX21ldGFkYXRhLmpzIiwibm9kZV9tb2R1bGVzL2JhYmVsLXBvbHlmaWxsL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvX21pY3JvdGFzay5qcyIsIm5vZGVfbW9kdWxlcy9iYWJlbC1wb2x5ZmlsbC9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL19vYmplY3QtYXNzaWduLmpzIiwibm9kZV9tb2R1bGVzL2JhYmVsLXBvbHlmaWxsL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvX29iamVjdC1jcmVhdGUuanMiLCJub2RlX21vZHVsZXMvYmFiZWwtcG9seWZpbGwvbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9fb2JqZWN0LWRwLmpzIiwibm9kZV9tb2R1bGVzL2JhYmVsLXBvbHlmaWxsL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvX29iamVjdC1kcHMuanMiLCJub2RlX21vZHVsZXMvYmFiZWwtcG9seWZpbGwvbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9fb2JqZWN0LWZvcmNlZC1wYW0uanMiLCJub2RlX21vZHVsZXMvYmFiZWwtcG9seWZpbGwvbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9fb2JqZWN0LWdvcGQuanMiLCJub2RlX21vZHVsZXMvYmFiZWwtcG9seWZpbGwvbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9fb2JqZWN0LWdvcG4tZXh0LmpzIiwibm9kZV9tb2R1bGVzL2JhYmVsLXBvbHlmaWxsL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvX29iamVjdC1nb3BuLmpzIiwibm9kZV9tb2R1bGVzL2JhYmVsLXBvbHlmaWxsL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvX29iamVjdC1nb3BzLmpzIiwibm9kZV9tb2R1bGVzL2JhYmVsLXBvbHlmaWxsL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvX29iamVjdC1ncG8uanMiLCJub2RlX21vZHVsZXMvYmFiZWwtcG9seWZpbGwvbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9fb2JqZWN0LWtleXMtaW50ZXJuYWwuanMiLCJub2RlX21vZHVsZXMvYmFiZWwtcG9seWZpbGwvbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9fb2JqZWN0LWtleXMuanMiLCJub2RlX21vZHVsZXMvYmFiZWwtcG9seWZpbGwvbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9fb2JqZWN0LXBpZS5qcyIsIm5vZGVfbW9kdWxlcy9iYWJlbC1wb2x5ZmlsbC9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL19vYmplY3Qtc2FwLmpzIiwibm9kZV9tb2R1bGVzL2JhYmVsLXBvbHlmaWxsL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvX29iamVjdC10by1hcnJheS5qcyIsIm5vZGVfbW9kdWxlcy9iYWJlbC1wb2x5ZmlsbC9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL19vd24ta2V5cy5qcyIsIm5vZGVfbW9kdWxlcy9iYWJlbC1wb2x5ZmlsbC9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL19wYXJzZS1mbG9hdC5qcyIsIm5vZGVfbW9kdWxlcy9iYWJlbC1wb2x5ZmlsbC9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL19wYXJzZS1pbnQuanMiLCJub2RlX21vZHVsZXMvYmFiZWwtcG9seWZpbGwvbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9fcGFydGlhbC5qcyIsIm5vZGVfbW9kdWxlcy9iYWJlbC1wb2x5ZmlsbC9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL19wYXRoLmpzIiwibm9kZV9tb2R1bGVzL2JhYmVsLXBvbHlmaWxsL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvX3Byb3BlcnR5LWRlc2MuanMiLCJub2RlX21vZHVsZXMvYmFiZWwtcG9seWZpbGwvbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9fcmVkZWZpbmUtYWxsLmpzIiwibm9kZV9tb2R1bGVzL2JhYmVsLXBvbHlmaWxsL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvX3JlZGVmaW5lLmpzIiwibm9kZV9tb2R1bGVzL2JhYmVsLXBvbHlmaWxsL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvX3JlcGxhY2VyLmpzIiwibm9kZV9tb2R1bGVzL2JhYmVsLXBvbHlmaWxsL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvX3NhbWUtdmFsdWUuanMiLCJub2RlX21vZHVsZXMvYmFiZWwtcG9seWZpbGwvbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9fc2V0LXByb3RvLmpzIiwibm9kZV9tb2R1bGVzL2JhYmVsLXBvbHlmaWxsL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvX3NldC1zcGVjaWVzLmpzIiwibm9kZV9tb2R1bGVzL2JhYmVsLXBvbHlmaWxsL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvX3NldC10by1zdHJpbmctdGFnLmpzIiwibm9kZV9tb2R1bGVzL2JhYmVsLXBvbHlmaWxsL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvX3NoYXJlZC1rZXkuanMiLCJub2RlX21vZHVsZXMvYmFiZWwtcG9seWZpbGwvbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9fc2hhcmVkLmpzIiwibm9kZV9tb2R1bGVzL2JhYmVsLXBvbHlmaWxsL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvX3NwZWNpZXMtY29uc3RydWN0b3IuanMiLCJub2RlX21vZHVsZXMvYmFiZWwtcG9seWZpbGwvbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9fc3RyaWN0LW1ldGhvZC5qcyIsIm5vZGVfbW9kdWxlcy9iYWJlbC1wb2x5ZmlsbC9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL19zdHJpbmctYXQuanMiLCJub2RlX21vZHVsZXMvYmFiZWwtcG9seWZpbGwvbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9fc3RyaW5nLWNvbnRleHQuanMiLCJub2RlX21vZHVsZXMvYmFiZWwtcG9seWZpbGwvbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9fc3RyaW5nLWh0bWwuanMiLCJub2RlX21vZHVsZXMvYmFiZWwtcG9seWZpbGwvbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9fc3RyaW5nLXBhZC5qcyIsIm5vZGVfbW9kdWxlcy9iYWJlbC1wb2x5ZmlsbC9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL19zdHJpbmctcmVwZWF0LmpzIiwibm9kZV9tb2R1bGVzL2JhYmVsLXBvbHlmaWxsL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvX3N0cmluZy10cmltLmpzIiwibm9kZV9tb2R1bGVzL2JhYmVsLXBvbHlmaWxsL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvX3N0cmluZy13cy5qcyIsIm5vZGVfbW9kdWxlcy9iYWJlbC1wb2x5ZmlsbC9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL190YXNrLmpzIiwibm9kZV9tb2R1bGVzL2JhYmVsLXBvbHlmaWxsL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvX3RvLWluZGV4LmpzIiwibm9kZV9tb2R1bGVzL2JhYmVsLXBvbHlmaWxsL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvX3RvLWludGVnZXIuanMiLCJub2RlX21vZHVsZXMvYmFiZWwtcG9seWZpbGwvbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9fdG8taW9iamVjdC5qcyIsIm5vZGVfbW9kdWxlcy9iYWJlbC1wb2x5ZmlsbC9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL190by1sZW5ndGguanMiLCJub2RlX21vZHVsZXMvYmFiZWwtcG9seWZpbGwvbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9fdG8tb2JqZWN0LmpzIiwibm9kZV9tb2R1bGVzL2JhYmVsLXBvbHlmaWxsL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvX3RvLXByaW1pdGl2ZS5qcyIsIm5vZGVfbW9kdWxlcy9iYWJlbC1wb2x5ZmlsbC9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL190eXBlZC1hcnJheS5qcyIsIm5vZGVfbW9kdWxlcy9iYWJlbC1wb2x5ZmlsbC9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL190eXBlZC1idWZmZXIuanMiLCJub2RlX21vZHVsZXMvYmFiZWwtcG9seWZpbGwvbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9fdHlwZWQuanMiLCJub2RlX21vZHVsZXMvYmFiZWwtcG9seWZpbGwvbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9fdWlkLmpzIiwibm9kZV9tb2R1bGVzL2JhYmVsLXBvbHlmaWxsL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvX3drcy5qcyIsIm5vZGVfbW9kdWxlcy9iYWJlbC1wb2x5ZmlsbC9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2NvcmUuZ2V0LWl0ZXJhdG9yLW1ldGhvZC5qcyIsIm5vZGVfbW9kdWxlcy9iYWJlbC1wb2x5ZmlsbC9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2NvcmUuaXMtaXRlcmFibGUuanMiLCJub2RlX21vZHVsZXMvYmFiZWwtcG9seWZpbGwvbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9jb3JlLnJlZ2V4cC5lc2NhcGUuanMiLCJub2RlX21vZHVsZXMvYmFiZWwtcG9seWZpbGwvbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYuYXJyYXkuY29weS13aXRoaW4uanMiLCJub2RlX21vZHVsZXMvYmFiZWwtcG9seWZpbGwvbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYuYXJyYXkuZXZlcnkuanMiLCJub2RlX21vZHVsZXMvYmFiZWwtcG9seWZpbGwvbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYuYXJyYXkuZmlsbC5qcyIsIm5vZGVfbW9kdWxlcy9iYWJlbC1wb2x5ZmlsbC9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNi5hcnJheS5maWx0ZXIuanMiLCJub2RlX21vZHVsZXMvYmFiZWwtcG9seWZpbGwvbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYuYXJyYXkuZmluZC1pbmRleC5qcyIsIm5vZGVfbW9kdWxlcy9iYWJlbC1wb2x5ZmlsbC9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNi5hcnJheS5maW5kLmpzIiwibm9kZV9tb2R1bGVzL2JhYmVsLXBvbHlmaWxsL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM2LmFycmF5LmZvci1lYWNoLmpzIiwibm9kZV9tb2R1bGVzL2JhYmVsLXBvbHlmaWxsL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM2LmFycmF5LmZyb20uanMiLCJub2RlX21vZHVsZXMvYmFiZWwtcG9seWZpbGwvbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYuYXJyYXkuaW5kZXgtb2YuanMiLCJub2RlX21vZHVsZXMvYmFiZWwtcG9seWZpbGwvbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYuYXJyYXkuaXMtYXJyYXkuanMiLCJub2RlX21vZHVsZXMvYmFiZWwtcG9seWZpbGwvbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYuYXJyYXkuaXRlcmF0b3IuanMiLCJub2RlX21vZHVsZXMvYmFiZWwtcG9seWZpbGwvbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYuYXJyYXkuam9pbi5qcyIsIm5vZGVfbW9kdWxlcy9iYWJlbC1wb2x5ZmlsbC9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNi5hcnJheS5sYXN0LWluZGV4LW9mLmpzIiwibm9kZV9tb2R1bGVzL2JhYmVsLXBvbHlmaWxsL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM2LmFycmF5Lm1hcC5qcyIsIm5vZGVfbW9kdWxlcy9iYWJlbC1wb2x5ZmlsbC9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNi5hcnJheS5vZi5qcyIsIm5vZGVfbW9kdWxlcy9iYWJlbC1wb2x5ZmlsbC9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNi5hcnJheS5yZWR1Y2UtcmlnaHQuanMiLCJub2RlX21vZHVsZXMvYmFiZWwtcG9seWZpbGwvbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYuYXJyYXkucmVkdWNlLmpzIiwibm9kZV9tb2R1bGVzL2JhYmVsLXBvbHlmaWxsL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM2LmFycmF5LnNsaWNlLmpzIiwibm9kZV9tb2R1bGVzL2JhYmVsLXBvbHlmaWxsL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM2LmFycmF5LnNvbWUuanMiLCJub2RlX21vZHVsZXMvYmFiZWwtcG9seWZpbGwvbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYuYXJyYXkuc29ydC5qcyIsIm5vZGVfbW9kdWxlcy9iYWJlbC1wb2x5ZmlsbC9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNi5hcnJheS5zcGVjaWVzLmpzIiwibm9kZV9tb2R1bGVzL2JhYmVsLXBvbHlmaWxsL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM2LmRhdGUubm93LmpzIiwibm9kZV9tb2R1bGVzL2JhYmVsLXBvbHlmaWxsL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM2LmRhdGUudG8taXNvLXN0cmluZy5qcyIsIm5vZGVfbW9kdWxlcy9iYWJlbC1wb2x5ZmlsbC9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNi5kYXRlLnRvLWpzb24uanMiLCJub2RlX21vZHVsZXMvYmFiZWwtcG9seWZpbGwvbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYuZGF0ZS50by1wcmltaXRpdmUuanMiLCJub2RlX21vZHVsZXMvYmFiZWwtcG9seWZpbGwvbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYuZGF0ZS50by1zdHJpbmcuanMiLCJub2RlX21vZHVsZXMvYmFiZWwtcG9seWZpbGwvbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYuZnVuY3Rpb24uYmluZC5qcyIsIm5vZGVfbW9kdWxlcy9iYWJlbC1wb2x5ZmlsbC9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNi5mdW5jdGlvbi5oYXMtaW5zdGFuY2UuanMiLCJub2RlX21vZHVsZXMvYmFiZWwtcG9seWZpbGwvbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYuZnVuY3Rpb24ubmFtZS5qcyIsIm5vZGVfbW9kdWxlcy9iYWJlbC1wb2x5ZmlsbC9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNi5tYXAuanMiLCJub2RlX21vZHVsZXMvYmFiZWwtcG9seWZpbGwvbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYubWF0aC5hY29zaC5qcyIsIm5vZGVfbW9kdWxlcy9iYWJlbC1wb2x5ZmlsbC9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNi5tYXRoLmFzaW5oLmpzIiwibm9kZV9tb2R1bGVzL2JhYmVsLXBvbHlmaWxsL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM2Lm1hdGguYXRhbmguanMiLCJub2RlX21vZHVsZXMvYmFiZWwtcG9seWZpbGwvbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYubWF0aC5jYnJ0LmpzIiwibm9kZV9tb2R1bGVzL2JhYmVsLXBvbHlmaWxsL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM2Lm1hdGguY2x6MzIuanMiLCJub2RlX21vZHVsZXMvYmFiZWwtcG9seWZpbGwvbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYubWF0aC5jb3NoLmpzIiwibm9kZV9tb2R1bGVzL2JhYmVsLXBvbHlmaWxsL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM2Lm1hdGguZXhwbTEuanMiLCJub2RlX21vZHVsZXMvYmFiZWwtcG9seWZpbGwvbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYubWF0aC5mcm91bmQuanMiLCJub2RlX21vZHVsZXMvYmFiZWwtcG9seWZpbGwvbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYubWF0aC5oeXBvdC5qcyIsIm5vZGVfbW9kdWxlcy9iYWJlbC1wb2x5ZmlsbC9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNi5tYXRoLmltdWwuanMiLCJub2RlX21vZHVsZXMvYmFiZWwtcG9seWZpbGwvbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYubWF0aC5sb2cxMC5qcyIsIm5vZGVfbW9kdWxlcy9iYWJlbC1wb2x5ZmlsbC9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNi5tYXRoLmxvZzFwLmpzIiwibm9kZV9tb2R1bGVzL2JhYmVsLXBvbHlmaWxsL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM2Lm1hdGgubG9nMi5qcyIsIm5vZGVfbW9kdWxlcy9iYWJlbC1wb2x5ZmlsbC9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNi5tYXRoLnNpZ24uanMiLCJub2RlX21vZHVsZXMvYmFiZWwtcG9seWZpbGwvbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYubWF0aC5zaW5oLmpzIiwibm9kZV9tb2R1bGVzL2JhYmVsLXBvbHlmaWxsL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM2Lm1hdGgudGFuaC5qcyIsIm5vZGVfbW9kdWxlcy9iYWJlbC1wb2x5ZmlsbC9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNi5tYXRoLnRydW5jLmpzIiwibm9kZV9tb2R1bGVzL2JhYmVsLXBvbHlmaWxsL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM2Lm51bWJlci5jb25zdHJ1Y3Rvci5qcyIsIm5vZGVfbW9kdWxlcy9iYWJlbC1wb2x5ZmlsbC9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNi5udW1iZXIuZXBzaWxvbi5qcyIsIm5vZGVfbW9kdWxlcy9iYWJlbC1wb2x5ZmlsbC9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNi5udW1iZXIuaXMtZmluaXRlLmpzIiwibm9kZV9tb2R1bGVzL2JhYmVsLXBvbHlmaWxsL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM2Lm51bWJlci5pcy1pbnRlZ2VyLmpzIiwibm9kZV9tb2R1bGVzL2JhYmVsLXBvbHlmaWxsL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM2Lm51bWJlci5pcy1uYW4uanMiLCJub2RlX21vZHVsZXMvYmFiZWwtcG9seWZpbGwvbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYubnVtYmVyLmlzLXNhZmUtaW50ZWdlci5qcyIsIm5vZGVfbW9kdWxlcy9iYWJlbC1wb2x5ZmlsbC9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNi5udW1iZXIubWF4LXNhZmUtaW50ZWdlci5qcyIsIm5vZGVfbW9kdWxlcy9iYWJlbC1wb2x5ZmlsbC9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNi5udW1iZXIubWluLXNhZmUtaW50ZWdlci5qcyIsIm5vZGVfbW9kdWxlcy9iYWJlbC1wb2x5ZmlsbC9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNi5udW1iZXIucGFyc2UtZmxvYXQuanMiLCJub2RlX21vZHVsZXMvYmFiZWwtcG9seWZpbGwvbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYubnVtYmVyLnBhcnNlLWludC5qcyIsIm5vZGVfbW9kdWxlcy9iYWJlbC1wb2x5ZmlsbC9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNi5udW1iZXIudG8tZml4ZWQuanMiLCJub2RlX21vZHVsZXMvYmFiZWwtcG9seWZpbGwvbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYubnVtYmVyLnRvLXByZWNpc2lvbi5qcyIsIm5vZGVfbW9kdWxlcy9iYWJlbC1wb2x5ZmlsbC9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNi5vYmplY3QuYXNzaWduLmpzIiwibm9kZV9tb2R1bGVzL2JhYmVsLXBvbHlmaWxsL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM2Lm9iamVjdC5jcmVhdGUuanMiLCJub2RlX21vZHVsZXMvYmFiZWwtcG9seWZpbGwvbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYub2JqZWN0LmRlZmluZS1wcm9wZXJ0aWVzLmpzIiwibm9kZV9tb2R1bGVzL2JhYmVsLXBvbHlmaWxsL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM2Lm9iamVjdC5kZWZpbmUtcHJvcGVydHkuanMiLCJub2RlX21vZHVsZXMvYmFiZWwtcG9seWZpbGwvbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYub2JqZWN0LmZyZWV6ZS5qcyIsIm5vZGVfbW9kdWxlcy9iYWJlbC1wb2x5ZmlsbC9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNi5vYmplY3QuZ2V0LW93bi1wcm9wZXJ0eS1kZXNjcmlwdG9yLmpzIiwibm9kZV9tb2R1bGVzL2JhYmVsLXBvbHlmaWxsL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM2Lm9iamVjdC5nZXQtb3duLXByb3BlcnR5LW5hbWVzLmpzIiwibm9kZV9tb2R1bGVzL2JhYmVsLXBvbHlmaWxsL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM2Lm9iamVjdC5nZXQtcHJvdG90eXBlLW9mLmpzIiwibm9kZV9tb2R1bGVzL2JhYmVsLXBvbHlmaWxsL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM2Lm9iamVjdC5pcy1leHRlbnNpYmxlLmpzIiwibm9kZV9tb2R1bGVzL2JhYmVsLXBvbHlmaWxsL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM2Lm9iamVjdC5pcy1mcm96ZW4uanMiLCJub2RlX21vZHVsZXMvYmFiZWwtcG9seWZpbGwvbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYub2JqZWN0LmlzLXNlYWxlZC5qcyIsIm5vZGVfbW9kdWxlcy9iYWJlbC1wb2x5ZmlsbC9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNi5vYmplY3QuaXMuanMiLCJub2RlX21vZHVsZXMvYmFiZWwtcG9seWZpbGwvbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYub2JqZWN0LmtleXMuanMiLCJub2RlX21vZHVsZXMvYmFiZWwtcG9seWZpbGwvbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYub2JqZWN0LnByZXZlbnQtZXh0ZW5zaW9ucy5qcyIsIm5vZGVfbW9kdWxlcy9iYWJlbC1wb2x5ZmlsbC9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNi5vYmplY3Quc2VhbC5qcyIsIm5vZGVfbW9kdWxlcy9iYWJlbC1wb2x5ZmlsbC9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNi5vYmplY3Quc2V0LXByb3RvdHlwZS1vZi5qcyIsIm5vZGVfbW9kdWxlcy9iYWJlbC1wb2x5ZmlsbC9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNi5vYmplY3QudG8tc3RyaW5nLmpzIiwibm9kZV9tb2R1bGVzL2JhYmVsLXBvbHlmaWxsL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM2LnBhcnNlLWZsb2F0LmpzIiwibm9kZV9tb2R1bGVzL2JhYmVsLXBvbHlmaWxsL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM2LnBhcnNlLWludC5qcyIsIm5vZGVfbW9kdWxlcy9iYWJlbC1wb2x5ZmlsbC9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNi5wcm9taXNlLmpzIiwibm9kZV9tb2R1bGVzL2JhYmVsLXBvbHlmaWxsL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM2LnJlZmxlY3QuYXBwbHkuanMiLCJub2RlX21vZHVsZXMvYmFiZWwtcG9seWZpbGwvbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYucmVmbGVjdC5jb25zdHJ1Y3QuanMiLCJub2RlX21vZHVsZXMvYmFiZWwtcG9seWZpbGwvbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYucmVmbGVjdC5kZWZpbmUtcHJvcGVydHkuanMiLCJub2RlX21vZHVsZXMvYmFiZWwtcG9seWZpbGwvbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYucmVmbGVjdC5kZWxldGUtcHJvcGVydHkuanMiLCJub2RlX21vZHVsZXMvYmFiZWwtcG9seWZpbGwvbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYucmVmbGVjdC5lbnVtZXJhdGUuanMiLCJub2RlX21vZHVsZXMvYmFiZWwtcG9seWZpbGwvbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYucmVmbGVjdC5nZXQtb3duLXByb3BlcnR5LWRlc2NyaXB0b3IuanMiLCJub2RlX21vZHVsZXMvYmFiZWwtcG9seWZpbGwvbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYucmVmbGVjdC5nZXQtcHJvdG90eXBlLW9mLmpzIiwibm9kZV9tb2R1bGVzL2JhYmVsLXBvbHlmaWxsL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM2LnJlZmxlY3QuZ2V0LmpzIiwibm9kZV9tb2R1bGVzL2JhYmVsLXBvbHlmaWxsL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM2LnJlZmxlY3QuaGFzLmpzIiwibm9kZV9tb2R1bGVzL2JhYmVsLXBvbHlmaWxsL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM2LnJlZmxlY3QuaXMtZXh0ZW5zaWJsZS5qcyIsIm5vZGVfbW9kdWxlcy9iYWJlbC1wb2x5ZmlsbC9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNi5yZWZsZWN0Lm93bi1rZXlzLmpzIiwibm9kZV9tb2R1bGVzL2JhYmVsLXBvbHlmaWxsL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM2LnJlZmxlY3QucHJldmVudC1leHRlbnNpb25zLmpzIiwibm9kZV9tb2R1bGVzL2JhYmVsLXBvbHlmaWxsL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM2LnJlZmxlY3Quc2V0LXByb3RvdHlwZS1vZi5qcyIsIm5vZGVfbW9kdWxlcy9iYWJlbC1wb2x5ZmlsbC9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNi5yZWZsZWN0LnNldC5qcyIsIm5vZGVfbW9kdWxlcy9iYWJlbC1wb2x5ZmlsbC9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNi5yZWdleHAuY29uc3RydWN0b3IuanMiLCJub2RlX21vZHVsZXMvYmFiZWwtcG9seWZpbGwvbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYucmVnZXhwLmZsYWdzLmpzIiwibm9kZV9tb2R1bGVzL2JhYmVsLXBvbHlmaWxsL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM2LnJlZ2V4cC5tYXRjaC5qcyIsIm5vZGVfbW9kdWxlcy9iYWJlbC1wb2x5ZmlsbC9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNi5yZWdleHAucmVwbGFjZS5qcyIsIm5vZGVfbW9kdWxlcy9iYWJlbC1wb2x5ZmlsbC9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNi5yZWdleHAuc2VhcmNoLmpzIiwibm9kZV9tb2R1bGVzL2JhYmVsLXBvbHlmaWxsL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM2LnJlZ2V4cC5zcGxpdC5qcyIsIm5vZGVfbW9kdWxlcy9iYWJlbC1wb2x5ZmlsbC9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNi5yZWdleHAudG8tc3RyaW5nLmpzIiwibm9kZV9tb2R1bGVzL2JhYmVsLXBvbHlmaWxsL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM2LnNldC5qcyIsIm5vZGVfbW9kdWxlcy9iYWJlbC1wb2x5ZmlsbC9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNi5zdHJpbmcuYW5jaG9yLmpzIiwibm9kZV9tb2R1bGVzL2JhYmVsLXBvbHlmaWxsL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM2LnN0cmluZy5iaWcuanMiLCJub2RlX21vZHVsZXMvYmFiZWwtcG9seWZpbGwvbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYuc3RyaW5nLmJsaW5rLmpzIiwibm9kZV9tb2R1bGVzL2JhYmVsLXBvbHlmaWxsL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM2LnN0cmluZy5ib2xkLmpzIiwibm9kZV9tb2R1bGVzL2JhYmVsLXBvbHlmaWxsL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM2LnN0cmluZy5jb2RlLXBvaW50LWF0LmpzIiwibm9kZV9tb2R1bGVzL2JhYmVsLXBvbHlmaWxsL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM2LnN0cmluZy5lbmRzLXdpdGguanMiLCJub2RlX21vZHVsZXMvYmFiZWwtcG9seWZpbGwvbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYuc3RyaW5nLmZpeGVkLmpzIiwibm9kZV9tb2R1bGVzL2JhYmVsLXBvbHlmaWxsL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM2LnN0cmluZy5mb250Y29sb3IuanMiLCJub2RlX21vZHVsZXMvYmFiZWwtcG9seWZpbGwvbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYuc3RyaW5nLmZvbnRzaXplLmpzIiwibm9kZV9tb2R1bGVzL2JhYmVsLXBvbHlmaWxsL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM2LnN0cmluZy5mcm9tLWNvZGUtcG9pbnQuanMiLCJub2RlX21vZHVsZXMvYmFiZWwtcG9seWZpbGwvbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYuc3RyaW5nLmluY2x1ZGVzLmpzIiwibm9kZV9tb2R1bGVzL2JhYmVsLXBvbHlmaWxsL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM2LnN0cmluZy5pdGFsaWNzLmpzIiwibm9kZV9tb2R1bGVzL2JhYmVsLXBvbHlmaWxsL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM2LnN0cmluZy5pdGVyYXRvci5qcyIsIm5vZGVfbW9kdWxlcy9iYWJlbC1wb2x5ZmlsbC9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNi5zdHJpbmcubGluay5qcyIsIm5vZGVfbW9kdWxlcy9iYWJlbC1wb2x5ZmlsbC9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNi5zdHJpbmcucmF3LmpzIiwibm9kZV9tb2R1bGVzL2JhYmVsLXBvbHlmaWxsL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM2LnN0cmluZy5yZXBlYXQuanMiLCJub2RlX21vZHVsZXMvYmFiZWwtcG9seWZpbGwvbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYuc3RyaW5nLnNtYWxsLmpzIiwibm9kZV9tb2R1bGVzL2JhYmVsLXBvbHlmaWxsL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM2LnN0cmluZy5zdGFydHMtd2l0aC5qcyIsIm5vZGVfbW9kdWxlcy9iYWJlbC1wb2x5ZmlsbC9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNi5zdHJpbmcuc3RyaWtlLmpzIiwibm9kZV9tb2R1bGVzL2JhYmVsLXBvbHlmaWxsL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM2LnN0cmluZy5zdWIuanMiLCJub2RlX21vZHVsZXMvYmFiZWwtcG9seWZpbGwvbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYuc3RyaW5nLnN1cC5qcyIsIm5vZGVfbW9kdWxlcy9iYWJlbC1wb2x5ZmlsbC9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNi5zdHJpbmcudHJpbS5qcyIsIm5vZGVfbW9kdWxlcy9iYWJlbC1wb2x5ZmlsbC9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNi5zeW1ib2wuanMiLCJub2RlX21vZHVsZXMvYmFiZWwtcG9seWZpbGwvbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYudHlwZWQuYXJyYXktYnVmZmVyLmpzIiwibm9kZV9tb2R1bGVzL2JhYmVsLXBvbHlmaWxsL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM2LnR5cGVkLmRhdGEtdmlldy5qcyIsIm5vZGVfbW9kdWxlcy9iYWJlbC1wb2x5ZmlsbC9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNi50eXBlZC5mbG9hdDMyLWFycmF5LmpzIiwibm9kZV9tb2R1bGVzL2JhYmVsLXBvbHlmaWxsL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM2LnR5cGVkLmZsb2F0NjQtYXJyYXkuanMiLCJub2RlX21vZHVsZXMvYmFiZWwtcG9seWZpbGwvbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYudHlwZWQuaW50MTYtYXJyYXkuanMiLCJub2RlX21vZHVsZXMvYmFiZWwtcG9seWZpbGwvbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYudHlwZWQuaW50MzItYXJyYXkuanMiLCJub2RlX21vZHVsZXMvYmFiZWwtcG9seWZpbGwvbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYudHlwZWQuaW50OC1hcnJheS5qcyIsIm5vZGVfbW9kdWxlcy9iYWJlbC1wb2x5ZmlsbC9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNi50eXBlZC51aW50MTYtYXJyYXkuanMiLCJub2RlX21vZHVsZXMvYmFiZWwtcG9seWZpbGwvbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYudHlwZWQudWludDMyLWFycmF5LmpzIiwibm9kZV9tb2R1bGVzL2JhYmVsLXBvbHlmaWxsL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM2LnR5cGVkLnVpbnQ4LWFycmF5LmpzIiwibm9kZV9tb2R1bGVzL2JhYmVsLXBvbHlmaWxsL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM2LnR5cGVkLnVpbnQ4LWNsYW1wZWQtYXJyYXkuanMiLCJub2RlX21vZHVsZXMvYmFiZWwtcG9seWZpbGwvbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYud2Vhay1tYXAuanMiLCJub2RlX21vZHVsZXMvYmFiZWwtcG9seWZpbGwvbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYud2Vhay1zZXQuanMiLCJub2RlX21vZHVsZXMvYmFiZWwtcG9seWZpbGwvbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczcuYXJyYXkuaW5jbHVkZXMuanMiLCJub2RlX21vZHVsZXMvYmFiZWwtcG9seWZpbGwvbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczcuZXJyb3IuaXMtZXJyb3IuanMiLCJub2RlX21vZHVsZXMvYmFiZWwtcG9seWZpbGwvbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczcubWFwLnRvLWpzb24uanMiLCJub2RlX21vZHVsZXMvYmFiZWwtcG9seWZpbGwvbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczcubWF0aC5pYWRkaC5qcyIsIm5vZGVfbW9kdWxlcy9iYWJlbC1wb2x5ZmlsbC9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNy5tYXRoLmltdWxoLmpzIiwibm9kZV9tb2R1bGVzL2JhYmVsLXBvbHlmaWxsL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM3Lm1hdGguaXN1YmguanMiLCJub2RlX21vZHVsZXMvYmFiZWwtcG9seWZpbGwvbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczcubWF0aC51bXVsaC5qcyIsIm5vZGVfbW9kdWxlcy9iYWJlbC1wb2x5ZmlsbC9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNy5vYmplY3QuZGVmaW5lLWdldHRlci5qcyIsIm5vZGVfbW9kdWxlcy9iYWJlbC1wb2x5ZmlsbC9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNy5vYmplY3QuZGVmaW5lLXNldHRlci5qcyIsIm5vZGVfbW9kdWxlcy9iYWJlbC1wb2x5ZmlsbC9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNy5vYmplY3QuZW50cmllcy5qcyIsIm5vZGVfbW9kdWxlcy9iYWJlbC1wb2x5ZmlsbC9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNy5vYmplY3QuZ2V0LW93bi1wcm9wZXJ0eS1kZXNjcmlwdG9ycy5qcyIsIm5vZGVfbW9kdWxlcy9iYWJlbC1wb2x5ZmlsbC9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNy5vYmplY3QubG9va3VwLWdldHRlci5qcyIsIm5vZGVfbW9kdWxlcy9iYWJlbC1wb2x5ZmlsbC9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNy5vYmplY3QubG9va3VwLXNldHRlci5qcyIsIm5vZGVfbW9kdWxlcy9iYWJlbC1wb2x5ZmlsbC9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNy5vYmplY3QudmFsdWVzLmpzIiwibm9kZV9tb2R1bGVzL2JhYmVsLXBvbHlmaWxsL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM3LnJlZmxlY3QuZGVmaW5lLW1ldGFkYXRhLmpzIiwibm9kZV9tb2R1bGVzL2JhYmVsLXBvbHlmaWxsL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM3LnJlZmxlY3QuZGVsZXRlLW1ldGFkYXRhLmpzIiwibm9kZV9tb2R1bGVzL2JhYmVsLXBvbHlmaWxsL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM3LnJlZmxlY3QuZ2V0LW1ldGFkYXRhLWtleXMuanMiLCJub2RlX21vZHVsZXMvYmFiZWwtcG9seWZpbGwvbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczcucmVmbGVjdC5nZXQtbWV0YWRhdGEuanMiLCJub2RlX21vZHVsZXMvYmFiZWwtcG9seWZpbGwvbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczcucmVmbGVjdC5nZXQtb3duLW1ldGFkYXRhLWtleXMuanMiLCJub2RlX21vZHVsZXMvYmFiZWwtcG9seWZpbGwvbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczcucmVmbGVjdC5nZXQtb3duLW1ldGFkYXRhLmpzIiwibm9kZV9tb2R1bGVzL2JhYmVsLXBvbHlmaWxsL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM3LnJlZmxlY3QuaGFzLW1ldGFkYXRhLmpzIiwibm9kZV9tb2R1bGVzL2JhYmVsLXBvbHlmaWxsL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM3LnJlZmxlY3QuaGFzLW93bi1tZXRhZGF0YS5qcyIsIm5vZGVfbW9kdWxlcy9iYWJlbC1wb2x5ZmlsbC9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNy5yZWZsZWN0Lm1ldGFkYXRhLmpzIiwibm9kZV9tb2R1bGVzL2JhYmVsLXBvbHlmaWxsL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM3LnNldC50by1qc29uLmpzIiwibm9kZV9tb2R1bGVzL2JhYmVsLXBvbHlmaWxsL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM3LnN0cmluZy5hdC5qcyIsIm5vZGVfbW9kdWxlcy9iYWJlbC1wb2x5ZmlsbC9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNy5zdHJpbmcubWF0Y2gtYWxsLmpzIiwibm9kZV9tb2R1bGVzL2JhYmVsLXBvbHlmaWxsL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM3LnN0cmluZy5wYWQtZW5kLmpzIiwibm9kZV9tb2R1bGVzL2JhYmVsLXBvbHlmaWxsL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM3LnN0cmluZy5wYWQtc3RhcnQuanMiLCJub2RlX21vZHVsZXMvYmFiZWwtcG9seWZpbGwvbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczcuc3RyaW5nLnRyaW0tbGVmdC5qcyIsIm5vZGVfbW9kdWxlcy9iYWJlbC1wb2x5ZmlsbC9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNy5zdHJpbmcudHJpbS1yaWdodC5qcyIsIm5vZGVfbW9kdWxlcy9iYWJlbC1wb2x5ZmlsbC9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNy5zeXN0ZW0uZ2xvYmFsLmpzIiwibm9kZV9tb2R1bGVzL2JhYmVsLXBvbHlmaWxsL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvd2ViLmRvbS5pdGVyYWJsZS5qcyIsIm5vZGVfbW9kdWxlcy9iYWJlbC1wb2x5ZmlsbC9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL3dlYi5pbW1lZGlhdGUuanMiLCJub2RlX21vZHVsZXMvYmFiZWwtcG9seWZpbGwvbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy93ZWIudGltZXJzLmpzIiwibm9kZV9tb2R1bGVzL2JhYmVsLXBvbHlmaWxsL25vZGVfbW9kdWxlcy9jb3JlLWpzL3NoaW0uanMiLCJub2RlX21vZHVsZXMvYmFiZWwtcmVnZW5lcmF0b3ItcnVudGltZS9ydW50aW1lLmpzIiwibm9kZV9tb2R1bGVzL3Byb2Nlc3MvYnJvd3Nlci5qcyIsInNyY1xcanNcXERlZmF1bHRQYXJhbXMuanMiLCJzcmNcXGpzXFxNTUxQYXJzZXIuanMiLCJzcmNcXGpzXFxTY2FubmVyLmpzIiwic3JjXFxqc1xcU3ludGF4LmpzIiwic3JjXFxqc1xcYXVkaW8uanMiLCJzcmNcXGpzXFxjaGFyQ29kZXMuanMiLCJzcmNcXGpzXFxsemJhc2U2Mi5taW4uanMiLCJzcmNcXGpzXFxtejcwMGZvbi5qcyIsInNyY1xcanNcXHNjcmlwdHMuanMiLCJzcmNcXGpzXFxzZXFEYXRhLmpzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBOztBQ0FBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7Ozs7QUMvQkE7QUFDQTs7QUNEQTtBQUNBO0FBQ0E7QUFDQTs7QUNIQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQ0pBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQ05BO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FDSkE7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUNKQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQ3pCQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FDZEE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUNQQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FDcEJBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FDM0NBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQzNCQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUNmQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FDdkJBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FDdEJBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FDSkE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUM5SUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQ1JBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FDbEZBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQ3BGQTtBQUNBOztBQ0RBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FDbkJBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUNSQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQ0pBO0FBQ0E7QUFDQTtBQUNBOztBQ0hBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQ05BO0FBQ0E7QUFDQTtBQUNBOztBQ0hBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUNkQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUMxQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQ1hBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQ05BO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQzNCQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUNaQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUNsQkE7QUFDQTtBQUNBO0FBQ0E7O0FDSEE7QUFDQTtBQUNBO0FBQ0E7O0FDSEE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUNQQTs7QUNBQTtBQUNBO0FBQ0E7O0FDRkE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUNQQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUNmQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQ0pBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FDUEE7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUNKQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FDTEE7QUFDQTtBQUNBOztBQ0ZBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FDUEE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQ1hBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQ1pBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQ3JFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FDcEJBO0FBQ0E7QUFDQTs7QUNGQTs7QUNBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUNUQTs7QUNBQTtBQUNBO0FBQ0E7QUFDQTs7QUNIQTtBQUNBO0FBQ0E7QUFDQTs7QUNIQTtBQUNBO0FBQ0E7QUFDQTs7QUNIQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQ3BEQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FDbERBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQ3pEQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FDaENBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQ3ZDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUNmQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUNaQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUNOQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUNmQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQ25CQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUNOQTs7QUNBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUNaQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQ2hCQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUNOQTs7QUNBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUNUQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUNmQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUNUQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQ1BBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUNSQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQ3RCQTs7QUNBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQ1BBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FDSkE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUMvQkE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUNQQTtBQUNBO0FBQ0E7QUFDQTs7QUNIQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUN4QkE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FDWkE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FDTkE7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUNKQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FDTEE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUNQQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUNOQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQ2hCQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQ1BBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQ2xCQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FDakJBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUNYQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FDN0JBO0FBQ0E7O0FDREE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQzFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUNOQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FDTEE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQ0xBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUNMQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQ0pBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUNYQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUNoZUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUNsUkE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUN6QkE7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUNKQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQ1BBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FDUEE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQ1JBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUNMQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FDTEE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FDVEE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQ0xBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQ1RBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FDYkE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUNiQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQ1ZBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUNuQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FDVEE7QUFDQTtBQUNBO0FBQ0E7O0FDSEE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FDakNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUNYQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FDakJBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQ1RBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUNqQkE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FDVEE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FDVEE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FDM0JBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQ1RBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FDdEJBOztBQ0FBO0FBQ0E7QUFDQTtBQUNBOztBQ0hBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQzNCQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQ2JBO0FBQ0E7QUFDQTtBQUNBOztBQ0hBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FDVkE7QUFDQTtBQUNBO0FBQ0E7O0FDSEE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FDWkE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FDZkE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUNoQkE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUNiQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQ1BBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FDUEE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQ1JBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FDUEE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQ1JBO0FBQ0E7QUFDQTtBQUNBOztBQ0hBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FDekJBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQ3hCQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQ2hCQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQ1BBO0FBQ0E7QUFDQTtBQUNBOztBQ0hBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FDUEE7QUFDQTtBQUNBO0FBQ0E7O0FDSEE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQ2RBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUNYQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQ1BBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUNwRUE7QUFDQTtBQUNBO0FBQ0E7O0FDSEE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQ1JBO0FBQ0E7QUFDQTtBQUNBOztBQ0hBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FDUEE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FDVEE7QUFDQTtBQUNBO0FBQ0E7O0FDSEE7QUFDQTtBQUNBO0FBQ0E7O0FDSEE7QUFDQTtBQUNBO0FBQ0E7O0FDSEE7QUFDQTtBQUNBO0FBQ0E7O0FDSEE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQ2pIQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FDakJBO0FBQ0E7QUFDQTtBQUNBOztBQ0hBO0FBQ0E7QUFDQTs7QUNGQTtBQUNBO0FBQ0E7O0FDRkE7QUFDQTtBQUNBOztBQ0ZBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUNSQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FDUkE7QUFDQTtBQUNBO0FBQ0E7O0FDSEE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQ1JBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FDUEE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUNQQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQ1BBO0FBQ0E7QUFDQTs7QUNGQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FDUkE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQ1JBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUNSQTtBQUNBO0FBQ0E7O0FDRkE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FDVEE7QUFDQTtBQUNBO0FBQ0E7O0FDSEE7QUFDQTtBQUNBO0FBQ0E7O0FDSEE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FDNVNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUNSQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQ3JDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUNyQkE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUNWQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQ3pCQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUNUQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUNUQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FDcEJBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FDUEE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUNWQTtBQUNBO0FBQ0E7QUFDQTs7QUNIQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUNmQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FDZEE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FDOUJBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQzFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQ0pBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQ1RBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUNYQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUNUQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUNyRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FDeEJBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUNYQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUNOQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUNOQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUNOQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUNOQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FDUkE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUNuQkE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FDTkE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FDTkE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FDTkE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUN0QkE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQ1hBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQ05BO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FDaEJBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQ05BO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUNqQkE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQ0xBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQ05BO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUNqQkE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FDTkE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FDTkE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FDTkE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FDTkE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FDMU9BO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FDOUNBO0FBQ0E7QUFDQTtBQUNBOztBQ0hBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FDSkE7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUNKQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQ0pBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FDSkE7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUNKQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQ0pBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FDSkE7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUNKQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQ0pBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUN4REE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQ1hBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUNYQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FDUkE7QUFDQTtBQUNBO0FBQ0E7O0FDSEE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUNWQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUNmQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQ1ZBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQ2ZBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUNYQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FDWEE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQ1JBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FDdEJBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUNqQkE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQ2pCQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FDUkE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUNQQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FDZEE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FDbEJBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FDaEJBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FDUEE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQ1JBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQ2ZBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUNSQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FDZEE7QUFDQTtBQUNBO0FBQ0E7O0FDSEE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FDVEE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQzdCQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUNUQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUNUQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUNOQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUNOQTtBQUNBO0FBQ0E7QUFDQTs7QUNIQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUNyQkE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQ0xBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FDbkJBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOzs7QUMzS0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7Ozs7QUNqcEJBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7Ozs7Ozs7a0JDM0ZlO0FBQ2IsU0FBTyxHQUFQO0FBQ0EsVUFBUSxDQUFSO0FBQ0EsVUFBUSxDQUFSO0FBQ0EsWUFBVSxHQUFWO0FBQ0EsWUFBVSxFQUFWO0FBQ0EsYUFBVyxDQUFYOzs7Ozs7Ozs7Ozs7QUNORjs7OztBQUNBOzs7Ozs7OztBQUVBLElBQU0sZUFBZSxFQUFFLEdBQUcsQ0FBSCxFQUFNLEdBQUcsQ0FBSCxFQUFNLEdB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RSxVQUFNLE9BQU47QUFDQSxhQUFTLENBQVQ7QUFDQSw2REFIRjtHQVZNLEVBaUJOO0FBQ0UsVUFBTSxPQUFOO0FBQ0EsYUFBUyxDQUFUO0FBQ0Esc0dBSEY7R0FqQk0sRUF3Qk47QUFDRSxVQUFNLE9BQU47QUFDQSxhQUFTLENBQVQ7QUFDQSxpRUFIRjs7Ozs7Ozs7O0FBeEJNLEdBQVI7Q0FGUyIsImZpbGUiOiJnZW5lcmF0ZWQuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlc0NvbnRlbnQiOlsiKGZ1bmN0aW9uIGUodCxuLHIpe2Z1bmN0aW9uIHMobyx1KXtpZighbltvXSl7aWYoIXRbb10pe3ZhciBhPXR5cGVvZiByZXF1aXJlPT1cImZ1bmN0aW9uXCImJnJlcXVpcmU7aWYoIXUmJmEpcmV0dXJuIGEobywhMCk7aWYoaSlyZXR1cm4gaShvLCEwKTt2YXIgZj1uZXcgRXJyb3IoXCJDYW5ub3QgZmluZCBtb2R1bGUgJ1wiK28rXCInXCIpO3Rocm93IGYuY29kZT1cIk1PRFVMRV9OT1RfRk9VTkRcIixmfXZhciBsPW5bb109e2V4cG9ydHM6e319O3Rbb11bMF0uY2FsbChsLmV4cG9ydHMsZnVuY3Rpb24oZSl7dmFyIG49dFtvXVsxXVtlXTtyZXR1cm4gcyhuP246ZSl9LGwsbC5leHBvcnRzLGUsdCxuLHIpfXJldHVybiBuW29dLmV4cG9ydHN9dmFyIGk9dHlwZW9mIHJlcXVpcmU9PVwiZnVuY3Rpb25cIiYmcmVxdWlyZTtmb3IodmFyIG89MDtvPHIubGVuZ3RoO28rKylzKHJbb10pO3JldHVybiBzfSkiLCIvKiBlc2xpbnQgbWF4LWxlbjogMCAqL1xuXG5cInVzZSBzdHJpY3RcIjtcblxucmVxdWlyZShcImNvcmUtanMvc2hpbVwiKTtcblxucmVxdWlyZShcImJhYmVsLXJlZ2VuZXJhdG9yLXJ1bnRpbWVcIik7XG5cbi8vIFNob3VsZCBiZSByZW1vdmVkIGluIHRoZSBuZXh0IG1ham9yIHJlbGVhc2U6XG5cbnJlcXVpcmUoXCJjb3JlLWpzL2ZuL3JlZ2V4cC9lc2NhcGVcIik7XG5cbmlmIChnbG9iYWwuX2JhYmVsUG9seWZpbGwpIHtcbiAgdGhyb3cgbmV3IEVycm9yKFwib25seSBvbmUgaW5zdGFuY2Ugb2YgYmFiZWwtcG9seWZpbGwgaXMgYWxsb3dlZFwiKTtcbn1cbmdsb2JhbC5fYmFiZWxQb2x5ZmlsbCA9IHRydWU7XG5cbnZhciBERUZJTkVfUFJPUEVSVFkgPSBcImRlZmluZVByb3BlcnR5XCI7XG5mdW5jdGlvbiBkZWZpbmUoTywga2V5LCB2YWx1ZSkge1xuICBPW2tleV0gfHwgT2JqZWN0W0RFRklORV9QUk9QRVJUWV0oTywga2V5LCB7XG4gICAgd3JpdGFibGU6IHRydWUsXG4gICAgY29uZmlndXJhYmxlOiB0cnVlLFxuICAgIHZhbHVlOiB2YWx1ZVxuICB9KTtcbn1cblxuZGVmaW5lKFN0cmluZy5wcm90b3R5cGUsIFwicGFkTGVmdFwiLCBcIlwiLnBhZFN0YXJ0KTtcbmRlZmluZShTdHJpbmcucHJvdG90eXBlLCBcInBhZFJpZ2h0XCIsIFwiXCIucGFkRW5kKTtcblxuXCJwb3AscmV2ZXJzZSxzaGlmdCxrZXlzLHZhbHVlcyxlbnRyaWVzLGluZGV4T2YsZXZlcnksc29tZSxmb3JFYWNoLG1hcCxmaWx0ZXIsZmluZCxmaW5kSW5kZXgsaW5jbHVkZXMsam9pbixzbGljZSxjb25jYXQscHVzaCxzcGxpY2UsdW5zaGlmdCxzb3J0LGxhc3RJbmRleE9mLHJlZHVjZSxyZWR1Y2VSaWdodCxjb3B5V2l0aGluLGZpbGxcIi5zcGxpdChcIixcIikuZm9yRWFjaChmdW5jdGlvbiAoa2V5KSB7XG4gIFtdW2tleV0gJiYgZGVmaW5lKEFycmF5LCBrZXksIEZ1bmN0aW9uLmNhbGwuYmluZChbXVtrZXldKSk7XG59KTsiLCJyZXF1aXJlKCcuLi8uLi9tb2R1bGVzL2NvcmUucmVnZXhwLmVzY2FwZScpO1xubW9kdWxlLmV4cG9ydHMgPSByZXF1aXJlKCcuLi8uLi9tb2R1bGVzL19jb3JlJykuUmVnRXhwLmVzY2FwZTsiLCJtb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uKGl0KXtcbiAgaWYodHlwZW9mIGl0ICE9ICdmdW5jdGlvbicpdGhyb3cgVHlwZUVycm9yKGl0ICsgJyBpcyBub3QgYSBmdW5jdGlvbiEnKTtcbiAgcmV0dXJuIGl0O1xufTsiLCJ2YXIgY29mID0gcmVxdWlyZSgnLi9fY29mJyk7XHJcbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24oaXQsIG1zZyl7XHJcbiAgaWYodHlwZW9mIGl0ICE9ICdudW1iZXInICYmIGNvZihpdCkgIT0gJ051bWJlcicpdGhyb3cgVHlwZUVycm9yKG1zZyk7XHJcbiAgcmV0dXJuICtpdDtcclxufTsiLCIvLyAyMi4xLjMuMzEgQXJyYXkucHJvdG90eXBlW0BAdW5zY29wYWJsZXNdXG52YXIgVU5TQ09QQUJMRVMgPSByZXF1aXJlKCcuL193a3MnKSgndW5zY29wYWJsZXMnKVxuICAsIEFycmF5UHJvdG8gID0gQXJyYXkucHJvdG90eXBlO1xuaWYoQXJyYXlQcm90b1tVTlNDT1BBQkxFU10gPT0gdW5kZWZpbmVkKXJlcXVpcmUoJy4vX2hpZGUnKShBcnJheVByb3RvLCBVTlNDT1BBQkxFUywge30pO1xubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbihrZXkpe1xuICBBcnJheVByb3RvW1VOU0NPUEFCTEVTXVtrZXldID0gdHJ1ZTtcbn07IiwibW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbihpdCwgQ29uc3RydWN0b3IsIG5hbWUsIGZvcmJpZGRlbkZpZWxkKXtcbiAgaWYoIShpdCBpbnN0YW5jZW9mIENvbnN0cnVjdG9yKSB8fCAoZm9yYmlkZGVuRmllbGQgIT09IHVuZGVmaW5lZCAmJiBmb3JiaWRkZW5GaWVsZCBpbiBpdCkpe1xuICAgIHRocm93IFR5cGVFcnJvcihuYW1lICsgJzogaW5jb3JyZWN0IGludm9jYXRpb24hJyk7XG4gIH0gcmV0dXJuIGl0O1xufTsiLCJ2YXIgaXNPYmplY3QgPSByZXF1aXJlKCcuL19pcy1vYmplY3QnKTtcbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24oaXQpe1xuICBpZighaXNPYmplY3QoaXQpKXRocm93IFR5cGVFcnJvcihpdCArICcgaXMgbm90IGFuIG9iamVjdCEnKTtcbiAgcmV0dXJuIGl0O1xufTsiLCIvLyAyMi4xLjMuMyBBcnJheS5wcm90b3R5cGUuY29weVdpdGhpbih0YXJnZXQsIHN0YXJ0LCBlbmQgPSB0aGlzLmxlbmd0aClcbid1c2Ugc3RyaWN0JztcbnZhciB0b09iamVjdCA9IHJlcXVpcmUoJy4vX3RvLW9iamVjdCcpXG4gICwgdG9JbmRleCAgPSByZXF1aXJlKCcuL190by1pbmRleCcpXG4gICwgdG9MZW5ndGggPSByZXF1aXJlKCcuL190by1sZW5ndGgnKTtcblxubW9kdWxlLmV4cG9ydHMgPSBbXS5jb3B5V2l0aGluIHx8IGZ1bmN0aW9uIGNvcHlXaXRoaW4odGFyZ2V0Lyo9IDAqLywgc3RhcnQvKj0gMCwgZW5kID0gQGxlbmd0aCovKXtcbiAgdmFyIE8gICAgID0gdG9PYmplY3QodGhpcylcbiAgICAsIGxlbiAgID0gdG9MZW5ndGgoTy5sZW5ndGgpXG4gICAgLCB0byAgICA9IHRvSW5kZXgodGFyZ2V0LCBsZW4pXG4gICAgLCBmcm9tICA9IHRvSW5kZXgoc3RhcnQsIGxlbilcbiAgICAsIGVuZCAgID0gYXJndW1lbnRzLmxlbmd0aCA+IDIgPyBhcmd1bWVudHNbMl0gOiB1bmRlZmluZWRcbiAgICAsIGNvdW50ID0gTWF0aC5taW4oKGVuZCA9PT0gdW5kZWZpbmVkID8gbGVuIDogdG9JbmRleChlbmQsIGxlbikpIC0gZnJvbSwgbGVuIC0gdG8pXG4gICAgLCBpbmMgICA9IDE7XG4gIGlmKGZyb20gPCB0byAmJiB0byA8IGZyb20gKyBjb3VudCl7XG4gICAgaW5jICA9IC0xO1xuICAgIGZyb20gKz0gY291bnQgLSAxO1xuICAgIHRvICAgKz0gY291bnQgLSAxO1xuICB9XG4gIHdoaWxlKGNvdW50LS0gPiAwKXtcbiAgICBpZihmcm9tIGluIE8pT1t0b10gPSBPW2Zyb21dO1xuICAgIGVsc2UgZGVsZXRlIE9bdG9dO1xuICAgIHRvICAgKz0gaW5jO1xuICAgIGZyb20gKz0gaW5jO1xuICB9IHJldHVybiBPO1xufTsiLCIvLyAyMi4xLjMuNiBBcnJheS5wcm90b3R5cGUuZmlsbCh2YWx1ZSwgc3RhcnQgPSAwLCBlbmQgPSB0aGlzLmxlbmd0aClcbid1c2Ugc3RyaWN0JztcbnZhciB0b09iamVjdCA9IHJlcXVpcmUoJy4vX3RvLW9iamVjdCcpXG4gICwgdG9JbmRleCAgPSByZXF1aXJlKCcuL190by1pbmRleCcpXG4gICwgdG9MZW5ndGggPSByZXF1aXJlKCcuL190by1sZW5ndGgnKTtcbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gZmlsbCh2YWx1ZSAvKiwgc3RhcnQgPSAwLCBlbmQgPSBAbGVuZ3RoICovKXtcbiAgdmFyIE8gICAgICA9IHRvT2JqZWN0KHRoaXMpXG4gICAgLCBsZW5ndGggPSB0b0xlbmd0aChPLmxlbmd0aClcbiAgICAsIGFMZW4gICA9IGFyZ3VtZW50cy5sZW5ndGhcbiAgICAsIGluZGV4ICA9IHRvSW5kZXgoYUxlbiA+IDEgPyBhcmd1bWVudHNbMV0gOiB1bmRlZmluZWQsIGxlbmd0aClcbiAgICAsIGVuZCAgICA9IGFMZW4gPiAyID8gYXJndW1lbnRzWzJdIDogdW5kZWZpbmVkXG4gICAgLCBlbmRQb3MgPSBlbmQgPT09IHVuZGVmaW5lZCA/IGxlbmd0aCA6IHRvSW5kZXgoZW5kLCBsZW5ndGgpO1xuICB3aGlsZShlbmRQb3MgPiBpbmRleClPW2luZGV4KytdID0gdmFsdWU7XG4gIHJldHVybiBPO1xufTsiLCJ2YXIgZm9yT2YgPSByZXF1aXJlKCcuL19mb3Itb2YnKTtcblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbihpdGVyLCBJVEVSQVRPUil7XG4gIHZhciByZXN1bHQgPSBbXTtcbiAgZm9yT2YoaXRlciwgZmFsc2UsIHJlc3VsdC5wdXNoLCByZXN1bHQsIElURVJBVE9SKTtcbiAgcmV0dXJuIHJlc3VsdDtcbn07XG4iLCIvLyBmYWxzZSAtPiBBcnJheSNpbmRleE9mXG4vLyB0cnVlICAtPiBBcnJheSNpbmNsdWRlc1xudmFyIHRvSU9iamVjdCA9IHJlcXVpcmUoJy4vX3RvLWlvYmplY3QnKVxuICAsIHRvTGVuZ3RoICA9IHJlcXVpcmUoJy4vX3RvLWxlbmd0aCcpXG4gICwgdG9JbmRleCAgID0gcmVxdWlyZSgnLi9fdG8taW5kZXgnKTtcbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24oSVNfSU5DTFVERVMpe1xuICByZXR1cm4gZnVuY3Rpb24oJHRoaXMsIGVsLCBmcm9tSW5kZXgpe1xuICAgIHZhciBPICAgICAgPSB0b0lPYmplY3QoJHRoaXMpXG4gICAgICAsIGxlbmd0aCA9IHRvTGVuZ3RoKE8ubGVuZ3RoKVxuICAgICAgLCBpbmRleCAgPSB0b0luZGV4KGZyb21JbmRleCwgbGVuZ3RoKVxuICAgICAgLCB2YWx1ZTtcbiAgICAvLyBBcnJheSNpbmNsdWRlcyB1c2VzIFNhbWVWYWx1ZVplcm8gZXF1YWxpdHkgYWxnb3JpdGhtXG4gICAgaWYoSVNfSU5DTFVERVMgJiYgZWwgIT0gZWwpd2hpbGUobGVuZ3RoID4gaW5kZXgpe1xuICAgICAgdmFsdWUgPSBPW2luZGV4KytdO1xuICAgICAgaWYodmFsdWUgIT0gdmFsdWUpcmV0dXJuIHRydWU7XG4gICAgLy8gQXJyYXkjdG9JbmRleCBpZ25vcmVzIGhvbGVzLCBBcnJheSNpbmNsdWRlcyAtIG5vdFxuICAgIH0gZWxzZSBmb3IoO2xlbmd0aCA+IGluZGV4OyBpbmRleCsrKWlmKElTX0lOQ0xVREVTIHx8IGluZGV4IGluIE8pe1xuICAgICAgaWYoT1tpbmRleF0gPT09IGVsKXJldHVybiBJU19JTkNMVURFUyB8fCBpbmRleDtcbiAgICB9IHJldHVybiAhSVNfSU5DTFVERVMgJiYgLTE7XG4gIH07XG59OyIsIi8vIDAgLT4gQXJyYXkjZm9yRWFjaFxuLy8gMSAtPiBBcnJheSNtYXBcbi8vIDIgLT4gQXJyYXkjZmlsdGVyXG4vLyAzIC0+IEFycmF5I3NvbWVcbi8vIDQgLT4gQXJyYXkjZXZlcnlcbi8vIDUgLT4gQXJyYXkjZmluZFxuLy8gNiAtPiBBcnJheSNmaW5kSW5kZXhcbnZhciBjdHggICAgICA9IHJlcXVpcmUoJy4vX2N0eCcpXG4gICwgSU9iamVjdCAgPSByZXF1aXJlKCcuL19pb2JqZWN0JylcbiAgLCB0b09iamVjdCA9IHJlcXVpcmUoJy4vX3RvLW9iamVjdCcpXG4gICwgdG9MZW5ndGggPSByZXF1aXJlKCcuL190by1sZW5ndGgnKVxuICAsIGFzYyAgICAgID0gcmVxdWlyZSgnLi9fYXJyYXktc3BlY2llcy1jcmVhdGUnKTtcbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24oVFlQRSwgJGNyZWF0ZSl7XG4gIHZhciBJU19NQVAgICAgICAgID0gVFlQRSA9PSAxXG4gICAgLCBJU19GSUxURVIgICAgID0gVFlQRSA9PSAyXG4gICAgLCBJU19TT01FICAgICAgID0gVFlQRSA9PSAzXG4gICAgLCBJU19FVkVSWSAgICAgID0gVFlQRSA9PSA0XG4gICAgLCBJU19GSU5EX0lOREVYID0gVFlQRSA9PSA2XG4gICAgLCBOT19IT0xFUyAgICAgID0gVFlQRSA9PSA1IHx8IElTX0ZJTkRfSU5ERVhcbiAgICAsIGNyZWF0ZSAgICAgICAgPSAkY3JlYXRlIHx8IGFzYztcbiAgcmV0dXJuIGZ1bmN0aW9uKCR0aGlzLCBjYWxsYmFja2ZuLCB0aGF0KXtcbiAgICB2YXIgTyAgICAgID0gdG9PYmplY3QoJHRoaXMpXG4gICAgICAsIHNlbGYgICA9IElPYmplY3QoTylcbiAgICAgICwgZiAgICAgID0gY3R4KGNhbGxiYWNrZm4sIHRoYXQsIDMpXG4gICAgICAsIGxlbmd0aCA9IHRvTGVuZ3RoKHNlbGYubGVuZ3RoKVxuICAgICAgLCBpbmRleCAgPSAwXG4gICAgICAsIHJlc3VsdCA9IElTX01BUCA/IGNyZWF0ZSgkdGhpcywgbGVuZ3RoKSA6IElTX0ZJTFRFUiA/IGNyZWF0ZSgkdGhpcywgMCkgOiB1bmRlZmluZWRcbiAgICAgICwgdmFsLCByZXM7XG4gICAgZm9yKDtsZW5ndGggPiBpbmRleDsgaW5kZXgrKylpZihOT19IT0xFUyB8fCBpbmRleCBpbiBzZWxmKXtcbiAgICAgIHZhbCA9IHNlbGZbaW5kZXhdO1xuICAgICAgcmVzID0gZih2YWwsIGluZGV4LCBPKTtcbiAgICAgIGlmKFRZUEUpe1xuICAgICAgICBpZihJU19NQVApcmVzdWx0W2luZGV4XSA9IHJlczsgICAgICAgICAgICAvLyBtYXBcbiAgICAgICAgZWxzZSBpZihyZXMpc3dpdGNoKFRZUEUpe1xuICAgICAgICAgIGNhc2UgMzogcmV0dXJuIHRydWU7ICAgICAgICAgICAgICAgICAgICAvLyBzb21lXG4gICAgICAgICAgY2FzZSA1OiByZXR1cm4gdmFsOyAgICAgICAgICAgICAgICAgICAgIC8vIGZpbmRcbiAgICAgICAgICBjYXNlIDY6IHJldHVybiBpbmRleDsgICAgICAgICAgICAgICAgICAgLy8gZmluZEluZGV4XG4gICAgICAgICAgY2FzZSAyOiByZXN1bHQucHVzaCh2YWwpOyAgICAgICAgICAgICAgIC8vIGZpbHRlclxuICAgICAgICB9IGVsc2UgaWYoSVNfRVZFUlkpcmV0dXJuIGZhbHNlOyAgICAgICAgICAvLyBldmVyeVxuICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gSVNfRklORF9JTkRFWCA/IC0xIDogSVNfU09NRSB8fCBJU19FVkVSWSA/IElTX0VWRVJZIDogcmVzdWx0O1xuICB9O1xufTsiLCJ2YXIgYUZ1bmN0aW9uID0gcmVxdWlyZSgnLi9fYS1mdW5jdGlvbicpXHJcbiAgLCB0b09iamVjdCAgPSByZXF1aXJlKCcuL190by1vYmplY3QnKVxyXG4gICwgSU9iamVjdCAgID0gcmVxdWlyZSgnLi9faW9iamVjdCcpXHJcbiAgLCB0b0xlbmd0aCAgPSByZXF1aXJlKCcuL190by1sZW5ndGgnKTtcclxuXHJcbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24odGhhdCwgY2FsbGJhY2tmbiwgYUxlbiwgbWVtbywgaXNSaWdodCl7XHJcbiAgYUZ1bmN0aW9uKGNhbGxiYWNrZm4pO1xyXG4gIHZhciBPICAgICAgPSB0b09iamVjdCh0aGF0KVxyXG4gICAgLCBzZWxmICAgPSBJT2JqZWN0KE8pXHJcbiAgICAsIGxlbmd0aCA9IHRvTGVuZ3RoKE8ubGVuZ3RoKVxyXG4gICAgLCBpbmRleCAgPSBpc1JpZ2h0ID8gbGVuZ3RoIC0gMSA6IDBcclxuICAgICwgaSAgICAgID0gaXNSaWdodCA/IC0xIDogMTtcclxuICBpZihhTGVuIDwgMilmb3IoOzspe1xyXG4gICAgaWYoaW5kZXggaW4gc2VsZil7XHJcbiAgICAgIG1lbW8gPSBzZWxmW2luZGV4XTtcclxuICAgICAgaW5kZXggKz0gaTtcclxuICAgICAgYnJlYWs7XHJcbiAgICB9XHJcbiAgICBpbmRleCArPSBpO1xyXG4gICAgaWYoaXNSaWdodCA/IGluZGV4IDwgMCA6IGxlbmd0aCA8PSBpbmRleCl7XHJcbiAgICAgIHRocm93IFR5cGVFcnJvcignUmVkdWNlIG9mIGVtcHR5IGFycmF5IHdpdGggbm8gaW5pdGlhbCB2YWx1ZScpO1xyXG4gICAgfVxyXG4gIH1cclxuICBmb3IoO2lzUmlnaHQgPyBpbmRleCA+PSAwIDogbGVuZ3RoID4gaW5kZXg7IGluZGV4ICs9IGkpaWYoaW5kZXggaW4gc2VsZil7XHJcbiAgICBtZW1vID0gY2FsbGJhY2tmbihtZW1vLCBzZWxmW2luZGV4XSwgaW5kZXgsIE8pO1xyXG4gIH1cclxuICByZXR1cm4gbWVtbztcclxufTsiLCIvLyA5LjQuMi4zIEFycmF5U3BlY2llc0NyZWF0ZShvcmlnaW5hbEFycmF5LCBsZW5ndGgpXG52YXIgaXNPYmplY3QgPSByZXF1aXJlKCcuL19pcy1vYmplY3QnKVxuICAsIGlzQXJyYXkgID0gcmVxdWlyZSgnLi9faXMtYXJyYXknKVxuICAsIFNQRUNJRVMgID0gcmVxdWlyZSgnLi9fd2tzJykoJ3NwZWNpZXMnKTtcbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24ob3JpZ2luYWwsIGxlbmd0aCl7XG4gIHZhciBDO1xuICBpZihpc0FycmF5KG9yaWdpbmFsKSl7XG4gICAgQyA9IG9yaWdpbmFsLmNvbnN0cnVjdG9yO1xuICAgIC8vIGNyb3NzLXJlYWxtIGZhbGxiYWNrXG4gICAgaWYodHlwZW9mIEMgPT0gJ2Z1bmN0aW9uJyAmJiAoQyA9PT0gQXJyYXkgfHwgaXNBcnJheShDLnByb3RvdHlwZSkpKUMgPSB1bmRlZmluZWQ7XG4gICAgaWYoaXNPYmplY3QoQykpe1xuICAgICAgQyA9IENbU1BFQ0lFU107XG4gICAgICBpZihDID09PSBudWxsKUMgPSB1bmRlZmluZWQ7XG4gICAgfVxuICB9IHJldHVybiBuZXcgKEMgPT09IHVuZGVmaW5lZCA/IEFycmF5IDogQykobGVuZ3RoKTtcbn07IiwiJ3VzZSBzdHJpY3QnO1xudmFyIGFGdW5jdGlvbiAgPSByZXF1aXJlKCcuL19hLWZ1bmN0aW9uJylcbiAgLCBpc09iamVjdCAgID0gcmVxdWlyZSgnLi9faXMtb2JqZWN0JylcbiAgLCBpbnZva2UgICAgID0gcmVxdWlyZSgnLi9faW52b2tlJylcbiAgLCBhcnJheVNsaWNlID0gW10uc2xpY2VcbiAgLCBmYWN0b3JpZXMgID0ge307XG5cbnZhciBjb25zdHJ1Y3QgPSBmdW5jdGlvbihGLCBsZW4sIGFyZ3Mpe1xuICBpZighKGxlbiBpbiBmYWN0b3JpZXMpKXtcbiAgICBmb3IodmFyIG4gPSBbXSwgaSA9IDA7IGkgPCBsZW47IGkrKyluW2ldID0gJ2FbJyArIGkgKyAnXSc7XG4gICAgZmFjdG9yaWVzW2xlbl0gPSBGdW5jdGlvbignRixhJywgJ3JldHVybiBuZXcgRignICsgbi5qb2luKCcsJykgKyAnKScpO1xuICB9IHJldHVybiBmYWN0b3JpZXNbbGVuXShGLCBhcmdzKTtcbn07XG5cbm1vZHVsZS5leHBvcnRzID0gRnVuY3Rpb24uYmluZCB8fCBmdW5jdGlvbiBiaW5kKHRoYXQgLyosIGFyZ3MuLi4gKi8pe1xuICB2YXIgZm4gICAgICAgPSBhRnVuY3Rpb24odGhpcylcbiAgICAsIHBhcnRBcmdzID0gYXJyYXlTbGljZS5jYWxsKGFyZ3VtZW50cywgMSk7XG4gIHZhciBib3VuZCA9IGZ1bmN0aW9uKC8qIGFyZ3MuLi4gKi8pe1xuICAgIHZhciBhcmdzID0gcGFydEFyZ3MuY29uY2F0KGFycmF5U2xpY2UuY2FsbChhcmd1bWVudHMpKTtcbiAgICByZXR1cm4gdGhpcyBpbnN0YW5jZW9mIGJvdW5kID8gY29uc3RydWN0KGZuLCBhcmdzLmxlbmd0aCwgYXJncykgOiBpbnZva2UoZm4sIGFyZ3MsIHRoYXQpO1xuICB9O1xuICBpZihpc09iamVjdChmbi5wcm90b3R5cGUpKWJvdW5kLnByb3RvdHlwZSA9IGZuLnByb3RvdHlwZTtcbiAgcmV0dXJuIGJvdW5kO1xufTsiLCIvLyBnZXR0aW5nIHRhZyBmcm9tIDE5LjEuMy42IE9iamVjdC5wcm90b3R5cGUudG9TdHJpbmcoKVxudmFyIGNvZiA9IHJlcXVpcmUoJy4vX2NvZicpXG4gICwgVEFHID0gcmVxdWlyZSgnLi9fd2tzJykoJ3RvU3RyaW5nVGFnJylcbiAgLy8gRVMzIHdyb25nIGhlcmVcbiAgLCBBUkcgPSBjb2YoZnVuY3Rpb24oKXsgcmV0dXJuIGFyZ3VtZW50czsgfSgpKSA9PSAnQXJndW1lbnRzJztcblxuLy8gZmFsbGJhY2sgZm9yIElFMTEgU2NyaXB0IEFjY2VzcyBEZW5pZWQgZXJyb3JcbnZhciB0cnlHZXQgPSBmdW5jdGlvbihpdCwga2V5KXtcbiAgdHJ5IHtcbiAgICByZXR1cm4gaXRba2V5XTtcbiAgfSBjYXRjaChlKXsgLyogZW1wdHkgKi8gfVxufTtcblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbihpdCl7XG4gIHZhciBPLCBULCBCO1xuICByZXR1cm4gaXQgPT09IHVuZGVmaW5lZCA/ICdVbmRlZmluZWQnIDogaXQgPT09IG51bGwgPyAnTnVsbCdcbiAgICAvLyBAQHRvU3RyaW5nVGFnIGNhc2VcbiAgICA6IHR5cGVvZiAoVCA9IHRyeUdldChPID0gT2JqZWN0KGl0KSwgVEFHKSkgPT0gJ3N0cmluZycgPyBUXG4gICAgLy8gYnVpbHRpblRhZyBjYXNlXG4gICAgOiBBUkcgPyBjb2YoTylcbiAgICAvLyBFUzMgYXJndW1lbnRzIGZhbGxiYWNrXG4gICAgOiAoQiA9IGNvZihPKSkgPT0gJ09iamVjdCcgJiYgdHlwZW9mIE8uY2FsbGVlID09ICdmdW5jdGlvbicgPyAnQXJndW1lbnRzJyA6IEI7XG59OyIsInZhciB0b1N0cmluZyA9IHt9LnRvU3RyaW5nO1xuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uKGl0KXtcbiAgcmV0dXJuIHRvU3RyaW5nLmNhbGwoaXQpLnNsaWNlKDgsIC0xKTtcbn07IiwiJ3VzZSBzdHJpY3QnO1xudmFyIGRQICAgICAgICAgID0gcmVxdWlyZSgnLi9fb2JqZWN0LWRwJykuZlxuICAsIGNyZWF0ZSAgICAgID0gcmVxdWlyZSgnLi9fb2JqZWN0LWNyZWF0ZScpXG4gICwgaGlkZSAgICAgICAgPSByZXF1aXJlKCcuL19oaWRlJylcbiAgLCByZWRlZmluZUFsbCA9IHJlcXVpcmUoJy4vX3JlZGVmaW5lLWFsbCcpXG4gICwgY3R4ICAgICAgICAgPSByZXF1aXJlKCcuL19jdHgnKVxuICAsIGFuSW5zdGFuY2UgID0gcmVxdWlyZSgnLi9fYW4taW5zdGFuY2UnKVxuICAsIGRlZmluZWQgICAgID0gcmVxdWlyZSgnLi9fZGVmaW5lZCcpXG4gICwgZm9yT2YgICAgICAgPSByZXF1aXJlKCcuL19mb3Itb2YnKVxuICAsICRpdGVyRGVmaW5lID0gcmVxdWlyZSgnLi9faXRlci1kZWZpbmUnKVxuICAsIHN0ZXAgICAgICAgID0gcmVxdWlyZSgnLi9faXRlci1zdGVwJylcbiAgLCBzZXRTcGVjaWVzICA9IHJlcXVpcmUoJy4vX3NldC1zcGVjaWVzJylcbiAgLCBERVNDUklQVE9SUyA9IHJlcXVpcmUoJy4vX2Rlc2NyaXB0b3JzJylcbiAgLCBmYXN0S2V5ICAgICA9IHJlcXVpcmUoJy4vX21ldGEnKS5mYXN0S2V5XG4gICwgU0laRSAgICAgICAgPSBERVNDUklQVE9SUyA/ICdfcycgOiAnc2l6ZSc7XG5cbnZhciBnZXRFbnRyeSA9IGZ1bmN0aW9uKHRoYXQsIGtleSl7XG4gIC8vIGZhc3QgY2FzZVxuICB2YXIgaW5kZXggPSBmYXN0S2V5KGtleSksIGVudHJ5O1xuICBpZihpbmRleCAhPT0gJ0YnKXJldHVybiB0aGF0Ll9pW2luZGV4XTtcbiAgLy8gZnJvemVuIG9iamVjdCBjYXNlXG4gIGZvcihlbnRyeSA9IHRoYXQuX2Y7IGVudHJ5OyBlbnRyeSA9IGVudHJ5Lm4pe1xuICAgIGlmKGVudHJ5LmsgPT0ga2V5KXJldHVybiBlbnRyeTtcbiAgfVxufTtcblxubW9kdWxlLmV4cG9ydHMgPSB7XG4gIGdldENvbnN0cnVjdG9yOiBmdW5jdGlvbih3cmFwcGVyLCBOQU1FLCBJU19NQVAsIEFEREVSKXtcbiAgICB2YXIgQyA9IHdyYXBwZXIoZnVuY3Rpb24odGhhdCwgaXRlcmFibGUpe1xuICAgICAgYW5JbnN0YW5jZSh0aGF0LCBDLCBOQU1FLCAnX2knKTtcbiAgICAgIHRoYXQuX2kgPSBjcmVhdGUobnVsbCk7IC8vIGluZGV4XG4gICAgICB0aGF0Ll9mID0gdW5kZWZpbmVkOyAgICAvLyBmaXJzdCBlbnRyeVxuICAgICAgdGhhdC5fbCA9IHVuZGVmaW5lZDsgICAgLy8gbGFzdCBlbnRyeVxuICAgICAgdGhhdFtTSVpFXSA9IDA7ICAgICAgICAgLy8gc2l6ZVxuICAgICAgaWYoaXRlcmFibGUgIT0gdW5kZWZpbmVkKWZvck9mKGl0ZXJhYmxlLCBJU19NQVAsIHRoYXRbQURERVJdLCB0aGF0KTtcbiAgICB9KTtcbiAgICByZWRlZmluZUFsbChDLnByb3RvdHlwZSwge1xuICAgICAgLy8gMjMuMS4zLjEgTWFwLnByb3RvdHlwZS5jbGVhcigpXG4gICAgICAvLyAyMy4yLjMuMiBTZXQucHJvdG90eXBlLmNsZWFyKClcbiAgICAgIGNsZWFyOiBmdW5jdGlvbiBjbGVhcigpe1xuICAgICAgICBmb3IodmFyIHRoYXQgPSB0aGlzLCBkYXRhID0gdGhhdC5faSwgZW50cnkgPSB0aGF0Ll9mOyBlbnRyeTsgZW50cnkgPSBlbnRyeS5uKXtcbiAgICAgICAgICBlbnRyeS5yID0gdHJ1ZTtcbiAgICAgICAgICBpZihlbnRyeS5wKWVudHJ5LnAgPSBlbnRyeS5wLm4gPSB1bmRlZmluZWQ7XG4gICAgICAgICAgZGVsZXRlIGRhdGFbZW50cnkuaV07XG4gICAgICAgIH1cbiAgICAgICAgdGhhdC5fZiA9IHRoYXQuX2wgPSB1bmRlZmluZWQ7XG4gICAgICAgIHRoYXRbU0laRV0gPSAwO1xuICAgICAgfSxcbiAgICAgIC8vIDIzLjEuMy4zIE1hcC5wcm90b3R5cGUuZGVsZXRlKGtleSlcbiAgICAgIC8vIDIzLjIuMy40IFNldC5wcm90b3R5cGUuZGVsZXRlKHZhbHVlKVxuICAgICAgJ2RlbGV0ZSc6IGZ1bmN0aW9uKGtleSl7XG4gICAgICAgIHZhciB0aGF0ICA9IHRoaXNcbiAgICAgICAgICAsIGVudHJ5ID0gZ2V0RW50cnkodGhhdCwga2V5KTtcbiAgICAgICAgaWYoZW50cnkpe1xuICAgICAgICAgIHZhciBuZXh0ID0gZW50cnkublxuICAgICAgICAgICAgLCBwcmV2ID0gZW50cnkucDtcbiAgICAgICAgICBkZWxldGUgdGhhdC5faVtlbnRyeS5pXTtcbiAgICAgICAgICBlbnRyeS5yID0gdHJ1ZTtcbiAgICAgICAgICBpZihwcmV2KXByZXYubiA9IG5leHQ7XG4gICAgICAgICAgaWYobmV4dCluZXh0LnAgPSBwcmV2O1xuICAgICAgICAgIGlmKHRoYXQuX2YgPT0gZW50cnkpdGhhdC5fZiA9IG5leHQ7XG4gICAgICAgICAgaWYodGhhdC5fbCA9PSBlbnRyeSl0aGF0Ll9sID0gcHJldjtcbiAgICAgICAgICB0aGF0W1NJWkVdLS07XG4gICAgICAgIH0gcmV0dXJuICEhZW50cnk7XG4gICAgICB9LFxuICAgICAgLy8gMjMuMi4zLjYgU2V0LnByb3RvdHlwZS5mb3JFYWNoKGNhbGxiYWNrZm4sIHRoaXNBcmcgPSB1bmRlZmluZWQpXG4gICAgICAvLyAyMy4xLjMuNSBNYXAucHJvdG90eXBlLmZvckVhY2goY2FsbGJhY2tmbiwgdGhpc0FyZyA9IHVuZGVmaW5lZClcbiAgICAgIGZvckVhY2g6IGZ1bmN0aW9uIGZvckVhY2goY2FsbGJhY2tmbiAvKiwgdGhhdCA9IHVuZGVmaW5lZCAqLyl7XG4gICAgICAgIGFuSW5zdGFuY2UodGhpcywgQywgJ2ZvckVhY2gnKTtcbiAgICAgICAgdmFyIGYgPSBjdHgoY2FsbGJhY2tmbiwgYXJndW1lbnRzLmxlbmd0aCA+IDEgPyBhcmd1bWVudHNbMV0gOiB1bmRlZmluZWQsIDMpXG4gICAgICAgICAgLCBlbnRyeTtcbiAgICAgICAgd2hpbGUoZW50cnkgPSBlbnRyeSA/IGVudHJ5Lm4gOiB0aGlzLl9mKXtcbiAgICAgICAgICBmKGVudHJ5LnYsIGVudHJ5LmssIHRoaXMpO1xuICAgICAgICAgIC8vIHJldmVydCB0byB0aGUgbGFzdCBleGlzdGluZyBlbnRyeVxuICAgICAgICAgIHdoaWxlKGVudHJ5ICYmIGVudHJ5LnIpZW50cnkgPSBlbnRyeS5wO1xuICAgICAgICB9XG4gICAgICB9LFxuICAgICAgLy8gMjMuMS4zLjcgTWFwLnByb3RvdHlwZS5oYXMoa2V5KVxuICAgICAgLy8gMjMuMi4zLjcgU2V0LnByb3RvdHlwZS5oYXModmFsdWUpXG4gICAgICBoYXM6IGZ1bmN0aW9uIGhhcyhrZXkpe1xuICAgICAgICByZXR1cm4gISFnZXRFbnRyeSh0aGlzLCBrZXkpO1xuICAgICAgfVxuICAgIH0pO1xuICAgIGlmKERFU0NSSVBUT1JTKWRQKEMucHJvdG90eXBlLCAnc2l6ZScsIHtcbiAgICAgIGdldDogZnVuY3Rpb24oKXtcbiAgICAgICAgcmV0dXJuIGRlZmluZWQodGhpc1tTSVpFXSk7XG4gICAgICB9XG4gICAgfSk7XG4gICAgcmV0dXJuIEM7XG4gIH0sXG4gIGRlZjogZnVuY3Rpb24odGhhdCwga2V5LCB2YWx1ZSl7XG4gICAgdmFyIGVudHJ5ID0gZ2V0RW50cnkodGhhdCwga2V5KVxuICAgICAgLCBwcmV2LCBpbmRleDtcbiAgICAvLyBjaGFuZ2UgZXhpc3RpbmcgZW50cnlcbiAgICBpZihlbnRyeSl7XG4gICAgICBlbnRyeS52ID0gdmFsdWU7XG4gICAgLy8gY3JlYXRlIG5ldyBlbnRyeVxuICAgIH0gZWxzZSB7XG4gICAgICB0aGF0Ll9sID0gZW50cnkgPSB7XG4gICAgICAgIGk6IGluZGV4ID0gZmFzdEtleShrZXksIHRydWUpLCAvLyA8LSBpbmRleFxuICAgICAgICBrOiBrZXksICAgICAgICAgICAgICAgICAgICAgICAgLy8gPC0ga2V5XG4gICAgICAgIHY6IHZhbHVlLCAgICAgICAgICAgICAgICAgICAgICAvLyA8LSB2YWx1ZVxuICAgICAgICBwOiBwcmV2ID0gdGhhdC5fbCwgICAgICAgICAgICAgLy8gPC0gcHJldmlvdXMgZW50cnlcbiAgICAgICAgbjogdW5kZWZpbmVkLCAgICAgICAgICAgICAgICAgIC8vIDwtIG5leHQgZW50cnlcbiAgICAgICAgcjogZmFsc2UgICAgICAgICAgICAgICAgICAgICAgIC8vIDwtIHJlbW92ZWRcbiAgICAgIH07XG4gICAgICBpZighdGhhdC5fZil0aGF0Ll9mID0gZW50cnk7XG4gICAgICBpZihwcmV2KXByZXYubiA9IGVudHJ5O1xuICAgICAgdGhhdFtTSVpFXSsrO1xuICAgICAgLy8gYWRkIHRvIGluZGV4XG4gICAgICBpZihpbmRleCAhPT0gJ0YnKXRoYXQuX2lbaW5kZXhdID0gZW50cnk7XG4gICAgfSByZXR1cm4gdGhhdDtcbiAgfSxcbiAgZ2V0RW50cnk6IGdldEVudHJ5LFxuICBzZXRTdHJvbmc6IGZ1bmN0aW9uKEMsIE5BTUUsIElTX01BUCl7XG4gICAgLy8gYWRkIC5rZXlzLCAudmFsdWVzLCAuZW50cmllcywgW0BAaXRlcmF0b3JdXG4gICAgLy8gMjMuMS4zLjQsIDIzLjEuMy44LCAyMy4xLjMuMTEsIDIzLjEuMy4xMiwgMjMuMi4zLjUsIDIzLjIuMy44LCAyMy4yLjMuMTAsIDIzLjIuMy4xMVxuICAgICRpdGVyRGVmaW5lKEMsIE5BTUUsIGZ1bmN0aW9uKGl0ZXJhdGVkLCBraW5kKXtcbiAgICAgIHRoaXMuX3QgPSBpdGVyYXRlZDsgIC8vIHRhcmdldFxuICAgICAgdGhpcy5fayA9IGtpbmQ7ICAgICAgLy8ga2luZFxuICAgICAgdGhpcy5fbCA9IHVuZGVmaW5lZDsgLy8gcHJldmlvdXNcbiAgICB9LCBmdW5jdGlvbigpe1xuICAgICAgdmFyIHRoYXQgID0gdGhpc1xuICAgICAgICAsIGtpbmQgID0gdGhhdC5fa1xuICAgICAgICAsIGVudHJ5ID0gdGhhdC5fbDtcbiAgICAgIC8vIHJldmVydCB0byB0aGUgbGFzdCBleGlzdGluZyBlbnRyeVxuICAgICAgd2hpbGUoZW50cnkgJiYgZW50cnkucillbnRyeSA9IGVudHJ5LnA7XG4gICAgICAvLyBnZXQgbmV4dCBlbnRyeVxuICAgICAgaWYoIXRoYXQuX3QgfHwgISh0aGF0Ll9sID0gZW50cnkgPSBlbnRyeSA/IGVudHJ5Lm4gOiB0aGF0Ll90Ll9mKSl7XG4gICAgICAgIC8vIG9yIGZpbmlzaCB0aGUgaXRlcmF0aW9uXG4gICAgICAgIHRoYXQuX3QgPSB1bmRlZmluZWQ7XG4gICAgICAgIHJldHVybiBzdGVwKDEpO1xuICAgICAgfVxuICAgICAgLy8gcmV0dXJuIHN0ZXAgYnkga2luZFxuICAgICAgaWYoa2luZCA9PSAna2V5cycgIClyZXR1cm4gc3RlcCgwLCBlbnRyeS5rKTtcbiAgICAgIGlmKGtpbmQgPT0gJ3ZhbHVlcycpcmV0dXJuIHN0ZXAoMCwgZW50cnkudik7XG4gICAgICByZXR1cm4gc3RlcCgwLCBbZW50cnkuaywgZW50cnkudl0pO1xuICAgIH0sIElTX01BUCA/ICdlbnRyaWVzJyA6ICd2YWx1ZXMnICwgIUlTX01BUCwgdHJ1ZSk7XG5cbiAgICAvLyBhZGQgW0BAc3BlY2llc10sIDIzLjEuMi4yLCAyMy4yLjIuMlxuICAgIHNldFNwZWNpZXMoTkFNRSk7XG4gIH1cbn07IiwiLy8gaHR0cHM6Ly9naXRodWIuY29tL0RhdmlkQnJ1YW50L01hcC1TZXQucHJvdG90eXBlLnRvSlNPTlxudmFyIGNsYXNzb2YgPSByZXF1aXJlKCcuL19jbGFzc29mJylcbiAgLCBmcm9tICAgID0gcmVxdWlyZSgnLi9fYXJyYXktZnJvbS1pdGVyYWJsZScpO1xubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbihOQU1FKXtcbiAgcmV0dXJuIGZ1bmN0aW9uIHRvSlNPTigpe1xuICAgIGlmKGNsYXNzb2YodGhpcykgIT0gTkFNRSl0aHJvdyBUeXBlRXJyb3IoTkFNRSArIFwiI3RvSlNPTiBpc24ndCBnZW5lcmljXCIpO1xuICAgIHJldHVybiBmcm9tKHRoaXMpO1xuICB9O1xufTsiLCIndXNlIHN0cmljdCc7XG52YXIgcmVkZWZpbmVBbGwgICAgICAgPSByZXF1aXJlKCcuL19yZWRlZmluZS1hbGwnKVxuICAsIGdldFdlYWsgICAgICAgICAgID0gcmVxdWlyZSgnLi9fbWV0YScpLmdldFdlYWtcbiAgLCBhbk9iamVjdCAgICAgICAgICA9IHJlcXVpcmUoJy4vX2FuLW9iamVjdCcpXG4gICwgaXNPYmplY3QgICAgICAgICAgPSByZXF1aXJlKCcuL19pcy1vYmplY3QnKVxuICAsIGFuSW5zdGFuY2UgICAgICAgID0gcmVxdWlyZSgnLi9fYW4taW5zdGFuY2UnKVxuICAsIGZvck9mICAgICAgICAgICAgID0gcmVxdWlyZSgnLi9fZm9yLW9mJylcbiAgLCBjcmVhdGVBcnJheU1ldGhvZCA9IHJlcXVpcmUoJy4vX2FycmF5LW1ldGhvZHMnKVxuICAsICRoYXMgICAgICAgICAgICAgID0gcmVxdWlyZSgnLi9faGFzJylcbiAgLCBhcnJheUZpbmQgICAgICAgICA9IGNyZWF0ZUFycmF5TWV0aG9kKDUpXG4gICwgYXJyYXlGaW5kSW5kZXggICAgPSBjcmVhdGVBcnJheU1ldGhvZCg2KVxuICAsIGlkICAgICAgICAgICAgICAgID0gMDtcblxuLy8gZmFsbGJhY2sgZm9yIHVuY2F1Z2h0IGZyb3plbiBrZXlzXG52YXIgdW5jYXVnaHRGcm96ZW5TdG9yZSA9IGZ1bmN0aW9uKHRoYXQpe1xuICByZXR1cm4gdGhhdC5fbCB8fCAodGhhdC5fbCA9IG5ldyBVbmNhdWdodEZyb3plblN0b3JlKTtcbn07XG52YXIgVW5jYXVnaHRGcm96ZW5TdG9yZSA9IGZ1bmN0aW9uKCl7XG4gIHRoaXMuYSA9IFtdO1xufTtcbnZhciBmaW5kVW5jYXVnaHRGcm96ZW4gPSBmdW5jdGlvbihzdG9yZSwga2V5KXtcbiAgcmV0dXJuIGFycmF5RmluZChzdG9yZS5hLCBmdW5jdGlvbihpdCl7XG4gICAgcmV0dXJuIGl0WzBdID09PSBrZXk7XG4gIH0pO1xufTtcblVuY2F1Z2h0RnJvemVuU3RvcmUucHJvdG90eXBlID0ge1xuICBnZXQ6IGZ1bmN0aW9uKGtleSl7XG4gICAgdmFyIGVudHJ5ID0gZmluZFVuY2F1Z2h0RnJvemVuKHRoaXMsIGtleSk7XG4gICAgaWYoZW50cnkpcmV0dXJuIGVudHJ5WzFdO1xuICB9LFxuICBoYXM6IGZ1bmN0aW9uKGtleSl7XG4gICAgcmV0dXJuICEhZmluZFVuY2F1Z2h0RnJvemVuKHRoaXMsIGtleSk7XG4gIH0sXG4gIHNldDogZnVuY3Rpb24oa2V5LCB2YWx1ZSl7XG4gICAgdmFyIGVudHJ5ID0gZmluZFVuY2F1Z2h0RnJvemVuKHRoaXMsIGtleSk7XG4gICAgaWYoZW50cnkpZW50cnlbMV0gPSB2YWx1ZTtcbiAgICBlbHNlIHRoaXMuYS5wdXNoKFtrZXksIHZhbHVlXSk7XG4gIH0sXG4gICdkZWxldGUnOiBmdW5jdGlvbihrZXkpe1xuICAgIHZhciBpbmRleCA9IGFycmF5RmluZEluZGV4KHRoaXMuYSwgZnVuY3Rpb24oaXQpe1xuICAgICAgcmV0dXJuIGl0WzBdID09PSBrZXk7XG4gICAgfSk7XG4gICAgaWYofmluZGV4KXRoaXMuYS5zcGxpY2UoaW5kZXgsIDEpO1xuICAgIHJldHVybiAhIX5pbmRleDtcbiAgfVxufTtcblxubW9kdWxlLmV4cG9ydHMgPSB7XG4gIGdldENvbnN0cnVjdG9yOiBmdW5jdGlvbih3cmFwcGVyLCBOQU1FLCBJU19NQVAsIEFEREVSKXtcbiAgICB2YXIgQyA9IHdyYXBwZXIoZnVuY3Rpb24odGhhdCwgaXRlcmFibGUpe1xuICAgICAgYW5JbnN0YW5jZSh0aGF0LCBDLCBOQU1FLCAnX2knKTtcbiAgICAgIHRoYXQuX2kgPSBpZCsrOyAgICAgIC8vIGNvbGxlY3Rpb24gaWRcbiAgICAgIHRoYXQuX2wgPSB1bmRlZmluZWQ7IC8vIGxlYWsgc3RvcmUgZm9yIHVuY2F1Z2h0IGZyb3plbiBvYmplY3RzXG4gICAgICBpZihpdGVyYWJsZSAhPSB1bmRlZmluZWQpZm9yT2YoaXRlcmFibGUsIElTX01BUCwgdGhhdFtBRERFUl0sIHRoYXQpO1xuICAgIH0pO1xuICAgIHJlZGVmaW5lQWxsKEMucHJvdG90eXBlLCB7XG4gICAgICAvLyAyMy4zLjMuMiBXZWFrTWFwLnByb3RvdHlwZS5kZWxldGUoa2V5KVxuICAgICAgLy8gMjMuNC4zLjMgV2Vha1NldC5wcm90b3R5cGUuZGVsZXRlKHZhbHVlKVxuICAgICAgJ2RlbGV0ZSc6IGZ1bmN0aW9uKGtleSl7XG4gICAgICAgIGlmKCFpc09iamVjdChrZXkpKXJldHVybiBmYWxzZTtcbiAgICAgICAgdmFyIGRhdGEgPSBnZXRXZWFrKGtleSk7XG4gICAgICAgIGlmKGRhdGEgPT09IHRydWUpcmV0dXJuIHVuY2F1Z2h0RnJvemVuU3RvcmUodGhpcylbJ2RlbGV0ZSddKGtleSk7XG4gICAgICAgIHJldHVybiBkYXRhICYmICRoYXMoZGF0YSwgdGhpcy5faSkgJiYgZGVsZXRlIGRhdGFbdGhpcy5faV07XG4gICAgICB9LFxuICAgICAgLy8gMjMuMy4zLjQgV2Vha01hcC5wcm90b3R5cGUuaGFzKGtleSlcbiAgICAgIC8vIDIzLjQuMy40IFdlYWtTZXQucHJvdG90eXBlLmhhcyh2YWx1ZSlcbiAgICAgIGhhczogZnVuY3Rpb24gaGFzKGtleSl7XG4gICAgICAgIGlmKCFpc09iamVjdChrZXkpKXJldHVybiBmYWxzZTtcbiAgICAgICAgdmFyIGRhdGEgPSBnZXRXZWFrKGtleSk7XG4gICAgICAgIGlmKGRhdGEgPT09IHRydWUpcmV0dXJuIHVuY2F1Z2h0RnJvemVuU3RvcmUodGhpcykuaGFzKGtleSk7XG4gICAgICAgIHJldHVybiBkYXRhICYmICRoYXMoZGF0YSwgdGhpcy5faSk7XG4gICAgICB9XG4gICAgfSk7XG4gICAgcmV0dXJuIEM7XG4gIH0sXG4gIGRlZjogZnVuY3Rpb24odGhhdCwga2V5LCB2YWx1ZSl7XG4gICAgdmFyIGRhdGEgPSBnZXRXZWFrKGFuT2JqZWN0KGtleSksIHRydWUpO1xuICAgIGlmKGRhdGEgPT09IHRydWUpdW5jYXVnaHRGcm96ZW5TdG9yZSh0aGF0KS5zZXQoa2V5LCB2YWx1ZSk7XG4gICAgZWxzZSBkYXRhW3RoYXQuX2ldID0gdmFsdWU7XG4gICAgcmV0dXJuIHRoYXQ7XG4gIH0sXG4gIHVmc3RvcmU6IHVuY2F1Z2h0RnJvemVuU3RvcmVcbn07IiwiJ3VzZSBzdHJpY3QnO1xudmFyIGdsb2JhbCAgICAgICAgICAgID0gcmVxdWlyZSgnLi9fZ2xvYmFsJylcbiAgLCAkZXhwb3J0ICAgICAgICAgICA9IHJlcXVpcmUoJy4vX2V4cG9ydCcpXG4gICwgcmVkZWZpbmUgICAgICAgICAgPSByZXF1aXJlKCcuL19yZWRlZmluZScpXG4gICwgcmVkZWZpbmVBbGwgICAgICAgPSByZXF1aXJlKCcuL19yZWRlZmluZS1hbGwnKVxuICAsIG1ldGEgICAgICAgICAgICAgID0gcmVxdWlyZSgnLi9fbWV0YScpXG4gICwgZm9yT2YgICAgICAgICAgICAgPSByZXF1aXJlKCcuL19mb3Itb2YnKVxuICAsIGFuSW5zdGFuY2UgICAgICAgID0gcmVxdWlyZSgnLi9fYW4taW5zdGFuY2UnKVxuICAsIGlzT2JqZWN0ICAgICAgICAgID0gcmVxdWlyZSgnLi9faXMtb2JqZWN0JylcbiAgLCBmYWlscyAgICAgICAgICAgICA9IHJlcXVpcmUoJy4vX2ZhaWxzJylcbiAgLCAkaXRlckRldGVjdCAgICAgICA9IHJlcXVpcmUoJy4vX2l0ZXItZGV0ZWN0JylcbiAgLCBzZXRUb1N0cmluZ1RhZyAgICA9IHJlcXVpcmUoJy4vX3NldC10by1zdHJpbmctdGFnJylcbiAgLCBpbmhlcml0SWZSZXF1aXJlZCA9IHJlcXVpcmUoJy4vX2luaGVyaXQtaWYtcmVxdWlyZWQnKTtcblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbihOQU1FLCB3cmFwcGVyLCBtZXRob2RzLCBjb21tb24sIElTX01BUCwgSVNfV0VBSyl7XG4gIHZhciBCYXNlICA9IGdsb2JhbFtOQU1FXVxuICAgICwgQyAgICAgPSBCYXNlXG4gICAgLCBBRERFUiA9IElTX01BUCA/ICdzZXQnIDogJ2FkZCdcbiAgICAsIHByb3RvID0gQyAmJiBDLnByb3RvdHlwZVxuICAgICwgTyAgICAgPSB7fTtcbiAgdmFyIGZpeE1ldGhvZCA9IGZ1bmN0aW9uKEtFWSl7XG4gICAgdmFyIGZuID0gcHJvdG9bS0VZXTtcbiAgICByZWRlZmluZShwcm90bywgS0VZLFxuICAgICAgS0VZID09ICdkZWxldGUnID8gZnVuY3Rpb24oYSl7XG4gICAgICAgIHJldHVybiBJU19XRUFLICYmICFpc09iamVjdChhKSA/IGZhbHNlIDogZm4uY2FsbCh0aGlzLCBhID09PSAwID8gMCA6IGEpO1xuICAgICAgfSA6IEtFWSA9PSAnaGFzJyA/IGZ1bmN0aW9uIGhhcyhhKXtcbiAgICAgICAgcmV0dXJuIElTX1dFQUsgJiYgIWlzT2JqZWN0KGEpID8gZmFsc2UgOiBmbi5jYWxsKHRoaXMsIGEgPT09IDAgPyAwIDogYSk7XG4gICAgICB9IDogS0VZID09ICdnZXQnID8gZnVuY3Rpb24gZ2V0KGEpe1xuICAgICAgICByZXR1cm4gSVNfV0VBSyAmJiAhaXNPYmplY3QoYSkgPyB1bmRlZmluZWQgOiBmbi5jYWxsKHRoaXMsIGEgPT09IDAgPyAwIDogYSk7XG4gICAgICB9IDogS0VZID09ICdhZGQnID8gZnVuY3Rpb24gYWRkKGEpeyBmbi5jYWxsKHRoaXMsIGEgPT09IDAgPyAwIDogYSk7IHJldHVybiB0aGlzOyB9XG4gICAgICAgIDogZnVuY3Rpb24gc2V0KGEsIGIpeyBmbi5jYWxsKHRoaXMsIGEgPT09IDAgPyAwIDogYSwgYik7IHJldHVybiB0aGlzOyB9XG4gICAgKTtcbiAgfTtcbiAgaWYodHlwZW9mIEMgIT0gJ2Z1bmN0aW9uJyB8fCAhKElTX1dFQUsgfHwgcHJvdG8uZm9yRWFjaCAmJiAhZmFpbHMoZnVuY3Rpb24oKXtcbiAgICBuZXcgQygpLmVudHJpZXMoKS5uZXh0KCk7XG4gIH0pKSl7XG4gICAgLy8gY3JlYXRlIGNvbGxlY3Rpb24gY29uc3RydWN0b3JcbiAgICBDID0gY29tbW9uLmdldENvbnN0cnVjdG9yKHdyYXBwZXIsIE5BTUUsIElTX01BUCwgQURERVIpO1xuICAgIHJlZGVmaW5lQWxsKEMucHJvdG90eXBlLCBtZXRob2RzKTtcbiAgICBtZXRhLk5FRUQgPSB0cnVlO1xuICB9IGVsc2Uge1xuICAgIHZhciBpbnN0YW5jZSAgICAgICAgICAgICA9IG5ldyBDXG4gICAgICAvLyBlYXJseSBpbXBsZW1lbnRhdGlvbnMgbm90IHN1cHBvcnRzIGNoYWluaW5nXG4gICAgICAsIEhBU05UX0NIQUlOSU5HICAgICAgID0gaW5zdGFuY2VbQURERVJdKElTX1dFQUsgPyB7fSA6IC0wLCAxKSAhPSBpbnN0YW5jZVxuICAgICAgLy8gVjggfiAgQ2hyb21pdW0gNDAtIHdlYWstY29sbGVjdGlvbnMgdGhyb3dzIG9uIHByaW1pdGl2ZXMsIGJ1dCBzaG91bGQgcmV0dXJuIGZhbHNlXG4gICAgICAsIFRIUk9XU19PTl9QUklNSVRJVkVTID0gZmFpbHMoZnVuY3Rpb24oKXsgaW5zdGFuY2UuaGFzKDEpOyB9KVxuICAgICAgLy8gbW9zdCBlYXJseSBpbXBsZW1lbnRhdGlvbnMgZG9lc24ndCBzdXBwb3J0cyBpdGVyYWJsZXMsIG1vc3QgbW9kZXJuIC0gbm90IGNsb3NlIGl0IGNvcnJlY3RseVxuICAgICAgLCBBQ0NFUFRfSVRFUkFCTEVTICAgICA9ICRpdGVyRGV0ZWN0KGZ1bmN0aW9uKGl0ZXIpeyBuZXcgQyhpdGVyKTsgfSkgLy8gZXNsaW50LWRpc2FibGUtbGluZSBuby1uZXdcbiAgICAgIC8vIGZvciBlYXJseSBpbXBsZW1lbnRhdGlvbnMgLTAgYW5kICswIG5vdCB0aGUgc2FtZVxuICAgICAgLCBCVUdHWV9aRVJPID0gIUlTX1dFQUsgJiYgZmFpbHMoZnVuY3Rpb24oKXtcbiAgICAgICAgLy8gVjggfiBDaHJvbWl1bSA0Mi0gZmFpbHMgb25seSB3aXRoIDUrIGVsZW1lbnRzXG4gICAgICAgIHZhciAkaW5zdGFuY2UgPSBuZXcgQygpXG4gICAgICAgICAgLCBpbmRleCAgICAgPSA1O1xuICAgICAgICB3aGlsZShpbmRleC0tKSRpbnN0YW5jZVtBRERFUl0oaW5kZXgsIGluZGV4KTtcbiAgICAgICAgcmV0dXJuICEkaW5zdGFuY2UuaGFzKC0wKTtcbiAgICAgIH0pO1xuICAgIGlmKCFBQ0NFUFRfSVRFUkFCTEVTKXsgXG4gICAgICBDID0gd3JhcHBlcihmdW5jdGlvbih0YXJnZXQsIGl0ZXJhYmxlKXtcbiAgICAgICAgYW5JbnN0YW5jZSh0YXJnZXQsIEMsIE5BTUUpO1xuICAgICAgICB2YXIgdGhhdCA9IGluaGVyaXRJZlJlcXVpcmVkKG5ldyBCYXNlLCB0YXJnZXQsIEMpO1xuICAgICAgICBpZihpdGVyYWJsZSAhPSB1bmRlZmluZWQpZm9yT2YoaXRlcmFibGUsIElTX01BUCwgdGhhdFtBRERFUl0sIHRoYXQpO1xuICAgICAgICByZXR1cm4gdGhhdDtcbiAgICAgIH0pO1xuICAgICAgQy5wcm90b3R5cGUgPSBwcm90bztcbiAgICAgIHByb3RvLmNvbnN0cnVjdG9yID0gQztcbiAgICB9XG4gICAgaWYoVEhST1dTX09OX1BSSU1JVElWRVMgfHwgQlVHR1lfWkVSTyl7XG4gICAgICBmaXhNZXRob2QoJ2RlbGV0ZScpO1xuICAgICAgZml4TWV0aG9kKCdoYXMnKTtcbiAgICAgIElTX01BUCAmJiBmaXhNZXRob2QoJ2dldCcpO1xuICAgIH1cbiAgICBpZihCVUdHWV9aRVJPIHx8IEhBU05UX0NIQUlOSU5HKWZpeE1ldGhvZChBRERFUik7XG4gICAgLy8gd2VhayBjb2xsZWN0aW9ucyBzaG91bGQgbm90IGNvbnRhaW5zIC5jbGVhciBtZXRob2RcbiAgICBpZihJU19XRUFLICYmIHByb3RvLmNsZWFyKWRlbGV0ZSBwcm90by5jbGVhcjtcbiAgfVxuXG4gIHNldFRvU3RyaW5nVGFnKEMsIE5BTUUpO1xuXG4gIE9bTkFNRV0gPSBDO1xuICAkZXhwb3J0KCRleHBvcnQuRyArICRleHBvcnQuVyArICRleHBvcnQuRiAqIChDICE9IEJhc2UpLCBPKTtcblxuICBpZighSVNfV0VBSyljb21tb24uc2V0U3Ryb25nKEMsIE5BTUUsIElTX01BUCk7XG5cbiAgcmV0dXJuIEM7XG59OyIsInZhciBjb3JlID0gbW9kdWxlLmV4cG9ydHMgPSB7dmVyc2lvbjogJzIuMi4xJ307XG5pZih0eXBlb2YgX19lID09ICdudW1iZXInKV9fZSA9IGNvcmU7IC8vIGVzbGludC1kaXNhYmxlLWxpbmUgbm8tdW5kZWYiLCIvLyBvcHRpb25hbCAvIHNpbXBsZSBjb250ZXh0IGJpbmRpbmdcbnZhciBhRnVuY3Rpb24gPSByZXF1aXJlKCcuL19hLWZ1bmN0aW9uJyk7XG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uKGZuLCB0aGF0LCBsZW5ndGgpe1xuICBhRnVuY3Rpb24oZm4pO1xuICBpZih0aGF0ID09PSB1bmRlZmluZWQpcmV0dXJuIGZuO1xuICBzd2l0Y2gobGVuZ3RoKXtcbiAgICBjYXNlIDE6IHJldHVybiBmdW5jdGlvbihhKXtcbiAgICAgIHJldHVybiBmbi5jYWxsKHRoYXQsIGEpO1xuICAgIH07XG4gICAgY2FzZSAyOiByZXR1cm4gZnVuY3Rpb24oYSwgYil7XG4gICAgICByZXR1cm4gZm4uY2FsbCh0aGF0LCBhLCBiKTtcbiAgICB9O1xuICAgIGNhc2UgMzogcmV0dXJuIGZ1bmN0aW9uKGEsIGIsIGMpe1xuICAgICAgcmV0dXJuIGZuLmNhbGwodGhhdCwgYSwgYiwgYyk7XG4gICAgfTtcbiAgfVxuICByZXR1cm4gZnVuY3Rpb24oLyogLi4uYXJncyAqLyl7XG4gICAgcmV0dXJuIGZuLmFwcGx5KHRoYXQsIGFyZ3VtZW50cyk7XG4gIH07XG59OyIsIid1c2Ugc3RyaWN0JztcclxudmFyIGFuT2JqZWN0ICAgID0gcmVxdWlyZSgnLi9fYW4tb2JqZWN0JylcclxuICAsIHRvUHJpbWl0aXZlID0gcmVxdWlyZSgnLi9fdG8tcHJpbWl0aXZlJylcclxuICAsIE5VTUJFUiAgICAgID0gJ251bWJlcic7XHJcblxyXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uKGhpbnQpe1xyXG4gIGlmKGhpbnQgIT09ICdzdHJpbmcnICYmIGhpbnQgIT09IE5VTUJFUiAmJiBoaW50ICE9PSAnZGVmYXVsdCcpdGhyb3cgVHlwZUVycm9yKCdJbmNvcnJlY3QgaGludCcpO1xyXG4gIHJldHVybiB0b1ByaW1pdGl2ZShhbk9iamVjdCh0aGlzKSwgaGludCAhPSBOVU1CRVIpO1xyXG59OyIsIi8vIDcuMi4xIFJlcXVpcmVPYmplY3RDb2VyY2libGUoYXJndW1lbnQpXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uKGl0KXtcbiAgaWYoaXQgPT0gdW5kZWZpbmVkKXRocm93IFR5cGVFcnJvcihcIkNhbid0IGNhbGwgbWV0aG9kIG9uICBcIiArIGl0KTtcbiAgcmV0dXJuIGl0O1xufTsiLCIvLyBUaGFuaydzIElFOCBmb3IgaGlzIGZ1bm55IGRlZmluZVByb3BlcnR5XG5tb2R1bGUuZXhwb3J0cyA9ICFyZXF1aXJlKCcuL19mYWlscycpKGZ1bmN0aW9uKCl7XG4gIHJldHVybiBPYmplY3QuZGVmaW5lUHJvcGVydHkoe30sICdhJywge2dldDogZnVuY3Rpb24oKXsgcmV0dXJuIDc7IH19KS5hICE9IDc7XG59KTsiLCJ2YXIgaXNPYmplY3QgPSByZXF1aXJlKCcuL19pcy1vYmplY3QnKVxuICAsIGRvY3VtZW50ID0gcmVxdWlyZSgnLi9fZ2xvYmFsJykuZG9jdW1lbnRcbiAgLy8gaW4gb2xkIElFIHR5cGVvZiBkb2N1bWVudC5jcmVhdGVFbGVtZW50IGlzICdvYmplY3QnXG4gICwgaXMgPSBpc09iamVjdChkb2N1bWVudCkgJiYgaXNPYmplY3QoZG9jdW1lbnQuY3JlYXRlRWxlbWVudCk7XG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uKGl0KXtcbiAgcmV0dXJuIGlzID8gZG9jdW1lbnQuY3JlYXRlRWxlbWVudChpdCkgOiB7fTtcbn07IiwiLy8gSUUgOC0gZG9uJ3QgZW51bSBidWcga2V5c1xyXG5tb2R1bGUuZXhwb3J0cyA9IChcclxuICAnY29uc3RydWN0b3IsaGFzT3duUHJvcGVydHksaXNQcm90b3R5cGVPZixwcm9wZXJ0eUlzRW51bWVyYWJsZSx0b0xvY2FsZVN0cmluZyx0b1N0cmluZyx2YWx1ZU9mJ1xyXG4pLnNwbGl0KCcsJyk7IiwiLy8gYWxsIGVudW1lcmFibGUgb2JqZWN0IGtleXMsIGluY2x1ZGVzIHN5bWJvbHNcbnZhciBnZXRLZXlzID0gcmVxdWlyZSgnLi9fb2JqZWN0LWtleXMnKVxuICAsIGdPUFMgICAgPSByZXF1aXJlKCcuL19vYmplY3QtZ29wcycpXG4gICwgcElFICAgICA9IHJlcXVpcmUoJy4vX29iamVjdC1waWUnKTtcbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24oaXQpe1xuICB2YXIgcmVzdWx0ICAgICA9IGdldEtleXMoaXQpXG4gICAgLCBnZXRTeW1ib2xzID0gZ09QUy5mO1xuICBpZihnZXRTeW1ib2xzKXtcbiAgICB2YXIgc3ltYm9scyA9IGdldFN5bWJvbHMoaXQpXG4gICAgICAsIGlzRW51bSAgPSBwSUUuZlxuICAgICAgLCBpICAgICAgID0gMFxuICAgICAgLCBrZXk7XG4gICAgd2hpbGUoc3ltYm9scy5sZW5ndGggPiBpKWlmKGlzRW51bS5jYWxsKGl0LCBrZXkgPSBzeW1ib2xzW2krK10pKXJlc3VsdC5wdXNoKGtleSk7XG4gIH0gcmV0dXJuIHJlc3VsdDtcbn07IiwidmFyIGdsb2JhbCAgICA9IHJlcXVpcmUoJy4vX2dsb2JhbCcpXG4gICwgY29yZSAgICAgID0gcmVxdWlyZSgnLi9fY29yZScpXG4gICwgaGlkZSAgICAgID0gcmVxdWlyZSgnLi9faGlkZScpXG4gICwgcmVkZWZpbmUgID0gcmVxdWlyZSgnLi9fcmVkZWZpbmUnKVxuICAsIGN0eCAgICAgICA9IHJlcXVpcmUoJy4vX2N0eCcpXG4gICwgUFJPVE9UWVBFID0gJ3Byb3RvdHlwZSc7XG5cbnZhciAkZXhwb3J0ID0gZnVuY3Rpb24odHlwZSwgbmFtZSwgc291cmNlKXtcbiAgdmFyIElTX0ZPUkNFRCA9IHR5cGUgJiAkZXhwb3J0LkZcbiAgICAsIElTX0dMT0JBTCA9IHR5cGUgJiAkZXhwb3J0LkdcbiAgICAsIElTX1NUQVRJQyA9IHR5cGUgJiAkZXhwb3J0LlNcbiAgICAsIElTX1BST1RPICA9IHR5cGUgJiAkZXhwb3J0LlBcbiAgICAsIElTX0JJTkQgICA9IHR5cGUgJiAkZXhwb3J0LkJcbiAgICAsIHRhcmdldCAgICA9IElTX0dMT0JBTCA/IGdsb2JhbCA6IElTX1NUQVRJQyA/IGdsb2JhbFtuYW1lXSB8fCAoZ2xvYmFsW25hbWVdID0ge30pIDogKGdsb2JhbFtuYW1lXSB8fCB7fSlbUFJPVE9UWVBFXVxuICAgICwgZXhwb3J0cyAgID0gSVNfR0xPQkFMID8gY29yZSA6IGNvcmVbbmFtZV0gfHwgKGNvcmVbbmFtZV0gPSB7fSlcbiAgICAsIGV4cFByb3RvICA9IGV4cG9ydHNbUFJPVE9UWVBFXSB8fCAoZXhwb3J0c1tQUk9UT1RZUEVdID0ge30pXG4gICAgLCBrZXksIG93biwgb3V0LCBleHA7XG4gIGlmKElTX0dMT0JBTClzb3VyY2UgPSBuYW1lO1xuICBmb3Ioa2V5IGluIHNvdXJjZSl7XG4gICAgLy8gY29udGFpbnMgaW4gbmF0aXZlXG4gICAgb3duID0gIUlTX0ZPUkNFRCAmJiB0YXJnZXQgJiYgdGFyZ2V0W2tleV0gIT09IHVuZGVmaW5lZDtcbiAgICAvLyBleHBvcnQgbmF0aXZlIG9yIHBhc3NlZFxuICAgIG91dCA9IChvd24gPyB0YXJnZXQgOiBzb3VyY2UpW2tleV07XG4gICAgLy8gYmluZCB0aW1lcnMgdG8gZ2xvYmFsIGZvciBjYWxsIGZyb20gZXhwb3J0IGNvbnRleHRcbiAgICBleHAgPSBJU19CSU5EICYmIG93biA/IGN0eChvdXQsIGdsb2JhbCkgOiBJU19QUk9UTyAmJiB0eXBlb2Ygb3V0ID09ICdmdW5jdGlvbicgPyBjdHgoRnVuY3Rpb24uY2FsbCwgb3V0KSA6IG91dDtcbiAgICAvLyBleHRlbmQgZ2xvYmFsXG4gICAgaWYodGFyZ2V0KXJlZGVmaW5lKHRhcmdldCwga2V5LCBvdXQsIHR5cGUgJiAkZXhwb3J0LlUpO1xuICAgIC8vIGV4cG9ydFxuICAgIGlmKGV4cG9ydHNba2V5XSAhPSBvdXQpaGlkZShleHBvcnRzLCBrZXksIGV4cCk7XG4gICAgaWYoSVNfUFJPVE8gJiYgZXhwUHJvdG9ba2V5XSAhPSBvdXQpZXhwUHJvdG9ba2V5XSA9IG91dDtcbiAgfVxufTtcbmdsb2JhbC5jb3JlID0gY29yZTtcbi8vIHR5cGUgYml0bWFwXG4kZXhwb3J0LkYgPSAxOyAgIC8vIGZvcmNlZFxuJGV4cG9ydC5HID0gMjsgICAvLyBnbG9iYWxcbiRleHBvcnQuUyA9IDQ7ICAgLy8gc3RhdGljXG4kZXhwb3J0LlAgPSA4OyAgIC8vIHByb3RvXG4kZXhwb3J0LkIgPSAxNjsgIC8vIGJpbmRcbiRleHBvcnQuVyA9IDMyOyAgLy8gd3JhcFxuJGV4cG9ydC5VID0gNjQ7ICAvLyBzYWZlXG4kZXhwb3J0LlIgPSAxMjg7IC8vIHJlYWwgcHJvdG8gbWV0aG9kIGZvciBgbGlicmFyeWAgXG5tb2R1bGUuZXhwb3J0cyA9ICRleHBvcnQ7IiwidmFyIE1BVENIID0gcmVxdWlyZSgnLi9fd2tzJykoJ21hdGNoJyk7XG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uKEtFWSl7XG4gIHZhciByZSA9IC8uLztcbiAgdHJ5IHtcbiAgICAnLy4vJ1tLRVldKHJlKTtcbiAgfSBjYXRjaChlKXtcbiAgICB0cnkge1xuICAgICAgcmVbTUFUQ0hdID0gZmFsc2U7XG4gICAgICByZXR1cm4gIScvLi8nW0tFWV0ocmUpO1xuICAgIH0gY2F0Y2goZil7IC8qIGVtcHR5ICovIH1cbiAgfSByZXR1cm4gdHJ1ZTtcbn07IiwibW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbihleGVjKXtcbiAgdHJ5IHtcbiAgICByZXR1cm4gISFleGVjKCk7XG4gIH0gY2F0Y2goZSl7XG4gICAgcmV0dXJuIHRydWU7XG4gIH1cbn07IiwiJ3VzZSBzdHJpY3QnO1xudmFyIGhpZGUgICAgID0gcmVxdWlyZSgnLi9faGlkZScpXG4gICwgcmVkZWZpbmUgPSByZXF1aXJlKCcuL19yZWRlZmluZScpXG4gICwgZmFpbHMgICAgPSByZXF1aXJlKCcuL19mYWlscycpXG4gICwgZGVmaW5lZCAgPSByZXF1aXJlKCcuL19kZWZpbmVkJylcbiAgLCB3a3MgICAgICA9IHJlcXVpcmUoJy4vX3drcycpO1xuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uKEtFWSwgbGVuZ3RoLCBleGVjKXtcbiAgdmFyIFNZTUJPTCAgID0gd2tzKEtFWSlcbiAgICAsIGZucyAgICAgID0gZXhlYyhkZWZpbmVkLCBTWU1CT0wsICcnW0tFWV0pXG4gICAgLCBzdHJmbiAgICA9IGZuc1swXVxuICAgICwgcnhmbiAgICAgPSBmbnNbMV07XG4gIGlmKGZhaWxzKGZ1bmN0aW9uKCl7XG4gICAgdmFyIE8gPSB7fTtcbiAgICBPW1NZTUJPTF0gPSBmdW5jdGlvbigpeyByZXR1cm4gNzsgfTtcbiAgICByZXR1cm4gJydbS0VZXShPKSAhPSA3O1xuICB9KSl7XG4gICAgcmVkZWZpbmUoU3RyaW5nLnByb3RvdHlwZSwgS0VZLCBzdHJmbik7XG4gICAgaGlkZShSZWdFeHAucHJvdG90eXBlLCBTWU1CT0wsIGxlbmd0aCA9PSAyXG4gICAgICAvLyAyMS4yLjUuOCBSZWdFeHAucHJvdG90eXBlW0BAcmVwbGFjZV0oc3RyaW5nLCByZXBsYWNlVmFsdWUpXG4gICAgICAvLyAyMS4yLjUuMTEgUmVnRXhwLnByb3RvdHlwZVtAQHNwbGl0XShzdHJpbmcsIGxpbWl0KVxuICAgICAgPyBmdW5jdGlvbihzdHJpbmcsIGFyZyl7IHJldHVybiByeGZuLmNhbGwoc3RyaW5nLCB0aGlzLCBhcmcpOyB9XG4gICAgICAvLyAyMS4yLjUuNiBSZWdFeHAucHJvdG90eXBlW0BAbWF0Y2hdKHN0cmluZylcbiAgICAgIC8vIDIxLjIuNS45IFJlZ0V4cC5wcm90b3R5cGVbQEBzZWFyY2hdKHN0cmluZylcbiAgICAgIDogZnVuY3Rpb24oc3RyaW5nKXsgcmV0dXJuIHJ4Zm4uY2FsbChzdHJpbmcsIHRoaXMpOyB9XG4gICAgKTtcbiAgfVxufTsiLCIndXNlIHN0cmljdCc7XG4vLyAyMS4yLjUuMyBnZXQgUmVnRXhwLnByb3RvdHlwZS5mbGFnc1xudmFyIGFuT2JqZWN0ID0gcmVxdWlyZSgnLi9fYW4tb2JqZWN0Jyk7XG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uKCl7XG4gIHZhciB0aGF0ICAgPSBhbk9iamVjdCh0aGlzKVxuICAgICwgcmVzdWx0ID0gJyc7XG4gIGlmKHRoYXQuZ2xvYmFsKSAgICAgcmVzdWx0ICs9ICdnJztcbiAgaWYodGhhdC5pZ25vcmVDYXNlKSByZXN1bHQgKz0gJ2knO1xuICBpZih0aGF0Lm11bHRpbGluZSkgIHJlc3VsdCArPSAnbSc7XG4gIGlmKHRoYXQudW5pY29kZSkgICAgcmVzdWx0ICs9ICd1JztcbiAgaWYodGhhdC5zdGlja3kpICAgICByZXN1bHQgKz0gJ3knO1xuICByZXR1cm4gcmVzdWx0O1xufTsiLCJ2YXIgY3R4ICAgICAgICAgPSByZXF1aXJlKCcuL19jdHgnKVxuICAsIGNhbGwgICAgICAgID0gcmVxdWlyZSgnLi9faXRlci1jYWxsJylcbiAgLCBpc0FycmF5SXRlciA9IHJlcXVpcmUoJy4vX2lzLWFycmF5LWl0ZXInKVxuICAsIGFuT2JqZWN0ICAgID0gcmVxdWlyZSgnLi9fYW4tb2JqZWN0JylcbiAgLCB0b0xlbmd0aCAgICA9IHJlcXVpcmUoJy4vX3RvLWxlbmd0aCcpXG4gICwgZ2V0SXRlckZuICAgPSByZXF1aXJlKCcuL2NvcmUuZ2V0LWl0ZXJhdG9yLW1ldGhvZCcpO1xubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbihpdGVyYWJsZSwgZW50cmllcywgZm4sIHRoYXQsIElURVJBVE9SKXtcbiAgdmFyIGl0ZXJGbiA9IElURVJBVE9SID8gZnVuY3Rpb24oKXsgcmV0dXJuIGl0ZXJhYmxlOyB9IDogZ2V0SXRlckZuKGl0ZXJhYmxlKVxuICAgICwgZiAgICAgID0gY3R4KGZuLCB0aGF0LCBlbnRyaWVzID8gMiA6IDEpXG4gICAgLCBpbmRleCAgPSAwXG4gICAgLCBsZW5ndGgsIHN0ZXAsIGl0ZXJhdG9yO1xuICBpZih0eXBlb2YgaXRlckZuICE9ICdmdW5jdGlvbicpdGhyb3cgVHlwZUVycm9yKGl0ZXJhYmxlICsgJyBpcyBub3QgaXRlcmFibGUhJyk7XG4gIC8vIGZhc3QgY2FzZSBmb3IgYXJyYXlzIHdpdGggZGVmYXVsdCBpdGVyYXRvclxuICBpZihpc0FycmF5SXRlcihpdGVyRm4pKWZvcihsZW5ndGggPSB0b0xlbmd0aChpdGVyYWJsZS5sZW5ndGgpOyBsZW5ndGggPiBpbmRleDsgaW5kZXgrKyl7XG4gICAgZW50cmllcyA/IGYoYW5PYmplY3Qoc3RlcCA9IGl0ZXJhYmxlW2luZGV4XSlbMF0sIHN0ZXBbMV0pIDogZihpdGVyYWJsZVtpbmRleF0pO1xuICB9IGVsc2UgZm9yKGl0ZXJhdG9yID0gaXRlckZuLmNhbGwoaXRlcmFibGUpOyAhKHN0ZXAgPSBpdGVyYXRvci5uZXh0KCkpLmRvbmU7ICl7XG4gICAgY2FsbChpdGVyYXRvciwgZiwgc3RlcC52YWx1ZSwgZW50cmllcyk7XG4gIH1cbn07IiwiLy8gaHR0cHM6Ly9naXRodWIuY29tL3psb2lyb2NrL2NvcmUtanMvaXNzdWVzLzg2I2lzc3VlY29tbWVudC0xMTU3NTkwMjhcbnZhciBnbG9iYWwgPSBtb2R1bGUuZXhwb3J0cyA9IHR5cGVvZiB3aW5kb3cgIT0gJ3VuZGVmaW5lZCcgJiYgd2luZG93Lk1hdGggPT0gTWF0aFxuICA/IHdpbmRvdyA6IHR5cGVvZiBzZWxmICE9ICd1bmRlZmluZWQnICYmIHNlbGYuTWF0aCA9PSBNYXRoID8gc2VsZiA6IEZ1bmN0aW9uKCdyZXR1cm4gdGhpcycpKCk7XG5pZih0eXBlb2YgX19nID09ICdudW1iZXInKV9fZyA9IGdsb2JhbDsgLy8gZXNsaW50LWRpc2FibGUtbGluZSBuby11bmRlZiIsInZhciBoYXNPd25Qcm9wZXJ0eSA9IHt9Lmhhc093blByb3BlcnR5O1xubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbihpdCwga2V5KXtcbiAgcmV0dXJuIGhhc093blByb3BlcnR5LmNhbGwoaXQsIGtleSk7XG59OyIsInZhciBkUCAgICAgICAgID0gcmVxdWlyZSgnLi9fb2JqZWN0LWRwJylcbiAgLCBjcmVhdGVEZXNjID0gcmVxdWlyZSgnLi9fcHJvcGVydHktZGVzYycpO1xubW9kdWxlLmV4cG9ydHMgPSByZXF1aXJlKCcuL19kZXNjcmlwdG9ycycpID8gZnVuY3Rpb24ob2JqZWN0LCBrZXksIHZhbHVlKXtcbiAgcmV0dXJuIGRQLmYob2JqZWN0LCBrZXksIGNyZWF0ZURlc2MoMSwgdmFsdWUpKTtcbn0gOiBmdW5jdGlvbihvYmplY3QsIGtleSwgdmFsdWUpe1xuICBvYmplY3Rba2V5XSA9IHZhbHVlO1xuICByZXR1cm4gb2JqZWN0O1xufTsiLCJtb2R1bGUuZXhwb3J0cyA9IHJlcXVpcmUoJy4vX2dsb2JhbCcpLmRvY3VtZW50ICYmIGRvY3VtZW50LmRvY3VtZW50RWxlbWVudDsiLCJtb2R1bGUuZXhwb3J0cyA9ICFyZXF1aXJlKCcuL19kZXNjcmlwdG9ycycpICYmICFyZXF1aXJlKCcuL19mYWlscycpKGZ1bmN0aW9uKCl7XHJcbiAgcmV0dXJuIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShyZXF1aXJlKCcuL19kb20tY3JlYXRlJykoJ2RpdicpLCAnYScsIHtnZXQ6IGZ1bmN0aW9uKCl7IHJldHVybiA3OyB9fSkuYSAhPSA3O1xyXG59KTsiLCJ2YXIgaXNPYmplY3QgICAgICAgPSByZXF1aXJlKCcuL19pcy1vYmplY3QnKVxyXG4gICwgc2V0UHJvdG90eXBlT2YgPSByZXF1aXJlKCcuL19zZXQtcHJvdG8nKS5zZXQ7XHJcbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24odGhhdCwgdGFyZ2V0LCBDKXtcclxuICB2YXIgUCwgUyA9IHRhcmdldC5jb25zdHJ1Y3RvcjtcclxuICBpZihTICE9PSBDICYmIHR5cGVvZiBTID09ICdmdW5jdGlvbicgJiYgKFAgPSBTLnByb3RvdHlwZSkgIT09IEMucHJvdG90eXBlICYmIGlzT2JqZWN0KFApICYmIHNldFByb3RvdHlwZU9mKXtcclxuICAgIHNldFByb3RvdHlwZU9mKHRoYXQsIFApO1xyXG4gIH0gcmV0dXJuIHRoYXQ7XHJcbn07IiwiLy8gZmFzdCBhcHBseSwgaHR0cDovL2pzcGVyZi5sbmtpdC5jb20vZmFzdC1hcHBseS81XG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uKGZuLCBhcmdzLCB0aGF0KXtcbiAgdmFyIHVuID0gdGhhdCA9PT0gdW5kZWZpbmVkO1xuICBzd2l0Y2goYXJncy5sZW5ndGgpe1xuICAgIGNhc2UgMDogcmV0dXJuIHVuID8gZm4oKVxuICAgICAgICAgICAgICAgICAgICAgIDogZm4uY2FsbCh0aGF0KTtcbiAgICBjYXNlIDE6IHJldHVybiB1biA/IGZuKGFyZ3NbMF0pXG4gICAgICAgICAgICAgICAgICAgICAgOiBmbi5jYWxsKHRoYXQsIGFyZ3NbMF0pO1xuICAgIGNhc2UgMjogcmV0dXJuIHVuID8gZm4oYXJnc1swXSwgYXJnc1sxXSlcbiAgICAgICAgICAgICAgICAgICAgICA6IGZuLmNhbGwodGhhdCwgYXJnc1swXSwgYXJnc1sxXSk7XG4gICAgY2FzZSAzOiByZXR1cm4gdW4gPyBmbihhcmdzWzBdLCBhcmdzWzFdLCBhcmdzWzJdKVxuICAgICAgICAgICAgICAgICAgICAgIDogZm4uY2FsbCh0aGF0LCBhcmdzWzBdLCBhcmdzWzFdLCBhcmdzWzJdKTtcbiAgICBjYXNlIDQ6IHJldHVybiB1biA/IGZuKGFyZ3NbMF0sIGFyZ3NbMV0sIGFyZ3NbMl0sIGFyZ3NbM10pXG4gICAgICAgICAgICAgICAgICAgICAgOiBmbi5jYWxsKHRoYXQsIGFyZ3NbMF0sIGFyZ3NbMV0sIGFyZ3NbMl0sIGFyZ3NbM10pO1xuICB9IHJldHVybiAgICAgICAgICAgICAgZm4uYXBwbHkodGhhdCwgYXJncyk7XG59OyIsIi8vIGZhbGxiYWNrIGZvciBub24tYXJyYXktbGlrZSBFUzMgYW5kIG5vbi1lbnVtZXJhYmxlIG9sZCBWOCBzdHJpbmdzXG52YXIgY29mID0gcmVxdWlyZSgnLi9fY29mJyk7XG5tb2R1bGUuZXhwb3J0cyA9IE9iamVjdCgneicpLnByb3BlcnR5SXNFbnVtZXJhYmxlKDApID8gT2JqZWN0IDogZnVuY3Rpb24oaXQpe1xuICByZXR1cm4gY29mKGl0KSA9PSAnU3RyaW5nJyA/IGl0LnNwbGl0KCcnKSA6IE9iamVjdChpdCk7XG59OyIsIi8vIGNoZWNrIG9uIGRlZmF1bHQgQXJyYXkgaXRlcmF0b3JcbnZhciBJdGVyYXRvcnMgID0gcmVxdWlyZSgnLi9faXRlcmF0b3JzJylcbiAgLCBJVEVSQVRPUiAgID0gcmVxdWlyZSgnLi9fd2tzJykoJ2l0ZXJhdG9yJylcbiAgLCBBcnJheVByb3RvID0gQXJyYXkucHJvdG90eXBlO1xuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uKGl0KXtcbiAgcmV0dXJuIGl0ICE9PSB1bmRlZmluZWQgJiYgKEl0ZXJhdG9ycy5BcnJheSA9PT0gaXQgfHwgQXJyYXlQcm90b1tJVEVSQVRPUl0gPT09IGl0KTtcbn07IiwiLy8gNy4yLjIgSXNBcnJheShhcmd1bWVudClcbnZhciBjb2YgPSByZXF1aXJlKCcuL19jb2YnKTtcbm1vZHVsZS5leHBvcnRzID0gQXJyYXkuaXNBcnJheSB8fCBmdW5jdGlvbiBpc0FycmF5KGFyZyl7XG4gIHJldHVybiBjb2YoYXJnKSA9PSAnQXJyYXknO1xufTsiLCIvLyAyMC4xLjIuMyBOdW1iZXIuaXNJbnRlZ2VyKG51bWJlcilcbnZhciBpc09iamVjdCA9IHJlcXVpcmUoJy4vX2lzLW9iamVjdCcpXG4gICwgZmxvb3IgICAgPSBNYXRoLmZsb29yO1xubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiBpc0ludGVnZXIoaXQpe1xuICByZXR1cm4gIWlzT2JqZWN0KGl0KSAmJiBpc0Zpbml0ZShpdCkgJiYgZmxvb3IoaXQpID09PSBpdDtcbn07IiwibW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbihpdCl7XG4gIHJldHVybiB0eXBlb2YgaXQgPT09ICdvYmplY3QnID8gaXQgIT09IG51bGwgOiB0eXBlb2YgaXQgPT09ICdmdW5jdGlvbic7XG59OyIsIi8vIDcuMi44IElzUmVnRXhwKGFyZ3VtZW50KVxudmFyIGlzT2JqZWN0ID0gcmVxdWlyZSgnLi9faXMtb2JqZWN0JylcbiAgLCBjb2YgICAgICA9IHJlcXVpcmUoJy4vX2NvZicpXG4gICwgTUFUQ0ggICAgPSByZXF1aXJlKCcuL193a3MnKSgnbWF0Y2gnKTtcbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24oaXQpe1xuICB2YXIgaXNSZWdFeHA7XG4gIHJldHVybiBpc09iamVjdChpdCkgJiYgKChpc1JlZ0V4cCA9IGl0W01BVENIXSkgIT09IHVuZGVmaW5lZCA/ICEhaXNSZWdFeHAgOiBjb2YoaXQpID09ICdSZWdFeHAnKTtcbn07IiwiLy8gY2FsbCBzb21ldGhpbmcgb24gaXRlcmF0b3Igc3RlcCB3aXRoIHNhZmUgY2xvc2luZyBvbiBlcnJvclxudmFyIGFuT2JqZWN0ID0gcmVxdWlyZSgnLi9fYW4tb2JqZWN0Jyk7XG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uKGl0ZXJhdG9yLCBmbiwgdmFsdWUsIGVudHJpZXMpe1xuICB0cnkge1xuICAgIHJldHVybiBlbnRyaWVzID8gZm4oYW5PYmplY3QodmFsdWUpWzBdLCB2YWx1ZVsxXSkgOiBmbih2YWx1ZSk7XG4gIC8vIDcuNC42IEl0ZXJhdG9yQ2xvc2UoaXRlcmF0b3IsIGNvbXBsZXRpb24pXG4gIH0gY2F0Y2goZSl7XG4gICAgdmFyIHJldCA9IGl0ZXJhdG9yWydyZXR1cm4nXTtcbiAgICBpZihyZXQgIT09IHVuZGVmaW5lZClhbk9iamVjdChyZXQuY2FsbChpdGVyYXRvcikpO1xuICAgIHRocm93IGU7XG4gIH1cbn07IiwiJ3VzZSBzdHJpY3QnO1xudmFyIGNyZWF0ZSAgICAgICAgID0gcmVxdWlyZSgnLi9fb2JqZWN0LWNyZWF0ZScpXG4gICwgZGVzY3JpcHRvciAgICAgPSByZXF1aXJlKCcuL19wcm9wZXJ0eS1kZXNjJylcbiAgLCBzZXRUb1N0cmluZ1RhZyA9IHJlcXVpcmUoJy4vX3NldC10by1zdHJpbmctdGFnJylcbiAgLCBJdGVyYXRvclByb3RvdHlwZSA9IHt9O1xuXG4vLyAyNS4xLjIuMS4xICVJdGVyYXRvclByb3RvdHlwZSVbQEBpdGVyYXRvcl0oKVxucmVxdWlyZSgnLi9faGlkZScpKEl0ZXJhdG9yUHJvdG90eXBlLCByZXF1aXJlKCcuL193a3MnKSgnaXRlcmF0b3InKSwgZnVuY3Rpb24oKXsgcmV0dXJuIHRoaXM7IH0pO1xuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uKENvbnN0cnVjdG9yLCBOQU1FLCBuZXh0KXtcbiAgQ29uc3RydWN0b3IucHJvdG90eXBlID0gY3JlYXRlKEl0ZXJhdG9yUHJvdG90eXBlLCB7bmV4dDogZGVzY3JpcHRvcigxLCBuZXh0KX0pO1xuICBzZXRUb1N0cmluZ1RhZyhDb25zdHJ1Y3RvciwgTkFNRSArICcgSXRlcmF0b3InKTtcbn07IiwiJ3VzZSBzdHJpY3QnO1xudmFyIExJQlJBUlkgICAgICAgID0gcmVxdWlyZSgnLi9fbGlicmFyeScpXG4gICwgJGV4cG9ydCAgICAgICAgPSByZXF1aXJlKCcuL19leHBvcnQnKVxuICAsIHJlZGVmaW5lICAgICAgID0gcmVxdWlyZSgnLi9fcmVkZWZpbmUnKVxuICAsIGhpZGUgICAgICAgICAgID0gcmVxdWlyZSgnLi9faGlkZScpXG4gICwgaGFzICAgICAgICAgICAgPSByZXF1aXJlKCcuL19oYXMnKVxuICAsIEl0ZXJhdG9ycyAgICAgID0gcmVxdWlyZSgnLi9faXRlcmF0b3JzJylcbiAgLCAkaXRlckNyZWF0ZSAgICA9IHJlcXVpcmUoJy4vX2l0ZXItY3JlYXRlJylcbiAgLCBzZXRUb1N0cmluZ1RhZyA9IHJlcXVpcmUoJy4vX3NldC10by1zdHJpbmctdGFnJylcbiAgLCBnZXRQcm90b3R5cGVPZiA9IHJlcXVpcmUoJy4vX29iamVjdC1ncG8nKVxuICAsIElURVJBVE9SICAgICAgID0gcmVxdWlyZSgnLi9fd2tzJykoJ2l0ZXJhdG9yJylcbiAgLCBCVUdHWSAgICAgICAgICA9ICEoW10ua2V5cyAmJiAnbmV4dCcgaW4gW10ua2V5cygpKSAvLyBTYWZhcmkgaGFzIGJ1Z2d5IGl0ZXJhdG9ycyB3L28gYG5leHRgXG4gICwgRkZfSVRFUkFUT1IgICAgPSAnQEBpdGVyYXRvcidcbiAgLCBLRVlTICAgICAgICAgICA9ICdrZXlzJ1xuICAsIFZBTFVFUyAgICAgICAgID0gJ3ZhbHVlcyc7XG5cbnZhciByZXR1cm5UaGlzID0gZnVuY3Rpb24oKXsgcmV0dXJuIHRoaXM7IH07XG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24oQmFzZSwgTkFNRSwgQ29uc3RydWN0b3IsIG5leHQsIERFRkFVTFQsIElTX1NFVCwgRk9SQ0VEKXtcbiAgJGl0ZXJDcmVhdGUoQ29uc3RydWN0b3IsIE5BTUUsIG5leHQpO1xuICB2YXIgZ2V0TWV0aG9kID0gZnVuY3Rpb24oa2luZCl7XG4gICAgaWYoIUJVR0dZICYmIGtpbmQgaW4gcHJvdG8pcmV0dXJuIHByb3RvW2tpbmRdO1xuICAgIHN3aXRjaChraW5kKXtcbiAgICAgIGNhc2UgS0VZUzogcmV0dXJuIGZ1bmN0aW9uIGtleXMoKXsgcmV0dXJuIG5ldyBDb25zdHJ1Y3Rvcih0aGlzLCBraW5kKTsgfTtcbiAgICAgIGNhc2UgVkFMVUVTOiByZXR1cm4gZnVuY3Rpb24gdmFsdWVzKCl7IHJldHVybiBuZXcgQ29uc3RydWN0b3IodGhpcywga2luZCk7IH07XG4gICAgfSByZXR1cm4gZnVuY3Rpb24gZW50cmllcygpeyByZXR1cm4gbmV3IENvbnN0cnVjdG9yKHRoaXMsIGtpbmQpOyB9O1xuICB9O1xuICB2YXIgVEFHICAgICAgICA9IE5BTUUgKyAnIEl0ZXJhdG9yJ1xuICAgICwgREVGX1ZBTFVFUyA9IERFRkFVTFQgPT0gVkFMVUVTXG4gICAgLCBWQUxVRVNfQlVHID0gZmFsc2VcbiAgICAsIHByb3RvICAgICAgPSBCYXNlLnByb3RvdHlwZVxuICAgICwgJG5hdGl2ZSAgICA9IHByb3RvW0lURVJBVE9SXSB8fCBwcm90b1tGRl9JVEVSQVRPUl0gfHwgREVGQVVMVCAmJiBwcm90b1tERUZBVUxUXVxuICAgICwgJGRlZmF1bHQgICA9ICRuYXRpdmUgfHwgZ2V0TWV0aG9kKERFRkFVTFQpXG4gICAgLCAkZW50cmllcyAgID0gREVGQVVMVCA/ICFERUZfVkFMVUVTID8gJGRlZmF1bHQgOiBnZXRNZXRob2QoJ2VudHJpZXMnKSA6IHVuZGVmaW5lZFxuICAgICwgJGFueU5hdGl2ZSA9IE5BTUUgPT0gJ0FycmF5JyA/IHByb3RvLmVudHJpZXMgfHwgJG5hdGl2ZSA6ICRuYXRpdmVcbiAgICAsIG1ldGhvZHMsIGtleSwgSXRlcmF0b3JQcm90b3R5cGU7XG4gIC8vIEZpeCBuYXRpdmVcbiAgaWYoJGFueU5hdGl2ZSl7XG4gICAgSXRlcmF0b3JQcm90b3R5cGUgPSBnZXRQcm90b3R5cGVPZigkYW55TmF0aXZlLmNhbGwobmV3IEJhc2UpKTtcbiAgICBpZihJdGVyYXRvclByb3RvdHlwZSAhPT0gT2JqZWN0LnByb3RvdHlwZSl7XG4gICAgICAvLyBTZXQgQEB0b1N0cmluZ1RhZyB0byBuYXRpdmUgaXRlcmF0b3JzXG4gICAgICBzZXRUb1N0cmluZ1RhZyhJdGVyYXRvclByb3RvdHlwZSwgVEFHLCB0cnVlKTtcbiAgICAgIC8vIGZpeCBmb3Igc29tZSBvbGQgZW5naW5lc1xuICAgICAgaWYoIUxJQlJBUlkgJiYgIWhhcyhJdGVyYXRvclByb3RvdHlwZSwgSVRFUkFUT1IpKWhpZGUoSXRlcmF0b3JQcm90b3R5cGUsIElURVJBVE9SLCByZXR1cm5UaGlzKTtcbiAgICB9XG4gIH1cbiAgLy8gZml4IEFycmF5I3t2YWx1ZXMsIEBAaXRlcmF0b3J9Lm5hbWUgaW4gVjggLyBGRlxuICBpZihERUZfVkFMVUVTICYmICRuYXRpdmUgJiYgJG5hdGl2ZS5uYW1lICE9PSBWQUxVRVMpe1xuICAgIFZBTFVFU19CVUcgPSB0cnVlO1xuICAgICRkZWZhdWx0ID0gZnVuY3Rpb24gdmFsdWVzKCl7IHJldHVybiAkbmF0aXZlLmNhbGwodGhpcyk7IH07XG4gIH1cbiAgLy8gRGVmaW5lIGl0ZXJhdG9yXG4gIGlmKCghTElCUkFSWSB8fCBGT1JDRUQpICYmIChCVUdHWSB8fCBWQUxVRVNfQlVHIHx8ICFwcm90b1tJVEVSQVRPUl0pKXtcbiAgICBoaWRlKHByb3RvLCBJVEVSQVRPUiwgJGRlZmF1bHQpO1xuICB9XG4gIC8vIFBsdWcgZm9yIGxpYnJhcnlcbiAgSXRlcmF0b3JzW05BTUVdID0gJGRlZmF1bHQ7XG4gIEl0ZXJhdG9yc1tUQUddICA9IHJldHVyblRoaXM7XG4gIGlmKERFRkFVTFQpe1xuICAgIG1ldGhvZHMgPSB7XG4gICAgICB2YWx1ZXM6ICBERUZfVkFMVUVTID8gJGRlZmF1bHQgOiBnZXRNZXRob2QoVkFMVUVTKSxcbiAgICAgIGtleXM6ICAgIElTX1NFVCAgICAgPyAkZGVmYXVsdCA6IGdldE1ldGhvZChLRVlTKSxcbiAgICAgIGVudHJpZXM6ICRlbnRyaWVzXG4gICAgfTtcbiAgICBpZihGT1JDRUQpZm9yKGtleSBpbiBtZXRob2RzKXtcbiAgICAgIGlmKCEoa2V5IGluIHByb3RvKSlyZWRlZmluZShwcm90bywga2V5LCBtZXRob2RzW2tleV0pO1xuICAgIH0gZWxzZSAkZXhwb3J0KCRleHBvcnQuUCArICRleHBvcnQuRiAqIChCVUdHWSB8fCBWQUxVRVNfQlVHKSwgTkFNRSwgbWV0aG9kcyk7XG4gIH1cbiAgcmV0dXJuIG1ldGhvZHM7XG59OyIsInZhciBJVEVSQVRPUiAgICAgPSByZXF1aXJlKCcuL193a3MnKSgnaXRlcmF0b3InKVxuICAsIFNBRkVfQ0xPU0lORyA9IGZhbHNlO1xuXG50cnkge1xuICB2YXIgcml0ZXIgPSBbN11bSVRFUkFUT1JdKCk7XG4gIHJpdGVyWydyZXR1cm4nXSA9IGZ1bmN0aW9uKCl7IFNBRkVfQ0xPU0lORyA9IHRydWU7IH07XG4gIEFycmF5LmZyb20ocml0ZXIsIGZ1bmN0aW9uKCl7IHRocm93IDI7IH0pO1xufSBjYXRjaChlKXsgLyogZW1wdHkgKi8gfVxuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uKGV4ZWMsIHNraXBDbG9zaW5nKXtcbiAgaWYoIXNraXBDbG9zaW5nICYmICFTQUZFX0NMT1NJTkcpcmV0dXJuIGZhbHNlO1xuICB2YXIgc2FmZSA9IGZhbHNlO1xuICB0cnkge1xuICAgIHZhciBhcnIgID0gWzddXG4gICAgICAsIGl0ZXIgPSBhcnJbSVRFUkFUT1JdKCk7XG4gICAgaXRlci5uZXh0ID0gZnVuY3Rpb24oKXsgc2FmZSA9IHRydWU7IH07XG4gICAgYXJyW0lURVJBVE9SXSA9IGZ1bmN0aW9uKCl7IHJldHVybiBpdGVyOyB9O1xuICAgIGV4ZWMoYXJyKTtcbiAgfSBjYXRjaChlKXsgLyogZW1wdHkgKi8gfVxuICByZXR1cm4gc2FmZTtcbn07IiwibW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbihkb25lLCB2YWx1ZSl7XG4gIHJldHVybiB7dmFsdWU6IHZhbHVlLCBkb25lOiAhIWRvbmV9O1xufTsiLCJtb2R1bGUuZXhwb3J0cyA9IHt9OyIsInZhciBnZXRLZXlzICAgPSByZXF1aXJlKCcuL19vYmplY3Qta2V5cycpXG4gICwgdG9JT2JqZWN0ID0gcmVxdWlyZSgnLi9fdG8taW9iamVjdCcpO1xubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbihvYmplY3QsIGVsKXtcbiAgdmFyIE8gICAgICA9IHRvSU9iamVjdChvYmplY3QpXG4gICAgLCBrZXlzICAgPSBnZXRLZXlzKE8pXG4gICAgLCBsZW5ndGggPSBrZXlzLmxlbmd0aFxuICAgICwgaW5kZXggID0gMFxuICAgICwga2V5O1xuICB3aGlsZShsZW5ndGggPiBpbmRleClpZihPW2tleSA9IGtleXNbaW5kZXgrK11dID09PSBlbClyZXR1cm4ga2V5O1xufTsiLCJtb2R1bGUuZXhwb3J0cyA9IGZhbHNlOyIsIi8vIDIwLjIuMi4xNCBNYXRoLmV4cG0xKHgpXG5tb2R1bGUuZXhwb3J0cyA9IE1hdGguZXhwbTEgfHwgZnVuY3Rpb24gZXhwbTEoeCl7XG4gIHJldHVybiAoeCA9ICt4KSA9PSAwID8geCA6IHggPiAtMWUtNiAmJiB4IDwgMWUtNiA/IHggKyB4ICogeCAvIDIgOiBNYXRoLmV4cCh4KSAtIDE7XG59OyIsIi8vIDIwLjIuMi4yMCBNYXRoLmxvZzFwKHgpXG5tb2R1bGUuZXhwb3J0cyA9IE1hdGgubG9nMXAgfHwgZnVuY3Rpb24gbG9nMXAoeCl7XG4gIHJldHVybiAoeCA9ICt4KSA+IC0xZS04ICYmIHggPCAxZS04ID8geCAtIHggKiB4IC8gMiA6IE1hdGgubG9nKDEgKyB4KTtcbn07IiwiLy8gMjAuMi4yLjI4IE1hdGguc2lnbih4KVxubW9kdWxlLmV4cG9ydHMgPSBNYXRoLnNpZ24gfHwgZnVuY3Rpb24gc2lnbih4KXtcbiAgcmV0dXJuICh4ID0gK3gpID09IDAgfHwgeCAhPSB4ID8geCA6IHggPCAwID8gLTEgOiAxO1xufTsiLCJ2YXIgTUVUQSAgICAgPSByZXF1aXJlKCcuL191aWQnKSgnbWV0YScpXG4gICwgaXNPYmplY3QgPSByZXF1aXJlKCcuL19pcy1vYmplY3QnKVxuICAsIGhhcyAgICAgID0gcmVxdWlyZSgnLi9faGFzJylcbiAgLCBzZXREZXNjICA9IHJlcXVpcmUoJy4vX29iamVjdC1kcCcpLmZcbiAgLCBpZCAgICAgICA9IDA7XG52YXIgaXNFeHRlbnNpYmxlID0gT2JqZWN0LmlzRXh0ZW5zaWJsZSB8fCBmdW5jdGlvbigpe1xuICByZXR1cm4gdHJ1ZTtcbn07XG52YXIgRlJFRVpFID0gIXJlcXVpcmUoJy4vX2ZhaWxzJykoZnVuY3Rpb24oKXtcbiAgcmV0dXJuIGlzRXh0ZW5zaWJsZShPYmplY3QucHJldmVudEV4dGVuc2lvbnMoe30pKTtcbn0pO1xudmFyIHNldE1ldGEgPSBmdW5jdGlvbihpdCl7XG4gIHNldERlc2MoaXQsIE1FVEEsIHt2YWx1ZToge1xuICAgIGk6ICdPJyArICsraWQsIC8vIG9iamVjdCBJRFxuICAgIHc6IHt9ICAgICAgICAgIC8vIHdlYWsgY29sbGVjdGlvbnMgSURzXG4gIH19KTtcbn07XG52YXIgZmFzdEtleSA9IGZ1bmN0aW9uKGl0LCBjcmVhdGUpe1xuICAvLyByZXR1cm4gcHJpbWl0aXZlIHdpdGggcHJlZml4XG4gIGlmKCFpc09iamVjdChpdCkpcmV0dXJuIHR5cGVvZiBpdCA9PSAnc3ltYm9sJyA/IGl0IDogKHR5cGVvZiBpdCA9PSAnc3RyaW5nJyA/ICdTJyA6ICdQJykgKyBpdDtcbiAgaWYoIWhhcyhpdCwgTUVUQSkpe1xuICAgIC8vIGNhbid0IHNldCBtZXRhZGF0YSB0byB1bmNhdWdodCBmcm96ZW4gb2JqZWN0XG4gICAgaWYoIWlzRXh0ZW5zaWJsZShpdCkpcmV0dXJuICdGJztcbiAgICAvLyBub3QgbmVjZXNzYXJ5IHRvIGFkZCBtZXRhZGF0YVxuICAgIGlmKCFjcmVhdGUpcmV0dXJuICdFJztcbiAgICAvLyBhZGQgbWlzc2luZyBtZXRhZGF0YVxuICAgIHNldE1ldGEoaXQpO1xuICAvLyByZXR1cm4gb2JqZWN0IElEXG4gIH0gcmV0dXJuIGl0W01FVEFdLmk7XG59O1xudmFyIGdldFdlYWsgPSBmdW5jdGlvbihpdCwgY3JlYXRlKXtcbiAgaWYoIWhhcyhpdCwgTUVUQSkpe1xuICAgIC8vIGNhbid0IHNldCBtZXRhZGF0YSB0byB1bmNhdWdodCBmcm96ZW4gb2JqZWN0XG4gICAgaWYoIWlzRXh0ZW5zaWJsZShpdCkpcmV0dXJuIHRydWU7XG4gICAgLy8gbm90IG5lY2Vzc2FyeSB0byBhZGQgbWV0YWRhdGFcbiAgICBpZighY3JlYXRlKXJldHVybiBmYWxzZTtcbiAgICAvLyBhZGQgbWlzc2luZyBtZXRhZGF0YVxuICAgIHNldE1ldGEoaXQpO1xuICAvLyByZXR1cm4gaGFzaCB3ZWFrIGNvbGxlY3Rpb25zIElEc1xuICB9IHJldHVybiBpdFtNRVRBXS53O1xufTtcbi8vIGFkZCBtZXRhZGF0YSBvbiBmcmVlemUtZmFtaWx5IG1ldGhvZHMgY2FsbGluZ1xudmFyIG9uRnJlZXplID0gZnVuY3Rpb24oaXQpe1xuICBpZihGUkVFWkUgJiYgbWV0YS5ORUVEICYmIGlzRXh0ZW5zaWJsZShpdCkgJiYgIWhhcyhpdCwgTUVUQSkpc2V0TWV0YShpdCk7XG4gIHJldHVybiBpdDtcbn07XG52YXIgbWV0YSA9IG1vZHVsZS5leHBvcnRzID0ge1xuICBLRVk6ICAgICAgTUVUQSxcbiAgTkVFRDogICAgIGZhbHNlLFxuICBmYXN0S2V5OiAgZmFzdEtleSxcbiAgZ2V0V2VhazogIGdldFdlYWssXG4gIG9uRnJlZXplOiBvbkZyZWV6ZVxufTsiLCJ2YXIgTWFwICAgICA9IHJlcXVpcmUoJy4vZXM2Lm1hcCcpXG4gICwgJGV4cG9ydCA9IHJlcXVpcmUoJy4vX2V4cG9ydCcpXG4gICwgc2hhcmVkICA9IHJlcXVpcmUoJy4vX3NoYXJlZCcpKCdtZXRhZGF0YScpXG4gICwgc3RvcmUgICA9IHNoYXJlZC5zdG9yZSB8fCAoc2hhcmVkLnN0b3JlID0gbmV3IChyZXF1aXJlKCcuL2VzNi53ZWFrLW1hcCcpKSk7XG5cbnZhciBnZXRPckNyZWF0ZU1ldGFkYXRhTWFwID0gZnVuY3Rpb24odGFyZ2V0LCB0YXJnZXRLZXksIGNyZWF0ZSl7XG4gIHZhciB0YXJnZXRNZXRhZGF0YSA9IHN0b3JlLmdldCh0YXJnZXQpO1xuICBpZighdGFyZ2V0TWV0YWRhdGEpe1xuICAgIGlmKCFjcmVhdGUpcmV0dXJuIHVuZGVmaW5lZDtcbiAgICBzdG9yZS5zZXQodGFyZ2V0LCB0YXJnZXRNZXRhZGF0YSA9IG5ldyBNYXApO1xuICB9XG4gIHZhciBrZXlNZXRhZGF0YSA9IHRhcmdldE1ldGFkYXRhLmdldCh0YXJnZXRLZXkpO1xuICBpZigha2V5TWV0YWRhdGEpe1xuICAgIGlmKCFjcmVhdGUpcmV0dXJuIHVuZGVmaW5lZDtcbiAgICB0YXJnZXRNZXRhZGF0YS5zZXQodGFyZ2V0S2V5LCBrZXlNZXRhZGF0YSA9IG5ldyBNYXApO1xuICB9IHJldHVybiBrZXlNZXRhZGF0YTtcbn07XG52YXIgb3JkaW5hcnlIYXNPd25NZXRhZGF0YSA9IGZ1bmN0aW9uKE1ldGFkYXRhS2V5LCBPLCBQKXtcbiAgdmFyIG1ldGFkYXRhTWFwID0gZ2V0T3JDcmVhdGVNZXRhZGF0YU1hcChPLCBQLCBmYWxzZSk7XG4gIHJldHVybiBtZXRhZGF0YU1hcCA9PT0gdW5kZWZpbmVkID8gZmFsc2UgOiBtZXRhZGF0YU1hcC5oYXMoTWV0YWRhdGFLZXkpO1xufTtcbnZhciBvcmRpbmFyeUdldE93bk1ldGFkYXRhID0gZnVuY3Rpb24oTWV0YWRhdGFLZXksIE8sIFApe1xuICB2YXIgbWV0YWRhdGFNYXAgPSBnZXRPckNyZWF0ZU1ldGFkYXRhTWFwKE8sIFAsIGZhbHNlKTtcbiAgcmV0dXJuIG1ldGFkYXRhTWFwID09PSB1bmRlZmluZWQgPyB1bmRlZmluZWQgOiBtZXRhZGF0YU1hcC5nZXQoTWV0YWRhdGFLZXkpO1xufTtcbnZhciBvcmRpbmFyeURlZmluZU93bk1ldGFkYXRhID0gZnVuY3Rpb24oTWV0YWRhdGFLZXksIE1ldGFkYXRhVmFsdWUsIE8sIFApe1xuICBnZXRPckNyZWF0ZU1ldGFkYXRhTWFwKE8sIFAsIHRydWUpLnNldChNZXRhZGF0YUtleSwgTWV0YWRhdGFWYWx1ZSk7XG59O1xudmFyIG9yZGluYXJ5T3duTWV0YWRhdGFLZXlzID0gZnVuY3Rpb24odGFyZ2V0LCB0YXJnZXRLZXkpe1xuICB2YXIgbWV0YWRhdGFNYXAgPSBnZXRPckNyZWF0ZU1ldGFkYXRhTWFwKHRhcmdldCwgdGFyZ2V0S2V5LCBmYWxzZSlcbiAgICAsIGtleXMgICAgICAgID0gW107XG4gIGlmKG1ldGFkYXRhTWFwKW1ldGFkYXRhTWFwLmZvckVhY2goZnVuY3Rpb24oXywga2V5KXsga2V5cy5wdXNoKGtleSk7IH0pO1xuICByZXR1cm4ga2V5cztcbn07XG52YXIgdG9NZXRhS2V5ID0gZnVuY3Rpb24oaXQpe1xuICByZXR1cm4gaXQgPT09IHVuZGVmaW5lZCB8fCB0eXBlb2YgaXQgPT0gJ3N5bWJvbCcgPyBpdCA6IFN0cmluZyhpdCk7XG59O1xudmFyIGV4cCA9IGZ1bmN0aW9uKE8pe1xuICAkZXhwb3J0KCRleHBvcnQuUywgJ1JlZmxlY3QnLCBPKTtcbn07XG5cbm1vZHVsZS5leHBvcnRzID0ge1xuICBzdG9yZTogc3RvcmUsXG4gIG1hcDogZ2V0T3JDcmVhdGVNZXRhZGF0YU1hcCxcbiAgaGFzOiBvcmRpbmFyeUhhc093bk1ldGFkYXRhLFxuICBnZXQ6IG9yZGluYXJ5R2V0T3duTWV0YWRhdGEsXG4gIHNldDogb3JkaW5hcnlEZWZpbmVPd25NZXRhZGF0YSxcbiAga2V5czogb3JkaW5hcnlPd25NZXRhZGF0YUtleXMsXG4gIGtleTogdG9NZXRhS2V5LFxuICBleHA6IGV4cFxufTsiLCJ2YXIgZ2xvYmFsICAgID0gcmVxdWlyZSgnLi9fZ2xvYmFsJylcbiAgLCBtYWNyb3Rhc2sgPSByZXF1aXJlKCcuL190YXNrJykuc2V0XG4gICwgT2JzZXJ2ZXIgID0gZ2xvYmFsLk11dGF0aW9uT2JzZXJ2ZXIgfHwgZ2xvYmFsLldlYktpdE11dGF0aW9uT2JzZXJ2ZXJcbiAgLCBwcm9jZXNzICAgPSBnbG9iYWwucHJvY2Vzc1xuICAsIFByb21pc2UgICA9IGdsb2JhbC5Qcm9taXNlXG4gICwgaXNOb2RlICAgID0gcmVxdWlyZSgnLi9fY29mJykocHJvY2VzcykgPT0gJ3Byb2Nlc3MnXG4gICwgaGVhZCwgbGFzdCwgbm90aWZ5O1xuXG52YXIgZmx1c2ggPSBmdW5jdGlvbigpe1xuICB2YXIgcGFyZW50LCBmbjtcbiAgaWYoaXNOb2RlICYmIChwYXJlbnQgPSBwcm9jZXNzLmRvbWFpbikpcGFyZW50LmV4aXQoKTtcbiAgd2hpbGUoaGVhZCl7XG4gICAgZm4gPSBoZWFkLmZuO1xuICAgIGZuKCk7IC8vIDwtIGN1cnJlbnRseSB3ZSB1c2UgaXQgb25seSBmb3IgUHJvbWlzZSAtIHRyeSAvIGNhdGNoIG5vdCByZXF1aXJlZFxuICAgIGhlYWQgPSBoZWFkLm5leHQ7XG4gIH0gbGFzdCA9IHVuZGVmaW5lZDtcbiAgaWYocGFyZW50KXBhcmVudC5lbnRlcigpO1xufTtcblxuLy8gTm9kZS5qc1xuaWYoaXNOb2RlKXtcbiAgbm90aWZ5ID0gZnVuY3Rpb24oKXtcbiAgICBwcm9jZXNzLm5leHRUaWNrKGZsdXNoKTtcbiAgfTtcbi8vIGJyb3dzZXJzIHdpdGggTXV0YXRpb25PYnNlcnZlclxufSBlbHNlIGlmKE9ic2VydmVyKXtcbiAgdmFyIHRvZ2dsZSA9IHRydWVcbiAgICAsIG5vZGUgICA9IGRvY3VtZW50LmNyZWF0ZVRleHROb2RlKCcnKTtcbiAgbmV3IE9ic2VydmVyKGZsdXNoKS5vYnNlcnZlKG5vZGUsIHtjaGFyYWN0ZXJEYXRhOiB0cnVlfSk7IC8vIGVzbGludC1kaXNhYmxlLWxpbmUgbm8tbmV3XG4gIG5vdGlmeSA9IGZ1bmN0aW9uKCl7XG4gICAgbm9kZS5kYXRhID0gdG9nZ2xlID0gIXRvZ2dsZTtcbiAgfTtcbi8vIGVudmlyb25tZW50cyB3aXRoIG1heWJlIG5vbi1jb21wbGV0ZWx5IGNvcnJlY3QsIGJ1dCBleGlzdGVudCBQcm9taXNlXG59IGVsc2UgaWYoUHJvbWlzZSAmJiBQcm9taXNlLnJlc29sdmUpe1xuICBub3RpZnkgPSBmdW5jdGlvbigpe1xuICAgIFByb21pc2UucmVzb2x2ZSgpLnRoZW4oZmx1c2gpO1xuICB9O1xuLy8gZm9yIG90aGVyIGVudmlyb25tZW50cyAtIG1hY3JvdGFzayBiYXNlZCBvbjpcbi8vIC0gc2V0SW1tZWRpYXRlXG4vLyAtIE1lc3NhZ2VDaGFubmVsXG4vLyAtIHdpbmRvdy5wb3N0TWVzc2FnXG4vLyAtIG9ucmVhZHlzdGF0ZWNoYW5nZVxuLy8gLSBzZXRUaW1lb3V0XG59IGVsc2Uge1xuICBub3RpZnkgPSBmdW5jdGlvbigpe1xuICAgIC8vIHN0cmFuZ2UgSUUgKyB3ZWJwYWNrIGRldiBzZXJ2ZXIgYnVnIC0gdXNlIC5jYWxsKGdsb2JhbClcbiAgICBtYWNyb3Rhc2suY2FsbChnbG9iYWwsIGZsdXNoKTtcbiAgfTtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbihmbil7XG4gIHZhciB0YXNrID0ge2ZuOiBmbiwgbmV4dDogdW5kZWZpbmVkfTtcbiAgaWYobGFzdClsYXN0Lm5leHQgPSB0YXNrO1xuICBpZighaGVhZCl7XG4gICAgaGVhZCA9IHRhc2s7XG4gICAgbm90aWZ5KCk7XG4gIH0gbGFzdCA9IHRhc2s7XG59OyIsIid1c2Ugc3RyaWN0Jztcbi8vIDE5LjEuMi4xIE9iamVjdC5hc3NpZ24odGFyZ2V0LCBzb3VyY2UsIC4uLilcbnZhciBnZXRLZXlzICA9IHJlcXVpcmUoJy4vX29iamVjdC1rZXlzJylcbiAgLCBnT1BTICAgICA9IHJlcXVpcmUoJy4vX29iamVjdC1nb3BzJylcbiAgLCBwSUUgICAgICA9IHJlcXVpcmUoJy4vX29iamVjdC1waWUnKVxuICAsIHRvT2JqZWN0ID0gcmVxdWlyZSgnLi9fdG8tb2JqZWN0JylcbiAgLCBJT2JqZWN0ICA9IHJlcXVpcmUoJy4vX2lvYmplY3QnKVxuICAsICRhc3NpZ24gID0gT2JqZWN0LmFzc2lnbjtcblxuLy8gc2hvdWxkIHdvcmsgd2l0aCBzeW1ib2xzIGFuZCBzaG91bGQgaGF2ZSBkZXRlcm1pbmlzdGljIHByb3BlcnR5IG9yZGVyIChWOCBidWcpXG5tb2R1bGUuZXhwb3J0cyA9ICEkYXNzaWduIHx8IHJlcXVpcmUoJy4vX2ZhaWxzJykoZnVuY3Rpb24oKXtcbiAgdmFyIEEgPSB7fVxuICAgICwgQiA9IHt9XG4gICAgLCBTID0gU3ltYm9sKClcbiAgICAsIEsgPSAnYWJjZGVmZ2hpamtsbW5vcHFyc3QnO1xuICBBW1NdID0gNztcbiAgSy5zcGxpdCgnJykuZm9yRWFjaChmdW5jdGlvbihrKXsgQltrXSA9IGs7IH0pO1xuICByZXR1cm4gJGFzc2lnbih7fSwgQSlbU10gIT0gNyB8fCBPYmplY3Qua2V5cygkYXNzaWduKHt9LCBCKSkuam9pbignJykgIT0gSztcbn0pID8gZnVuY3Rpb24gYXNzaWduKHRhcmdldCwgc291cmNlKXsgLy8gZXNsaW50LWRpc2FibGUtbGluZSBuby11bnVzZWQtdmFyc1xuICB2YXIgVCAgICAgPSB0b09iamVjdCh0YXJnZXQpXG4gICAgLCBhTGVuICA9IGFyZ3VtZW50cy5sZW5ndGhcbiAgICAsIGluZGV4ID0gMVxuICAgICwgZ2V0U3ltYm9scyA9IGdPUFMuZlxuICAgICwgaXNFbnVtICAgICA9IHBJRS5mO1xuICB3aGlsZShhTGVuID4gaW5kZXgpe1xuICAgIHZhciBTICAgICAgPSBJT2JqZWN0KGFyZ3VtZW50c1tpbmRleCsrXSlcbiAgICAgICwga2V5cyAgID0gZ2V0U3ltYm9scyA/IGdldEtleXMoUykuY29uY2F0KGdldFN5bWJvbHMoUykpIDogZ2V0S2V5cyhTKVxuICAgICAgLCBsZW5ndGggPSBrZXlzLmxlbmd0aFxuICAgICAgLCBqICAgICAgPSAwXG4gICAgICAsIGtleTtcbiAgICB3aGlsZShsZW5ndGggPiBqKWlmKGlzRW51bS5jYWxsKFMsIGtleSA9IGtleXNbaisrXSkpVFtrZXldID0gU1trZXldO1xuICB9IHJldHVybiBUO1xufSA6ICRhc3NpZ247IiwiLy8gMTkuMS4yLjIgLyAxNS4yLjMuNSBPYmplY3QuY3JlYXRlKE8gWywgUHJvcGVydGllc10pXHJcbnZhciBhbk9iamVjdCAgICA9IHJlcXVpcmUoJy4vX2FuLW9iamVjdCcpXHJcbiAgLCBkUHMgICAgICAgICA9IHJlcXVpcmUoJy4vX29iamVjdC1kcHMnKVxyXG4gICwgZW51bUJ1Z0tleXMgPSByZXF1aXJlKCcuL19lbnVtLWJ1Zy1rZXlzJylcclxuICAsIElFX1BST1RPICAgID0gcmVxdWlyZSgnLi9fc2hhcmVkLWtleScpKCdJRV9QUk9UTycpXHJcbiAgLCBFbXB0eSAgICAgICA9IGZ1bmN0aW9uKCl7IC8qIGVtcHR5ICovIH1cclxuICAsIFBST1RPVFlQRSAgID0gJ3Byb3RvdHlwZSc7XHJcblxyXG4vLyBDcmVhdGUgb2JqZWN0IHdpdGggZmFrZSBgbnVsbGAgcHJvdG90eXBlOiB1c2UgaWZyYW1lIE9iamVjdCB3aXRoIGNsZWFyZWQgcHJvdG90eXBlXHJcbnZhciBjcmVhdGVEaWN0ID0gZnVuY3Rpb24oKXtcclxuICAvLyBUaHJhc2gsIHdhc3RlIGFuZCBzb2RvbXk6IElFIEdDIGJ1Z1xyXG4gIHZhciBpZnJhbWUgPSByZXF1aXJlKCcuL19kb20tY3JlYXRlJykoJ2lmcmFtZScpXHJcbiAgICAsIGkgICAgICA9IGVudW1CdWdLZXlzLmxlbmd0aFxyXG4gICAgLCBndCAgICAgPSAnPidcclxuICAgICwgaWZyYW1lRG9jdW1lbnQ7XHJcbiAgaWZyYW1lLnN0eWxlLmRpc3BsYXkgPSAnbm9uZSc7XHJcbiAgcmVxdWlyZSgnLi9faHRtbCcpLmFwcGVuZENoaWxkKGlmcmFtZSk7XHJcbiAgaWZyYW1lLnNyYyA9ICdqYXZhc2NyaXB0Oic7IC8vIGVzbGludC1kaXNhYmxlLWxpbmUgbm8tc2NyaXB0LXVybFxyXG4gIC8vIGNyZWF0ZURpY3QgPSBpZnJhbWUuY29udGVudFdpbmRvdy5PYmplY3Q7XHJcbiAgLy8gaHRtbC5yZW1vdmVDaGlsZChpZnJhbWUpO1xyXG4gIGlmcmFtZURvY3VtZW50ID0gaWZyYW1lLmNvbnRlbnRXaW5kb3cuZG9jdW1lbnQ7XHJcbiAgaWZyYW1lRG9jdW1lbnQub3BlbigpO1xyXG4gIGlmcmFtZURvY3VtZW50LndyaXRlKCc8c2NyaXB0PmRvY3VtZW50LkY9T2JqZWN0PC9zY3JpcHQnICsgZ3QpO1xyXG4gIGlmcmFtZURvY3VtZW50LmNsb3NlKCk7XHJcbiAgY3JlYXRlRGljdCA9IGlmcmFtZURvY3VtZW50LkY7XHJcbiAgd2hpbGUoaS0tKWRlbGV0ZSBjcmVhdGVEaWN0W1BST1RPVFlQRV1bZW51bUJ1Z0tleXNbaV1dO1xyXG4gIHJldHVybiBjcmVhdGVEaWN0KCk7XHJcbn07XHJcblxyXG5tb2R1bGUuZXhwb3J0cyA9IE9iamVjdC5jcmVhdGUgfHwgZnVuY3Rpb24gY3JlYXRlKE8sIFByb3BlcnRpZXMpe1xyXG4gIHZhciByZXN1bHQ7XHJcbiAgaWYoTyAhPT0gbnVsbCl7XHJcbiAgICBFbXB0eVtQUk9UT1RZUEVdID0gYW5PYmplY3QoTyk7XHJcbiAgICByZXN1bHQgPSBuZXcgRW1wdHk7XHJcbiAgICBFbXB0eVtQUk9UT1RZUEVdID0gbnVsbDtcclxuICAgIC8vIGFkZCBcIl9fcHJvdG9fX1wiIGZvciBPYmplY3QuZ2V0UHJvdG90eXBlT2YgcG9seWZpbGxcclxuICAgIHJlc3VsdFtJRV9QUk9UT10gPSBPO1xyXG4gIH0gZWxzZSByZXN1bHQgPSBjcmVhdGVEaWN0KCk7XHJcbiAgcmV0dXJuIFByb3BlcnRpZXMgPT09IHVuZGVmaW5lZCA/IHJlc3VsdCA6IGRQcyhyZXN1bHQsIFByb3BlcnRpZXMpO1xyXG59OyIsInZhciBhbk9iamVjdCAgICAgICA9IHJlcXVpcmUoJy4vX2FuLW9iamVjdCcpXG4gICwgSUU4X0RPTV9ERUZJTkUgPSByZXF1aXJlKCcuL19pZTgtZG9tLWRlZmluZScpXG4gICwgdG9QcmltaXRpdmUgICAgPSByZXF1aXJlKCcuL190by1wcmltaXRpdmUnKVxuICAsIGRQICAgICAgICAgICAgID0gT2JqZWN0LmRlZmluZVByb3BlcnR5O1xuXG5leHBvcnRzLmYgPSByZXF1aXJlKCcuL19kZXNjcmlwdG9ycycpID8gT2JqZWN0LmRlZmluZVByb3BlcnR5IDogZnVuY3Rpb24gZGVmaW5lUHJvcGVydHkoTywgUCwgQXR0cmlidXRlcyl7XG4gIGFuT2JqZWN0KE8pO1xuICBQID0gdG9QcmltaXRpdmUoUCwgdHJ1ZSk7XG4gIGFuT2JqZWN0KEF0dHJpYnV0ZXMpO1xuICBpZihJRThfRE9NX0RFRklORSl0cnkge1xuICAgIHJldHVybiBkUChPLCBQLCBBdHRyaWJ1dGVzKTtcbiAgfSBjYXRjaChlKXsgLyogZW1wdHkgKi8gfVxuICBpZignZ2V0JyBpbiBBdHRyaWJ1dGVzIHx8ICdzZXQnIGluIEF0dHJpYnV0ZXMpdGhyb3cgVHlwZUVycm9yKCdBY2Nlc3NvcnMgbm90IHN1cHBvcnRlZCEnKTtcbiAgaWYoJ3ZhbHVlJyBpbiBBdHRyaWJ1dGVzKU9bUF0gPSBBdHRyaWJ1dGVzLnZhbHVlO1xuICByZXR1cm4gTztcbn07IiwidmFyIGRQICAgICAgID0gcmVxdWlyZSgnLi9fb2JqZWN0LWRwJylcclxuICAsIGFuT2JqZWN0ID0gcmVxdWlyZSgnLi9fYW4tb2JqZWN0JylcclxuICAsIGdldEtleXMgID0gcmVxdWlyZSgnLi9fb2JqZWN0LWtleXMnKTtcclxuXHJcbm1vZHVsZS5leHBvcnRzID0gcmVxdWlyZSgnLi9fZGVzY3JpcHRvcnMnKSA/IE9iamVjdC5kZWZpbmVQcm9wZXJ0aWVzIDogZnVuY3Rpb24gZGVmaW5lUHJvcGVydGllcyhPLCBQcm9wZXJ0aWVzKXtcclxuICBhbk9iamVjdChPKTtcclxuICB2YXIga2V5cyAgID0gZ2V0S2V5cyhQcm9wZXJ0aWVzKVxyXG4gICAgLCBsZW5ndGggPSBrZXlzLmxlbmd0aFxyXG4gICAgLCBpID0gMFxyXG4gICAgLCBQO1xyXG4gIHdoaWxlKGxlbmd0aCA+IGkpZFAuZihPLCBQID0ga2V5c1tpKytdLCBQcm9wZXJ0aWVzW1BdKTtcclxuICByZXR1cm4gTztcclxufTsiLCIvLyBGb3JjZWQgcmVwbGFjZW1lbnQgcHJvdG90eXBlIGFjY2Vzc29ycyBtZXRob2RzXHJcbm1vZHVsZS5leHBvcnRzID0gcmVxdWlyZSgnLi9fbGlicmFyeScpfHwgIXJlcXVpcmUoJy4vX2ZhaWxzJykoZnVuY3Rpb24oKXtcclxuICB2YXIgSyA9IE1hdGgucmFuZG9tKCk7XHJcbiAgLy8gSW4gRkYgdGhyb3dzIG9ubHkgZGVmaW5lIG1ldGhvZHNcclxuICBfX2RlZmluZVNldHRlcl9fLmNhbGwobnVsbCwgSywgZnVuY3Rpb24oKXsgLyogZW1wdHkgKi99KTtcclxuICBkZWxldGUgcmVxdWlyZSgnLi9fZ2xvYmFsJylbS107XHJcbn0pOyIsInZhciBwSUUgICAgICAgICAgICA9IHJlcXVpcmUoJy4vX29iamVjdC1waWUnKVxyXG4gICwgY3JlYXRlRGVzYyAgICAgPSByZXF1aXJlKCcuL19wcm9wZXJ0eS1kZXNjJylcclxuICAsIHRvSU9iamVjdCAgICAgID0gcmVxdWlyZSgnLi9fdG8taW9iamVjdCcpXHJcbiAgLCB0b1ByaW1pdGl2ZSAgICA9IHJlcXVpcmUoJy4vX3RvLXByaW1pdGl2ZScpXHJcbiAgLCBoYXMgICAgICAgICAgICA9IHJlcXVpcmUoJy4vX2hhcycpXHJcbiAgLCBJRThfRE9NX0RFRklORSA9IHJlcXVpcmUoJy4vX2llOC1kb20tZGVmaW5lJylcclxuICAsIGdPUEQgICAgICAgICAgID0gT2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcjtcclxuXHJcbmV4cG9ydHMuZiA9IHJlcXVpcmUoJy4vX2Rlc2NyaXB0b3JzJykgPyBnT1BEIDogZnVuY3Rpb24gZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yKE8sIFApe1xyXG4gIE8gPSB0b0lPYmplY3QoTyk7XHJcbiAgUCA9IHRvUHJpbWl0aXZlKFAsIHRydWUpO1xyXG4gIGlmKElFOF9ET01fREVGSU5FKXRyeSB7XHJcbiAgICByZXR1cm4gZ09QRChPLCBQKTtcclxuICB9IGNhdGNoKGUpeyAvKiBlbXB0eSAqLyB9XHJcbiAgaWYoaGFzKE8sIFApKXJldHVybiBjcmVhdGVEZXNjKCFwSUUuZi5jYWxsKE8sIFApLCBPW1BdKTtcclxufTsiLCIvLyBmYWxsYmFjayBmb3IgSUUxMSBidWdneSBPYmplY3QuZ2V0T3duUHJvcGVydHlOYW1lcyB3aXRoIGlmcmFtZSBhbmQgd2luZG93XG52YXIgdG9JT2JqZWN0ID0gcmVxdWlyZSgnLi9fdG8taW9iamVjdCcpXG4gICwgZ09QTiAgICAgID0gcmVxdWlyZSgnLi9fb2JqZWN0LWdvcG4nKS5mXG4gICwgdG9TdHJpbmcgID0ge30udG9TdHJpbmc7XG5cbnZhciB3aW5kb3dOYW1lcyA9IHR5cGVvZiB3aW5kb3cgPT0gJ29iamVjdCcgJiYgd2luZG93ICYmIE9iamVjdC5nZXRPd25Qcm9wZXJ0eU5hbWVzXG4gID8gT2JqZWN0LmdldE93blByb3BlcnR5TmFtZXMod2luZG93KSA6IFtdO1xuXG52YXIgZ2V0V2luZG93TmFtZXMgPSBmdW5jdGlvbihpdCl7XG4gIHRyeSB7XG4gICAgcmV0dXJuIGdPUE4oaXQpO1xuICB9IGNhdGNoKGUpe1xuICAgIHJldHVybiB3aW5kb3dOYW1lcy5zbGljZSgpO1xuICB9XG59O1xuXG5tb2R1bGUuZXhwb3J0cy5mID0gZnVuY3Rpb24gZ2V0T3duUHJvcGVydHlOYW1lcyhpdCl7XG4gIHJldHVybiB3aW5kb3dOYW1lcyAmJiB0b1N0cmluZy5jYWxsKGl0KSA9PSAnW29iamVjdCBXaW5kb3ddJyA/IGdldFdpbmRvd05hbWVzKGl0KSA6IGdPUE4odG9JT2JqZWN0KGl0KSk7XG59O1xuIiwiLy8gMTkuMS4yLjcgLyAxNS4yLjMuNCBPYmplY3QuZ2V0T3duUHJvcGVydHlOYW1lcyhPKVxyXG52YXIgJGtleXMgICAgICA9IHJlcXVpcmUoJy4vX29iamVjdC1rZXlzLWludGVybmFsJylcclxuICAsIGhpZGRlbktleXMgPSByZXF1aXJlKCcuL19lbnVtLWJ1Zy1rZXlzJykuY29uY2F0KCdsZW5ndGgnLCAncHJvdG90eXBlJyk7XHJcblxyXG5leHBvcnRzLmYgPSBPYmplY3QuZ2V0T3duUHJvcGVydHlOYW1lcyB8fCBmdW5jdGlvbiBnZXRPd25Qcm9wZXJ0eU5hbWVzKE8pe1xyXG4gIHJldHVybiAka2V5cyhPLCBoaWRkZW5LZXlzKTtcclxufTsiLCJleHBvcnRzLmYgPSBPYmplY3QuZ2V0T3duUHJvcGVydHlTeW1ib2xzOyIsIi8vIDE5LjEuMi45IC8gMTUuMi4zLjIgT2JqZWN0LmdldFByb3RvdHlwZU9mKE8pXHJcbnZhciBoYXMgICAgICAgICA9IHJlcXVpcmUoJy4vX2hhcycpXHJcbiAgLCB0b09iamVjdCAgICA9IHJlcXVpcmUoJy4vX3RvLW9iamVjdCcpXHJcbiAgLCBJRV9QUk9UTyAgICA9IHJlcXVpcmUoJy4vX3NoYXJlZC1rZXknKSgnSUVfUFJPVE8nKVxyXG4gICwgT2JqZWN0UHJvdG8gPSBPYmplY3QucHJvdG90eXBlO1xyXG5cclxubW9kdWxlLmV4cG9ydHMgPSBPYmplY3QuZ2V0UHJvdG90eXBlT2YgfHwgZnVuY3Rpb24oTyl7XHJcbiAgTyA9IHRvT2JqZWN0KE8pO1xyXG4gIGlmKGhhcyhPLCBJRV9QUk9UTykpcmV0dXJuIE9bSUVfUFJPVE9dO1xyXG4gIGlmKHR5cGVvZiBPLmNvbnN0cnVjdG9yID09ICdmdW5jdGlvbicgJiYgTyBpbnN0YW5jZW9mIE8uY29uc3RydWN0b3Ipe1xyXG4gICAgcmV0dXJuIE8uY29uc3RydWN0b3IucHJvdG90eXBlO1xyXG4gIH0gcmV0dXJuIE8gaW5zdGFuY2VvZiBPYmplY3QgPyBPYmplY3RQcm90byA6IG51bGw7XHJcbn07IiwidmFyIGhhcyAgICAgICAgICA9IHJlcXVpcmUoJy4vX2hhcycpXHJcbiAgLCB0b0lPYmplY3QgICAgPSByZXF1aXJlKCcuL190by1pb2JqZWN0JylcclxuICAsIGFycmF5SW5kZXhPZiA9IHJlcXVpcmUoJy4vX2FycmF5LWluY2x1ZGVzJykoZmFsc2UpXHJcbiAgLCBJRV9QUk9UTyAgICAgPSByZXF1aXJlKCcuL19zaGFyZWQta2V5JykoJ0lFX1BST1RPJyk7XHJcblxyXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uKG9iamVjdCwgbmFtZXMpe1xyXG4gIHZhciBPICAgICAgPSB0b0lPYmplY3Qob2JqZWN0KVxyXG4gICAgLCBpICAgICAgPSAwXHJcbiAgICAsIHJlc3VsdCA9IFtdXHJcbiAgICAsIGtleTtcclxuICBmb3Ioa2V5IGluIE8paWYoa2V5ICE9IElFX1BST1RPKWhhcyhPLCBrZXkpICYmIHJlc3VsdC5wdXNoKGtleSk7XHJcbiAgLy8gRG9uJ3QgZW51bSBidWcgJiBoaWRkZW4ga2V5c1xyXG4gIHdoaWxlKG5hbWVzLmxlbmd0aCA+IGkpaWYoaGFzKE8sIGtleSA9IG5hbWVzW2krK10pKXtcclxuICAgIH5hcnJheUluZGV4T2YocmVzdWx0LCBrZXkpIHx8IHJlc3VsdC5wdXNoKGtleSk7XHJcbiAgfVxyXG4gIHJldHVybiByZXN1bHQ7XHJcbn07IiwiLy8gMTkuMS4yLjE0IC8gMTUuMi4zLjE0IE9iamVjdC5rZXlzKE8pXHJcbnZhciAka2V5cyAgICAgICA9IHJlcXVpcmUoJy4vX29iamVjdC1rZXlzLWludGVybmFsJylcclxuICAsIGVudW1CdWdLZXlzID0gcmVxdWlyZSgnLi9fZW51bS1idWcta2V5cycpO1xyXG5cclxubW9kdWxlLmV4cG9ydHMgPSBPYmplY3Qua2V5cyB8fCBmdW5jdGlvbiBrZXlzKE8pe1xyXG4gIHJldHVybiAka2V5cyhPLCBlbnVtQnVnS2V5cyk7XHJcbn07IiwiZXhwb3J0cy5mID0ge30ucHJvcGVydHlJc0VudW1lcmFibGU7IiwiLy8gbW9zdCBPYmplY3QgbWV0aG9kcyBieSBFUzYgc2hvdWxkIGFjY2VwdCBwcmltaXRpdmVzXG52YXIgJGV4cG9ydCA9IHJlcXVpcmUoJy4vX2V4cG9ydCcpXG4gICwgY29yZSAgICA9IHJlcXVpcmUoJy4vX2NvcmUnKVxuICAsIGZhaWxzICAgPSByZXF1aXJlKCcuL19mYWlscycpO1xubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbihLRVksIGV4ZWMpe1xuICB2YXIgZm4gID0gKGNvcmUuT2JqZWN0IHx8IHt9KVtLRVldIHx8IE9iamVjdFtLRVldXG4gICAgLCBleHAgPSB7fTtcbiAgZXhwW0tFWV0gPSBleGVjKGZuKTtcbiAgJGV4cG9ydCgkZXhwb3J0LlMgKyAkZXhwb3J0LkYgKiBmYWlscyhmdW5jdGlvbigpeyBmbigxKTsgfSksICdPYmplY3QnLCBleHApO1xufTsiLCJ2YXIgZ2V0S2V5cyAgID0gcmVxdWlyZSgnLi9fb2JqZWN0LWtleXMnKVxuICAsIHRvSU9iamVjdCA9IHJlcXVpcmUoJy4vX3RvLWlvYmplY3QnKVxuICAsIGlzRW51bSAgICA9IHJlcXVpcmUoJy4vX29iamVjdC1waWUnKS5mO1xubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbihpc0VudHJpZXMpe1xuICByZXR1cm4gZnVuY3Rpb24oaXQpe1xuICAgIHZhciBPICAgICAgPSB0b0lPYmplY3QoaXQpXG4gICAgICAsIGtleXMgICA9IGdldEtleXMoTylcbiAgICAgICwgbGVuZ3RoID0ga2V5cy5sZW5ndGhcbiAgICAgICwgaSAgICAgID0gMFxuICAgICAgLCByZXN1bHQgPSBbXVxuICAgICAgLCBrZXk7XG4gICAgd2hpbGUobGVuZ3RoID4gaSlpZihpc0VudW0uY2FsbChPLCBrZXkgPSBrZXlzW2krK10pKXtcbiAgICAgIHJlc3VsdC5wdXNoKGlzRW50cmllcyA/IFtrZXksIE9ba2V5XV0gOiBPW2tleV0pO1xuICAgIH0gcmV0dXJuIHJlc3VsdDtcbiAgfTtcbn07IiwiLy8gYWxsIG9iamVjdCBrZXlzLCBpbmNsdWRlcyBub24tZW51bWVyYWJsZSBhbmQgc3ltYm9sc1xudmFyIGdPUE4gICAgID0gcmVxdWlyZSgnLi9fb2JqZWN0LWdvcG4nKVxuICAsIGdPUFMgICAgID0gcmVxdWlyZSgnLi9fb2JqZWN0LWdvcHMnKVxuICAsIGFuT2JqZWN0ID0gcmVxdWlyZSgnLi9fYW4tb2JqZWN0JylcbiAgLCBSZWZsZWN0ICA9IHJlcXVpcmUoJy4vX2dsb2JhbCcpLlJlZmxlY3Q7XG5tb2R1bGUuZXhwb3J0cyA9IFJlZmxlY3QgJiYgUmVmbGVjdC5vd25LZXlzIHx8IGZ1bmN0aW9uIG93bktleXMoaXQpe1xuICB2YXIga2V5cyAgICAgICA9IGdPUE4uZihhbk9iamVjdChpdCkpXG4gICAgLCBnZXRTeW1ib2xzID0gZ09QUy5mO1xuICByZXR1cm4gZ2V0U3ltYm9scyA/IGtleXMuY29uY2F0KGdldFN5bWJvbHMoaXQpKSA6IGtleXM7XG59OyIsInZhciAkcGFyc2VGbG9hdCA9IHJlcXVpcmUoJy4vX2dsb2JhbCcpLnBhcnNlRmxvYXRcbiAgLCAkdHJpbSAgICAgICA9IHJlcXVpcmUoJy4vX3N0cmluZy10cmltJykudHJpbTtcblxubW9kdWxlLmV4cG9ydHMgPSAxIC8gJHBhcnNlRmxvYXQocmVxdWlyZSgnLi9fc3RyaW5nLXdzJykgKyAnLTAnKSAhPT0gLUluZmluaXR5ID8gZnVuY3Rpb24gcGFyc2VGbG9hdChzdHIpe1xuICB2YXIgc3RyaW5nID0gJHRyaW0oU3RyaW5nKHN0ciksIDMpXG4gICAgLCByZXN1bHQgPSAkcGFyc2VGbG9hdChzdHJpbmcpO1xuICByZXR1cm4gcmVzdWx0ID09PSAwICYmIHN0cmluZy5jaGFyQXQoMCkgPT0gJy0nID8gLTAgOiByZXN1bHQ7XG59IDogJHBhcnNlRmxvYXQ7IiwidmFyICRwYXJzZUludCA9IHJlcXVpcmUoJy4vX2dsb2JhbCcpLnBhcnNlSW50XG4gICwgJHRyaW0gICAgID0gcmVxdWlyZSgnLi9fc3RyaW5nLXRyaW0nKS50cmltXG4gICwgd3MgICAgICAgID0gcmVxdWlyZSgnLi9fc3RyaW5nLXdzJylcbiAgLCBoZXggICAgICAgPSAvXltcXC0rXT8wW3hYXS87XG5cbm1vZHVsZS5leHBvcnRzID0gJHBhcnNlSW50KHdzICsgJzA4JykgIT09IDggfHwgJHBhcnNlSW50KHdzICsgJzB4MTYnKSAhPT0gMjIgPyBmdW5jdGlvbiBwYXJzZUludChzdHIsIHJhZGl4KXtcbiAgdmFyIHN0cmluZyA9ICR0cmltKFN0cmluZyhzdHIpLCAzKTtcbiAgcmV0dXJuICRwYXJzZUludChzdHJpbmcsIChyYWRpeCA+Pj4gMCkgfHwgKGhleC50ZXN0KHN0cmluZykgPyAxNiA6IDEwKSk7XG59IDogJHBhcnNlSW50OyIsIid1c2Ugc3RyaWN0JztcbnZhciBwYXRoICAgICAgPSByZXF1aXJlKCcuL19wYXRoJylcbiAgLCBpbnZva2UgICAgPSByZXF1aXJlKCcuL19pbnZva2UnKVxuICAsIGFGdW5jdGlvbiA9IHJlcXVpcmUoJy4vX2EtZnVuY3Rpb24nKTtcbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24oLyogLi4ucGFyZ3MgKi8pe1xuICB2YXIgZm4gICAgID0gYUZ1bmN0aW9uKHRoaXMpXG4gICAgLCBsZW5ndGggPSBhcmd1bWVudHMubGVuZ3RoXG4gICAgLCBwYXJncyAgPSBBcnJheShsZW5ndGgpXG4gICAgLCBpICAgICAgPSAwXG4gICAgLCBfICAgICAgPSBwYXRoLl9cbiAgICAsIGhvbGRlciA9IGZhbHNlO1xuICB3aGlsZShsZW5ndGggPiBpKWlmKChwYXJnc1tpXSA9IGFyZ3VtZW50c1tpKytdKSA9PT0gXylob2xkZXIgPSB0cnVlO1xuICByZXR1cm4gZnVuY3Rpb24oLyogLi4uYXJncyAqLyl7XG4gICAgdmFyIHRoYXQgPSB0aGlzXG4gICAgICAsIGFMZW4gPSBhcmd1bWVudHMubGVuZ3RoXG4gICAgICAsIGogPSAwLCBrID0gMCwgYXJncztcbiAgICBpZighaG9sZGVyICYmICFhTGVuKXJldHVybiBpbnZva2UoZm4sIHBhcmdzLCB0aGF0KTtcbiAgICBhcmdzID0gcGFyZ3Muc2xpY2UoKTtcbiAgICBpZihob2xkZXIpZm9yKDtsZW5ndGggPiBqOyBqKyspaWYoYXJnc1tqXSA9PT0gXylhcmdzW2pdID0gYXJndW1lbnRzW2srK107XG4gICAgd2hpbGUoYUxlbiA+IGspYXJncy5wdXNoKGFyZ3VtZW50c1trKytdKTtcbiAgICByZXR1cm4gaW52b2tlKGZuLCBhcmdzLCB0aGF0KTtcbiAgfTtcbn07IiwibW9kdWxlLmV4cG9ydHMgPSByZXF1aXJlKCcuL19nbG9iYWwnKTsiLCJtb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uKGJpdG1hcCwgdmFsdWUpe1xuICByZXR1cm4ge1xuICAgIGVudW1lcmFibGUgIDogIShiaXRtYXAgJiAxKSxcbiAgICBjb25maWd1cmFibGU6ICEoYml0bWFwICYgMiksXG4gICAgd3JpdGFibGUgICAgOiAhKGJpdG1hcCAmIDQpLFxuICAgIHZhbHVlICAgICAgIDogdmFsdWVcbiAgfTtcbn07IiwidmFyIHJlZGVmaW5lID0gcmVxdWlyZSgnLi9fcmVkZWZpbmUnKTtcbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24odGFyZ2V0LCBzcmMsIHNhZmUpe1xuICBmb3IodmFyIGtleSBpbiBzcmMpcmVkZWZpbmUodGFyZ2V0LCBrZXksIHNyY1trZXldLCBzYWZlKTtcbiAgcmV0dXJuIHRhcmdldDtcbn07IiwidmFyIGdsb2JhbCAgICA9IHJlcXVpcmUoJy4vX2dsb2JhbCcpXG4gICwgaGlkZSAgICAgID0gcmVxdWlyZSgnLi9faGlkZScpXG4gICwgaGFzICAgICAgID0gcmVxdWlyZSgnLi9faGFzJylcbiAgLCBTUkMgICAgICAgPSByZXF1aXJlKCcuL191aWQnKSgnc3JjJylcbiAgLCBUT19TVFJJTkcgPSAndG9TdHJpbmcnXG4gICwgJHRvU3RyaW5nID0gRnVuY3Rpb25bVE9fU1RSSU5HXVxuICAsIFRQTCAgICAgICA9ICgnJyArICR0b1N0cmluZykuc3BsaXQoVE9fU1RSSU5HKTtcblxucmVxdWlyZSgnLi9fY29yZScpLmluc3BlY3RTb3VyY2UgPSBmdW5jdGlvbihpdCl7XG4gIHJldHVybiAkdG9TdHJpbmcuY2FsbChpdCk7XG59O1xuXG4obW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbihPLCBrZXksIHZhbCwgc2FmZSl7XG4gIHZhciBpc0Z1bmN0aW9uID0gdHlwZW9mIHZhbCA9PSAnZnVuY3Rpb24nO1xuICBpZihpc0Z1bmN0aW9uKWhhcyh2YWwsICduYW1lJykgfHwgaGlkZSh2YWwsICduYW1lJywga2V5KTtcbiAgaWYoT1trZXldID09PSB2YWwpcmV0dXJuO1xuICBpZihpc0Z1bmN0aW9uKWhhcyh2YWwsIFNSQykgfHwgaGlkZSh2YWwsIFNSQywgT1trZXldID8gJycgKyBPW2tleV0gOiBUUEwuam9pbihTdHJpbmcoa2V5KSkpO1xuICBpZihPID09PSBnbG9iYWwpe1xuICAgIE9ba2V5XSA9IHZhbDtcbiAgfSBlbHNlIHtcbiAgICBpZighc2FmZSl7XG4gICAgICBkZWxldGUgT1trZXldO1xuICAgICAgaGlkZShPLCBrZXksIHZhbCk7XG4gICAgfSBlbHNlIHtcbiAgICAgIGlmKE9ba2V5XSlPW2tleV0gPSB2YWw7XG4gICAgICBlbHNlIGhpZGUoTywga2V5LCB2YWwpO1xuICAgIH1cbiAgfVxuLy8gYWRkIGZha2UgRnVuY3Rpb24jdG9TdHJpbmcgZm9yIGNvcnJlY3Qgd29yayB3cmFwcGVkIG1ldGhvZHMgLyBjb25zdHJ1Y3RvcnMgd2l0aCBtZXRob2RzIGxpa2UgTG9EYXNoIGlzTmF0aXZlXG59KShGdW5jdGlvbi5wcm90b3R5cGUsIFRPX1NUUklORywgZnVuY3Rpb24gdG9TdHJpbmcoKXtcbiAgcmV0dXJuIHR5cGVvZiB0aGlzID09ICdmdW5jdGlvbicgJiYgdGhpc1tTUkNdIHx8ICR0b1N0cmluZy5jYWxsKHRoaXMpO1xufSk7IiwibW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbihyZWdFeHAsIHJlcGxhY2Upe1xuICB2YXIgcmVwbGFjZXIgPSByZXBsYWNlID09PSBPYmplY3QocmVwbGFjZSkgPyBmdW5jdGlvbihwYXJ0KXtcbiAgICByZXR1cm4gcmVwbGFjZVtwYXJ0XTtcbiAgfSA6IHJlcGxhY2U7XG4gIHJldHVybiBmdW5jdGlvbihpdCl7XG4gICAgcmV0dXJuIFN0cmluZyhpdCkucmVwbGFjZShyZWdFeHAsIHJlcGxhY2VyKTtcbiAgfTtcbn07IiwiLy8gNy4yLjkgU2FtZVZhbHVlKHgsIHkpXG5tb2R1bGUuZXhwb3J0cyA9IE9iamVjdC5pcyB8fCBmdW5jdGlvbiBpcyh4LCB5KXtcbiAgcmV0dXJuIHggPT09IHkgPyB4ICE9PSAwIHx8IDEgLyB4ID09PSAxIC8geSA6IHggIT0geCAmJiB5ICE9IHk7XG59OyIsIi8vIFdvcmtzIHdpdGggX19wcm90b19fIG9ubHkuIE9sZCB2OCBjYW4ndCB3b3JrIHdpdGggbnVsbCBwcm90byBvYmplY3RzLlxuLyogZXNsaW50LWRpc2FibGUgbm8tcHJvdG8gKi9cbnZhciBpc09iamVjdCA9IHJlcXVpcmUoJy4vX2lzLW9iamVjdCcpXG4gICwgYW5PYmplY3QgPSByZXF1aXJlKCcuL19hbi1vYmplY3QnKTtcbnZhciBjaGVjayA9IGZ1bmN0aW9uKE8sIHByb3RvKXtcbiAgYW5PYmplY3QoTyk7XG4gIGlmKCFpc09iamVjdChwcm90bykgJiYgcHJvdG8gIT09IG51bGwpdGhyb3cgVHlwZUVycm9yKHByb3RvICsgXCI6IGNhbid0IHNldCBhcyBwcm90b3R5cGUhXCIpO1xufTtcbm1vZHVsZS5leHBvcnRzID0ge1xuICBzZXQ6IE9iamVjdC5zZXRQcm90b3R5cGVPZiB8fCAoJ19fcHJvdG9fXycgaW4ge30gPyAvLyBlc2xpbnQtZGlzYWJsZS1saW5lXG4gICAgZnVuY3Rpb24odGVzdCwgYnVnZ3ksIHNldCl7XG4gICAgICB0cnkge1xuICAgICAgICBzZXQgPSByZXF1aXJlKCcuL19jdHgnKShGdW5jdGlvbi5jYWxsLCByZXF1aXJlKCcuL19vYmplY3QtZ29wZCcpLmYoT2JqZWN0LnByb3RvdHlwZSwgJ19fcHJvdG9fXycpLnNldCwgMik7XG4gICAgICAgIHNldCh0ZXN0LCBbXSk7XG4gICAgICAgIGJ1Z2d5ID0gISh0ZXN0IGluc3RhbmNlb2YgQXJyYXkpO1xuICAgICAgfSBjYXRjaChlKXsgYnVnZ3kgPSB0cnVlOyB9XG4gICAgICByZXR1cm4gZnVuY3Rpb24gc2V0UHJvdG90eXBlT2YoTywgcHJvdG8pe1xuICAgICAgICBjaGVjayhPLCBwcm90byk7XG4gICAgICAgIGlmKGJ1Z2d5KU8uX19wcm90b19fID0gcHJvdG87XG4gICAgICAgIGVsc2Ugc2V0KE8sIHByb3RvKTtcbiAgICAgICAgcmV0dXJuIE87XG4gICAgICB9O1xuICAgIH0oe30sIGZhbHNlKSA6IHVuZGVmaW5lZCksXG4gIGNoZWNrOiBjaGVja1xufTsiLCIndXNlIHN0cmljdCc7XG52YXIgZ2xvYmFsICAgICAgPSByZXF1aXJlKCcuL19nbG9iYWwnKVxuICAsIGRQICAgICAgICAgID0gcmVxdWlyZSgnLi9fb2JqZWN0LWRwJylcbiAgLCBERVNDUklQVE9SUyA9IHJlcXVpcmUoJy4vX2Rlc2NyaXB0b3JzJylcbiAgLCBTUEVDSUVTICAgICA9IHJlcXVpcmUoJy4vX3drcycpKCdzcGVjaWVzJyk7XG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24oS0VZKXtcbiAgdmFyIEMgPSBnbG9iYWxbS0VZXTtcbiAgaWYoREVTQ1JJUFRPUlMgJiYgQyAmJiAhQ1tTUEVDSUVTXSlkUC5mKEMsIFNQRUNJRVMsIHtcbiAgICBjb25maWd1cmFibGU6IHRydWUsXG4gICAgZ2V0OiBmdW5jdGlvbigpeyByZXR1cm4gdGhpczsgfVxuICB9KTtcbn07IiwidmFyIGRlZiA9IHJlcXVpcmUoJy4vX29iamVjdC1kcCcpLmZcbiAgLCBoYXMgPSByZXF1aXJlKCcuL19oYXMnKVxuICAsIFRBRyA9IHJlcXVpcmUoJy4vX3drcycpKCd0b1N0cmluZ1RhZycpO1xuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uKGl0LCB0YWcsIHN0YXQpe1xuICBpZihpdCAmJiAhaGFzKGl0ID0gc3RhdCA/IGl0IDogaXQucHJvdG90eXBlLCBUQUcpKWRlZihpdCwgVEFHLCB7Y29uZmlndXJhYmxlOiB0cnVlLCB2YWx1ZTogdGFnfSk7XG59OyIsInZhciBzaGFyZWQgPSByZXF1aXJlKCcuL19zaGFyZWQnKSgna2V5cycpXHJcbiAgLCB1aWQgICAgPSByZXF1aXJlKCcuL191aWQnKTtcclxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbihrZXkpe1xyXG4gIHJldHVybiBzaGFyZWRba2V5XSB8fCAoc2hhcmVkW2tleV0gPSB1aWQoa2V5KSk7XHJcbn07IiwidmFyIGdsb2JhbCA9IHJlcXVpcmUoJy4vX2dsb2JhbCcpXG4gICwgU0hBUkVEID0gJ19fY29yZS1qc19zaGFyZWRfXydcbiAgLCBzdG9yZSAgPSBnbG9iYWxbU0hBUkVEXSB8fCAoZ2xvYmFsW1NIQVJFRF0gPSB7fSk7XG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uKGtleSl7XG4gIHJldHVybiBzdG9yZVtrZXldIHx8IChzdG9yZVtrZXldID0ge30pO1xufTsiLCIvLyA3LjMuMjAgU3BlY2llc0NvbnN0cnVjdG9yKE8sIGRlZmF1bHRDb25zdHJ1Y3RvcilcbnZhciBhbk9iamVjdCAgPSByZXF1aXJlKCcuL19hbi1vYmplY3QnKVxuICAsIGFGdW5jdGlvbiA9IHJlcXVpcmUoJy4vX2EtZnVuY3Rpb24nKVxuICAsIFNQRUNJRVMgICA9IHJlcXVpcmUoJy4vX3drcycpKCdzcGVjaWVzJyk7XG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uKE8sIEQpe1xuICB2YXIgQyA9IGFuT2JqZWN0KE8pLmNvbnN0cnVjdG9yLCBTO1xuICByZXR1cm4gQyA9PT0gdW5kZWZpbmVkIHx8IChTID0gYW5PYmplY3QoQylbU1BFQ0lFU10pID09IHVuZGVmaW5lZCA/IEQgOiBhRnVuY3Rpb24oUyk7XG59OyIsInZhciBmYWlscyA9IHJlcXVpcmUoJy4vX2ZhaWxzJyk7XHJcblxyXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uKG1ldGhvZCwgYXJnKXtcclxuICByZXR1cm4gISFtZXRob2QgJiYgZmFpbHMoZnVuY3Rpb24oKXtcclxuICAgIGFyZyA/IG1ldGhvZC5jYWxsKG51bGwsIGZ1bmN0aW9uKCl7fSwgMSkgOiBtZXRob2QuY2FsbChudWxsKTtcclxuICB9KTtcclxufTsiLCJ2YXIgdG9JbnRlZ2VyID0gcmVxdWlyZSgnLi9fdG8taW50ZWdlcicpXG4gICwgZGVmaW5lZCAgID0gcmVxdWlyZSgnLi9fZGVmaW5lZCcpO1xuLy8gdHJ1ZSAgLT4gU3RyaW5nI2F0XG4vLyBmYWxzZSAtPiBTdHJpbmcjY29kZVBvaW50QXRcbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24oVE9fU1RSSU5HKXtcbiAgcmV0dXJuIGZ1bmN0aW9uKHRoYXQsIHBvcyl7XG4gICAgdmFyIHMgPSBTdHJpbmcoZGVmaW5lZCh0aGF0KSlcbiAgICAgICwgaSA9IHRvSW50ZWdlcihwb3MpXG4gICAgICAsIGwgPSBzLmxlbmd0aFxuICAgICAgLCBhLCBiO1xuICAgIGlmKGkgPCAwIHx8IGkgPj0gbClyZXR1cm4gVE9fU1RSSU5HID8gJycgOiB1bmRlZmluZWQ7XG4gICAgYSA9IHMuY2hhckNvZGVBdChpKTtcbiAgICByZXR1cm4gYSA8IDB4ZDgwMCB8fCBhID4gMHhkYmZmIHx8IGkgKyAxID09PSBsIHx8IChiID0gcy5jaGFyQ29kZUF0KGkgKyAxKSkgPCAweGRjMDAgfHwgYiA+IDB4ZGZmZlxuICAgICAgPyBUT19TVFJJTkcgPyBzLmNoYXJBdChpKSA6IGFcbiAgICAgIDogVE9fU1RSSU5HID8gcy5zbGljZShpLCBpICsgMikgOiAoYSAtIDB4ZDgwMCA8PCAxMCkgKyAoYiAtIDB4ZGMwMCkgKyAweDEwMDAwO1xuICB9O1xufTsiLCIvLyBoZWxwZXIgZm9yIFN0cmluZyN7c3RhcnRzV2l0aCwgZW5kc1dpdGgsIGluY2x1ZGVzfVxudmFyIGlzUmVnRXhwID0gcmVxdWlyZSgnLi9faXMtcmVnZXhwJylcbiAgLCBkZWZpbmVkICA9IHJlcXVpcmUoJy4vX2RlZmluZWQnKTtcblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbih0aGF0LCBzZWFyY2hTdHJpbmcsIE5BTUUpe1xuICBpZihpc1JlZ0V4cChzZWFyY2hTdHJpbmcpKXRocm93IFR5cGVFcnJvcignU3RyaW5nIycgKyBOQU1FICsgXCIgZG9lc24ndCBhY2NlcHQgcmVnZXghXCIpO1xuICByZXR1cm4gU3RyaW5nKGRlZmluZWQodGhhdCkpO1xufTsiLCJ2YXIgJGV4cG9ydCA9IHJlcXVpcmUoJy4vX2V4cG9ydCcpXG4gICwgZmFpbHMgICA9IHJlcXVpcmUoJy4vX2ZhaWxzJylcbiAgLCBkZWZpbmVkID0gcmVxdWlyZSgnLi9fZGVmaW5lZCcpXG4gICwgcXVvdCAgICA9IC9cIi9nO1xuLy8gQi4yLjMuMi4xIENyZWF0ZUhUTUwoc3RyaW5nLCB0YWcsIGF0dHJpYnV0ZSwgdmFsdWUpXG52YXIgY3JlYXRlSFRNTCA9IGZ1bmN0aW9uKHN0cmluZywgdGFnLCBhdHRyaWJ1dGUsIHZhbHVlKSB7XG4gIHZhciBTICA9IFN0cmluZyhkZWZpbmVkKHN0cmluZykpXG4gICAgLCBwMSA9ICc8JyArIHRhZztcbiAgaWYoYXR0cmlidXRlICE9PSAnJylwMSArPSAnICcgKyBhdHRyaWJ1dGUgKyAnPVwiJyArIFN0cmluZyh2YWx1ZSkucmVwbGFjZShxdW90LCAnJnF1b3Q7JykgKyAnXCInO1xuICByZXR1cm4gcDEgKyAnPicgKyBTICsgJzwvJyArIHRhZyArICc+Jztcbn07XG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uKE5BTUUsIGV4ZWMpe1xuICB2YXIgTyA9IHt9O1xuICBPW05BTUVdID0gZXhlYyhjcmVhdGVIVE1MKTtcbiAgJGV4cG9ydCgkZXhwb3J0LlAgKyAkZXhwb3J0LkYgKiBmYWlscyhmdW5jdGlvbigpe1xuICAgIHZhciB0ZXN0ID0gJydbTkFNRV0oJ1wiJyk7XG4gICAgcmV0dXJuIHRlc3QgIT09IHRlc3QudG9Mb3dlckNhc2UoKSB8fCB0ZXN0LnNwbGl0KCdcIicpLmxlbmd0aCA+IDM7XG4gIH0pLCAnU3RyaW5nJywgTyk7XG59OyIsIi8vIGh0dHBzOi8vZ2l0aHViLmNvbS90YzM5L3Byb3Bvc2FsLXN0cmluZy1wYWQtc3RhcnQtZW5kXG52YXIgdG9MZW5ndGggPSByZXF1aXJlKCcuL190by1sZW5ndGgnKVxuICAsIHJlcGVhdCAgID0gcmVxdWlyZSgnLi9fc3RyaW5nLXJlcGVhdCcpXG4gICwgZGVmaW5lZCAgPSByZXF1aXJlKCcuL19kZWZpbmVkJyk7XG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24odGhhdCwgbWF4TGVuZ3RoLCBmaWxsU3RyaW5nLCBsZWZ0KXtcbiAgdmFyIFMgICAgICAgICAgICA9IFN0cmluZyhkZWZpbmVkKHRoYXQpKVxuICAgICwgc3RyaW5nTGVuZ3RoID0gUy5sZW5ndGhcbiAgICAsIGZpbGxTdHIgICAgICA9IGZpbGxTdHJpbmcgPT09IHVuZGVmaW5lZCA/ICcgJyA6IFN0cmluZyhmaWxsU3RyaW5nKVxuICAgICwgaW50TWF4TGVuZ3RoID0gdG9MZW5ndGgobWF4TGVuZ3RoKTtcbiAgaWYoaW50TWF4TGVuZ3RoIDw9IHN0cmluZ0xlbmd0aClyZXR1cm4gUztcbiAgaWYoZmlsbFN0ciA9PSAnJylmaWxsU3RyID0gJyAnO1xuICB2YXIgZmlsbExlbiA9IGludE1heExlbmd0aCAtIHN0cmluZ0xlbmd0aFxuICAgICwgc3RyaW5nRmlsbGVyID0gcmVwZWF0LmNhbGwoZmlsbFN0ciwgTWF0aC5jZWlsKGZpbGxMZW4gLyBmaWxsU3RyLmxlbmd0aCkpO1xuICBpZihzdHJpbmdGaWxsZXIubGVuZ3RoID4gZmlsbExlbilzdHJpbmdGaWxsZXIgPSBzdHJpbmdGaWxsZXIuc2xpY2UoMCwgZmlsbExlbik7XG4gIHJldHVybiBsZWZ0ID8gc3RyaW5nRmlsbGVyICsgUyA6IFMgKyBzdHJpbmdGaWxsZXI7XG59O1xuIiwiJ3VzZSBzdHJpY3QnO1xudmFyIHRvSW50ZWdlciA9IHJlcXVpcmUoJy4vX3RvLWludGVnZXInKVxuICAsIGRlZmluZWQgICA9IHJlcXVpcmUoJy4vX2RlZmluZWQnKTtcblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiByZXBlYXQoY291bnQpe1xuICB2YXIgc3RyID0gU3RyaW5nKGRlZmluZWQodGhpcykpXG4gICAgLCByZXMgPSAnJ1xuICAgICwgbiAgID0gdG9JbnRlZ2VyKGNvdW50KTtcbiAgaWYobiA8IDAgfHwgbiA9PSBJbmZpbml0eSl0aHJvdyBSYW5nZUVycm9yKFwiQ291bnQgY2FuJ3QgYmUgbmVnYXRpdmVcIik7XG4gIGZvcig7biA+IDA7IChuID4+Pj0gMSkgJiYgKHN0ciArPSBzdHIpKWlmKG4gJiAxKXJlcyArPSBzdHI7XG4gIHJldHVybiByZXM7XG59OyIsInZhciAkZXhwb3J0ID0gcmVxdWlyZSgnLi9fZXhwb3J0JylcbiAgLCBkZWZpbmVkID0gcmVxdWlyZSgnLi9fZGVmaW5lZCcpXG4gICwgZmFpbHMgICA9IHJlcXVpcmUoJy4vX2ZhaWxzJylcbiAgLCBzcGFjZXMgID0gcmVxdWlyZSgnLi9fc3RyaW5nLXdzJylcbiAgLCBzcGFjZSAgID0gJ1snICsgc3BhY2VzICsgJ10nXG4gICwgbm9uICAgICA9ICdcXHUyMDBiXFx1MDA4NSdcbiAgLCBsdHJpbSAgID0gUmVnRXhwKCdeJyArIHNwYWNlICsgc3BhY2UgKyAnKicpXG4gICwgcnRyaW0gICA9IFJlZ0V4cChzcGFjZSArIHNwYWNlICsgJyokJyk7XG5cbnZhciBleHBvcnRlciA9IGZ1bmN0aW9uKEtFWSwgZXhlYywgQUxJQVMpe1xuICB2YXIgZXhwICAgPSB7fTtcbiAgdmFyIEZPUkNFID0gZmFpbHMoZnVuY3Rpb24oKXtcbiAgICByZXR1cm4gISFzcGFjZXNbS0VZXSgpIHx8IG5vbltLRVldKCkgIT0gbm9uO1xuICB9KTtcbiAgdmFyIGZuID0gZXhwW0tFWV0gPSBGT1JDRSA/IGV4ZWModHJpbSkgOiBzcGFjZXNbS0VZXTtcbiAgaWYoQUxJQVMpZXhwW0FMSUFTXSA9IGZuO1xuICAkZXhwb3J0KCRleHBvcnQuUCArICRleHBvcnQuRiAqIEZPUkNFLCAnU3RyaW5nJywgZXhwKTtcbn07XG5cbi8vIDEgLT4gU3RyaW5nI3RyaW1MZWZ0XG4vLyAyIC0+IFN0cmluZyN0cmltUmlnaHRcbi8vIDMgLT4gU3RyaW5nI3RyaW1cbnZhciB0cmltID0gZXhwb3J0ZXIudHJpbSA9IGZ1bmN0aW9uKHN0cmluZywgVFlQRSl7XG4gIHN0cmluZyA9IFN0cmluZyhkZWZpbmVkKHN0cmluZykpO1xuICBpZihUWVBFICYgMSlzdHJpbmcgPSBzdHJpbmcucmVwbGFjZShsdHJpbSwgJycpO1xuICBpZihUWVBFICYgMilzdHJpbmcgPSBzdHJpbmcucmVwbGFjZShydHJpbSwgJycpO1xuICByZXR1cm4gc3RyaW5nO1xufTtcblxubW9kdWxlLmV4cG9ydHMgPSBleHBvcnRlcjsiLCJtb2R1bGUuZXhwb3J0cyA9ICdcXHgwOVxceDBBXFx4MEJcXHgwQ1xceDBEXFx4MjBcXHhBMFxcdTE2ODBcXHUxODBFXFx1MjAwMFxcdTIwMDFcXHUyMDAyXFx1MjAwMycgK1xyXG4gICdcXHUyMDA0XFx1MjAwNVxcdTIwMDZcXHUyMDA3XFx1MjAwOFxcdTIwMDlcXHUyMDBBXFx1MjAyRlxcdTIwNUZcXHUzMDAwXFx1MjAyOFxcdTIwMjlcXHVGRUZGJzsiLCJ2YXIgY3R4ICAgICAgICAgICAgICAgID0gcmVxdWlyZSgnLi9fY3R4JylcbiAgLCBpbnZva2UgICAgICAgICAgICAgPSByZXF1aXJlKCcuL19pbnZva2UnKVxuICAsIGh0bWwgICAgICAgICAgICAgICA9IHJlcXVpcmUoJy4vX2h0bWwnKVxuICAsIGNlbCAgICAgICAgICAgICAgICA9IHJlcXVpcmUoJy4vX2RvbS1jcmVhdGUnKVxuICAsIGdsb2JhbCAgICAgICAgICAgICA9IHJlcXVpcmUoJy4vX2dsb2JhbCcpXG4gICwgcHJvY2VzcyAgICAgICAgICAgID0gZ2xvYmFsLnByb2Nlc3NcbiAgLCBzZXRUYXNrICAgICAgICAgICAgPSBnbG9iYWwuc2V0SW1tZWRpYXRlXG4gICwgY2xlYXJUYXNrICAgICAgICAgID0gZ2xvYmFsLmNsZWFySW1tZWRpYXRlXG4gICwgTWVzc2FnZUNoYW5uZWwgICAgID0gZ2xvYmFsLk1lc3NhZ2VDaGFubmVsXG4gICwgY291bnRlciAgICAgICAgICAgID0gMFxuICAsIHF1ZXVlICAgICAgICAgICAgICA9IHt9XG4gICwgT05SRUFEWVNUQVRFQ0hBTkdFID0gJ29ucmVhZHlzdGF0ZWNoYW5nZSdcbiAgLCBkZWZlciwgY2hhbm5lbCwgcG9ydDtcbnZhciBydW4gPSBmdW5jdGlvbigpe1xuICB2YXIgaWQgPSArdGhpcztcbiAgaWYocXVldWUuaGFzT3duUHJvcGVydHkoaWQpKXtcbiAgICB2YXIgZm4gPSBxdWV1ZVtpZF07XG4gICAgZGVsZXRlIHF1ZXVlW2lkXTtcbiAgICBmbigpO1xuICB9XG59O1xudmFyIGxpc3RlbmVyID0gZnVuY3Rpb24oZXZlbnQpe1xuICBydW4uY2FsbChldmVudC5kYXRhKTtcbn07XG4vLyBOb2RlLmpzIDAuOSsgJiBJRTEwKyBoYXMgc2V0SW1tZWRpYXRlLCBvdGhlcndpc2U6XG5pZighc2V0VGFzayB8fCAhY2xlYXJUYXNrKXtcbiAgc2V0VGFzayA9IGZ1bmN0aW9uIHNldEltbWVkaWF0ZShmbil7XG4gICAgdmFyIGFyZ3MgPSBbXSwgaSA9IDE7XG4gICAgd2hpbGUoYXJndW1lbnRzLmxlbmd0aCA+IGkpYXJncy5wdXNoKGFyZ3VtZW50c1tpKytdKTtcbiAgICBxdWV1ZVsrK2NvdW50ZXJdID0gZnVuY3Rpb24oKXtcbiAgICAgIGludm9rZSh0eXBlb2YgZm4gPT0gJ2Z1bmN0aW9uJyA/IGZuIDogRnVuY3Rpb24oZm4pLCBhcmdzKTtcbiAgICB9O1xuICAgIGRlZmVyKGNvdW50ZXIpO1xuICAgIHJldHVybiBjb3VudGVyO1xuICB9O1xuICBjbGVhclRhc2sgPSBmdW5jdGlvbiBjbGVhckltbWVkaWF0ZShpZCl7XG4gICAgZGVsZXRlIHF1ZXVlW2lkXTtcbiAgfTtcbiAgLy8gTm9kZS5qcyAwLjgtXG4gIGlmKHJlcXVpcmUoJy4vX2NvZicpKHByb2Nlc3MpID09ICdwcm9jZXNzJyl7XG4gICAgZGVmZXIgPSBmdW5jdGlvbihpZCl7XG4gICAgICBwcm9jZXNzLm5leHRUaWNrKGN0eChydW4sIGlkLCAxKSk7XG4gICAgfTtcbiAgLy8gQnJvd3NlcnMgd2l0aCBNZXNzYWdlQ2hhbm5lbCwgaW5jbHVkZXMgV2ViV29ya2Vyc1xuICB9IGVsc2UgaWYoTWVzc2FnZUNoYW5uZWwpe1xuICAgIGNoYW5uZWwgPSBuZXcgTWVzc2FnZUNoYW5uZWw7XG4gICAgcG9ydCAgICA9IGNoYW5uZWwucG9ydDI7XG4gICAgY2hhbm5lbC5wb3J0MS5vbm1lc3NhZ2UgPSBsaXN0ZW5lcjtcbiAgICBkZWZlciA9IGN0eChwb3J0LnBvc3RNZXNzYWdlLCBwb3J0LCAxKTtcbiAgLy8gQnJvd3NlcnMgd2l0aCBwb3N0TWVzc2FnZSwgc2tpcCBXZWJXb3JrZXJzXG4gIC8vIElFOCBoYXMgcG9zdE1lc3NhZ2UsIGJ1dCBpdCdzIHN5bmMgJiB0eXBlb2YgaXRzIHBvc3RNZXNzYWdlIGlzICdvYmplY3QnXG4gIH0gZWxzZSBpZihnbG9iYWwuYWRkRXZlbnRMaXN0ZW5lciAmJiB0eXBlb2YgcG9zdE1lc3NhZ2UgPT0gJ2Z1bmN0aW9uJyAmJiAhZ2xvYmFsLmltcG9ydFNjcmlwdHMpe1xuICAgIGRlZmVyID0gZnVuY3Rpb24oaWQpe1xuICAgICAgZ2xvYmFsLnBvc3RNZXNzYWdlKGlkICsgJycsICcqJyk7XG4gICAgfTtcbiAgICBnbG9iYWwuYWRkRXZlbnRMaXN0ZW5lcignbWVzc2FnZScsIGxpc3RlbmVyLCBmYWxzZSk7XG4gIC8vIElFOC1cbiAgfSBlbHNlIGlmKE9OUkVBRFlTVEFURUNIQU5HRSBpbiBjZWwoJ3NjcmlwdCcpKXtcbiAgICBkZWZlciA9IGZ1bmN0aW9uKGlkKXtcbiAgICAgIGh0bWwuYXBwZW5kQ2hpbGQoY2VsKCdzY3JpcHQnKSlbT05SRUFEWVNUQVRFQ0hBTkdFXSA9IGZ1bmN0aW9uKCl7XG4gICAgICAgIGh0bWwucmVtb3ZlQ2hpbGQodGhpcyk7XG4gICAgICAgIHJ1bi5jYWxsKGlkKTtcbiAgICAgIH07XG4gICAgfTtcbiAgLy8gUmVzdCBvbGQgYnJvd3NlcnNcbiAgfSBlbHNlIHtcbiAgICBkZWZlciA9IGZ1bmN0aW9uKGlkKXtcbiAgICAgIHNldFRpbWVvdXQoY3R4KHJ1biwgaWQsIDEpLCAwKTtcbiAgICB9O1xuICB9XG59XG5tb2R1bGUuZXhwb3J0cyA9IHtcbiAgc2V0OiAgIHNldFRhc2ssXG4gIGNsZWFyOiBjbGVhclRhc2tcbn07IiwidmFyIHRvSW50ZWdlciA9IHJlcXVpcmUoJy4vX3RvLWludGVnZXInKVxuICAsIG1heCAgICAgICA9IE1hdGgubWF4XG4gICwgbWluICAgICAgID0gTWF0aC5taW47XG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uKGluZGV4LCBsZW5ndGgpe1xuICBpbmRleCA9IHRvSW50ZWdlcihpbmRleCk7XG4gIHJldHVybiBpbmRleCA8IDAgPyBtYXgoaW5kZXggKyBsZW5ndGgsIDApIDogbWluKGluZGV4LCBsZW5ndGgpO1xufTsiLCIvLyA3LjEuNCBUb0ludGVnZXJcbnZhciBjZWlsICA9IE1hdGguY2VpbFxuICAsIGZsb29yID0gTWF0aC5mbG9vcjtcbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24oaXQpe1xuICByZXR1cm4gaXNOYU4oaXQgPSAraXQpID8gMCA6IChpdCA+IDAgPyBmbG9vciA6IGNlaWwpKGl0KTtcbn07IiwiLy8gdG8gaW5kZXhlZCBvYmplY3QsIHRvT2JqZWN0IHdpdGggZmFsbGJhY2sgZm9yIG5vbi1hcnJheS1saWtlIEVTMyBzdHJpbmdzXG52YXIgSU9iamVjdCA9IHJlcXVpcmUoJy4vX2lvYmplY3QnKVxuICAsIGRlZmluZWQgPSByZXF1aXJlKCcuL19kZWZpbmVkJyk7XG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uKGl0KXtcbiAgcmV0dXJuIElPYmplY3QoZGVmaW5lZChpdCkpO1xufTsiLCIvLyA3LjEuMTUgVG9MZW5ndGhcbnZhciB0b0ludGVnZXIgPSByZXF1aXJlKCcuL190by1pbnRlZ2VyJylcbiAgLCBtaW4gICAgICAgPSBNYXRoLm1pbjtcbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24oaXQpe1xuICByZXR1cm4gaXQgPiAwID8gbWluKHRvSW50ZWdlcihpdCksIDB4MWZmZmZmZmZmZmZmZmYpIDogMDsgLy8gcG93KDIsIDUzKSAtIDEgPT0gOTAwNzE5OTI1NDc0MDk5MVxufTsiLCIvLyA3LjEuMTMgVG9PYmplY3QoYXJndW1lbnQpXG52YXIgZGVmaW5lZCA9IHJlcXVpcmUoJy4vX2RlZmluZWQnKTtcbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24oaXQpe1xuICByZXR1cm4gT2JqZWN0KGRlZmluZWQoaXQpKTtcbn07IiwiLy8gNy4xLjEgVG9QcmltaXRpdmUoaW5wdXQgWywgUHJlZmVycmVkVHlwZV0pXG52YXIgaXNPYmplY3QgPSByZXF1aXJlKCcuL19pcy1vYmplY3QnKTtcbi8vIGluc3RlYWQgb2YgdGhlIEVTNiBzcGVjIHZlcnNpb24sIHdlIGRpZG4ndCBpbXBsZW1lbnQgQEB0b1ByaW1pdGl2ZSBjYXNlXG4vLyBhbmQgdGhlIHNlY29uZCBhcmd1bWVudCAtIGZsYWcgLSBwcmVmZXJyZWQgdHlwZSBpcyBhIHN0cmluZ1xubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbihpdCwgUyl7XG4gIGlmKCFpc09iamVjdChpdCkpcmV0dXJuIGl0O1xuICB2YXIgZm4sIHZhbDtcbiAgaWYoUyAmJiB0eXBlb2YgKGZuID0gaXQudG9TdHJpbmcpID09ICdmdW5jdGlvbicgJiYgIWlzT2JqZWN0KHZhbCA9IGZuLmNhbGwoaXQpKSlyZXR1cm4gdmFsO1xuICBpZih0eXBlb2YgKGZuID0gaXQudmFsdWVPZikgPT0gJ2Z1bmN0aW9uJyAmJiAhaXNPYmplY3QodmFsID0gZm4uY2FsbChpdCkpKXJldHVybiB2YWw7XG4gIGlmKCFTICYmIHR5cGVvZiAoZm4gPSBpdC50b1N0cmluZykgPT0gJ2Z1bmN0aW9uJyAmJiAhaXNPYmplY3QodmFsID0gZm4uY2FsbChpdCkpKXJldHVybiB2YWw7XG4gIHRocm93IFR5cGVFcnJvcihcIkNhbid0IGNvbnZlcnQgb2JqZWN0IHRvIHByaW1pdGl2ZSB2YWx1ZVwiKTtcbn07IiwiJ3VzZSBzdHJpY3QnO1xuaWYocmVxdWlyZSgnLi9fZGVzY3JpcHRvcnMnKSl7XG4gIHZhciBMSUJSQVJZICAgICAgICAgICAgID0gcmVxdWlyZSgnLi9fbGlicmFyeScpXG4gICAgLCBnbG9iYWwgICAgICAgICAgICAgID0gcmVxdWlyZSgnLi9fZ2xvYmFsJylcbiAgICAsIGZhaWxzICAgICAgICAgICAgICAgPSByZXF1aXJlKCcuL19mYWlscycpXG4gICAgLCAkZXhwb3J0ICAgICAgICAgICAgID0gcmVxdWlyZSgnLi9fZXhwb3J0JylcbiAgICAsICR0eXBlZCAgICAgICAgICAgICAgPSByZXF1aXJlKCcuL190eXBlZCcpXG4gICAgLCAkYnVmZmVyICAgICAgICAgICAgID0gcmVxdWlyZSgnLi9fdHlwZWQtYnVmZmVyJylcbiAgICAsIGN0eCAgICAgICAgICAgICAgICAgPSByZXF1aXJlKCcuL19jdHgnKVxuICAgICwgYW5JbnN0YW5jZSAgICAgICAgICA9IHJlcXVpcmUoJy4vX2FuLWluc3RhbmNlJylcbiAgICAsIHByb3BlcnR5RGVzYyAgICAgICAgPSByZXF1aXJlKCcuL19wcm9wZXJ0eS1kZXNjJylcbiAgICAsIGhpZGUgICAgICAgICAgICAgICAgPSByZXF1aXJlKCcuL19oaWRlJylcbiAgICAsIHJlZGVmaW5lQWxsICAgICAgICAgPSByZXF1aXJlKCcuL19yZWRlZmluZS1hbGwnKVxuICAgICwgaXNJbnRlZ2VyICAgICAgICAgICA9IHJlcXVpcmUoJy4vX2lzLWludGVnZXInKVxuICAgICwgdG9JbnRlZ2VyICAgICAgICAgICA9IHJlcXVpcmUoJy4vX3RvLWludGVnZXInKVxuICAgICwgdG9MZW5ndGggICAgICAgICAgICA9IHJlcXVpcmUoJy4vX3RvLWxlbmd0aCcpXG4gICAgLCB0b0luZGV4ICAgICAgICAgICAgID0gcmVxdWlyZSgnLi9fdG8taW5kZXgnKVxuICAgICwgdG9QcmltaXRpdmUgICAgICAgICA9IHJlcXVpcmUoJy4vX3RvLXByaW1pdGl2ZScpXG4gICAgLCBoYXMgICAgICAgICAgICAgICAgID0gcmVxdWlyZSgnLi9faGFzJylcbiAgICAsIHNhbWUgICAgICAgICAgICAgICAgPSByZXF1aXJlKCcuL19zYW1lLXZhbHVlJylcbiAgICAsIGNsYXNzb2YgICAgICAgICAgICAgPSByZXF1aXJlKCcuL19jbGFzc29mJylcbiAgICAsIGlzT2JqZWN0ICAgICAgICAgICAgPSByZXF1aXJlKCcuL19pcy1vYmplY3QnKVxuICAgICwgdG9PYmplY3QgICAgICAgICAgICA9IHJlcXVpcmUoJy4vX3RvLW9iamVjdCcpXG4gICAgLCBpc0FycmF5SXRlciAgICAgICAgID0gcmVxdWlyZSgnLi9faXMtYXJyYXktaXRlcicpXG4gICAgLCBjcmVhdGUgICAgICAgICAgICAgID0gcmVxdWlyZSgnLi9fb2JqZWN0LWNyZWF0ZScpXG4gICAgLCBnZXRQcm90b3R5cGVPZiAgICAgID0gcmVxdWlyZSgnLi9fb2JqZWN0LWdwbycpXG4gICAgLCBnT1BOICAgICAgICAgICAgICAgID0gcmVxdWlyZSgnLi9fb2JqZWN0LWdvcG4nKS5mXG4gICAgLCBpc0l0ZXJhYmxlICAgICAgICAgID0gcmVxdWlyZSgnLi9jb3JlLmlzLWl0ZXJhYmxlJylcbiAgICAsIGdldEl0ZXJGbiAgICAgICAgICAgPSByZXF1aXJlKCcuL2NvcmUuZ2V0LWl0ZXJhdG9yLW1ldGhvZCcpXG4gICAgLCB1aWQgICAgICAgICAgICAgICAgID0gcmVxdWlyZSgnLi9fdWlkJylcbiAgICAsIHdrcyAgICAgICAgICAgICAgICAgPSByZXF1aXJlKCcuL193a3MnKVxuICAgICwgY3JlYXRlQXJyYXlNZXRob2QgICA9IHJlcXVpcmUoJy4vX2FycmF5LW1ldGhvZHMnKVxuICAgICwgY3JlYXRlQXJyYXlJbmNsdWRlcyA9IHJlcXVpcmUoJy4vX2FycmF5LWluY2x1ZGVzJylcbiAgICAsIHNwZWNpZXNDb25zdHJ1Y3RvciAgPSByZXF1aXJlKCcuL19zcGVjaWVzLWNvbnN0cnVjdG9yJylcbiAgICAsIEFycmF5SXRlcmF0b3JzICAgICAgPSByZXF1aXJlKCcuL2VzNi5hcnJheS5pdGVyYXRvcicpXG4gICAgLCBJdGVyYXRvcnMgICAgICAgICAgID0gcmVxdWlyZSgnLi9faXRlcmF0b3JzJylcbiAgICAsICRpdGVyRGV0ZWN0ICAgICAgICAgPSByZXF1aXJlKCcuL19pdGVyLWRldGVjdCcpXG4gICAgLCBzZXRTcGVjaWVzICAgICAgICAgID0gcmVxdWlyZSgnLi9fc2V0LXNwZWNpZXMnKVxuICAgICwgYXJyYXlGaWxsICAgICAgICAgICA9IHJlcXVpcmUoJy4vX2FycmF5LWZpbGwnKVxuICAgICwgYXJyYXlDb3B5V2l0aGluICAgICA9IHJlcXVpcmUoJy4vX2FycmF5LWNvcHktd2l0aGluJylcbiAgICAsICREUCAgICAgICAgICAgICAgICAgPSByZXF1aXJlKCcuL19vYmplY3QtZHAnKVxuICAgICwgJEdPUEQgICAgICAgICAgICAgICA9IHJlcXVpcmUoJy4vX29iamVjdC1nb3BkJylcbiAgICAsIGRQICAgICAgICAgICAgICAgICAgPSAkRFAuZlxuICAgICwgZ09QRCAgICAgICAgICAgICAgICA9ICRHT1BELmZcbiAgICAsIFJhbmdlRXJyb3IgICAgICAgICAgPSBnbG9iYWwuUmFuZ2VFcnJvclxuICAgICwgVHlwZUVycm9yICAgICAgICAgICA9IGdsb2JhbC5UeXBlRXJyb3JcbiAgICAsIFVpbnQ4QXJyYXkgICAgICAgICAgPSBnbG9iYWwuVWludDhBcnJheVxuICAgICwgQVJSQVlfQlVGRkVSICAgICAgICA9ICdBcnJheUJ1ZmZlcidcbiAgICAsIFNIQVJFRF9CVUZGRVIgICAgICAgPSAnU2hhcmVkJyArIEFSUkFZX0JVRkZFUlxuICAgICwgQllURVNfUEVSX0VMRU1FTlQgICA9ICdCWVRFU19QRVJfRUxFTUVOVCdcbiAgICAsIFBST1RPVFlQRSAgICAgICAgICAgPSAncHJvdG90eXBlJ1xuICAgICwgQXJyYXlQcm90byAgICAgICAgICA9IEFycmF5W1BST1RPVFlQRV1cbiAgICAsICRBcnJheUJ1ZmZlciAgICAgICAgPSAkYnVmZmVyLkFycmF5QnVmZmVyXG4gICAgLCAkRGF0YVZpZXcgICAgICAgICAgID0gJGJ1ZmZlci5EYXRhVmlld1xuICAgICwgYXJyYXlGb3JFYWNoICAgICAgICA9IGNyZWF0ZUFycmF5TWV0aG9kKDApXG4gICAgLCBhcnJheUZpbHRlciAgICAgICAgID0gY3JlYXRlQXJyYXlNZXRob2QoMilcbiAgICAsIGFycmF5U29tZSAgICAgICAgICAgPSBjcmVhdGVBcnJheU1ldGhvZCgzKVxuICAgICwgYXJyYXlFdmVyeSAgICAgICAgICA9IGNyZWF0ZUFycmF5TWV0aG9kKDQpXG4gICAgLCBhcnJheUZpbmQgICAgICAgICAgID0gY3JlYXRlQXJyYXlNZXRob2QoNSlcbiAgICAsIGFycmF5RmluZEluZGV4ICAgICAgPSBjcmVhdGVBcnJheU1ldGhvZCg2KVxuICAgICwgYXJyYXlJbmNsdWRlcyAgICAgICA9IGNyZWF0ZUFycmF5SW5jbHVkZXModHJ1ZSlcbiAgICAsIGFycmF5SW5kZXhPZiAgICAgICAgPSBjcmVhdGVBcnJheUluY2x1ZGVzKGZhbHNlKVxuICAgICwgYXJyYXlWYWx1ZXMgICAgICAgICA9IEFycmF5SXRlcmF0b3JzLnZhbHVlc1xuICAgICwgYXJyYXlLZXlzICAgICAgICAgICA9IEFycmF5SXRlcmF0b3JzLmtleXNcbiAgICAsIGFycmF5RW50cmllcyAgICAgICAgPSBBcnJheUl0ZXJhdG9ycy5lbnRyaWVzXG4gICAgLCBhcnJheUxhc3RJbmRleE9mICAgID0gQXJyYXlQcm90by5sYXN0SW5kZXhPZlxuICAgICwgYXJyYXlSZWR1Y2UgICAgICAgICA9IEFycmF5UHJvdG8ucmVkdWNlXG4gICAgLCBhcnJheVJlZHVjZVJpZ2h0ICAgID0gQXJyYXlQcm90by5yZWR1Y2VSaWdodFxuICAgICwgYXJyYXlKb2luICAgICAgICAgICA9IEFycmF5UHJvdG8uam9pblxuICAgICwgYXJyYXlTb3J0ICAgICAgICAgICA9IEFycmF5UHJvdG8uc29ydFxuICAgICwgYXJyYXlTbGljZSAgICAgICAgICA9IEFycmF5UHJvdG8uc2xpY2VcbiAgICAsIGFycmF5VG9TdHJpbmcgICAgICAgPSBBcnJheVByb3RvLnRvU3RyaW5nXG4gICAgLCBhcnJheVRvTG9jYWxlU3RyaW5nID0gQXJyYXlQcm90by50b0xvY2FsZVN0cmluZ1xuICAgICwgSVRFUkFUT1IgICAgICAgICAgICA9IHdrcygnaXRlcmF0b3InKVxuICAgICwgVEFHICAgICAgICAgICAgICAgICA9IHdrcygndG9TdHJpbmdUYWcnKVxuICAgICwgVFlQRURfQ09OU1RSVUNUT1IgICA9IHVpZCgndHlwZWRfY29uc3RydWN0b3InKVxuICAgICwgREVGX0NPTlNUUlVDVE9SICAgICA9IHVpZCgnZGVmX2NvbnN0cnVjdG9yJylcbiAgICAsIEFMTF9DT05TVFJVQ1RPUlMgICAgPSAkdHlwZWQuQ09OU1RSXG4gICAgLCBUWVBFRF9BUlJBWSAgICAgICAgID0gJHR5cGVkLlRZUEVEXG4gICAgLCBWSUVXICAgICAgICAgICAgICAgID0gJHR5cGVkLlZJRVdcbiAgICAsIFdST05HX0xFTkdUSCAgICAgICAgPSAnV3JvbmcgbGVuZ3RoISc7XG5cbiAgdmFyICRtYXAgPSBjcmVhdGVBcnJheU1ldGhvZCgxLCBmdW5jdGlvbihPLCBsZW5ndGgpe1xuICAgIHJldHVybiBhbGxvY2F0ZShzcGVjaWVzQ29uc3RydWN0b3IoTywgT1tERUZfQ09OU1RSVUNUT1JdKSwgbGVuZ3RoKTtcbiAgfSk7XG5cbiAgdmFyIExJVFRMRV9FTkRJQU4gPSBmYWlscyhmdW5jdGlvbigpe1xuICAgIHJldHVybiBuZXcgVWludDhBcnJheShuZXcgVWludDE2QXJyYXkoWzFdKS5idWZmZXIpWzBdID09PSAxO1xuICB9KTtcblxuICB2YXIgRk9SQ0VEX1NFVCA9ICEhVWludDhBcnJheSAmJiAhIVVpbnQ4QXJyYXlbUFJPVE9UWVBFXS5zZXQgJiYgZmFpbHMoZnVuY3Rpb24oKXtcbiAgICBuZXcgVWludDhBcnJheSgxKS5zZXQoe30pO1xuICB9KTtcblxuICB2YXIgc3RyaWN0VG9MZW5ndGggPSBmdW5jdGlvbihpdCwgU0FNRSl7XG4gICAgaWYoaXQgPT09IHVuZGVmaW5lZCl0aHJvdyBUeXBlRXJyb3IoV1JPTkdfTEVOR1RIKTtcbiAgICB2YXIgbnVtYmVyID0gK2l0XG4gICAgICAsIGxlbmd0aCA9IHRvTGVuZ3RoKGl0KTtcbiAgICBpZihTQU1FICYmICFzYW1lKG51bWJlciwgbGVuZ3RoKSl0aHJvdyBSYW5nZUVycm9yKFdST05HX0xFTkdUSCk7XG4gICAgcmV0dXJuIGxlbmd0aDtcbiAgfTtcblxuICB2YXIgdG9PZmZzZXQgPSBmdW5jdGlvbihpdCwgQllURVMpe1xuICAgIHZhciBvZmZzZXQgPSB0b0ludGVnZXIoaXQpO1xuICAgIGlmKG9mZnNldCA8IDAgfHwgb2Zmc2V0ICUgQllURVMpdGhyb3cgUmFuZ2VFcnJvcignV3Jvbmcgb2Zmc2V0IScpO1xuICAgIHJldHVybiBvZmZzZXQ7XG4gIH07XG5cbiAgdmFyIHZhbGlkYXRlID0gZnVuY3Rpb24oaXQpe1xuICAgIGlmKGlzT2JqZWN0KGl0KSAmJiBUWVBFRF9BUlJBWSBpbiBpdClyZXR1cm4gaXQ7XG4gICAgdGhyb3cgVHlwZUVycm9yKGl0ICsgJyBpcyBub3QgYSB0eXBlZCBhcnJheSEnKTtcbiAgfTtcblxuICB2YXIgYWxsb2NhdGUgPSBmdW5jdGlvbihDLCBsZW5ndGgpe1xuICAgIGlmKCEoaXNPYmplY3QoQykgJiYgVFlQRURfQ09OU1RSVUNUT1IgaW4gQykpe1xuICAgICAgdGhyb3cgVHlwZUVycm9yKCdJdCBpcyBub3QgYSB0eXBlZCBhcnJheSBjb25zdHJ1Y3RvciEnKTtcbiAgICB9IHJldHVybiBuZXcgQyhsZW5ndGgpO1xuICB9O1xuXG4gIHZhciBzcGVjaWVzRnJvbUxpc3QgPSBmdW5jdGlvbihPLCBsaXN0KXtcbiAgICByZXR1cm4gZnJvbUxpc3Qoc3BlY2llc0NvbnN0cnVjdG9yKE8sIE9bREVGX0NPTlNUUlVDVE9SXSksIGxpc3QpO1xuICB9O1xuXG4gIHZhciBmcm9tTGlzdCA9IGZ1bmN0aW9uKEMsIGxpc3Qpe1xuICAgIHZhciBpbmRleCAgPSAwXG4gICAgICAsIGxlbmd0aCA9IGxpc3QubGVuZ3RoXG4gICAgICAsIHJlc3VsdCA9IGFsbG9jYXRlKEMsIGxlbmd0aCk7XG4gICAgd2hpbGUobGVuZ3RoID4gaW5kZXgpcmVzdWx0W2luZGV4XSA9IGxpc3RbaW5kZXgrK107XG4gICAgcmV0dXJuIHJlc3VsdDtcbiAgfTtcblxuICB2YXIgYWRkR2V0dGVyID0gZnVuY3Rpb24oaXQsIGtleSwgaW50ZXJuYWwpe1xuICAgIGRQKGl0LCBrZXksIHtnZXQ6IGZ1bmN0aW9uKCl7IHJldHVybiB0aGlzLl9kW2ludGVybmFsXTsgfX0pO1xuICB9O1xuXG4gIHZhciAkZnJvbSA9IGZ1bmN0aW9uIGZyb20oc291cmNlIC8qLCBtYXBmbiwgdGhpc0FyZyAqLyl7XG4gICAgdmFyIE8gICAgICAgPSB0b09iamVjdChzb3VyY2UpXG4gICAgICAsIGFMZW4gICAgPSBhcmd1bWVudHMubGVuZ3RoXG4gICAgICAsIG1hcGZuICAgPSBhTGVuID4gMSA/IGFyZ3VtZW50c1sxXSA6IHVuZGVmaW5lZFxuICAgICAgLCBtYXBwaW5nID0gbWFwZm4gIT09IHVuZGVmaW5lZFxuICAgICAgLCBpdGVyRm4gID0gZ2V0SXRlckZuKE8pXG4gICAgICAsIGksIGxlbmd0aCwgdmFsdWVzLCByZXN1bHQsIHN0ZXAsIGl0ZXJhdG9yO1xuICAgIGlmKGl0ZXJGbiAhPSB1bmRlZmluZWQgJiYgIWlzQXJyYXlJdGVyKGl0ZXJGbikpe1xuICAgICAgZm9yKGl0ZXJhdG9yID0gaXRlckZuLmNhbGwoTyksIHZhbHVlcyA9IFtdLCBpID0gMDsgIShzdGVwID0gaXRlcmF0b3IubmV4dCgpKS5kb25lOyBpKyspe1xuICAgICAgICB2YWx1ZXMucHVzaChzdGVwLnZhbHVlKTtcbiAgICAgIH0gTyA9IHZhbHVlcztcbiAgICB9XG4gICAgaWYobWFwcGluZyAmJiBhTGVuID4gMiltYXBmbiA9IGN0eChtYXBmbiwgYXJndW1lbnRzWzJdLCAyKTtcbiAgICBmb3IoaSA9IDAsIGxlbmd0aCA9IHRvTGVuZ3RoKE8ubGVuZ3RoKSwgcmVzdWx0ID0gYWxsb2NhdGUodGhpcywgbGVuZ3RoKTsgbGVuZ3RoID4gaTsgaSsrKXtcbiAgICAgIHJlc3VsdFtpXSA9IG1hcHBpbmcgPyBtYXBmbihPW2ldLCBpKSA6IE9baV07XG4gICAgfVxuICAgIHJldHVybiByZXN1bHQ7XG4gIH07XG5cbiAgdmFyICRvZiA9IGZ1bmN0aW9uIG9mKC8qLi4uaXRlbXMqLyl7XG4gICAgdmFyIGluZGV4ICA9IDBcbiAgICAgICwgbGVuZ3RoID0gYXJndW1lbnRzLmxlbmd0aFxuICAgICAgLCByZXN1bHQgPSBhbGxvY2F0ZSh0aGlzLCBsZW5ndGgpO1xuICAgIHdoaWxlKGxlbmd0aCA+IGluZGV4KXJlc3VsdFtpbmRleF0gPSBhcmd1bWVudHNbaW5kZXgrK107XG4gICAgcmV0dXJuIHJlc3VsdDtcbiAgfTtcblxuICAvLyBpT1MgU2FmYXJpIDYueCBmYWlscyBoZXJlXG4gIHZhciBUT19MT0NBTEVfQlVHID0gISFVaW50OEFycmF5ICYmIGZhaWxzKGZ1bmN0aW9uKCl7IGFycmF5VG9Mb2NhbGVTdHJpbmcuY2FsbChuZXcgVWludDhBcnJheSgxKSk7IH0pO1xuXG4gIHZhciAkdG9Mb2NhbGVTdHJpbmcgPSBmdW5jdGlvbiB0b0xvY2FsZVN0cmluZygpe1xuICAgIHJldHVybiBhcnJheVRvTG9jYWxlU3RyaW5nLmFwcGx5KFRPX0xPQ0FMRV9CVUcgPyBhcnJheVNsaWNlLmNhbGwodmFsaWRhdGUodGhpcykpIDogdmFsaWRhdGUodGhpcyksIGFyZ3VtZW50cyk7XG4gIH07XG5cbiAgdmFyIHByb3RvID0ge1xuICAgIGNvcHlXaXRoaW46IGZ1bmN0aW9uIGNvcHlXaXRoaW4odGFyZ2V0LCBzdGFydCAvKiwgZW5kICovKXtcbiAgICAgIHJldHVybiBhcnJheUNvcHlXaXRoaW4uY2FsbCh2YWxpZGF0ZSh0aGlzKSwgdGFyZ2V0LCBzdGFydCwgYXJndW1lbnRzLmxlbmd0aCA+IDIgPyBhcmd1bWVudHNbMl0gOiB1bmRlZmluZWQpO1xuICAgIH0sXG4gICAgZXZlcnk6IGZ1bmN0aW9uIGV2ZXJ5KGNhbGxiYWNrZm4gLyosIHRoaXNBcmcgKi8pe1xuICAgICAgcmV0dXJuIGFycmF5RXZlcnkodmFsaWRhdGUodGhpcyksIGNhbGxiYWNrZm4sIGFyZ3VtZW50cy5sZW5ndGggPiAxID8gYXJndW1lbnRzWzFdIDogdW5kZWZpbmVkKTtcbiAgICB9LFxuICAgIGZpbGw6IGZ1bmN0aW9uIGZpbGwodmFsdWUgLyosIHN0YXJ0LCBlbmQgKi8peyAvLyBlc2xpbnQtZGlzYWJsZS1saW5lIG5vLXVudXNlZC12YXJzXG4gICAgICByZXR1cm4gYXJyYXlGaWxsLmFwcGx5KHZhbGlkYXRlKHRoaXMpLCBhcmd1bWVudHMpO1xuICAgIH0sXG4gICAgZmlsdGVyOiBmdW5jdGlvbiBmaWx0ZXIoY2FsbGJhY2tmbiAvKiwgdGhpc0FyZyAqLyl7XG4gICAgICByZXR1cm4gc3BlY2llc0Zyb21MaXN0KHRoaXMsIGFycmF5RmlsdGVyKHZhbGlkYXRlKHRoaXMpLCBjYWxsYmFja2ZuLFxuICAgICAgICBhcmd1bWVudHMubGVuZ3RoID4gMSA/IGFyZ3VtZW50c1sxXSA6IHVuZGVmaW5lZCkpO1xuICAgIH0sXG4gICAgZmluZDogZnVuY3Rpb24gZmluZChwcmVkaWNhdGUgLyosIHRoaXNBcmcgKi8pe1xuICAgICAgcmV0dXJuIGFycmF5RmluZCh2YWxpZGF0ZSh0aGlzKSwgcHJlZGljYXRlLCBhcmd1bWVudHMubGVuZ3RoID4gMSA/IGFyZ3VtZW50c1sxXSA6IHVuZGVmaW5lZCk7XG4gICAgfSxcbiAgICBmaW5kSW5kZXg6IGZ1bmN0aW9uIGZpbmRJbmRleChwcmVkaWNhdGUgLyosIHRoaXNBcmcgKi8pe1xuICAgICAgcmV0dXJuIGFycmF5RmluZEluZGV4KHZhbGlkYXRlKHRoaXMpLCBwcmVkaWNhdGUsIGFyZ3VtZW50cy5sZW5ndGggPiAxID8gYXJndW1lbnRzWzFdIDogdW5kZWZpbmVkKTtcbiAgICB9LFxuICAgIGZvckVhY2g6IGZ1bmN0aW9uIGZvckVhY2goY2FsbGJhY2tmbiAvKiwgdGhpc0FyZyAqLyl7XG4gICAgICBhcnJheUZvckVhY2godmFsaWRhdGUodGhpcyksIGNhbGxiYWNrZm4sIGFyZ3VtZW50cy5sZW5ndGggPiAxID8gYXJndW1lbnRzWzFdIDogdW5kZWZpbmVkKTtcbiAgICB9LFxuICAgIGluZGV4T2Y6IGZ1bmN0aW9uIGluZGV4T2Yoc2VhcmNoRWxlbWVudCAvKiwgZnJvbUluZGV4ICovKXtcbiAgICAgIHJldHVybiBhcnJheUluZGV4T2YodmFsaWRhdGUodGhpcyksIHNlYXJjaEVsZW1lbnQsIGFyZ3VtZW50cy5sZW5ndGggPiAxID8gYXJndW1lbnRzWzFdIDogdW5kZWZpbmVkKTtcbiAgICB9LFxuICAgIGluY2x1ZGVzOiBmdW5jdGlvbiBpbmNsdWRlcyhzZWFyY2hFbGVtZW50IC8qLCBmcm9tSW5kZXggKi8pe1xuICAgICAgcmV0dXJuIGFycmF5SW5jbHVkZXModmFsaWRhdGUodGhpcyksIHNlYXJjaEVsZW1lbnQsIGFyZ3VtZW50cy5sZW5ndGggPiAxID8gYXJndW1lbnRzWzFdIDogdW5kZWZpbmVkKTtcbiAgICB9LFxuICAgIGpvaW46IGZ1bmN0aW9uIGpvaW4oc2VwYXJhdG9yKXsgLy8gZXNsaW50LWRpc2FibGUtbGluZSBuby11bnVzZWQtdmFyc1xuICAgICAgcmV0dXJuIGFycmF5Sm9pbi5hcHBseSh2YWxpZGF0ZSh0aGlzKSwgYXJndW1lbnRzKTtcbiAgICB9LFxuICAgIGxhc3RJbmRleE9mOiBmdW5jdGlvbiBsYXN0SW5kZXhPZihzZWFyY2hFbGVtZW50IC8qLCBmcm9tSW5kZXggKi8peyAvLyBlc2xpbnQtZGlzYWJsZS1saW5lIG5vLXVudXNlZC12YXJzXG4gICAgICByZXR1cm4gYXJyYXlMYXN0SW5kZXhPZi5hcHBseSh2YWxpZGF0ZSh0aGlzKSwgYXJndW1lbnRzKTtcbiAgICB9LFxuICAgIG1hcDogZnVuY3Rpb24gbWFwKG1hcGZuIC8qLCB0aGlzQXJnICovKXtcbiAgICAgIHJldHVybiAkbWFwKHZhbGlkYXRlKHRoaXMpLCBtYXBmbiwgYXJndW1lbnRzLmxlbmd0aCA+IDEgPyBhcmd1bWVudHNbMV0gOiB1bmRlZmluZWQpO1xuICAgIH0sXG4gICAgcmVkdWNlOiBmdW5jdGlvbiByZWR1Y2UoY2FsbGJhY2tmbiAvKiwgaW5pdGlhbFZhbHVlICovKXsgLy8gZXNsaW50LWRpc2FibGUtbGluZSBuby11bnVzZWQtdmFyc1xuICAgICAgcmV0dXJuIGFycmF5UmVkdWNlLmFwcGx5KHZhbGlkYXRlKHRoaXMpLCBhcmd1bWVudHMpO1xuICAgIH0sXG4gICAgcmVkdWNlUmlnaHQ6IGZ1bmN0aW9uIHJlZHVjZVJpZ2h0KGNhbGxiYWNrZm4gLyosIGluaXRpYWxWYWx1ZSAqLyl7IC8vIGVzbGludC1kaXNhYmxlLWxpbmUgbm8tdW51c2VkLXZhcnNcbiAgICAgIHJldHVybiBhcnJheVJlZHVjZVJpZ2h0LmFwcGx5KHZhbGlkYXRlKHRoaXMpLCBhcmd1bWVudHMpO1xuICAgIH0sXG4gICAgcmV2ZXJzZTogZnVuY3Rpb24gcmV2ZXJzZSgpe1xuICAgICAgdmFyIHRoYXQgICA9IHRoaXNcbiAgICAgICAgLCBsZW5ndGggPSB2YWxpZGF0ZSh0aGF0KS5sZW5ndGhcbiAgICAgICAgLCBtaWRkbGUgPSBNYXRoLmZsb29yKGxlbmd0aCAvIDIpXG4gICAgICAgICwgaW5kZXggID0gMFxuICAgICAgICAsIHZhbHVlO1xuICAgICAgd2hpbGUoaW5kZXggPCBtaWRkbGUpe1xuICAgICAgICB2YWx1ZSAgICAgICAgID0gdGhhdFtpbmRleF07XG4gICAgICAgIHRoYXRbaW5kZXgrK10gPSB0aGF0Wy0tbGVuZ3RoXTtcbiAgICAgICAgdGhhdFtsZW5ndGhdICA9IHZhbHVlO1xuICAgICAgfSByZXR1cm4gdGhhdDtcbiAgICB9LFxuICAgIHNvbWU6IGZ1bmN0aW9uIHNvbWUoY2FsbGJhY2tmbiAvKiwgdGhpc0FyZyAqLyl7XG4gICAgICByZXR1cm4gYXJyYXlTb21lKHZhbGlkYXRlKHRoaXMpLCBjYWxsYmFja2ZuLCBhcmd1bWVudHMubGVuZ3RoID4gMSA/IGFyZ3VtZW50c1sxXSA6IHVuZGVmaW5lZCk7XG4gICAgfSxcbiAgICBzb3J0OiBmdW5jdGlvbiBzb3J0KGNvbXBhcmVmbil7XG4gICAgICByZXR1cm4gYXJyYXlTb3J0LmNhbGwodmFsaWRhdGUodGhpcyksIGNvbXBhcmVmbik7XG4gICAgfSxcbiAgICBzdWJhcnJheTogZnVuY3Rpb24gc3ViYXJyYXkoYmVnaW4sIGVuZCl7XG4gICAgICB2YXIgTyAgICAgID0gdmFsaWRhdGUodGhpcylcbiAgICAgICAgLCBsZW5ndGggPSBPLmxlbmd0aFxuICAgICAgICAsICRiZWdpbiA9IHRvSW5kZXgoYmVnaW4sIGxlbmd0aCk7XG4gICAgICByZXR1cm4gbmV3IChzcGVjaWVzQ29uc3RydWN0b3IoTywgT1tERUZfQ09OU1RSVUNUT1JdKSkoXG4gICAgICAgIE8uYnVmZmVyLFxuICAgICAgICBPLmJ5dGVPZmZzZXQgKyAkYmVnaW4gKiBPLkJZVEVTX1BFUl9FTEVNRU5ULFxuICAgICAgICB0b0xlbmd0aCgoZW5kID09PSB1bmRlZmluZWQgPyBsZW5ndGggOiB0b0luZGV4KGVuZCwgbGVuZ3RoKSkgLSAkYmVnaW4pXG4gICAgICApO1xuICAgIH1cbiAgfTtcblxuICB2YXIgJHNsaWNlID0gZnVuY3Rpb24gc2xpY2Uoc3RhcnQsIGVuZCl7XG4gICAgcmV0dXJuIHNwZWNpZXNGcm9tTGlzdCh0aGlzLCBhcnJheVNsaWNlLmNhbGwodmFsaWRhdGUodGhpcyksIHN0YXJ0LCBlbmQpKTtcbiAgfTtcblxuICB2YXIgJHNldCA9IGZ1bmN0aW9uIHNldChhcnJheUxpa2UgLyosIG9mZnNldCAqLyl7XG4gICAgdmFsaWRhdGUodGhpcyk7XG4gICAgdmFyIG9mZnNldCA9IHRvT2Zmc2V0KGFyZ3VtZW50c1sxXSwgMSlcbiAgICAgICwgbGVuZ3RoID0gdGhpcy5sZW5ndGhcbiAgICAgICwgc3JjICAgID0gdG9PYmplY3QoYXJyYXlMaWtlKVxuICAgICAgLCBsZW4gICAgPSB0b0xlbmd0aChzcmMubGVuZ3RoKVxuICAgICAgLCBpbmRleCAgPSAwO1xuICAgIGlmKGxlbiArIG9mZnNldCA+IGxlbmd0aCl0aHJvdyBSYW5nZUVycm9yKFdST05HX0xFTkdUSCk7XG4gICAgd2hpbGUoaW5kZXggPCBsZW4pdGhpc1tvZmZzZXQgKyBpbmRleF0gPSBzcmNbaW5kZXgrK107XG4gIH07XG5cbiAgdmFyICRpdGVyYXRvcnMgPSB7XG4gICAgZW50cmllczogZnVuY3Rpb24gZW50cmllcygpe1xuICAgICAgcmV0dXJuIGFycmF5RW50cmllcy5jYWxsKHZhbGlkYXRlKHRoaXMpKTtcbiAgICB9LFxuICAgIGtleXM6IGZ1bmN0aW9uIGtleXMoKXtcbiAgICAgIHJldHVybiBhcnJheUtleXMuY2FsbCh2YWxpZGF0ZSh0aGlzKSk7XG4gICAgfSxcbiAgICB2YWx1ZXM6IGZ1bmN0aW9uIHZhbHVlcygpe1xuICAgICAgcmV0dXJuIGFycmF5VmFsdWVzLmNhbGwodmFsaWRhdGUodGhpcykpO1xuICAgIH1cbiAgfTtcblxuICB2YXIgaXNUQUluZGV4ID0gZnVuY3Rpb24odGFyZ2V0LCBrZXkpe1xuICAgIHJldHVybiBpc09iamVjdCh0YXJnZXQpXG4gICAgICAmJiB0YXJnZXRbVFlQRURfQVJSQVldXG4gICAgICAmJiB0eXBlb2Yga2V5ICE9ICdzeW1ib2wnXG4gICAgICAmJiBrZXkgaW4gdGFyZ2V0XG4gICAgICAmJiBTdHJpbmcoK2tleSkgPT0gU3RyaW5nKGtleSk7XG4gIH07XG4gIHZhciAkZ2V0RGVzYyA9IGZ1bmN0aW9uIGdldE93blByb3BlcnR5RGVzY3JpcHRvcih0YXJnZXQsIGtleSl7XG4gICAgcmV0dXJuIGlzVEFJbmRleCh0YXJnZXQsIGtleSA9IHRvUHJpbWl0aXZlKGtleSwgdHJ1ZSkpXG4gICAgICA/IHByb3BlcnR5RGVzYygyLCB0YXJnZXRba2V5XSlcbiAgICAgIDogZ09QRCh0YXJnZXQsIGtleSk7XG4gIH07XG4gIHZhciAkc2V0RGVzYyA9IGZ1bmN0aW9uIGRlZmluZVByb3BlcnR5KHRhcmdldCwga2V5LCBkZXNjKXtcbiAgICBpZihpc1RBSW5kZXgodGFyZ2V0LCBrZXkgPSB0b1ByaW1pdGl2ZShrZXksIHRydWUpKVxuICAgICAgJiYgaXNPYmplY3QoZGVzYylcbiAgICAgICYmIGhhcyhkZXNjLCAndmFsdWUnKVxuICAgICAgJiYgIWhhcyhkZXNjLCAnZ2V0JylcbiAgICAgICYmICFoYXMoZGVzYywgJ3NldCcpXG4gICAgICAvLyBUT0RPOiBhZGQgdmFsaWRhdGlvbiBkZXNjcmlwdG9yIHcvbyBjYWxsaW5nIGFjY2Vzc29yc1xuICAgICAgJiYgIWRlc2MuY29uZmlndXJhYmxlXG4gICAgICAmJiAoIWhhcyhkZXNjLCAnd3JpdGFibGUnKSB8fCBkZXNjLndyaXRhYmxlKVxuICAgICAgJiYgKCFoYXMoZGVzYywgJ2VudW1lcmFibGUnKSB8fCBkZXNjLmVudW1lcmFibGUpXG4gICAgKXtcbiAgICAgIHRhcmdldFtrZXldID0gZGVzYy52YWx1ZTtcbiAgICAgIHJldHVybiB0YXJnZXQ7XG4gICAgfSBlbHNlIHJldHVybiBkUCh0YXJnZXQsIGtleSwgZGVzYyk7XG4gIH07XG5cbiAgaWYoIUFMTF9DT05TVFJVQ1RPUlMpe1xuICAgICRHT1BELmYgPSAkZ2V0RGVzYztcbiAgICAkRFAuZiAgID0gJHNldERlc2M7XG4gIH1cblxuICAkZXhwb3J0KCRleHBvcnQuUyArICRleHBvcnQuRiAqICFBTExfQ09OU1RSVUNUT1JTLCAnT2JqZWN0Jywge1xuICAgIGdldE93blByb3BlcnR5RGVzY3JpcHRvcjogJGdldERlc2MsXG4gICAgZGVmaW5lUHJvcGVydHk6ICAgICAgICAgICAkc2V0RGVzY1xuICB9KTtcblxuICBpZihmYWlscyhmdW5jdGlvbigpeyBhcnJheVRvU3RyaW5nLmNhbGwoe30pOyB9KSl7XG4gICAgYXJyYXlUb1N0cmluZyA9IGFycmF5VG9Mb2NhbGVTdHJpbmcgPSBmdW5jdGlvbiB0b1N0cmluZygpe1xuICAgICAgcmV0dXJuIGFycmF5Sm9pbi5jYWxsKHRoaXMpO1xuICAgIH1cbiAgfVxuXG4gIHZhciAkVHlwZWRBcnJheVByb3RvdHlwZSQgPSByZWRlZmluZUFsbCh7fSwgcHJvdG8pO1xuICByZWRlZmluZUFsbCgkVHlwZWRBcnJheVByb3RvdHlwZSQsICRpdGVyYXRvcnMpO1xuICBoaWRlKCRUeXBlZEFycmF5UHJvdG90eXBlJCwgSVRFUkFUT1IsICRpdGVyYXRvcnMudmFsdWVzKTtcbiAgcmVkZWZpbmVBbGwoJFR5cGVkQXJyYXlQcm90b3R5cGUkLCB7XG4gICAgc2xpY2U6ICAgICAgICAgICRzbGljZSxcbiAgICBzZXQ6ICAgICAgICAgICAgJHNldCxcbiAgICBjb25zdHJ1Y3RvcjogICAgZnVuY3Rpb24oKXsgLyogbm9vcCAqLyB9LFxuICAgIHRvU3RyaW5nOiAgICAgICBhcnJheVRvU3RyaW5nLFxuICAgIHRvTG9jYWxlU3RyaW5nOiAkdG9Mb2NhbGVTdHJpbmdcbiAgfSk7XG4gIGFkZEdldHRlcigkVHlwZWRBcnJheVByb3RvdHlwZSQsICdidWZmZXInLCAnYicpO1xuICBhZGRHZXR0ZXIoJFR5cGVkQXJyYXlQcm90b3R5cGUkLCAnYnl0ZU9mZnNldCcsICdvJyk7XG4gIGFkZEdldHRlcigkVHlwZWRBcnJheVByb3RvdHlwZSQsICdieXRlTGVuZ3RoJywgJ2wnKTtcbiAgYWRkR2V0dGVyKCRUeXBlZEFycmF5UHJvdG90eXBlJCwgJ2xlbmd0aCcsICdlJyk7XG4gIGRQKCRUeXBlZEFycmF5UHJvdG90eXBlJCwgVEFHLCB7XG4gICAgZ2V0OiBmdW5jdGlvbigpeyByZXR1cm4gdGhpc1tUWVBFRF9BUlJBWV07IH1cbiAgfSk7XG5cbiAgbW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbihLRVksIEJZVEVTLCB3cmFwcGVyLCBDTEFNUEVEKXtcbiAgICBDTEFNUEVEID0gISFDTEFNUEVEO1xuICAgIHZhciBOQU1FICAgICAgID0gS0VZICsgKENMQU1QRUQgPyAnQ2xhbXBlZCcgOiAnJykgKyAnQXJyYXknXG4gICAgICAsIElTTlRfVUlOVDggPSBOQU1FICE9ICdVaW50OEFycmF5J1xuICAgICAgLCBHRVRURVIgICAgID0gJ2dldCcgKyBLRVlcbiAgICAgICwgU0VUVEVSICAgICA9ICdzZXQnICsgS0VZXG4gICAgICAsIFR5cGVkQXJyYXkgPSBnbG9iYWxbTkFNRV1cbiAgICAgICwgQmFzZSAgICAgICA9IFR5cGVkQXJyYXkgfHwge31cbiAgICAgICwgVEFDICAgICAgICA9IFR5cGVkQXJyYXkgJiYgZ2V0UHJvdG90eXBlT2YoVHlwZWRBcnJheSlcbiAgICAgICwgRk9SQ0VEICAgICA9ICFUeXBlZEFycmF5IHx8ICEkdHlwZWQuQUJWXG4gICAgICAsIE8gICAgICAgICAgPSB7fVxuICAgICAgLCBUeXBlZEFycmF5UHJvdG90eXBlID0gVHlwZWRBcnJheSAmJiBUeXBlZEFycmF5W1BST1RPVFlQRV07XG4gICAgdmFyIGdldHRlciA9IGZ1bmN0aW9uKHRoYXQsIGluZGV4KXtcbiAgICAgIHZhciBkYXRhID0gdGhhdC5fZDtcbiAgICAgIHJldHVybiBkYXRhLnZbR0VUVEVSXShpbmRleCAqIEJZVEVTICsgZGF0YS5vLCBMSVRUTEVfRU5ESUFOKTtcbiAgICB9O1xuICAgIHZhciBzZXR0ZXIgPSBmdW5jdGlvbih0aGF0LCBpbmRleCwgdmFsdWUpe1xuICAgICAgdmFyIGRhdGEgPSB0aGF0Ll9kO1xuICAgICAgaWYoQ0xBTVBFRCl2YWx1ZSA9ICh2YWx1ZSA9IE1hdGgucm91bmQodmFsdWUpKSA8IDAgPyAwIDogdmFsdWUgPiAweGZmID8gMHhmZiA6IHZhbHVlICYgMHhmZjtcbiAgICAgIGRhdGEudltTRVRURVJdKGluZGV4ICogQllURVMgKyBkYXRhLm8sIHZhbHVlLCBMSVRUTEVfRU5ESUFOKTtcbiAgICB9O1xuICAgIHZhciBhZGRFbGVtZW50ID0gZnVuY3Rpb24odGhhdCwgaW5kZXgpe1xuICAgICAgZFAodGhhdCwgaW5kZXgsIHtcbiAgICAgICAgZ2V0OiBmdW5jdGlvbigpe1xuICAgICAgICAgIHJldHVybiBnZXR0ZXIodGhpcywgaW5kZXgpO1xuICAgICAgICB9LFxuICAgICAgICBzZXQ6IGZ1bmN0aW9uKHZhbHVlKXtcbiAgICAgICAgICByZXR1cm4gc2V0dGVyKHRoaXMsIGluZGV4LCB2YWx1ZSk7XG4gICAgICAgIH0sXG4gICAgICAgIGVudW1lcmFibGU6IHRydWVcbiAgICAgIH0pO1xuICAgIH07XG4gICAgaWYoRk9SQ0VEKXtcbiAgICAgIFR5cGVkQXJyYXkgPSB3cmFwcGVyKGZ1bmN0aW9uKHRoYXQsIGRhdGEsICRvZmZzZXQsICRsZW5ndGgpe1xuICAgICAgICBhbkluc3RhbmNlKHRoYXQsIFR5cGVkQXJyYXksIE5BTUUsICdfZCcpO1xuICAgICAgICB2YXIgaW5kZXggID0gMFxuICAgICAgICAgICwgb2Zmc2V0ID0gMFxuICAgICAgICAgICwgYnVmZmVyLCBieXRlTGVuZ3RoLCBsZW5ndGgsIGtsYXNzO1xuICAgICAgICBpZighaXNPYmplY3QoZGF0YSkpe1xuICAgICAgICAgIGxlbmd0aCAgICAgPSBzdHJpY3RUb0xlbmd0aChkYXRhLCB0cnVlKVxuICAgICAgICAgIGJ5dGVMZW5ndGggPSBsZW5ndGggKiBCWVRFUztcbiAgICAgICAgICBidWZmZXIgICAgID0gbmV3ICRBcnJheUJ1ZmZlcihieXRlTGVuZ3RoKTtcbiAgICAgICAgfSBlbHNlIGlmKGRhdGEgaW5zdGFuY2VvZiAkQXJyYXlCdWZmZXIgfHwgKGtsYXNzID0gY2xhc3NvZihkYXRhKSkgPT0gQVJSQVlfQlVGRkVSIHx8IGtsYXNzID09IFNIQVJFRF9CVUZGRVIpe1xuICAgICAgICAgIGJ1ZmZlciA9IGRhdGE7XG4gICAgICAgICAgb2Zmc2V0ID0gdG9PZmZzZXQoJG9mZnNldCwgQllURVMpO1xuICAgICAgICAgIHZhciAkbGVuID0gZGF0YS5ieXRlTGVuZ3RoO1xuICAgICAgICAgIGlmKCRsZW5ndGggPT09IHVuZGVmaW5lZCl7XG4gICAgICAgICAgICBpZigkbGVuICUgQllURVMpdGhyb3cgUmFuZ2VFcnJvcihXUk9OR19MRU5HVEgpO1xuICAgICAgICAgICAgYnl0ZUxlbmd0aCA9ICRsZW4gLSBvZmZzZXQ7XG4gICAgICAgICAgICBpZihieXRlTGVuZ3RoIDwgMCl0aHJvdyBSYW5nZUVycm9yKFdST05HX0xFTkdUSCk7XG4gICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIGJ5dGVMZW5ndGggPSB0b0xlbmd0aCgkbGVuZ3RoKSAqIEJZVEVTO1xuICAgICAgICAgICAgaWYoYnl0ZUxlbmd0aCArIG9mZnNldCA+ICRsZW4pdGhyb3cgUmFuZ2VFcnJvcihXUk9OR19MRU5HVEgpO1xuICAgICAgICAgIH1cbiAgICAgICAgICBsZW5ndGggPSBieXRlTGVuZ3RoIC8gQllURVM7XG4gICAgICAgIH0gZWxzZSBpZihUWVBFRF9BUlJBWSBpbiBkYXRhKXtcbiAgICAgICAgICByZXR1cm4gZnJvbUxpc3QoVHlwZWRBcnJheSwgZGF0YSk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgcmV0dXJuICRmcm9tLmNhbGwoVHlwZWRBcnJheSwgZGF0YSk7XG4gICAgICAgIH1cbiAgICAgICAgaGlkZSh0aGF0LCAnX2QnLCB7XG4gICAgICAgICAgYjogYnVmZmVyLFxuICAgICAgICAgIG86IG9mZnNldCxcbiAgICAgICAgICBsOiBieXRlTGVuZ3RoLFxuICAgICAgICAgIGU6IGxlbmd0aCxcbiAgICAgICAgICB2OiBuZXcgJERhdGFWaWV3KGJ1ZmZlcilcbiAgICAgICAgfSk7XG4gICAgICAgIHdoaWxlKGluZGV4IDwgbGVuZ3RoKWFkZEVsZW1lbnQodGhhdCwgaW5kZXgrKyk7XG4gICAgICB9KTtcbiAgICAgIFR5cGVkQXJyYXlQcm90b3R5cGUgPSBUeXBlZEFycmF5W1BST1RPVFlQRV0gPSBjcmVhdGUoJFR5cGVkQXJyYXlQcm90b3R5cGUkKTtcbiAgICAgIGhpZGUoVHlwZWRBcnJheVByb3RvdHlwZSwgJ2NvbnN0cnVjdG9yJywgVHlwZWRBcnJheSk7XG4gICAgfSBlbHNlIGlmKCEkaXRlckRldGVjdChmdW5jdGlvbihpdGVyKXtcbiAgICAgIC8vIFY4IHdvcmtzIHdpdGggaXRlcmF0b3JzLCBidXQgZmFpbHMgaW4gbWFueSBvdGhlciBjYXNlc1xuICAgICAgLy8gaHR0cHM6Ly9jb2RlLmdvb2dsZS5jb20vcC92OC9pc3N1ZXMvZGV0YWlsP2lkPTQ1NTJcbiAgICAgIG5ldyBUeXBlZEFycmF5KG51bGwpOyAvLyBlc2xpbnQtZGlzYWJsZS1saW5lIG5vLW5ld1xuICAgICAgbmV3IFR5cGVkQXJyYXkoaXRlcik7IC8vIGVzbGludC1kaXNhYmxlLWxpbmUgbm8tbmV3XG4gICAgfSwgdHJ1ZSkpe1xuICAgICAgVHlwZWRBcnJheSA9IHdyYXBwZXIoZnVuY3Rpb24odGhhdCwgZGF0YSwgJG9mZnNldCwgJGxlbmd0aCl7XG4gICAgICAgIGFuSW5zdGFuY2UodGhhdCwgVHlwZWRBcnJheSwgTkFNRSk7XG4gICAgICAgIHZhciBrbGFzcztcbiAgICAgICAgLy8gYHdzYCBtb2R1bGUgYnVnLCB0ZW1wb3JhcmlseSByZW1vdmUgdmFsaWRhdGlvbiBsZW5ndGggZm9yIFVpbnQ4QXJyYXlcbiAgICAgICAgLy8gaHR0cHM6Ly9naXRodWIuY29tL3dlYnNvY2tldHMvd3MvcHVsbC82NDVcbiAgICAgICAgaWYoIWlzT2JqZWN0KGRhdGEpKXJldHVybiBuZXcgQmFzZShzdHJpY3RUb0xlbmd0aChkYXRhLCBJU05UX1VJTlQ4KSk7XG4gICAgICAgIGlmKGRhdGEgaW5zdGFuY2VvZiAkQXJyYXlCdWZmZXIgfHwgKGtsYXNzID0gY2xhc3NvZihkYXRhKSkgPT0gQVJSQVlfQlVGRkVSIHx8IGtsYXNzID09IFNIQVJFRF9CVUZGRVIpe1xuICAgICAgICAgIHJldHVybiAkbGVuZ3RoICE9PSB1bmRlZmluZWRcbiAgICAgICAgICAgID8gbmV3IEJhc2UoZGF0YSwgdG9PZmZzZXQoJG9mZnNldCwgQllURVMpLCAkbGVuZ3RoKVxuICAgICAgICAgICAgOiAkb2Zmc2V0ICE9PSB1bmRlZmluZWRcbiAgICAgICAgICAgICAgPyBuZXcgQmFzZShkYXRhLCB0b09mZnNldCgkb2Zmc2V0LCBCWVRFUykpXG4gICAgICAgICAgICAgIDogbmV3IEJhc2UoZGF0YSk7XG4gICAgICAgIH1cbiAgICAgICAgaWYoVFlQRURfQVJSQVkgaW4gZGF0YSlyZXR1cm4gZnJvbUxpc3QoVHlwZWRBcnJheSwgZGF0YSk7XG4gICAgICAgIHJldHVybiAkZnJvbS5jYWxsKFR5cGVkQXJyYXksIGRhdGEpO1xuICAgICAgfSk7XG4gICAgICBhcnJheUZvckVhY2goVEFDICE9PSBGdW5jdGlvbi5wcm90b3R5cGUgPyBnT1BOKEJhc2UpLmNvbmNhdChnT1BOKFRBQykpIDogZ09QTihCYXNlKSwgZnVuY3Rpb24oa2V5KXtcbiAgICAgICAgaWYoIShrZXkgaW4gVHlwZWRBcnJheSkpaGlkZShUeXBlZEFycmF5LCBrZXksIEJhc2Vba2V5XSk7XG4gICAgICB9KTtcbiAgICAgIFR5cGVkQXJyYXlbUFJPVE9UWVBFXSA9IFR5cGVkQXJyYXlQcm90b3R5cGU7XG4gICAgICBpZighTElCUkFSWSlUeXBlZEFycmF5UHJvdG90eXBlLmNvbnN0cnVjdG9yID0gVHlwZWRBcnJheTtcbiAgICB9XG4gICAgdmFyICRuYXRpdmVJdGVyYXRvciAgID0gVHlwZWRBcnJheVByb3RvdHlwZVtJVEVSQVRPUl1cbiAgICAgICwgQ09SUkVDVF9JVEVSX05BTUUgPSAhISRuYXRpdmVJdGVyYXRvciAmJiAoJG5hdGl2ZUl0ZXJhdG9yLm5hbWUgPT0gJ3ZhbHVlcycgfHwgJG5hdGl2ZUl0ZXJhdG9yLm5hbWUgPT0gdW5kZWZpbmVkKVxuICAgICAgLCAkaXRlcmF0b3IgICAgICAgICA9ICRpdGVyYXRvcnMudmFsdWVzO1xuICAgIGhpZGUoVHlwZWRBcnJheSwgVFlQRURfQ09OU1RSVUNUT1IsIHRydWUpO1xuICAgIGhpZGUoVHlwZWRBcnJheVByb3RvdHlwZSwgVFlQRURfQVJSQVksIE5BTUUpO1xuICAgIGhpZGUoVHlwZWRBcnJheVByb3RvdHlwZSwgVklFVywgdHJ1ZSk7XG4gICAgaGlkZShUeXBlZEFycmF5UHJvdG90eXBlLCBERUZfQ09OU1RSVUNUT1IsIFR5cGVkQXJyYXkpO1xuXG4gICAgaWYoQ0xBTVBFRCA/IG5ldyBUeXBlZEFycmF5KDEpW1RBR10gIT0gTkFNRSA6ICEoVEFHIGluIFR5cGVkQXJyYXlQcm90b3R5cGUpKXtcbiAgICAgIGRQKFR5cGVkQXJyYXlQcm90b3R5cGUsIFRBRywge1xuICAgICAgICBnZXQ6IGZ1bmN0aW9uKCl7IHJldHVybiBOQU1FOyB9XG4gICAgICB9KTtcbiAgICB9XG5cbiAgICBPW05BTUVdID0gVHlwZWRBcnJheTtcblxuICAgICRleHBvcnQoJGV4cG9ydC5HICsgJGV4cG9ydC5XICsgJGV4cG9ydC5GICogKFR5cGVkQXJyYXkgIT0gQmFzZSksIE8pO1xuXG4gICAgJGV4cG9ydCgkZXhwb3J0LlMsIE5BTUUsIHtcbiAgICAgIEJZVEVTX1BFUl9FTEVNRU5UOiBCWVRFUyxcbiAgICAgIGZyb206ICRmcm9tLFxuICAgICAgb2Y6ICRvZlxuICAgIH0pO1xuXG4gICAgaWYoIShCWVRFU19QRVJfRUxFTUVOVCBpbiBUeXBlZEFycmF5UHJvdG90eXBlKSloaWRlKFR5cGVkQXJyYXlQcm90b3R5cGUsIEJZVEVTX1BFUl9FTEVNRU5ULCBCWVRFUyk7XG5cbiAgICAkZXhwb3J0KCRleHBvcnQuUCwgTkFNRSwgcHJvdG8pO1xuXG4gICAgc2V0U3BlY2llcyhOQU1FKTtcblxuICAgICRleHBvcnQoJGV4cG9ydC5QICsgJGV4cG9ydC5GICogRk9SQ0VEX1NFVCwgTkFNRSwge3NldDogJHNldH0pO1xuXG4gICAgJGV4cG9ydCgkZXhwb3J0LlAgKyAkZXhwb3J0LkYgKiAhQ09SUkVDVF9JVEVSX05BTUUsIE5BTUUsICRpdGVyYXRvcnMpO1xuXG4gICAgJGV4cG9ydCgkZXhwb3J0LlAgKyAkZXhwb3J0LkYgKiAoVHlwZWRBcnJheVByb3RvdHlwZS50b1N0cmluZyAhPSBhcnJheVRvU3RyaW5nKSwgTkFNRSwge3RvU3RyaW5nOiBhcnJheVRvU3RyaW5nfSk7XG5cbiAgICAkZXhwb3J0KCRleHBvcnQuUCArICRleHBvcnQuRiAqIGZhaWxzKGZ1bmN0aW9uKCl7XG4gICAgICBuZXcgVHlwZWRBcnJheSgxKS5zbGljZSgpO1xuICAgIH0pLCBOQU1FLCB7c2xpY2U6ICRzbGljZX0pO1xuXG4gICAgJGV4cG9ydCgkZXhwb3J0LlAgKyAkZXhwb3J0LkYgKiAoZmFpbHMoZnVuY3Rpb24oKXtcbiAgICAgIHJldHVybiBbMSwgMl0udG9Mb2NhbGVTdHJpbmcoKSAhPSBuZXcgVHlwZWRBcnJheShbMSwgMl0pLnRvTG9jYWxlU3RyaW5nKClcbiAgICB9KSB8fCAhZmFpbHMoZnVuY3Rpb24oKXtcbiAgICAgIFR5cGVkQXJyYXlQcm90b3R5cGUudG9Mb2NhbGVTdHJpbmcuY2FsbChbMSwgMl0pO1xuICAgIH0pKSwgTkFNRSwge3RvTG9jYWxlU3RyaW5nOiAkdG9Mb2NhbGVTdHJpbmd9KTtcblxuICAgIEl0ZXJhdG9yc1tOQU1FXSA9IENPUlJFQ1RfSVRFUl9OQU1FID8gJG5hdGl2ZUl0ZXJhdG9yIDogJGl0ZXJhdG9yO1xuICAgIGlmKCFMSUJSQVJZICYmICFDT1JSRUNUX0lURVJfTkFNRSloaWRlKFR5cGVkQXJyYXlQcm90b3R5cGUsIElURVJBVE9SLCAkaXRlcmF0b3IpO1xuICB9O1xufSBlbHNlIG1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24oKXsgLyogZW1wdHkgKi8gfTsiLCIndXNlIHN0cmljdCc7XG52YXIgZ2xvYmFsICAgICAgICAgPSByZXF1aXJlKCcuL19nbG9iYWwnKVxuICAsIERFU0NSSVBUT1JTICAgID0gcmVxdWlyZSgnLi9fZGVzY3JpcHRvcnMnKVxuICAsIExJQlJBUlkgICAgICAgID0gcmVxdWlyZSgnLi9fbGlicmFyeScpXG4gICwgJHR5cGVkICAgICAgICAgPSByZXF1aXJlKCcuL190eXBlZCcpXG4gICwgaGlkZSAgICAgICAgICAgPSByZXF1aXJlKCcuL19oaWRlJylcbiAgLCByZWRlZmluZUFsbCAgICA9IHJlcXVpcmUoJy4vX3JlZGVmaW5lLWFsbCcpXG4gICwgZmFpbHMgICAgICAgICAgPSByZXF1aXJlKCcuL19mYWlscycpXG4gICwgYW5JbnN0YW5jZSAgICAgPSByZXF1aXJlKCcuL19hbi1pbnN0YW5jZScpXG4gICwgdG9JbnRlZ2VyICAgICAgPSByZXF1aXJlKCcuL190by1pbnRlZ2VyJylcbiAgLCB0b0xlbmd0aCAgICAgICA9IHJlcXVpcmUoJy4vX3RvLWxlbmd0aCcpXG4gICwgZ09QTiAgICAgICAgICAgPSByZXF1aXJlKCcuL19vYmplY3QtZ29wbicpLmZcbiAgLCBkUCAgICAgICAgICAgICA9IHJlcXVpcmUoJy4vX29iamVjdC1kcCcpLmZcbiAgLCBhcnJheUZpbGwgICAgICA9IHJlcXVpcmUoJy4vX2FycmF5LWZpbGwnKVxuICAsIHNldFRvU3RyaW5nVGFnID0gcmVxdWlyZSgnLi9fc2V0LXRvLXN0cmluZy10YWcnKVxuICAsIEFSUkFZX0JVRkZFUiAgID0gJ0FycmF5QnVmZmVyJ1xuICAsIERBVEFfVklFVyAgICAgID0gJ0RhdGFWaWV3J1xuICAsIFBST1RPVFlQRSAgICAgID0gJ3Byb3RvdHlwZSdcbiAgLCBXUk9OR19MRU5HVEggICA9ICdXcm9uZyBsZW5ndGghJ1xuICAsIFdST05HX0lOREVYICAgID0gJ1dyb25nIGluZGV4ISdcbiAgLCAkQXJyYXlCdWZmZXIgICA9IGdsb2JhbFtBUlJBWV9CVUZGRVJdXG4gICwgJERhdGFWaWV3ICAgICAgPSBnbG9iYWxbREFUQV9WSUVXXVxuICAsIE1hdGggICAgICAgICAgID0gZ2xvYmFsLk1hdGhcbiAgLCBwYXJzZUludCAgICAgICA9IGdsb2JhbC5wYXJzZUludFxuICAsIFJhbmdlRXJyb3IgICAgID0gZ2xvYmFsLlJhbmdlRXJyb3JcbiAgLCBJbmZpbml0eSAgICAgICA9IGdsb2JhbC5JbmZpbml0eVxuICAsIEJhc2VCdWZmZXIgICAgID0gJEFycmF5QnVmZmVyXG4gICwgYWJzICAgICAgICAgICAgPSBNYXRoLmFic1xuICAsIHBvdyAgICAgICAgICAgID0gTWF0aC5wb3dcbiAgLCBtaW4gICAgICAgICAgICA9IE1hdGgubWluXG4gICwgZmxvb3IgICAgICAgICAgPSBNYXRoLmZsb29yXG4gICwgbG9nICAgICAgICAgICAgPSBNYXRoLmxvZ1xuICAsIExOMiAgICAgICAgICAgID0gTWF0aC5MTjJcbiAgLCBCVUZGRVIgICAgICAgICA9ICdidWZmZXInXG4gICwgQllURV9MRU5HVEggICAgPSAnYnl0ZUxlbmd0aCdcbiAgLCBCWVRFX09GRlNFVCAgICA9ICdieXRlT2Zmc2V0J1xuICAsICRCVUZGRVIgICAgICAgID0gREVTQ1JJUFRPUlMgPyAnX2InIDogQlVGRkVSXG4gICwgJExFTkdUSCAgICAgICAgPSBERVNDUklQVE9SUyA/ICdfbCcgOiBCWVRFX0xFTkdUSFxuICAsICRPRkZTRVQgICAgICAgID0gREVTQ1JJUFRPUlMgPyAnX28nIDogQllURV9PRkZTRVQ7XG5cbi8vIElFRUU3NTQgY29udmVyc2lvbnMgYmFzZWQgb24gaHR0cHM6Ly9naXRodWIuY29tL2Zlcm9zcy9pZWVlNzU0XG52YXIgcGFja0lFRUU3NTQgPSBmdW5jdGlvbih2YWx1ZSwgbUxlbiwgbkJ5dGVzKXtcbiAgdmFyIGJ1ZmZlciA9IEFycmF5KG5CeXRlcylcbiAgICAsIGVMZW4gICA9IG5CeXRlcyAqIDggLSBtTGVuIC0gMVxuICAgICwgZU1heCAgID0gKDEgPDwgZUxlbikgLSAxXG4gICAgLCBlQmlhcyAgPSBlTWF4ID4+IDFcbiAgICAsIHJ0ICAgICA9IG1MZW4gPT09IDIzID8gcG93KDIsIC0yNCkgLSBwb3coMiwgLTc3KSA6IDBcbiAgICAsIGkgICAgICA9IDBcbiAgICAsIHMgICAgICA9IHZhbHVlIDwgMCB8fCB2YWx1ZSA9PT0gMCAmJiAxIC8gdmFsdWUgPCAwID8gMSA6IDBcbiAgICAsIGUsIG0sIGM7XG4gIHZhbHVlID0gYWJzKHZhbHVlKVxuICBpZih2YWx1ZSAhPSB2YWx1ZSB8fCB2YWx1ZSA9PT0gSW5maW5pdHkpe1xuICAgIG0gPSB2YWx1ZSAhPSB2YWx1ZSA/IDEgOiAwO1xuICAgIGUgPSBlTWF4O1xuICB9IGVsc2Uge1xuICAgIGUgPSBmbG9vcihsb2codmFsdWUpIC8gTE4yKTtcbiAgICBpZih2YWx1ZSAqIChjID0gcG93KDIsIC1lKSkgPCAxKXtcbiAgICAgIGUtLTtcbiAgICAgIGMgKj0gMjtcbiAgICB9XG4gICAgaWYoZSArIGVCaWFzID49IDEpe1xuICAgICAgdmFsdWUgKz0gcnQgLyBjO1xuICAgIH0gZWxzZSB7XG4gICAgICB2YWx1ZSArPSBydCAqIHBvdygyLCAxIC0gZUJpYXMpO1xuICAgIH1cbiAgICBpZih2YWx1ZSAqIGMgPj0gMil7XG4gICAgICBlKys7XG4gICAgICBjIC89IDI7XG4gICAgfVxuICAgIGlmKGUgKyBlQmlhcyA+PSBlTWF4KXtcbiAgICAgIG0gPSAwO1xuICAgICAgZSA9IGVNYXg7XG4gICAgfSBlbHNlIGlmKGUgKyBlQmlhcyA+PSAxKXtcbiAgICAgIG0gPSAodmFsdWUgKiBjIC0gMSkgKiBwb3coMiwgbUxlbik7XG4gICAgICBlID0gZSArIGVCaWFzO1xuICAgIH0gZWxzZSB7XG4gICAgICBtID0gdmFsdWUgKiBwb3coMiwgZUJpYXMgLSAxKSAqIHBvdygyLCBtTGVuKTtcbiAgICAgIGUgPSAwO1xuICAgIH1cbiAgfVxuICBmb3IoOyBtTGVuID49IDg7IGJ1ZmZlcltpKytdID0gbSAmIDI1NSwgbSAvPSAyNTYsIG1MZW4gLT0gOCk7XG4gIGUgPSBlIDw8IG1MZW4gfCBtO1xuICBlTGVuICs9IG1MZW47XG4gIGZvcig7IGVMZW4gPiAwOyBidWZmZXJbaSsrXSA9IGUgJiAyNTUsIGUgLz0gMjU2LCBlTGVuIC09IDgpO1xuICBidWZmZXJbLS1pXSB8PSBzICogMTI4O1xuICByZXR1cm4gYnVmZmVyO1xufTtcbnZhciB1bnBhY2tJRUVFNzU0ID0gZnVuY3Rpb24oYnVmZmVyLCBtTGVuLCBuQnl0ZXMpe1xuICB2YXIgZUxlbiAgPSBuQnl0ZXMgKiA4IC0gbUxlbiAtIDFcbiAgICAsIGVNYXggID0gKDEgPDwgZUxlbikgLSAxXG4gICAgLCBlQmlhcyA9IGVNYXggPj4gMVxuICAgICwgbkJpdHMgPSBlTGVuIC0gN1xuICAgICwgaSAgICAgPSBuQnl0ZXMgLSAxXG4gICAgLCBzICAgICA9IGJ1ZmZlcltpLS1dXG4gICAgLCBlICAgICA9IHMgJiAxMjdcbiAgICAsIG07XG4gIHMgPj49IDc7XG4gIGZvcig7IG5CaXRzID4gMDsgZSA9IGUgKiAyNTYgKyBidWZmZXJbaV0sIGktLSwgbkJpdHMgLT0gOCk7XG4gIG0gPSBlICYgKDEgPDwgLW5CaXRzKSAtIDE7XG4gIGUgPj49IC1uQml0cztcbiAgbkJpdHMgKz0gbUxlbjtcbiAgZm9yKDsgbkJpdHMgPiAwOyBtID0gbSAqIDI1NiArIGJ1ZmZlcltpXSwgaS0tLCBuQml0cyAtPSA4KTtcbiAgaWYoZSA9PT0gMCl7XG4gICAgZSA9IDEgLSBlQmlhcztcbiAgfSBlbHNlIGlmKGUgPT09IGVNYXgpe1xuICAgIHJldHVybiBtID8gTmFOIDogcyA/IC1JbmZpbml0eSA6IEluZmluaXR5O1xuICB9IGVsc2Uge1xuICAgIG0gPSBtICsgcG93KDIsIG1MZW4pO1xuICAgIGUgPSBlIC0gZUJpYXM7XG4gIH0gcmV0dXJuIChzID8gLTEgOiAxKSAqIG0gKiBwb3coMiwgZSAtIG1MZW4pO1xufTtcblxudmFyIHVucGFja0kzMiA9IGZ1bmN0aW9uKGJ5dGVzKXtcbiAgcmV0dXJuIGJ5dGVzWzNdIDw8IDI0IHwgYnl0ZXNbMl0gPDwgMTYgfCBieXRlc1sxXSA8PCA4IHwgYnl0ZXNbMF07XG59O1xudmFyIHBhY2tJOCA9IGZ1bmN0aW9uKGl0KXtcbiAgcmV0dXJuIFtpdCAmIDB4ZmZdO1xufTtcbnZhciBwYWNrSTE2ID0gZnVuY3Rpb24oaXQpe1xuICByZXR1cm4gW2l0ICYgMHhmZiwgaXQgPj4gOCAmIDB4ZmZdO1xufTtcbnZhciBwYWNrSTMyID0gZnVuY3Rpb24oaXQpe1xuICByZXR1cm4gW2l0ICYgMHhmZiwgaXQgPj4gOCAmIDB4ZmYsIGl0ID4+IDE2ICYgMHhmZiwgaXQgPj4gMjQgJiAweGZmXTtcbn07XG52YXIgcGFja0Y2NCA9IGZ1bmN0aW9uKGl0KXtcbiAgcmV0dXJuIHBhY2tJRUVFNzU0KGl0LCA1MiwgOCk7XG59O1xudmFyIHBhY2tGMzIgPSBmdW5jdGlvbihpdCl7XG4gIHJldHVybiBwYWNrSUVFRTc1NChpdCwgMjMsIDQpO1xufTtcblxudmFyIGFkZEdldHRlciA9IGZ1bmN0aW9uKEMsIGtleSwgaW50ZXJuYWwpe1xuICBkUChDW1BST1RPVFlQRV0sIGtleSwge2dldDogZnVuY3Rpb24oKXsgcmV0dXJuIHRoaXNbaW50ZXJuYWxdOyB9fSk7XG59O1xuXG52YXIgZ2V0ID0gZnVuY3Rpb24odmlldywgYnl0ZXMsIGluZGV4LCBpc0xpdHRsZUVuZGlhbil7XG4gIHZhciBudW1JbmRleCA9ICtpbmRleFxuICAgICwgaW50SW5kZXggPSB0b0ludGVnZXIobnVtSW5kZXgpO1xuICBpZihudW1JbmRleCAhPSBpbnRJbmRleCB8fCBpbnRJbmRleCA8IDAgfHwgaW50SW5kZXggKyBieXRlcyA+IHZpZXdbJExFTkdUSF0pdGhyb3cgUmFuZ2VFcnJvcihXUk9OR19JTkRFWCk7XG4gIHZhciBzdG9yZSA9IHZpZXdbJEJVRkZFUl0uX2JcbiAgICAsIHN0YXJ0ID0gaW50SW5kZXggKyB2aWV3WyRPRkZTRVRdXG4gICAgLCBwYWNrICA9IHN0b3JlLnNsaWNlKHN0YXJ0LCBzdGFydCArIGJ5dGVzKTtcbiAgcmV0dXJuIGlzTGl0dGxlRW5kaWFuID8gcGFjayA6IHBhY2sucmV2ZXJzZSgpO1xufTtcbnZhciBzZXQgPSBmdW5jdGlvbih2aWV3LCBieXRlcywgaW5kZXgsIGNvbnZlcnNpb24sIHZhbHVlLCBpc0xpdHRsZUVuZGlhbil7XG4gIHZhciBudW1JbmRleCA9ICtpbmRleFxuICAgICwgaW50SW5kZXggPSB0b0ludGVnZXIobnVtSW5kZXgpO1xuICBpZihudW1JbmRleCAhPSBpbnRJbmRleCB8fCBpbnRJbmRleCA8IDAgfHwgaW50SW5kZXggKyBieXRlcyA+IHZpZXdbJExFTkdUSF0pdGhyb3cgUmFuZ2VFcnJvcihXUk9OR19JTkRFWCk7XG4gIHZhciBzdG9yZSA9IHZpZXdbJEJVRkZFUl0uX2JcbiAgICAsIHN0YXJ0ID0gaW50SW5kZXggKyB2aWV3WyRPRkZTRVRdXG4gICAgLCBwYWNrICA9IGNvbnZlcnNpb24oK3ZhbHVlKTtcbiAgZm9yKHZhciBpID0gMDsgaSA8IGJ5dGVzOyBpKyspc3RvcmVbc3RhcnQgKyBpXSA9IHBhY2tbaXNMaXR0bGVFbmRpYW4gPyBpIDogYnl0ZXMgLSBpIC0gMV07XG59O1xuXG52YXIgdmFsaWRhdGVBcnJheUJ1ZmZlckFyZ3VtZW50cyA9IGZ1bmN0aW9uKHRoYXQsIGxlbmd0aCl7XG4gIGFuSW5zdGFuY2UodGhhdCwgJEFycmF5QnVmZmVyLCBBUlJBWV9CVUZGRVIpO1xuICB2YXIgbnVtYmVyTGVuZ3RoID0gK2xlbmd0aFxuICAgICwgYnl0ZUxlbmd0aCAgID0gdG9MZW5ndGgobnVtYmVyTGVuZ3RoKTtcbiAgaWYobnVtYmVyTGVuZ3RoICE9IGJ5dGVMZW5ndGgpdGhyb3cgUmFuZ2VFcnJvcihXUk9OR19MRU5HVEgpO1xuICByZXR1cm4gYnl0ZUxlbmd0aDtcbn07XG5cbmlmKCEkdHlwZWQuQUJWKXtcbiAgJEFycmF5QnVmZmVyID0gZnVuY3Rpb24gQXJyYXlCdWZmZXIobGVuZ3RoKXtcbiAgICB2YXIgYnl0ZUxlbmd0aCA9IHZhbGlkYXRlQXJyYXlCdWZmZXJBcmd1bWVudHModGhpcywgbGVuZ3RoKTtcbiAgICB0aGlzLl9iICAgICAgID0gYXJyYXlGaWxsLmNhbGwoQXJyYXkoYnl0ZUxlbmd0aCksIDApO1xuICAgIHRoaXNbJExFTkdUSF0gPSBieXRlTGVuZ3RoO1xuICB9O1xuXG4gICREYXRhVmlldyA9IGZ1bmN0aW9uIERhdGFWaWV3KGJ1ZmZlciwgYnl0ZU9mZnNldCwgYnl0ZUxlbmd0aCl7XG4gICAgYW5JbnN0YW5jZSh0aGlzLCAkRGF0YVZpZXcsIERBVEFfVklFVyk7XG4gICAgYW5JbnN0YW5jZShidWZmZXIsICRBcnJheUJ1ZmZlciwgREFUQV9WSUVXKTtcbiAgICB2YXIgYnVmZmVyTGVuZ3RoID0gYnVmZmVyWyRMRU5HVEhdXG4gICAgICAsIG9mZnNldCAgICAgICA9IHRvSW50ZWdlcihieXRlT2Zmc2V0KTtcbiAgICBpZihvZmZzZXQgPCAwIHx8IG9mZnNldCA+IGJ1ZmZlckxlbmd0aCl0aHJvdyBSYW5nZUVycm9yKCdXcm9uZyBvZmZzZXQhJyk7XG4gICAgYnl0ZUxlbmd0aCA9IGJ5dGVMZW5ndGggPT09IHVuZGVmaW5lZCA/IGJ1ZmZlckxlbmd0aCAtIG9mZnNldCA6IHRvTGVuZ3RoKGJ5dGVMZW5ndGgpO1xuICAgIGlmKG9mZnNldCArIGJ5dGVMZW5ndGggPiBidWZmZXJMZW5ndGgpdGhyb3cgUmFuZ2VFcnJvcihXUk9OR19MRU5HVEgpO1xuICAgIHRoaXNbJEJVRkZFUl0gPSBidWZmZXI7XG4gICAgdGhpc1skT0ZGU0VUXSA9IG9mZnNldDtcbiAgICB0aGlzWyRMRU5HVEhdID0gYnl0ZUxlbmd0aDtcbiAgfTtcblxuICBpZihERVNDUklQVE9SUyl7XG4gICAgYWRkR2V0dGVyKCRBcnJheUJ1ZmZlciwgQllURV9MRU5HVEgsICdfbCcpO1xuICAgIGFkZEdldHRlcigkRGF0YVZpZXcsIEJVRkZFUiwgJ19iJyk7XG4gICAgYWRkR2V0dGVyKCREYXRhVmlldywgQllURV9MRU5HVEgsICdfbCcpO1xuICAgIGFkZEdldHRlcigkRGF0YVZpZXcsIEJZVEVfT0ZGU0VULCAnX28nKTtcbiAgfVxuXG4gIHJlZGVmaW5lQWxsKCREYXRhVmlld1tQUk9UT1RZUEVdLCB7XG4gICAgZ2V0SW50ODogZnVuY3Rpb24gZ2V0SW50OChieXRlT2Zmc2V0KXtcbiAgICAgIHJldHVybiBnZXQodGhpcywgMSwgYnl0ZU9mZnNldClbMF0gPDwgMjQgPj4gMjQ7XG4gICAgfSxcbiAgICBnZXRVaW50ODogZnVuY3Rpb24gZ2V0VWludDgoYnl0ZU9mZnNldCl7XG4gICAgICByZXR1cm4gZ2V0KHRoaXMsIDEsIGJ5dGVPZmZzZXQpWzBdO1xuICAgIH0sXG4gICAgZ2V0SW50MTY6IGZ1bmN0aW9uIGdldEludDE2KGJ5dGVPZmZzZXQgLyosIGxpdHRsZUVuZGlhbiAqLyl7XG4gICAgICB2YXIgYnl0ZXMgPSBnZXQodGhpcywgMiwgYnl0ZU9mZnNldCwgYXJndW1lbnRzWzFdKTtcbiAgICAgIHJldHVybiAoYnl0ZXNbMV0gPDwgOCB8IGJ5dGVzWzBdKSA8PCAxNiA+PiAxNjtcbiAgICB9LFxuICAgIGdldFVpbnQxNjogZnVuY3Rpb24gZ2V0VWludDE2KGJ5dGVPZmZzZXQgLyosIGxpdHRsZUVuZGlhbiAqLyl7XG4gICAgICB2YXIgYnl0ZXMgPSBnZXQodGhpcywgMiwgYnl0ZU9mZnNldCwgYXJndW1lbnRzWzFdKTtcbiAgICAgIHJldHVybiBieXRlc1sxXSA8PCA4IHwgYnl0ZXNbMF07XG4gICAgfSxcbiAgICBnZXRJbnQzMjogZnVuY3Rpb24gZ2V0SW50MzIoYnl0ZU9mZnNldCAvKiwgbGl0dGxlRW5kaWFuICovKXtcbiAgICAgIHJldHVybiB1bnBhY2tJMzIoZ2V0KHRoaXMsIDQsIGJ5dGVPZmZzZXQsIGFyZ3VtZW50c1sxXSkpO1xuICAgIH0sXG4gICAgZ2V0VWludDMyOiBmdW5jdGlvbiBnZXRVaW50MzIoYnl0ZU9mZnNldCAvKiwgbGl0dGxlRW5kaWFuICovKXtcbiAgICAgIHJldHVybiB1bnBhY2tJMzIoZ2V0KHRoaXMsIDQsIGJ5dGVPZmZzZXQsIGFyZ3VtZW50c1sxXSkpID4+PiAwO1xuICAgIH0sXG4gICAgZ2V0RmxvYXQzMjogZnVuY3Rpb24gZ2V0RmxvYXQzMihieXRlT2Zmc2V0IC8qLCBsaXR0bGVFbmRpYW4gKi8pe1xuICAgICAgcmV0dXJuIHVucGFja0lFRUU3NTQoZ2V0KHRoaXMsIDQsIGJ5dGVPZmZzZXQsIGFyZ3VtZW50c1sxXSksIDIzLCA0KTtcbiAgICB9LFxuICAgIGdldEZsb2F0NjQ6IGZ1bmN0aW9uIGdldEZsb2F0NjQoYnl0ZU9mZnNldCAvKiwgbGl0dGxlRW5kaWFuICovKXtcbiAgICAgIHJldHVybiB1bnBhY2tJRUVFNzU0KGdldCh0aGlzLCA4LCBieXRlT2Zmc2V0LCBhcmd1bWVudHNbMV0pLCA1MiwgOCk7XG4gICAgfSxcbiAgICBzZXRJbnQ4OiBmdW5jdGlvbiBzZXRJbnQ4KGJ5dGVPZmZzZXQsIHZhbHVlKXtcbiAgICAgIHNldCh0aGlzLCAxLCBieXRlT2Zmc2V0LCBwYWNrSTgsIHZhbHVlKTtcbiAgICB9LFxuICAgIHNldFVpbnQ4OiBmdW5jdGlvbiBzZXRVaW50OChieXRlT2Zmc2V0LCB2YWx1ZSl7XG4gICAgICBzZXQodGhpcywgMSwgYnl0ZU9mZnNldCwgcGFja0k4LCB2YWx1ZSk7XG4gICAgfSxcbiAgICBzZXRJbnQxNjogZnVuY3Rpb24gc2V0SW50MTYoYnl0ZU9mZnNldCwgdmFsdWUgLyosIGxpdHRsZUVuZGlhbiAqLyl7XG4gICAgICBzZXQodGhpcywgMiwgYnl0ZU9mZnNldCwgcGFja0kxNiwgdmFsdWUsIGFyZ3VtZW50c1syXSk7XG4gICAgfSxcbiAgICBzZXRVaW50MTY6IGZ1bmN0aW9uIHNldFVpbnQxNihieXRlT2Zmc2V0LCB2YWx1ZSAvKiwgbGl0dGxlRW5kaWFuICovKXtcbiAgICAgIHNldCh0aGlzLCAyLCBieXRlT2Zmc2V0LCBwYWNrSTE2LCB2YWx1ZSwgYXJndW1lbnRzWzJdKTtcbiAgICB9LFxuICAgIHNldEludDMyOiBmdW5jdGlvbiBzZXRJbnQzMihieXRlT2Zmc2V0LCB2YWx1ZSAvKiwgbGl0dGxlRW5kaWFuICovKXtcbiAgICAgIHNldCh0aGlzLCA0LCBieXRlT2Zmc2V0LCBwYWNrSTMyLCB2YWx1ZSwgYXJndW1lbnRzWzJdKTtcbiAgICB9LFxuICAgIHNldFVpbnQzMjogZnVuY3Rpb24gc2V0VWludDMyKGJ5dGVPZmZzZXQsIHZhbHVlIC8qLCBsaXR0bGVFbmRpYW4gKi8pe1xuICAgICAgc2V0KHRoaXMsIDQsIGJ5dGVPZmZzZXQsIHBhY2tJMzIsIHZhbHVlLCBhcmd1bWVudHNbMl0pO1xuICAgIH0sXG4gICAgc2V0RmxvYXQzMjogZnVuY3Rpb24gc2V0RmxvYXQzMihieXRlT2Zmc2V0LCB2YWx1ZSAvKiwgbGl0dGxlRW5kaWFuICovKXtcbiAgICAgIHNldCh0aGlzLCA0LCBieXRlT2Zmc2V0LCBwYWNrRjMyLCB2YWx1ZSwgYXJndW1lbnRzWzJdKTtcbiAgICB9LFxuICAgIHNldEZsb2F0NjQ6IGZ1bmN0aW9uIHNldEZsb2F0NjQoYnl0ZU9mZnNldCwgdmFsdWUgLyosIGxpdHRsZUVuZGlhbiAqLyl7XG4gICAgICBzZXQodGhpcywgOCwgYnl0ZU9mZnNldCwgcGFja0Y2NCwgdmFsdWUsIGFyZ3VtZW50c1syXSk7XG4gICAgfVxuICB9KTtcbn0gZWxzZSB7XG4gIGlmKCFmYWlscyhmdW5jdGlvbigpe1xuICAgIG5ldyAkQXJyYXlCdWZmZXI7ICAgICAvLyBlc2xpbnQtZGlzYWJsZS1saW5lIG5vLW5ld1xuICB9KSB8fCAhZmFpbHMoZnVuY3Rpb24oKXtcbiAgICBuZXcgJEFycmF5QnVmZmVyKC41KTsgLy8gZXNsaW50LWRpc2FibGUtbGluZSBuby1uZXdcbiAgfSkpe1xuICAgICRBcnJheUJ1ZmZlciA9IGZ1bmN0aW9uIEFycmF5QnVmZmVyKGxlbmd0aCl7XG4gICAgICByZXR1cm4gbmV3IEJhc2VCdWZmZXIodmFsaWRhdGVBcnJheUJ1ZmZlckFyZ3VtZW50cyh0aGlzLCBsZW5ndGgpKTtcbiAgICB9O1xuICAgIHZhciBBcnJheUJ1ZmZlclByb3RvID0gJEFycmF5QnVmZmVyW1BST1RPVFlQRV0gPSBCYXNlQnVmZmVyW1BST1RPVFlQRV07XG4gICAgZm9yKHZhciBrZXlzID0gZ09QTihCYXNlQnVmZmVyKSwgaiA9IDAsIGtleTsga2V5cy5sZW5ndGggPiBqOyApe1xuICAgICAgaWYoISgoa2V5ID0ga2V5c1tqKytdKSBpbiAkQXJyYXlCdWZmZXIpKWhpZGUoJEFycmF5QnVmZmVyLCBrZXksIEJhc2VCdWZmZXJba2V5XSk7XG4gICAgfTtcbiAgICBpZighTElCUkFSWSlBcnJheUJ1ZmZlclByb3RvLmNvbnN0cnVjdG9yID0gJEFycmF5QnVmZmVyO1xuICB9XG4gIC8vIGlPUyBTYWZhcmkgNy54IGJ1Z1xuICB2YXIgdmlldyA9IG5ldyAkRGF0YVZpZXcobmV3ICRBcnJheUJ1ZmZlcigyKSlcbiAgICAsICRzZXRJbnQ4ID0gJERhdGFWaWV3W1BST1RPVFlQRV0uc2V0SW50ODtcbiAgdmlldy5zZXRJbnQ4KDAsIDIxNDc0ODM2NDgpO1xuICB2aWV3LnNldEludDgoMSwgMjE0NzQ4MzY0OSk7XG4gIGlmKHZpZXcuZ2V0SW50OCgwKSB8fCAhdmlldy5nZXRJbnQ4KDEpKXJlZGVmaW5lQWxsKCREYXRhVmlld1tQUk9UT1RZUEVdLCB7XG4gICAgc2V0SW50ODogZnVuY3Rpb24gc2V0SW50OChieXRlT2Zmc2V0LCB2YWx1ZSl7XG4gICAgICAkc2V0SW50OC5jYWxsKHRoaXMsIGJ5dGVPZmZzZXQsIHZhbHVlIDw8IDI0ID4+IDI0KTtcbiAgICB9LFxuICAgIHNldFVpbnQ4OiBmdW5jdGlvbiBzZXRVaW50OChieXRlT2Zmc2V0LCB2YWx1ZSl7XG4gICAgICAkc2V0SW50OC5jYWxsKHRoaXMsIGJ5dGVPZmZzZXQsIHZhbHVlIDw8IDI0ID4+IDI0KTtcbiAgICB9XG4gIH0sIHRydWUpO1xufVxuc2V0VG9TdHJpbmdUYWcoJEFycmF5QnVmZmVyLCBBUlJBWV9CVUZGRVIpO1xuc2V0VG9TdHJpbmdUYWcoJERhdGFWaWV3LCBEQVRBX1ZJRVcpO1xuaGlkZSgkRGF0YVZpZXdbUFJPVE9UWVBFXSwgJHR5cGVkLlZJRVcsIHRydWUpO1xuZXhwb3J0c1tBUlJBWV9CVUZGRVJdID0gJEFycmF5QnVmZmVyO1xuZXhwb3J0c1tEQVRBX1ZJRVddID0gJERhdGFWaWV3OyIsInZhciBnbG9iYWwgPSByZXF1aXJlKCcuL19nbG9iYWwnKVxuICAsIGhpZGUgICA9IHJlcXVpcmUoJy4vX2hpZGUnKVxuICAsIHVpZCAgICA9IHJlcXVpcmUoJy4vX3VpZCcpXG4gICwgVFlQRUQgID0gdWlkKCd0eXBlZF9hcnJheScpXG4gICwgVklFVyAgID0gdWlkKCd2aWV3JylcbiAgLCBBQlYgICAgPSAhIShnbG9iYWwuQXJyYXlCdWZmZXIgJiYgZ2xvYmFsLkRhdGFWaWV3KVxuICAsIENPTlNUUiA9IEFCVlxuICAsIGkgPSAwLCBsID0gOSwgVHlwZWQ7XG5cbnZhciBUeXBlZEFycmF5Q29uc3RydWN0b3JzID0gKFxuICAnSW50OEFycmF5LFVpbnQ4QXJyYXksVWludDhDbGFtcGVkQXJyYXksSW50MTZBcnJheSxVaW50MTZBcnJheSxJbnQzMkFycmF5LFVpbnQzMkFycmF5LEZsb2F0MzJBcnJheSxGbG9hdDY0QXJyYXknXG4pLnNwbGl0KCcsJyk7XG5cbndoaWxlKGkgPCBsKXtcbiAgaWYoVHlwZWQgPSBnbG9iYWxbVHlwZWRBcnJheUNvbnN0cnVjdG9yc1tpKytdXSl7XG4gICAgaGlkZShUeXBlZC5wcm90b3R5cGUsIFRZUEVELCB0cnVlKTtcbiAgICBoaWRlKFR5cGVkLnByb3RvdHlwZSwgVklFVywgdHJ1ZSk7XG4gIH0gZWxzZSBDT05TVFIgPSBmYWxzZTtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSB7XG4gIEFCVjogICAgQUJWLFxuICBDT05TVFI6IENPTlNUUixcbiAgVFlQRUQ6ICBUWVBFRCxcbiAgVklFVzogICBWSUVXXG59OyIsInZhciBpZCA9IDBcbiAgLCBweCA9IE1hdGgucmFuZG9tKCk7XG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uKGtleSl7XG4gIHJldHVybiAnU3ltYm9sKCcuY29uY2F0KGtleSA9PT0gdW5kZWZpbmVkID8gJycgOiBrZXksICcpXycsICgrK2lkICsgcHgpLnRvU3RyaW5nKDM2KSk7XG59OyIsInZhciBzdG9yZSAgICAgID0gcmVxdWlyZSgnLi9fc2hhcmVkJykoJ3drcycpXG4gICwgdWlkICAgICAgICA9IHJlcXVpcmUoJy4vX3VpZCcpXG4gICwgU3ltYm9sICAgICA9IHJlcXVpcmUoJy4vX2dsb2JhbCcpLlN5bWJvbFxuICAsIFVTRV9TWU1CT0wgPSB0eXBlb2YgU3ltYm9sID09ICdmdW5jdGlvbic7XG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uKG5hbWUpe1xuICByZXR1cm4gc3RvcmVbbmFtZV0gfHwgKHN0b3JlW25hbWVdID1cbiAgICBVU0VfU1lNQk9MICYmIFN5bWJvbFtuYW1lXSB8fCAoVVNFX1NZTUJPTCA/IFN5bWJvbCA6IHVpZCkoJ1N5bWJvbC4nICsgbmFtZSkpO1xufTsiLCJ2YXIgY2xhc3NvZiAgID0gcmVxdWlyZSgnLi9fY2xhc3NvZicpXG4gICwgSVRFUkFUT1IgID0gcmVxdWlyZSgnLi9fd2tzJykoJ2l0ZXJhdG9yJylcbiAgLCBJdGVyYXRvcnMgPSByZXF1aXJlKCcuL19pdGVyYXRvcnMnKTtcbm1vZHVsZS5leHBvcnRzID0gcmVxdWlyZSgnLi9fY29yZScpLmdldEl0ZXJhdG9yTWV0aG9kID0gZnVuY3Rpb24oaXQpe1xuICBpZihpdCAhPSB1bmRlZmluZWQpcmV0dXJuIGl0W0lURVJBVE9SXVxuICAgIHx8IGl0WydAQGl0ZXJhdG9yJ11cbiAgICB8fCBJdGVyYXRvcnNbY2xhc3NvZihpdCldO1xufTsiLCJ2YXIgY2xhc3NvZiAgID0gcmVxdWlyZSgnLi9fY2xhc3NvZicpXG4gICwgSVRFUkFUT1IgID0gcmVxdWlyZSgnLi9fd2tzJykoJ2l0ZXJhdG9yJylcbiAgLCBJdGVyYXRvcnMgPSByZXF1aXJlKCcuL19pdGVyYXRvcnMnKTtcbm1vZHVsZS5leHBvcnRzID0gcmVxdWlyZSgnLi9fY29yZScpLmlzSXRlcmFibGUgPSBmdW5jdGlvbihpdCl7XG4gIHZhciBPID0gT2JqZWN0KGl0KTtcbiAgcmV0dXJuIE9bSVRFUkFUT1JdICE9PSB1bmRlZmluZWRcbiAgICB8fCAnQEBpdGVyYXRvcicgaW4gT1xuICAgIHx8IEl0ZXJhdG9ycy5oYXNPd25Qcm9wZXJ0eShjbGFzc29mKE8pKTtcbn07IiwiLy8gaHR0cHM6Ly9naXRodWIuY29tL2JlbmphbWluZ3IvUmV4RXhwLmVzY2FwZVxudmFyICRleHBvcnQgPSByZXF1aXJlKCcuL19leHBvcnQnKVxuICAsICRyZSAgICAgPSByZXF1aXJlKCcuL19yZXBsYWNlcicpKC9bXFxcXF4kKis/LigpfFtcXF17fV0vZywgJ1xcXFwkJicpO1xuXG4kZXhwb3J0KCRleHBvcnQuUywgJ1JlZ0V4cCcsIHtlc2NhcGU6IGZ1bmN0aW9uIGVzY2FwZShpdCl7IHJldHVybiAkcmUoaXQpOyB9fSk7XG4iLCIvLyAyMi4xLjMuMyBBcnJheS5wcm90b3R5cGUuY29weVdpdGhpbih0YXJnZXQsIHN0YXJ0LCBlbmQgPSB0aGlzLmxlbmd0aClcbnZhciAkZXhwb3J0ID0gcmVxdWlyZSgnLi9fZXhwb3J0Jyk7XG5cbiRleHBvcnQoJGV4cG9ydC5QLCAnQXJyYXknLCB7Y29weVdpdGhpbjogcmVxdWlyZSgnLi9fYXJyYXktY29weS13aXRoaW4nKX0pO1xuXG5yZXF1aXJlKCcuL19hZGQtdG8tdW5zY29wYWJsZXMnKSgnY29weVdpdGhpbicpOyIsIid1c2Ugc3RyaWN0JztcclxudmFyICRleHBvcnQgPSByZXF1aXJlKCcuL19leHBvcnQnKVxyXG4gICwgJGV2ZXJ5ICA9IHJlcXVpcmUoJy4vX2FycmF5LW1ldGhvZHMnKSg0KTtcclxuXHJcbiRleHBvcnQoJGV4cG9ydC5QICsgJGV4cG9ydC5GICogIXJlcXVpcmUoJy4vX3N0cmljdC1tZXRob2QnKShbXS5ldmVyeSwgdHJ1ZSksICdBcnJheScsIHtcclxuICAvLyAyMi4xLjMuNSAvIDE1LjQuNC4xNiBBcnJheS5wcm90b3R5cGUuZXZlcnkoY2FsbGJhY2tmbiBbLCB0aGlzQXJnXSlcclxuICBldmVyeTogZnVuY3Rpb24gZXZlcnkoY2FsbGJhY2tmbiAvKiAsIHRoaXNBcmcgKi8pe1xyXG4gICAgcmV0dXJuICRldmVyeSh0aGlzLCBjYWxsYmFja2ZuLCBhcmd1bWVudHNbMV0pO1xyXG4gIH1cclxufSk7IiwiLy8gMjIuMS4zLjYgQXJyYXkucHJvdG90eXBlLmZpbGwodmFsdWUsIHN0YXJ0ID0gMCwgZW5kID0gdGhpcy5sZW5ndGgpXG52YXIgJGV4cG9ydCA9IHJlcXVpcmUoJy4vX2V4cG9ydCcpO1xuXG4kZXhwb3J0KCRleHBvcnQuUCwgJ0FycmF5Jywge2ZpbGw6IHJlcXVpcmUoJy4vX2FycmF5LWZpbGwnKX0pO1xuXG5yZXF1aXJlKCcuL19hZGQtdG8tdW5zY29wYWJsZXMnKSgnZmlsbCcpOyIsIid1c2Ugc3RyaWN0JztcclxudmFyICRleHBvcnQgPSByZXF1aXJlKCcuL19leHBvcnQnKVxyXG4gICwgJGZpbHRlciA9IHJlcXVpcmUoJy4vX2FycmF5LW1ldGhvZHMnKSgyKTtcclxuXHJcbiRleHBvcnQoJGV4cG9ydC5QICsgJGV4cG9ydC5GICogIXJlcXVpcmUoJy4vX3N0cmljdC1tZXRob2QnKShbXS5maWx0ZXIsIHRydWUpLCAnQXJyYXknLCB7XHJcbiAgLy8gMjIuMS4zLjcgLyAxNS40LjQuMjAgQXJyYXkucHJvdG90eXBlLmZpbHRlcihjYWxsYmFja2ZuIFssIHRoaXNBcmddKVxyXG4gIGZpbHRlcjogZnVuY3Rpb24gZmlsdGVyKGNhbGxiYWNrZm4gLyogLCB0aGlzQXJnICovKXtcclxuICAgIHJldHVybiAkZmlsdGVyKHRoaXMsIGNhbGxiYWNrZm4sIGFyZ3VtZW50c1sxXSk7XHJcbiAgfVxyXG59KTsiLCIndXNlIHN0cmljdCc7XG4vLyAyMi4xLjMuOSBBcnJheS5wcm90b3R5cGUuZmluZEluZGV4KHByZWRpY2F0ZSwgdGhpc0FyZyA9IHVuZGVmaW5lZClcbnZhciAkZXhwb3J0ID0gcmVxdWlyZSgnLi9fZXhwb3J0JylcbiAgLCAkZmluZCAgID0gcmVxdWlyZSgnLi9fYXJyYXktbWV0aG9kcycpKDYpXG4gICwgS0VZICAgICA9ICdmaW5kSW5kZXgnXG4gICwgZm9yY2VkICA9IHRydWU7XG4vLyBTaG91bGRuJ3Qgc2tpcCBob2xlc1xuaWYoS0VZIGluIFtdKUFycmF5KDEpW0tFWV0oZnVuY3Rpb24oKXsgZm9yY2VkID0gZmFsc2U7IH0pO1xuJGV4cG9ydCgkZXhwb3J0LlAgKyAkZXhwb3J0LkYgKiBmb3JjZWQsICdBcnJheScsIHtcbiAgZmluZEluZGV4OiBmdW5jdGlvbiBmaW5kSW5kZXgoY2FsbGJhY2tmbi8qLCB0aGF0ID0gdW5kZWZpbmVkICovKXtcbiAgICByZXR1cm4gJGZpbmQodGhpcywgY2FsbGJhY2tmbiwgYXJndW1lbnRzLmxlbmd0aCA+IDEgPyBhcmd1bWVudHNbMV0gOiB1bmRlZmluZWQpO1xuICB9XG59KTtcbnJlcXVpcmUoJy4vX2FkZC10by11bnNjb3BhYmxlcycpKEtFWSk7IiwiJ3VzZSBzdHJpY3QnO1xuLy8gMjIuMS4zLjggQXJyYXkucHJvdG90eXBlLmZpbmQocHJlZGljYXRlLCB0aGlzQXJnID0gdW5kZWZpbmVkKVxudmFyICRleHBvcnQgPSByZXF1aXJlKCcuL19leHBvcnQnKVxuICAsICRmaW5kICAgPSByZXF1aXJlKCcuL19hcnJheS1tZXRob2RzJykoNSlcbiAgLCBLRVkgICAgID0gJ2ZpbmQnXG4gICwgZm9yY2VkICA9IHRydWU7XG4vLyBTaG91bGRuJ3Qgc2tpcCBob2xlc1xuaWYoS0VZIGluIFtdKUFycmF5KDEpW0tFWV0oZnVuY3Rpb24oKXsgZm9yY2VkID0gZmFsc2U7IH0pO1xuJGV4cG9ydCgkZXhwb3J0LlAgKyAkZXhwb3J0LkYgKiBmb3JjZWQsICdBcnJheScsIHtcbiAgZmluZDogZnVuY3Rpb24gZmluZChjYWxsYmFja2ZuLyosIHRoYXQgPSB1bmRlZmluZWQgKi8pe1xuICAgIHJldHVybiAkZmluZCh0aGlzLCBjYWxsYmFja2ZuLCBhcmd1bWVudHMubGVuZ3RoID4gMSA/IGFyZ3VtZW50c1sxXSA6IHVuZGVmaW5lZCk7XG4gIH1cbn0pO1xucmVxdWlyZSgnLi9fYWRkLXRvLXVuc2NvcGFibGVzJykoS0VZKTsiLCIndXNlIHN0cmljdCc7XHJcbnZhciAkZXhwb3J0ICA9IHJlcXVpcmUoJy4vX2V4cG9ydCcpXHJcbiAgLCAkZm9yRWFjaCA9IHJlcXVpcmUoJy4vX2FycmF5LW1ldGhvZHMnKSgwKVxyXG4gICwgU1RSSUNUICAgPSByZXF1aXJlKCcuL19zdHJpY3QtbWV0aG9kJykoW10uZm9yRWFjaCwgdHJ1ZSk7XHJcblxyXG4kZXhwb3J0KCRleHBvcnQuUCArICRleHBvcnQuRiAqICFTVFJJQ1QsICdBcnJheScsIHtcclxuICAvLyAyMi4xLjMuMTAgLyAxNS40LjQuMTggQXJyYXkucHJvdG90eXBlLmZvckVhY2goY2FsbGJhY2tmbiBbLCB0aGlzQXJnXSlcclxuICBmb3JFYWNoOiBmdW5jdGlvbiBmb3JFYWNoKGNhbGxiYWNrZm4gLyogLCB0aGlzQXJnICovKXtcclxuICAgIHJldHVybiAkZm9yRWFjaCh0aGlzLCBjYWxsYmFja2ZuLCBhcmd1bWVudHNbMV0pO1xyXG4gIH1cclxufSk7IiwiJ3VzZSBzdHJpY3QnO1xudmFyIGN0eCAgICAgICAgID0gcmVxdWlyZSgnLi9fY3R4JylcbiAgLCAkZXhwb3J0ICAgICA9IHJlcXVpcmUoJy4vX2V4cG9ydCcpXG4gICwgdG9PYmplY3QgICAgPSByZXF1aXJlKCcuL190by1vYmplY3QnKVxuICAsIGNhbGwgICAgICAgID0gcmVxdWlyZSgnLi9faXRlci1jYWxsJylcbiAgLCBpc0FycmF5SXRlciA9IHJlcXVpcmUoJy4vX2lzLWFycmF5LWl0ZXInKVxuICAsIHRvTGVuZ3RoICAgID0gcmVxdWlyZSgnLi9fdG8tbGVuZ3RoJylcbiAgLCBnZXRJdGVyRm4gICA9IHJlcXVpcmUoJy4vY29yZS5nZXQtaXRlcmF0b3ItbWV0aG9kJyk7XG4kZXhwb3J0KCRleHBvcnQuUyArICRleHBvcnQuRiAqICFyZXF1aXJlKCcuL19pdGVyLWRldGVjdCcpKGZ1bmN0aW9uKGl0ZXIpeyBBcnJheS5mcm9tKGl0ZXIpOyB9KSwgJ0FycmF5Jywge1xuICAvLyAyMi4xLjIuMSBBcnJheS5mcm9tKGFycmF5TGlrZSwgbWFwZm4gPSB1bmRlZmluZWQsIHRoaXNBcmcgPSB1bmRlZmluZWQpXG4gIGZyb206IGZ1bmN0aW9uIGZyb20oYXJyYXlMaWtlLyosIG1hcGZuID0gdW5kZWZpbmVkLCB0aGlzQXJnID0gdW5kZWZpbmVkKi8pe1xuICAgIHZhciBPICAgICAgID0gdG9PYmplY3QoYXJyYXlMaWtlKVxuICAgICAgLCBDICAgICAgID0gdHlwZW9mIHRoaXMgPT0gJ2Z1bmN0aW9uJyA/IHRoaXMgOiBBcnJheVxuICAgICAgLCBhTGVuICAgID0gYXJndW1lbnRzLmxlbmd0aFxuICAgICAgLCBtYXBmbiAgID0gYUxlbiA+IDEgPyBhcmd1bWVudHNbMV0gOiB1bmRlZmluZWRcbiAgICAgICwgbWFwcGluZyA9IG1hcGZuICE9PSB1bmRlZmluZWRcbiAgICAgICwgaW5kZXggICA9IDBcbiAgICAgICwgaXRlckZuICA9IGdldEl0ZXJGbihPKVxuICAgICAgLCBsZW5ndGgsIHJlc3VsdCwgc3RlcCwgaXRlcmF0b3I7XG4gICAgaWYobWFwcGluZyltYXBmbiA9IGN0eChtYXBmbiwgYUxlbiA+IDIgPyBhcmd1bWVudHNbMl0gOiB1bmRlZmluZWQsIDIpO1xuICAgIC8vIGlmIG9iamVjdCBpc24ndCBpdGVyYWJsZSBvciBpdCdzIGFycmF5IHdpdGggZGVmYXVsdCBpdGVyYXRvciAtIHVzZSBzaW1wbGUgY2FzZVxuICAgIGlmKGl0ZXJGbiAhPSB1bmRlZmluZWQgJiYgIShDID09IEFycmF5ICYmIGlzQXJyYXlJdGVyKGl0ZXJGbikpKXtcbiAgICAgIGZvcihpdGVyYXRvciA9IGl0ZXJGbi5jYWxsKE8pLCByZXN1bHQgPSBuZXcgQzsgIShzdGVwID0gaXRlcmF0b3IubmV4dCgpKS5kb25lOyBpbmRleCsrKXtcbiAgICAgICAgcmVzdWx0W2luZGV4XSA9IG1hcHBpbmcgPyBjYWxsKGl0ZXJhdG9yLCBtYXBmbiwgW3N0ZXAudmFsdWUsIGluZGV4XSwgdHJ1ZSkgOiBzdGVwLnZhbHVlO1xuICAgICAgfVxuICAgIH0gZWxzZSB7XG4gICAgICBsZW5ndGggPSB0b0xlbmd0aChPLmxlbmd0aCk7XG4gICAgICBmb3IocmVzdWx0ID0gbmV3IEMobGVuZ3RoKTsgbGVuZ3RoID4gaW5kZXg7IGluZGV4Kyspe1xuICAgICAgICByZXN1bHRbaW5kZXhdID0gbWFwcGluZyA/IG1hcGZuKE9baW5kZXhdLCBpbmRleCkgOiBPW2luZGV4XTtcbiAgICAgIH1cbiAgICB9XG4gICAgcmVzdWx0Lmxlbmd0aCA9IGluZGV4O1xuICAgIHJldHVybiByZXN1bHQ7XG4gIH1cbn0pO1xuIiwiJ3VzZSBzdHJpY3QnO1xyXG52YXIgJGV4cG9ydCAgPSByZXF1aXJlKCcuL19leHBvcnQnKVxyXG4gICwgJGluZGV4T2YgPSByZXF1aXJlKCcuL19hcnJheS1pbmNsdWRlcycpKGZhbHNlKTtcclxuXHJcbiRleHBvcnQoJGV4cG9ydC5QICsgJGV4cG9ydC5GICogIXJlcXVpcmUoJy4vX3N0cmljdC1tZXRob2QnKShbXS5pbmRleE9mKSwgJ0FycmF5Jywge1xyXG4gIC8vIDIyLjEuMy4xMSAvIDE1LjQuNC4xNCBBcnJheS5wcm90b3R5cGUuaW5kZXhPZihzZWFyY2hFbGVtZW50IFssIGZyb21JbmRleF0pXHJcbiAgaW5kZXhPZjogZnVuY3Rpb24gaW5kZXhPZihzZWFyY2hFbGVtZW50IC8qLCBmcm9tSW5kZXggPSAwICovKXtcclxuICAgIHJldHVybiAkaW5kZXhPZih0aGlzLCBzZWFyY2hFbGVtZW50LCBhcmd1bWVudHNbMV0pO1xyXG4gIH1cclxufSk7IiwiLy8gMjIuMS4yLjIgLyAxNS40LjMuMiBBcnJheS5pc0FycmF5KGFyZylcclxudmFyICRleHBvcnQgPSByZXF1aXJlKCcuL19leHBvcnQnKTtcclxuXHJcbiRleHBvcnQoJGV4cG9ydC5TLCAnQXJyYXknLCB7aXNBcnJheTogcmVxdWlyZSgnLi9faXMtYXJyYXknKX0pOyIsIid1c2Ugc3RyaWN0JztcbnZhciBhZGRUb1Vuc2NvcGFibGVzID0gcmVxdWlyZSgnLi9fYWRkLXRvLXVuc2NvcGFibGVzJylcbiAgLCBzdGVwICAgICAgICAgICAgID0gcmVxdWlyZSgnLi9faXRlci1zdGVwJylcbiAgLCBJdGVyYXRvcnMgICAgICAgID0gcmVxdWlyZSgnLi9faXRlcmF0b3JzJylcbiAgLCB0b0lPYmplY3QgICAgICAgID0gcmVxdWlyZSgnLi9fdG8taW9iamVjdCcpO1xuXG4vLyAyMi4xLjMuNCBBcnJheS5wcm90b3R5cGUuZW50cmllcygpXG4vLyAyMi4xLjMuMTMgQXJyYXkucHJvdG90eXBlLmtleXMoKVxuLy8gMjIuMS4zLjI5IEFycmF5LnByb3RvdHlwZS52YWx1ZXMoKVxuLy8gMjIuMS4zLjMwIEFycmF5LnByb3RvdHlwZVtAQGl0ZXJhdG9yXSgpXG5tb2R1bGUuZXhwb3J0cyA9IHJlcXVpcmUoJy4vX2l0ZXItZGVmaW5lJykoQXJyYXksICdBcnJheScsIGZ1bmN0aW9uKGl0ZXJhdGVkLCBraW5kKXtcbiAgdGhpcy5fdCA9IHRvSU9iamVjdChpdGVyYXRlZCk7IC8vIHRhcmdldFxuICB0aGlzLl9pID0gMDsgICAgICAgICAgICAgICAgICAgLy8gbmV4dCBpbmRleFxuICB0aGlzLl9rID0ga2luZDsgICAgICAgICAgICAgICAgLy8ga2luZFxuLy8gMjIuMS41LjIuMSAlQXJyYXlJdGVyYXRvclByb3RvdHlwZSUubmV4dCgpXG59LCBmdW5jdGlvbigpe1xuICB2YXIgTyAgICAgPSB0aGlzLl90XG4gICAgLCBraW5kICA9IHRoaXMuX2tcbiAgICAsIGluZGV4ID0gdGhpcy5faSsrO1xuICBpZighTyB8fCBpbmRleCA+PSBPLmxlbmd0aCl7XG4gICAgdGhpcy5fdCA9IHVuZGVmaW5lZDtcbiAgICByZXR1cm4gc3RlcCgxKTtcbiAgfVxuICBpZihraW5kID09ICdrZXlzJyAgKXJldHVybiBzdGVwKDAsIGluZGV4KTtcbiAgaWYoa2luZCA9PSAndmFsdWVzJylyZXR1cm4gc3RlcCgwLCBPW2luZGV4XSk7XG4gIHJldHVybiBzdGVwKDAsIFtpbmRleCwgT1tpbmRleF1dKTtcbn0sICd2YWx1ZXMnKTtcblxuLy8gYXJndW1lbnRzTGlzdFtAQGl0ZXJhdG9yXSBpcyAlQXJyYXlQcm90b192YWx1ZXMlICg5LjQuNC42LCA5LjQuNC43KVxuSXRlcmF0b3JzLkFyZ3VtZW50cyA9IEl0ZXJhdG9ycy5BcnJheTtcblxuYWRkVG9VbnNjb3BhYmxlcygna2V5cycpO1xuYWRkVG9VbnNjb3BhYmxlcygndmFsdWVzJyk7XG5hZGRUb1Vuc2NvcGFibGVzKCdlbnRyaWVzJyk7IiwiJ3VzZSBzdHJpY3QnO1xyXG4vLyAyMi4xLjMuMTMgQXJyYXkucHJvdG90eXBlLmpvaW4oc2VwYXJhdG9yKVxyXG52YXIgJGV4cG9ydCAgID0gcmVxdWlyZSgnLi9fZXhwb3J0JylcclxuICAsIHRvSU9iamVjdCA9IHJlcXVpcmUoJy4vX3RvLWlvYmplY3QnKVxyXG4gICwgYXJyYXlKb2luID0gW10uam9pbjtcclxuXHJcbi8vIGZhbGxiYWNrIGZvciBub3QgYXJyYXktbGlrZSBzdHJpbmdzXHJcbiRleHBvcnQoJGV4cG9ydC5QICsgJGV4cG9ydC5GICogKHJlcXVpcmUoJy4vX2lvYmplY3QnKSAhPSBPYmplY3QgfHwgIXJlcXVpcmUoJy4vX3N0cmljdC1tZXRob2QnKShhcnJheUpvaW4pKSwgJ0FycmF5Jywge1xyXG4gIGpvaW46IGZ1bmN0aW9uIGpvaW4oc2VwYXJhdG9yKXtcclxuICAgIHJldHVybiBhcnJheUpvaW4uY2FsbCh0b0lPYmplY3QodGhpcyksIHNlcGFyYXRvciA9PT0gdW5kZWZpbmVkID8gJywnIDogc2VwYXJhdG9yKTtcclxuICB9XHJcbn0pOyIsIid1c2Ugc3RyaWN0JztcclxudmFyICRleHBvcnQgICA9IHJlcXVpcmUoJy4vX2V4cG9ydCcpXHJcbiAgLCB0b0lPYmplY3QgPSByZXF1aXJlKCcuL190by1pb2JqZWN0JylcclxuICAsIHRvSW50ZWdlciA9IHJlcXVpcmUoJy4vX3RvLWludGVnZXInKVxyXG4gICwgdG9MZW5ndGggID0gcmVxdWlyZSgnLi9fdG8tbGVuZ3RoJyk7XHJcblxyXG4kZXhwb3J0KCRleHBvcnQuUCArICRleHBvcnQuRiAqICFyZXF1aXJlKCcuL19zdHJpY3QtbWV0aG9kJykoW10ubGFzdEluZGV4T2YpLCAnQXJyYXknLCB7XHJcbiAgLy8gMjIuMS4zLjE0IC8gMTUuNC40LjE1IEFycmF5LnByb3RvdHlwZS5sYXN0SW5kZXhPZihzZWFyY2hFbGVtZW50IFssIGZyb21JbmRleF0pXHJcbiAgbGFzdEluZGV4T2Y6IGZ1bmN0aW9uIGxhc3RJbmRleE9mKHNlYXJjaEVsZW1lbnQgLyosIGZyb21JbmRleCA9IEBbKi0xXSAqLyl7XHJcbiAgICB2YXIgTyAgICAgID0gdG9JT2JqZWN0KHRoaXMpXHJcbiAgICAgICwgbGVuZ3RoID0gdG9MZW5ndGgoTy5sZW5ndGgpXHJcbiAgICAgICwgaW5kZXggID0gbGVuZ3RoIC0gMTtcclxuICAgIGlmKGFyZ3VtZW50cy5sZW5ndGggPiAxKWluZGV4ID0gTWF0aC5taW4oaW5kZXgsIHRvSW50ZWdlcihhcmd1bWVudHNbMV0pKTtcclxuICAgIGlmKGluZGV4IDwgMClpbmRleCA9IGxlbmd0aCArIGluZGV4O1xyXG4gICAgZm9yKDtpbmRleCA+PSAwOyBpbmRleC0tKWlmKGluZGV4IGluIE8paWYoT1tpbmRleF0gPT09IHNlYXJjaEVsZW1lbnQpcmV0dXJuIGluZGV4O1xyXG4gICAgcmV0dXJuIC0xO1xyXG4gIH1cclxufSk7IiwiJ3VzZSBzdHJpY3QnO1xyXG52YXIgJGV4cG9ydCA9IHJlcXVpcmUoJy4vX2V4cG9ydCcpXHJcbiAgLCAkbWFwICAgID0gcmVxdWlyZSgnLi9fYXJyYXktbWV0aG9kcycpKDEpO1xyXG5cclxuJGV4cG9ydCgkZXhwb3J0LlAgKyAkZXhwb3J0LkYgKiAhcmVxdWlyZSgnLi9fc3RyaWN0LW1ldGhvZCcpKFtdLm1hcCwgdHJ1ZSksICdBcnJheScsIHtcclxuICAvLyAyMi4xLjMuMTUgLyAxNS40LjQuMTkgQXJyYXkucHJvdG90eXBlLm1hcChjYWxsYmFja2ZuIFssIHRoaXNBcmddKVxyXG4gIG1hcDogZnVuY3Rpb24gbWFwKGNhbGxiYWNrZm4gLyogLCB0aGlzQXJnICovKXtcclxuICAgIHJldHVybiAkbWFwKHRoaXMsIGNhbGxiYWNrZm4sIGFyZ3VtZW50c1sxXSk7XHJcbiAgfVxyXG59KTsiLCIndXNlIHN0cmljdCc7XG52YXIgJGV4cG9ydCA9IHJlcXVpcmUoJy4vX2V4cG9ydCcpO1xuXG4vLyBXZWJLaXQgQXJyYXkub2YgaXNuJ3QgZ2VuZXJpY1xuJGV4cG9ydCgkZXhwb3J0LlMgKyAkZXhwb3J0LkYgKiByZXF1aXJlKCcuL19mYWlscycpKGZ1bmN0aW9uKCl7XG4gIGZ1bmN0aW9uIEYoKXt9XG4gIHJldHVybiAhKEFycmF5Lm9mLmNhbGwoRikgaW5zdGFuY2VvZiBGKTtcbn0pLCAnQXJyYXknLCB7XG4gIC8vIDIyLjEuMi4zIEFycmF5Lm9mKCAuLi5pdGVtcylcbiAgb2Y6IGZ1bmN0aW9uIG9mKC8qIC4uLmFyZ3MgKi8pe1xuICAgIHZhciBpbmRleCAgPSAwXG4gICAgICAsIGFMZW4gICA9IGFyZ3VtZW50cy5sZW5ndGhcbiAgICAgICwgcmVzdWx0ID0gbmV3ICh0eXBlb2YgdGhpcyA9PSAnZnVuY3Rpb24nID8gdGhpcyA6IEFycmF5KShhTGVuKTtcbiAgICB3aGlsZShhTGVuID4gaW5kZXgpcmVzdWx0W2luZGV4XSA9IGFyZ3VtZW50c1tpbmRleCsrXTtcbiAgICByZXN1bHQubGVuZ3RoID0gYUxlbjtcbiAgICByZXR1cm4gcmVzdWx0O1xuICB9XG59KTsiLCIndXNlIHN0cmljdCc7XHJcbnZhciAkZXhwb3J0ID0gcmVxdWlyZSgnLi9fZXhwb3J0JylcclxuICAsICRyZWR1Y2UgPSByZXF1aXJlKCcuL19hcnJheS1yZWR1Y2UnKTtcclxuXHJcbiRleHBvcnQoJGV4cG9ydC5QICsgJGV4cG9ydC5GICogIXJlcXVpcmUoJy4vX3N0cmljdC1tZXRob2QnKShbXS5yZWR1Y2VSaWdodCwgdHJ1ZSksICdBcnJheScsIHtcclxuICAvLyAyMi4xLjMuMTkgLyAxNS40LjQuMjIgQXJyYXkucHJvdG90eXBlLnJlZHVjZVJpZ2h0KGNhbGxiYWNrZm4gWywgaW5pdGlhbFZhbHVlXSlcclxuICByZWR1Y2VSaWdodDogZnVuY3Rpb24gcmVkdWNlUmlnaHQoY2FsbGJhY2tmbiAvKiAsIGluaXRpYWxWYWx1ZSAqLyl7XHJcbiAgICByZXR1cm4gJHJlZHVjZSh0aGlzLCBjYWxsYmFja2ZuLCBhcmd1bWVudHMubGVuZ3RoLCBhcmd1bWVudHNbMV0sIHRydWUpO1xyXG4gIH1cclxufSk7IiwiJ3VzZSBzdHJpY3QnO1xyXG52YXIgJGV4cG9ydCA9IHJlcXVpcmUoJy4vX2V4cG9ydCcpXHJcbiAgLCAkcmVkdWNlID0gcmVxdWlyZSgnLi9fYXJyYXktcmVkdWNlJyk7XHJcblxyXG4kZXhwb3J0KCRleHBvcnQuUCArICRleHBvcnQuRiAqICFyZXF1aXJlKCcuL19zdHJpY3QtbWV0aG9kJykoW10ucmVkdWNlLCB0cnVlKSwgJ0FycmF5Jywge1xyXG4gIC8vIDIyLjEuMy4xOCAvIDE1LjQuNC4yMSBBcnJheS5wcm90b3R5cGUucmVkdWNlKGNhbGxiYWNrZm4gWywgaW5pdGlhbFZhbHVlXSlcclxuICByZWR1Y2U6IGZ1bmN0aW9uIHJlZHVjZShjYWxsYmFja2ZuIC8qICwgaW5pdGlhbFZhbHVlICovKXtcclxuICAgIHJldHVybiAkcmVkdWNlKHRoaXMsIGNhbGxiYWNrZm4sIGFyZ3VtZW50cy5sZW5ndGgsIGFyZ3VtZW50c1sxXSwgZmFsc2UpO1xyXG4gIH1cclxufSk7IiwiJ3VzZSBzdHJpY3QnO1xyXG52YXIgJGV4cG9ydCAgICA9IHJlcXVpcmUoJy4vX2V4cG9ydCcpXHJcbiAgLCBodG1sICAgICAgID0gcmVxdWlyZSgnLi9faHRtbCcpXHJcbiAgLCBjb2YgICAgICAgID0gcmVxdWlyZSgnLi9fY29mJylcclxuICAsIHRvSW5kZXggICAgPSByZXF1aXJlKCcuL190by1pbmRleCcpXHJcbiAgLCB0b0xlbmd0aCAgID0gcmVxdWlyZSgnLi9fdG8tbGVuZ3RoJylcclxuICAsIGFycmF5U2xpY2UgPSBbXS5zbGljZTtcclxuXHJcbi8vIGZhbGxiYWNrIGZvciBub3QgYXJyYXktbGlrZSBFUzMgc3RyaW5ncyBhbmQgRE9NIG9iamVjdHNcclxuJGV4cG9ydCgkZXhwb3J0LlAgKyAkZXhwb3J0LkYgKiByZXF1aXJlKCcuL19mYWlscycpKGZ1bmN0aW9uKCl7XHJcbiAgaWYoaHRtbClhcnJheVNsaWNlLmNhbGwoaHRtbCk7XHJcbn0pLCAnQXJyYXknLCB7XHJcbiAgc2xpY2U6IGZ1bmN0aW9uIHNsaWNlKGJlZ2luLCBlbmQpe1xyXG4gICAgdmFyIGxlbiAgID0gdG9MZW5ndGgodGhpcy5sZW5ndGgpXHJcbiAgICAgICwga2xhc3MgPSBjb2YodGhpcyk7XHJcbiAgICBlbmQgPSBlbmQgPT09IHVuZGVmaW5lZCA/IGxlbiA6IGVuZDtcclxuICAgIGlmKGtsYXNzID09ICdBcnJheScpcmV0dXJuIGFycmF5U2xpY2UuY2FsbCh0aGlzLCBiZWdpbiwgZW5kKTtcclxuICAgIHZhciBzdGFydCAgPSB0b0luZGV4KGJlZ2luLCBsZW4pXHJcbiAgICAgICwgdXBUbyAgID0gdG9JbmRleChlbmQsIGxlbilcclxuICAgICAgLCBzaXplICAgPSB0b0xlbmd0aCh1cFRvIC0gc3RhcnQpXHJcbiAgICAgICwgY2xvbmVkID0gQXJyYXkoc2l6ZSlcclxuICAgICAgLCBpICAgICAgPSAwO1xyXG4gICAgZm9yKDsgaSA8IHNpemU7IGkrKyljbG9uZWRbaV0gPSBrbGFzcyA9PSAnU3RyaW5nJ1xyXG4gICAgICA/IHRoaXMuY2hhckF0KHN0YXJ0ICsgaSlcclxuICAgICAgOiB0aGlzW3N0YXJ0ICsgaV07XHJcbiAgICByZXR1cm4gY2xvbmVkO1xyXG4gIH1cclxufSk7IiwiJ3VzZSBzdHJpY3QnO1xyXG52YXIgJGV4cG9ydCA9IHJlcXVpcmUoJy4vX2V4cG9ydCcpXHJcbiAgLCAkc29tZSAgID0gcmVxdWlyZSgnLi9fYXJyYXktbWV0aG9kcycpKDMpO1xyXG5cclxuJGV4cG9ydCgkZXhwb3J0LlAgKyAkZXhwb3J0LkYgKiAhcmVxdWlyZSgnLi9fc3RyaWN0LW1ldGhvZCcpKFtdLnNvbWUsIHRydWUpLCAnQXJyYXknLCB7XHJcbiAgLy8gMjIuMS4zLjIzIC8gMTUuNC40LjE3IEFycmF5LnByb3RvdHlwZS5zb21lKGNhbGxiYWNrZm4gWywgdGhpc0FyZ10pXHJcbiAgc29tZTogZnVuY3Rpb24gc29tZShjYWxsYmFja2ZuIC8qICwgdGhpc0FyZyAqLyl7XHJcbiAgICByZXR1cm4gJHNvbWUodGhpcywgY2FsbGJhY2tmbiwgYXJndW1lbnRzWzFdKTtcclxuICB9XHJcbn0pOyIsIid1c2Ugc3RyaWN0JztcclxudmFyICRleHBvcnQgICA9IHJlcXVpcmUoJy4vX2V4cG9ydCcpXHJcbiAgLCBhRnVuY3Rpb24gPSByZXF1aXJlKCcuL19hLWZ1bmN0aW9uJylcclxuICAsIHRvT2JqZWN0ICA9IHJlcXVpcmUoJy4vX3RvLW9iamVjdCcpXHJcbiAgLCBmYWlscyAgICAgPSByZXF1aXJlKCcuL19mYWlscycpXHJcbiAgLCAkc29ydCAgICAgPSBbXS5zb3J0XHJcbiAgLCB0ZXN0ICAgICAgPSBbMSwgMiwgM107XHJcblxyXG4kZXhwb3J0KCRleHBvcnQuUCArICRleHBvcnQuRiAqIChmYWlscyhmdW5jdGlvbigpe1xyXG4gIC8vIElFOC1cclxuICB0ZXN0LnNvcnQodW5kZWZpbmVkKTtcclxufSkgfHwgIWZhaWxzKGZ1bmN0aW9uKCl7XHJcbiAgLy8gVjggYnVnXHJcbiAgdGVzdC5zb3J0KG51bGwpO1xyXG4gIC8vIE9sZCBXZWJLaXRcclxufSkgfHwgIXJlcXVpcmUoJy4vX3N0cmljdC1tZXRob2QnKSgkc29ydCkpLCAnQXJyYXknLCB7XHJcbiAgLy8gMjIuMS4zLjI1IEFycmF5LnByb3RvdHlwZS5zb3J0KGNvbXBhcmVmbilcclxuICBzb3J0OiBmdW5jdGlvbiBzb3J0KGNvbXBhcmVmbil7XHJcbiAgICByZXR1cm4gY29tcGFyZWZuID09PSB1bmRlZmluZWRcclxuICAgICAgPyAkc29ydC5jYWxsKHRvT2JqZWN0KHRoaXMpKVxyXG4gICAgICA6ICRzb3J0LmNhbGwodG9PYmplY3QodGhpcyksIGFGdW5jdGlvbihjb21wYXJlZm4pKTtcclxuICB9XHJcbn0pOyIsInJlcXVpcmUoJy4vX3NldC1zcGVjaWVzJykoJ0FycmF5Jyk7IiwiLy8gMjAuMy4zLjEgLyAxNS45LjQuNCBEYXRlLm5vdygpXHJcbnZhciAkZXhwb3J0ID0gcmVxdWlyZSgnLi9fZXhwb3J0Jyk7XHJcblxyXG4kZXhwb3J0KCRleHBvcnQuUywgJ0RhdGUnLCB7bm93OiBmdW5jdGlvbigpeyByZXR1cm4gbmV3IERhdGUoKS5nZXRUaW1lKCk7IH19KTsiLCIndXNlIHN0cmljdCc7XHJcbi8vIDIwLjMuNC4zNiAvIDE1LjkuNS40MyBEYXRlLnByb3RvdHlwZS50b0lTT1N0cmluZygpXHJcbnZhciAkZXhwb3J0ID0gcmVxdWlyZSgnLi9fZXhwb3J0JylcclxuICAsIGZhaWxzICAgPSByZXF1aXJlKCcuL19mYWlscycpXHJcbiAgLCBnZXRUaW1lID0gRGF0ZS5wcm90b3R5cGUuZ2V0VGltZTtcclxuXHJcbnZhciBseiA9IGZ1bmN0aW9uKG51bSl7XHJcbiAgcmV0dXJuIG51bSA+IDkgPyBudW0gOiAnMCcgKyBudW07XHJcbn07XHJcblxyXG4vLyBQaGFudG9tSlMgLyBvbGQgV2ViS2l0IGhhcyBhIGJyb2tlbiBpbXBsZW1lbnRhdGlvbnNcclxuJGV4cG9ydCgkZXhwb3J0LlAgKyAkZXhwb3J0LkYgKiAoZmFpbHMoZnVuY3Rpb24oKXtcclxuICByZXR1cm4gbmV3IERhdGUoLTVlMTMgLSAxKS50b0lTT1N0cmluZygpICE9ICcwMzg1LTA3LTI1VDA3OjA2OjM5Ljk5OVonO1xyXG59KSB8fCAhZmFpbHMoZnVuY3Rpb24oKXtcclxuICBuZXcgRGF0ZShOYU4pLnRvSVNPU3RyaW5nKCk7XHJcbn0pKSwgJ0RhdGUnLCB7XHJcbiAgdG9JU09TdHJpbmc6IGZ1bmN0aW9uIHRvSVNPU3RyaW5nKCl7XHJcbiAgICBpZighaXNGaW5pdGUoZ2V0VGltZS5jYWxsKHRoaXMpKSl0aHJvdyBSYW5nZUVycm9yKCdJbnZhbGlkIHRpbWUgdmFsdWUnKTtcclxuICAgIHZhciBkID0gdGhpc1xyXG4gICAgICAsIHkgPSBkLmdldFVUQ0Z1bGxZZWFyKClcclxuICAgICAgLCBtID0gZC5nZXRVVENNaWxsaXNlY29uZHMoKVxyXG4gICAgICAsIHMgPSB5IDwgMCA/ICctJyA6IHkgPiA5OTk5ID8gJysnIDogJyc7XHJcbiAgICByZXR1cm4gcyArICgnMDAwMDAnICsgTWF0aC5hYnMoeSkpLnNsaWNlKHMgPyAtNiA6IC00KSArXHJcbiAgICAgICctJyArIGx6KGQuZ2V0VVRDTW9udGgoKSArIDEpICsgJy0nICsgbHooZC5nZXRVVENEYXRlKCkpICtcclxuICAgICAgJ1QnICsgbHooZC5nZXRVVENIb3VycygpKSArICc6JyArIGx6KGQuZ2V0VVRDTWludXRlcygpKSArXHJcbiAgICAgICc6JyArIGx6KGQuZ2V0VVRDU2Vjb25kcygpKSArICcuJyArIChtID4gOTkgPyBtIDogJzAnICsgbHoobSkpICsgJ1onO1xyXG4gIH1cclxufSk7IiwiJ3VzZSBzdHJpY3QnO1xudmFyICRleHBvcnQgICAgID0gcmVxdWlyZSgnLi9fZXhwb3J0JylcbiAgLCB0b09iamVjdCAgICA9IHJlcXVpcmUoJy4vX3RvLW9iamVjdCcpXG4gICwgdG9QcmltaXRpdmUgPSByZXF1aXJlKCcuL190by1wcmltaXRpdmUnKTtcblxuJGV4cG9ydCgkZXhwb3J0LlAgKyAkZXhwb3J0LkYgKiByZXF1aXJlKCcuL19mYWlscycpKGZ1bmN0aW9uKCl7XG4gIHJldHVybiBuZXcgRGF0ZShOYU4pLnRvSlNPTigpICE9PSBudWxsIHx8IERhdGUucHJvdG90eXBlLnRvSlNPTi5jYWxsKHt0b0lTT1N0cmluZzogZnVuY3Rpb24oKXsgcmV0dXJuIDE7IH19KSAhPT0gMTtcbn0pLCAnRGF0ZScsIHtcbiAgdG9KU09OOiBmdW5jdGlvbiB0b0pTT04oa2V5KXtcbiAgICB2YXIgTyAgPSB0b09iamVjdCh0aGlzKVxuICAgICAgLCBwdiA9IHRvUHJpbWl0aXZlKE8pO1xuICAgIHJldHVybiB0eXBlb2YgcHYgPT0gJ251bWJlcicgJiYgIWlzRmluaXRlKHB2KSA/IG51bGwgOiBPLnRvSVNPU3RyaW5nKCk7XG4gIH1cbn0pOyIsInZhciBUT19QUklNSVRJVkUgPSByZXF1aXJlKCcuL193a3MnKSgndG9QcmltaXRpdmUnKVxyXG4gICwgcHJvdG8gICAgICAgID0gRGF0ZS5wcm90b3R5cGU7XHJcblxyXG5pZighKFRPX1BSSU1JVElWRSBpbiBwcm90bykpcmVxdWlyZSgnLi9faGlkZScpKHByb3RvLCBUT19QUklNSVRJVkUsIHJlcXVpcmUoJy4vX2RhdGUtdG8tcHJpbWl0aXZlJykpOyIsInZhciBEYXRlUHJvdG8gICAgPSBEYXRlLnByb3RvdHlwZVxuICAsIElOVkFMSURfREFURSA9ICdJbnZhbGlkIERhdGUnXG4gICwgVE9fU1RSSU5HICAgID0gJ3RvU3RyaW5nJ1xuICAsICR0b1N0cmluZyAgICA9IERhdGVQcm90b1tUT19TVFJJTkddXG4gICwgZ2V0VGltZSAgICAgID0gRGF0ZVByb3RvLmdldFRpbWU7XG5pZihuZXcgRGF0ZShOYU4pICsgJycgIT0gSU5WQUxJRF9EQVRFKXtcbiAgcmVxdWlyZSgnLi9fcmVkZWZpbmUnKShEYXRlUHJvdG8sIFRPX1NUUklORywgZnVuY3Rpb24gdG9TdHJpbmcoKXtcbiAgICB2YXIgdmFsdWUgPSBnZXRUaW1lLmNhbGwodGhpcyk7XG4gICAgcmV0dXJuIHZhbHVlID09PSB2YWx1ZSA/ICR0b1N0cmluZy5jYWxsKHRoaXMpIDogSU5WQUxJRF9EQVRFO1xuICB9KTtcbn0iLCIvLyAxOS4yLjMuMiAvIDE1LjMuNC41IEZ1bmN0aW9uLnByb3RvdHlwZS5iaW5kKHRoaXNBcmcsIGFyZ3MuLi4pXHJcbnZhciAkZXhwb3J0ID0gcmVxdWlyZSgnLi9fZXhwb3J0Jyk7XHJcblxyXG4kZXhwb3J0KCRleHBvcnQuUCwgJ0Z1bmN0aW9uJywge2JpbmQ6IHJlcXVpcmUoJy4vX2JpbmQnKX0pOyIsIid1c2Ugc3RyaWN0JztcbnZhciBpc09iamVjdCAgICAgICA9IHJlcXVpcmUoJy4vX2lzLW9iamVjdCcpXG4gICwgZ2V0UHJvdG90eXBlT2YgPSByZXF1aXJlKCcuL19vYmplY3QtZ3BvJylcbiAgLCBIQVNfSU5TVEFOQ0UgICA9IHJlcXVpcmUoJy4vX3drcycpKCdoYXNJbnN0YW5jZScpXG4gICwgRnVuY3Rpb25Qcm90byAgPSBGdW5jdGlvbi5wcm90b3R5cGU7XG4vLyAxOS4yLjMuNiBGdW5jdGlvbi5wcm90b3R5cGVbQEBoYXNJbnN0YW5jZV0oVilcbmlmKCEoSEFTX0lOU1RBTkNFIGluIEZ1bmN0aW9uUHJvdG8pKXJlcXVpcmUoJy4vX29iamVjdC1kcCcpLmYoRnVuY3Rpb25Qcm90bywgSEFTX0lOU1RBTkNFLCB7dmFsdWU6IGZ1bmN0aW9uKE8pe1xuICBpZih0eXBlb2YgdGhpcyAhPSAnZnVuY3Rpb24nIHx8ICFpc09iamVjdChPKSlyZXR1cm4gZmFsc2U7XG4gIGlmKCFpc09iamVjdCh0aGlzLnByb3RvdHlwZSkpcmV0dXJuIE8gaW5zdGFuY2VvZiB0aGlzO1xuICAvLyBmb3IgZW52aXJvbm1lbnQgdy9vIG5hdGl2ZSBgQEBoYXNJbnN0YW5jZWAgbG9naWMgZW5vdWdoIGBpbnN0YW5jZW9mYCwgYnV0IGFkZCB0aGlzOlxuICB3aGlsZShPID0gZ2V0UHJvdG90eXBlT2YoTykpaWYodGhpcy5wcm90b3R5cGUgPT09IE8pcmV0dXJuIHRydWU7XG4gIHJldHVybiBmYWxzZTtcbn19KTsiLCJ2YXIgZFAgICAgICAgICA9IHJlcXVpcmUoJy4vX29iamVjdC1kcCcpLmZcbiAgLCBjcmVhdGVEZXNjID0gcmVxdWlyZSgnLi9fcHJvcGVydHktZGVzYycpXG4gICwgaGFzICAgICAgICA9IHJlcXVpcmUoJy4vX2hhcycpXG4gICwgRlByb3RvICAgICA9IEZ1bmN0aW9uLnByb3RvdHlwZVxuICAsIG5hbWVSRSAgICAgPSAvXlxccypmdW5jdGlvbiAoW14gKF0qKS9cbiAgLCBOQU1FICAgICAgID0gJ25hbWUnO1xuLy8gMTkuMi40LjIgbmFtZVxuTkFNRSBpbiBGUHJvdG8gfHwgcmVxdWlyZSgnLi9fZGVzY3JpcHRvcnMnKSAmJiBkUChGUHJvdG8sIE5BTUUsIHtcbiAgY29uZmlndXJhYmxlOiB0cnVlLFxuICBnZXQ6IGZ1bmN0aW9uKCl7XG4gICAgdmFyIG1hdGNoID0gKCcnICsgdGhpcykubWF0Y2gobmFtZVJFKVxuICAgICAgLCBuYW1lICA9IG1hdGNoID8gbWF0Y2hbMV0gOiAnJztcbiAgICBoYXModGhpcywgTkFNRSkgfHwgZFAodGhpcywgTkFNRSwgY3JlYXRlRGVzYyg1LCBuYW1lKSk7XG4gICAgcmV0dXJuIG5hbWU7XG4gIH1cbn0pOyIsIid1c2Ugc3RyaWN0JztcbnZhciBzdHJvbmcgPSByZXF1aXJlKCcuL19jb2xsZWN0aW9uLXN0cm9uZycpO1xuXG4vLyAyMy4xIE1hcCBPYmplY3RzXG5tb2R1bGUuZXhwb3J0cyA9IHJlcXVpcmUoJy4vX2NvbGxlY3Rpb24nKSgnTWFwJywgZnVuY3Rpb24oZ2V0KXtcbiAgcmV0dXJuIGZ1bmN0aW9uIE1hcCgpeyByZXR1cm4gZ2V0KHRoaXMsIGFyZ3VtZW50cy5sZW5ndGggPiAwID8gYXJndW1lbnRzWzBdIDogdW5kZWZpbmVkKTsgfTtcbn0sIHtcbiAgLy8gMjMuMS4zLjYgTWFwLnByb3RvdHlwZS5nZXQoa2V5KVxuICBnZXQ6IGZ1bmN0aW9uIGdldChrZXkpe1xuICAgIHZhciBlbnRyeSA9IHN0cm9uZy5nZXRFbnRyeSh0aGlzLCBrZXkpO1xuICAgIHJldHVybiBlbnRyeSAmJiBlbnRyeS52O1xuICB9LFxuICAvLyAyMy4xLjMuOSBNYXAucHJvdG90eXBlLnNldChrZXksIHZhbHVlKVxuICBzZXQ6IGZ1bmN0aW9uIHNldChrZXksIHZhbHVlKXtcbiAgICByZXR1cm4gc3Ryb25nLmRlZih0aGlzLCBrZXkgPT09IDAgPyAwIDoga2V5LCB2YWx1ZSk7XG4gIH1cbn0sIHN0cm9uZywgdHJ1ZSk7IiwiLy8gMjAuMi4yLjMgTWF0aC5hY29zaCh4KVxudmFyICRleHBvcnQgPSByZXF1aXJlKCcuL19leHBvcnQnKVxuICAsIGxvZzFwICAgPSByZXF1aXJlKCcuL19tYXRoLWxvZzFwJylcbiAgLCBzcXJ0ICAgID0gTWF0aC5zcXJ0XG4gICwgJGFjb3NoICA9IE1hdGguYWNvc2g7XG5cbi8vIFY4IGJ1ZyBodHRwczovL2NvZGUuZ29vZ2xlLmNvbS9wL3Y4L2lzc3Vlcy9kZXRhaWw/aWQ9MzUwOVxuJGV4cG9ydCgkZXhwb3J0LlMgKyAkZXhwb3J0LkYgKiAhKCRhY29zaCAmJiBNYXRoLmZsb29yKCRhY29zaChOdW1iZXIuTUFYX1ZBTFVFKSkgPT0gNzEwKSwgJ01hdGgnLCB7XG4gIGFjb3NoOiBmdW5jdGlvbiBhY29zaCh4KXtcbiAgICByZXR1cm4gKHggPSAreCkgPCAxID8gTmFOIDogeCA+IDk0OTA2MjY1LjYyNDI1MTU2XG4gICAgICA/IE1hdGgubG9nKHgpICsgTWF0aC5MTjJcbiAgICAgIDogbG9nMXAoeCAtIDEgKyBzcXJ0KHggLSAxKSAqIHNxcnQoeCArIDEpKTtcbiAgfVxufSk7IiwiLy8gMjAuMi4yLjUgTWF0aC5hc2luaCh4KVxudmFyICRleHBvcnQgPSByZXF1aXJlKCcuL19leHBvcnQnKTtcblxuZnVuY3Rpb24gYXNpbmgoeCl7XG4gIHJldHVybiAhaXNGaW5pdGUoeCA9ICt4KSB8fCB4ID09IDAgPyB4IDogeCA8IDAgPyAtYXNpbmgoLXgpIDogTWF0aC5sb2coeCArIE1hdGguc3FydCh4ICogeCArIDEpKTtcbn1cblxuJGV4cG9ydCgkZXhwb3J0LlMsICdNYXRoJywge2FzaW5oOiBhc2luaH0pOyIsIi8vIDIwLjIuMi43IE1hdGguYXRhbmgoeClcbnZhciAkZXhwb3J0ID0gcmVxdWlyZSgnLi9fZXhwb3J0Jyk7XG5cbiRleHBvcnQoJGV4cG9ydC5TLCAnTWF0aCcsIHtcbiAgYXRhbmg6IGZ1bmN0aW9uIGF0YW5oKHgpe1xuICAgIHJldHVybiAoeCA9ICt4KSA9PSAwID8geCA6IE1hdGgubG9nKCgxICsgeCkgLyAoMSAtIHgpKSAvIDI7XG4gIH1cbn0pOyIsIi8vIDIwLjIuMi45IE1hdGguY2JydCh4KVxudmFyICRleHBvcnQgPSByZXF1aXJlKCcuL19leHBvcnQnKVxuICAsIHNpZ24gICAgPSByZXF1aXJlKCcuL19tYXRoLXNpZ24nKTtcblxuJGV4cG9ydCgkZXhwb3J0LlMsICdNYXRoJywge1xuICBjYnJ0OiBmdW5jdGlvbiBjYnJ0KHgpe1xuICAgIHJldHVybiBzaWduKHggPSAreCkgKiBNYXRoLnBvdyhNYXRoLmFicyh4KSwgMSAvIDMpO1xuICB9XG59KTsiLCIvLyAyMC4yLjIuMTEgTWF0aC5jbHozMih4KVxudmFyICRleHBvcnQgPSByZXF1aXJlKCcuL19leHBvcnQnKTtcblxuJGV4cG9ydCgkZXhwb3J0LlMsICdNYXRoJywge1xuICBjbHozMjogZnVuY3Rpb24gY2x6MzIoeCl7XG4gICAgcmV0dXJuICh4ID4+Pj0gMCkgPyAzMSAtIE1hdGguZmxvb3IoTWF0aC5sb2coeCArIDAuNSkgKiBNYXRoLkxPRzJFKSA6IDMyO1xuICB9XG59KTsiLCIvLyAyMC4yLjIuMTIgTWF0aC5jb3NoKHgpXG52YXIgJGV4cG9ydCA9IHJlcXVpcmUoJy4vX2V4cG9ydCcpXG4gICwgZXhwICAgICA9IE1hdGguZXhwO1xuXG4kZXhwb3J0KCRleHBvcnQuUywgJ01hdGgnLCB7XG4gIGNvc2g6IGZ1bmN0aW9uIGNvc2goeCl7XG4gICAgcmV0dXJuIChleHAoeCA9ICt4KSArIGV4cCgteCkpIC8gMjtcbiAgfVxufSk7IiwiLy8gMjAuMi4yLjE0IE1hdGguZXhwbTEoeClcbnZhciAkZXhwb3J0ID0gcmVxdWlyZSgnLi9fZXhwb3J0Jyk7XG5cbiRleHBvcnQoJGV4cG9ydC5TLCAnTWF0aCcsIHtleHBtMTogcmVxdWlyZSgnLi9fbWF0aC1leHBtMScpfSk7IiwiLy8gMjAuMi4yLjE2IE1hdGguZnJvdW5kKHgpXG52YXIgJGV4cG9ydCAgID0gcmVxdWlyZSgnLi9fZXhwb3J0JylcbiAgLCBzaWduICAgICAgPSByZXF1aXJlKCcuL19tYXRoLXNpZ24nKVxuICAsIHBvdyAgICAgICA9IE1hdGgucG93XG4gICwgRVBTSUxPTiAgID0gcG93KDIsIC01MilcbiAgLCBFUFNJTE9OMzIgPSBwb3coMiwgLTIzKVxuICAsIE1BWDMyICAgICA9IHBvdygyLCAxMjcpICogKDIgLSBFUFNJTE9OMzIpXG4gICwgTUlOMzIgICAgID0gcG93KDIsIC0xMjYpO1xuXG52YXIgcm91bmRUaWVzVG9FdmVuID0gZnVuY3Rpb24obil7XG4gIHJldHVybiBuICsgMSAvIEVQU0lMT04gLSAxIC8gRVBTSUxPTjtcbn07XG5cblxuJGV4cG9ydCgkZXhwb3J0LlMsICdNYXRoJywge1xuICBmcm91bmQ6IGZ1bmN0aW9uIGZyb3VuZCh4KXtcbiAgICB2YXIgJGFicyAgPSBNYXRoLmFicyh4KVxuICAgICAgLCAkc2lnbiA9IHNpZ24oeClcbiAgICAgICwgYSwgcmVzdWx0O1xuICAgIGlmKCRhYnMgPCBNSU4zMilyZXR1cm4gJHNpZ24gKiByb3VuZFRpZXNUb0V2ZW4oJGFicyAvIE1JTjMyIC8gRVBTSUxPTjMyKSAqIE1JTjMyICogRVBTSUxPTjMyO1xuICAgIGEgPSAoMSArIEVQU0lMT04zMiAvIEVQU0lMT04pICogJGFicztcbiAgICByZXN1bHQgPSBhIC0gKGEgLSAkYWJzKTtcbiAgICBpZihyZXN1bHQgPiBNQVgzMiB8fCByZXN1bHQgIT0gcmVzdWx0KXJldHVybiAkc2lnbiAqIEluZmluaXR5O1xuICAgIHJldHVybiAkc2lnbiAqIHJlc3VsdDtcbiAgfVxufSk7IiwiLy8gMjAuMi4yLjE3IE1hdGguaHlwb3QoW3ZhbHVlMVssIHZhbHVlMlssIOKApiBdXV0pXG52YXIgJGV4cG9ydCA9IHJlcXVpcmUoJy4vX2V4cG9ydCcpXG4gICwgYWJzICAgICA9IE1hdGguYWJzO1xuXG4kZXhwb3J0KCRleHBvcnQuUywgJ01hdGgnLCB7XG4gIGh5cG90OiBmdW5jdGlvbiBoeXBvdCh2YWx1ZTEsIHZhbHVlMil7IC8vIGVzbGludC1kaXNhYmxlLWxpbmUgbm8tdW51c2VkLXZhcnNcbiAgICB2YXIgc3VtICA9IDBcbiAgICAgICwgaSAgICA9IDBcbiAgICAgICwgYUxlbiA9IGFyZ3VtZW50cy5sZW5ndGhcbiAgICAgICwgbGFyZyA9IDBcbiAgICAgICwgYXJnLCBkaXY7XG4gICAgd2hpbGUoaSA8IGFMZW4pe1xuICAgICAgYXJnID0gYWJzKGFyZ3VtZW50c1tpKytdKTtcbiAgICAgIGlmKGxhcmcgPCBhcmcpe1xuICAgICAgICBkaXYgID0gbGFyZyAvIGFyZztcbiAgICAgICAgc3VtICA9IHN1bSAqIGRpdiAqIGRpdiArIDE7XG4gICAgICAgIGxhcmcgPSBhcmc7XG4gICAgICB9IGVsc2UgaWYoYXJnID4gMCl7XG4gICAgICAgIGRpdiAgPSBhcmcgLyBsYXJnO1xuICAgICAgICBzdW0gKz0gZGl2ICogZGl2O1xuICAgICAgfSBlbHNlIHN1bSArPSBhcmc7XG4gICAgfVxuICAgIHJldHVybiBsYXJnID09PSBJbmZpbml0eSA/IEluZmluaXR5IDogbGFyZyAqIE1hdGguc3FydChzdW0pO1xuICB9XG59KTsiLCIvLyAyMC4yLjIuMTggTWF0aC5pbXVsKHgsIHkpXG52YXIgJGV4cG9ydCA9IHJlcXVpcmUoJy4vX2V4cG9ydCcpXG4gICwgJGltdWwgICA9IE1hdGguaW11bDtcblxuLy8gc29tZSBXZWJLaXQgdmVyc2lvbnMgZmFpbHMgd2l0aCBiaWcgbnVtYmVycywgc29tZSBoYXMgd3JvbmcgYXJpdHlcbiRleHBvcnQoJGV4cG9ydC5TICsgJGV4cG9ydC5GICogcmVxdWlyZSgnLi9fZmFpbHMnKShmdW5jdGlvbigpe1xuICByZXR1cm4gJGltdWwoMHhmZmZmZmZmZiwgNSkgIT0gLTUgfHwgJGltdWwubGVuZ3RoICE9IDI7XG59KSwgJ01hdGgnLCB7XG4gIGltdWw6IGZ1bmN0aW9uIGltdWwoeCwgeSl7XG4gICAgdmFyIFVJTlQxNiA9IDB4ZmZmZlxuICAgICAgLCB4biA9ICt4XG4gICAgICAsIHluID0gK3lcbiAgICAgICwgeGwgPSBVSU5UMTYgJiB4blxuICAgICAgLCB5bCA9IFVJTlQxNiAmIHluO1xuICAgIHJldHVybiAwIHwgeGwgKiB5bCArICgoVUlOVDE2ICYgeG4gPj4+IDE2KSAqIHlsICsgeGwgKiAoVUlOVDE2ICYgeW4gPj4+IDE2KSA8PCAxNiA+Pj4gMCk7XG4gIH1cbn0pOyIsIi8vIDIwLjIuMi4yMSBNYXRoLmxvZzEwKHgpXG52YXIgJGV4cG9ydCA9IHJlcXVpcmUoJy4vX2V4cG9ydCcpO1xuXG4kZXhwb3J0KCRleHBvcnQuUywgJ01hdGgnLCB7XG4gIGxvZzEwOiBmdW5jdGlvbiBsb2cxMCh4KXtcbiAgICByZXR1cm4gTWF0aC5sb2coeCkgLyBNYXRoLkxOMTA7XG4gIH1cbn0pOyIsIi8vIDIwLjIuMi4yMCBNYXRoLmxvZzFwKHgpXG52YXIgJGV4cG9ydCA9IHJlcXVpcmUoJy4vX2V4cG9ydCcpO1xuXG4kZXhwb3J0KCRleHBvcnQuUywgJ01hdGgnLCB7bG9nMXA6IHJlcXVpcmUoJy4vX21hdGgtbG9nMXAnKX0pOyIsIi8vIDIwLjIuMi4yMiBNYXRoLmxvZzIoeClcbnZhciAkZXhwb3J0ID0gcmVxdWlyZSgnLi9fZXhwb3J0Jyk7XG5cbiRleHBvcnQoJGV4cG9ydC5TLCAnTWF0aCcsIHtcbiAgbG9nMjogZnVuY3Rpb24gbG9nMih4KXtcbiAgICByZXR1cm4gTWF0aC5sb2coeCkgLyBNYXRoLkxOMjtcbiAgfVxufSk7IiwiLy8gMjAuMi4yLjI4IE1hdGguc2lnbih4KVxudmFyICRleHBvcnQgPSByZXF1aXJlKCcuL19leHBvcnQnKTtcblxuJGV4cG9ydCgkZXhwb3J0LlMsICdNYXRoJywge3NpZ246IHJlcXVpcmUoJy4vX21hdGgtc2lnbicpfSk7IiwiLy8gMjAuMi4yLjMwIE1hdGguc2luaCh4KVxudmFyICRleHBvcnQgPSByZXF1aXJlKCcuL19leHBvcnQnKVxuICAsIGV4cG0xICAgPSByZXF1aXJlKCcuL19tYXRoLWV4cG0xJylcbiAgLCBleHAgICAgID0gTWF0aC5leHA7XG5cbi8vIFY4IG5lYXIgQ2hyb21pdW0gMzggaGFzIGEgcHJvYmxlbSB3aXRoIHZlcnkgc21hbGwgbnVtYmVyc1xuJGV4cG9ydCgkZXhwb3J0LlMgKyAkZXhwb3J0LkYgKiByZXF1aXJlKCcuL19mYWlscycpKGZ1bmN0aW9uKCl7XG4gIHJldHVybiAhTWF0aC5zaW5oKC0yZS0xNykgIT0gLTJlLTE3O1xufSksICdNYXRoJywge1xuICBzaW5oOiBmdW5jdGlvbiBzaW5oKHgpe1xuICAgIHJldHVybiBNYXRoLmFicyh4ID0gK3gpIDwgMVxuICAgICAgPyAoZXhwbTEoeCkgLSBleHBtMSgteCkpIC8gMlxuICAgICAgOiAoZXhwKHggLSAxKSAtIGV4cCgteCAtIDEpKSAqIChNYXRoLkUgLyAyKTtcbiAgfVxufSk7IiwiLy8gMjAuMi4yLjMzIE1hdGgudGFuaCh4KVxudmFyICRleHBvcnQgPSByZXF1aXJlKCcuL19leHBvcnQnKVxuICAsIGV4cG0xICAgPSByZXF1aXJlKCcuL19tYXRoLWV4cG0xJylcbiAgLCBleHAgICAgID0gTWF0aC5leHA7XG5cbiRleHBvcnQoJGV4cG9ydC5TLCAnTWF0aCcsIHtcbiAgdGFuaDogZnVuY3Rpb24gdGFuaCh4KXtcbiAgICB2YXIgYSA9IGV4cG0xKHggPSAreClcbiAgICAgICwgYiA9IGV4cG0xKC14KTtcbiAgICByZXR1cm4gYSA9PSBJbmZpbml0eSA/IDEgOiBiID09IEluZmluaXR5ID8gLTEgOiAoYSAtIGIpIC8gKGV4cCh4KSArIGV4cCgteCkpO1xuICB9XG59KTsiLCIvLyAyMC4yLjIuMzQgTWF0aC50cnVuYyh4KVxudmFyICRleHBvcnQgPSByZXF1aXJlKCcuL19leHBvcnQnKTtcblxuJGV4cG9ydCgkZXhwb3J0LlMsICdNYXRoJywge1xuICB0cnVuYzogZnVuY3Rpb24gdHJ1bmMoaXQpe1xuICAgIHJldHVybiAoaXQgPiAwID8gTWF0aC5mbG9vciA6IE1hdGguY2VpbCkoaXQpO1xuICB9XG59KTsiLCIndXNlIHN0cmljdCc7XG52YXIgZ2xvYmFsICAgICAgICAgICAgPSByZXF1aXJlKCcuL19nbG9iYWwnKVxuICAsIGhhcyAgICAgICAgICAgICAgID0gcmVxdWlyZSgnLi9faGFzJylcbiAgLCBjb2YgICAgICAgICAgICAgICA9IHJlcXVpcmUoJy4vX2NvZicpXG4gICwgaW5oZXJpdElmUmVxdWlyZWQgPSByZXF1aXJlKCcuL19pbmhlcml0LWlmLXJlcXVpcmVkJylcbiAgLCB0b1ByaW1pdGl2ZSAgICAgICA9IHJlcXVpcmUoJy4vX3RvLXByaW1pdGl2ZScpXG4gICwgZmFpbHMgICAgICAgICAgICAgPSByZXF1aXJlKCcuL19mYWlscycpXG4gICwgZ09QTiAgICAgICAgICAgICAgPSByZXF1aXJlKCcuL19vYmplY3QtZ29wbicpLmZcbiAgLCBnT1BEICAgICAgICAgICAgICA9IHJlcXVpcmUoJy4vX29iamVjdC1nb3BkJykuZlxuICAsIGRQICAgICAgICAgICAgICAgID0gcmVxdWlyZSgnLi9fb2JqZWN0LWRwJykuZlxuICAsICR0cmltICAgICAgICAgICAgID0gcmVxdWlyZSgnLi9fc3RyaW5nLXRyaW0nKS50cmltXG4gICwgTlVNQkVSICAgICAgICAgICAgPSAnTnVtYmVyJ1xuICAsICROdW1iZXIgICAgICAgICAgID0gZ2xvYmFsW05VTUJFUl1cbiAgLCBCYXNlICAgICAgICAgICAgICA9ICROdW1iZXJcbiAgLCBwcm90byAgICAgICAgICAgICA9ICROdW1iZXIucHJvdG90eXBlXG4gIC8vIE9wZXJhIH4xMiBoYXMgYnJva2VuIE9iamVjdCN0b1N0cmluZ1xuICAsIEJST0tFTl9DT0YgICAgICAgID0gY29mKHJlcXVpcmUoJy4vX29iamVjdC1jcmVhdGUnKShwcm90bykpID09IE5VTUJFUlxuICAsIFRSSU0gICAgICAgICAgICAgID0gJ3RyaW0nIGluIFN0cmluZy5wcm90b3R5cGU7XG5cbi8vIDcuMS4zIFRvTnVtYmVyKGFyZ3VtZW50KVxudmFyIHRvTnVtYmVyID0gZnVuY3Rpb24oYXJndW1lbnQpe1xuICB2YXIgaXQgPSB0b1ByaW1pdGl2ZShhcmd1bWVudCwgZmFsc2UpO1xuICBpZih0eXBlb2YgaXQgPT0gJ3N0cmluZycgJiYgaXQubGVuZ3RoID4gMil7XG4gICAgaXQgPSBUUklNID8gaXQudHJpbSgpIDogJHRyaW0oaXQsIDMpO1xuICAgIHZhciBmaXJzdCA9IGl0LmNoYXJDb2RlQXQoMClcbiAgICAgICwgdGhpcmQsIHJhZGl4LCBtYXhDb2RlO1xuICAgIGlmKGZpcnN0ID09PSA0MyB8fCBmaXJzdCA9PT0gNDUpe1xuICAgICAgdGhpcmQgPSBpdC5jaGFyQ29kZUF0KDIpO1xuICAgICAgaWYodGhpcmQgPT09IDg4IHx8IHRoaXJkID09PSAxMjApcmV0dXJuIE5hTjsgLy8gTnVtYmVyKCcrMHgxJykgc2hvdWxkIGJlIE5hTiwgb2xkIFY4IGZpeFxuICAgIH0gZWxzZSBpZihmaXJzdCA9PT0gNDgpe1xuICAgICAgc3dpdGNoKGl0LmNoYXJDb2RlQXQoMSkpe1xuICAgICAgICBjYXNlIDY2IDogY2FzZSA5OCAgOiByYWRpeCA9IDI7IG1heENvZGUgPSA0OTsgYnJlYWs7IC8vIGZhc3QgZXF1YWwgL14wYlswMV0rJC9pXG4gICAgICAgIGNhc2UgNzkgOiBjYXNlIDExMSA6IHJhZGl4ID0gODsgbWF4Q29kZSA9IDU1OyBicmVhazsgLy8gZmFzdCBlcXVhbCAvXjBvWzAtN10rJC9pXG4gICAgICAgIGRlZmF1bHQgOiByZXR1cm4gK2l0O1xuICAgICAgfVxuICAgICAgZm9yKHZhciBkaWdpdHMgPSBpdC5zbGljZSgyKSwgaSA9IDAsIGwgPSBkaWdpdHMubGVuZ3RoLCBjb2RlOyBpIDwgbDsgaSsrKXtcbiAgICAgICAgY29kZSA9IGRpZ2l0cy5jaGFyQ29kZUF0KGkpO1xuICAgICAgICAvLyBwYXJzZUludCBwYXJzZXMgYSBzdHJpbmcgdG8gYSBmaXJzdCB1bmF2YWlsYWJsZSBzeW1ib2xcbiAgICAgICAgLy8gYnV0IFRvTnVtYmVyIHNob3VsZCByZXR1cm4gTmFOIGlmIGEgc3RyaW5nIGNvbnRhaW5zIHVuYXZhaWxhYmxlIHN5bWJvbHNcbiAgICAgICAgaWYoY29kZSA8IDQ4IHx8IGNvZGUgPiBtYXhDb2RlKXJldHVybiBOYU47XG4gICAgICB9IHJldHVybiBwYXJzZUludChkaWdpdHMsIHJhZGl4KTtcbiAgICB9XG4gIH0gcmV0dXJuICtpdDtcbn07XG5cbmlmKCEkTnVtYmVyKCcgMG8xJykgfHwgISROdW1iZXIoJzBiMScpIHx8ICROdW1iZXIoJysweDEnKSl7XG4gICROdW1iZXIgPSBmdW5jdGlvbiBOdW1iZXIodmFsdWUpe1xuICAgIHZhciBpdCA9IGFyZ3VtZW50cy5sZW5ndGggPCAxID8gMCA6IHZhbHVlXG4gICAgICAsIHRoYXQgPSB0aGlzO1xuICAgIHJldHVybiB0aGF0IGluc3RhbmNlb2YgJE51bWJlclxuICAgICAgLy8gY2hlY2sgb24gMS4uY29uc3RydWN0b3IoZm9vKSBjYXNlXG4gICAgICAmJiAoQlJPS0VOX0NPRiA/IGZhaWxzKGZ1bmN0aW9uKCl7IHByb3RvLnZhbHVlT2YuY2FsbCh0aGF0KTsgfSkgOiBjb2YodGhhdCkgIT0gTlVNQkVSKVxuICAgICAgICA/IGluaGVyaXRJZlJlcXVpcmVkKG5ldyBCYXNlKHRvTnVtYmVyKGl0KSksIHRoYXQsICROdW1iZXIpIDogdG9OdW1iZXIoaXQpO1xuICB9O1xuICBmb3IodmFyIGtleXMgPSByZXF1aXJlKCcuL19kZXNjcmlwdG9ycycpID8gZ09QTihCYXNlKSA6IChcbiAgICAvLyBFUzM6XG4gICAgJ01BWF9WQUxVRSxNSU5fVkFMVUUsTmFOLE5FR0FUSVZFX0lORklOSVRZLFBPU0lUSVZFX0lORklOSVRZLCcgK1xuICAgIC8vIEVTNiAoaW4gY2FzZSwgaWYgbW9kdWxlcyB3aXRoIEVTNiBOdW1iZXIgc3RhdGljcyByZXF1aXJlZCBiZWZvcmUpOlxuICAgICdFUFNJTE9OLGlzRmluaXRlLGlzSW50ZWdlcixpc05hTixpc1NhZmVJbnRlZ2VyLE1BWF9TQUZFX0lOVEVHRVIsJyArXG4gICAgJ01JTl9TQUZFX0lOVEVHRVIscGFyc2VGbG9hdCxwYXJzZUludCxpc0ludGVnZXInXG4gICkuc3BsaXQoJywnKSwgaiA9IDAsIGtleTsga2V5cy5sZW5ndGggPiBqOyBqKyspe1xuICAgIGlmKGhhcyhCYXNlLCBrZXkgPSBrZXlzW2pdKSAmJiAhaGFzKCROdW1iZXIsIGtleSkpe1xuICAgICAgZFAoJE51bWJlciwga2V5LCBnT1BEKEJhc2UsIGtleSkpO1xuICAgIH1cbiAgfVxuICAkTnVtYmVyLnByb3RvdHlwZSA9IHByb3RvO1xuICBwcm90by5jb25zdHJ1Y3RvciA9ICROdW1iZXI7XG4gIHJlcXVpcmUoJy4vX3JlZGVmaW5lJykoZ2xvYmFsLCBOVU1CRVIsICROdW1iZXIpO1xufSIsIi8vIDIwLjEuMi4xIE51bWJlci5FUFNJTE9OXG52YXIgJGV4cG9ydCA9IHJlcXVpcmUoJy4vX2V4cG9ydCcpO1xuXG4kZXhwb3J0KCRleHBvcnQuUywgJ051bWJlcicsIHtFUFNJTE9OOiBNYXRoLnBvdygyLCAtNTIpfSk7IiwiLy8gMjAuMS4yLjIgTnVtYmVyLmlzRmluaXRlKG51bWJlcilcbnZhciAkZXhwb3J0ICAgPSByZXF1aXJlKCcuL19leHBvcnQnKVxuICAsIF9pc0Zpbml0ZSA9IHJlcXVpcmUoJy4vX2dsb2JhbCcpLmlzRmluaXRlO1xuXG4kZXhwb3J0KCRleHBvcnQuUywgJ051bWJlcicsIHtcbiAgaXNGaW5pdGU6IGZ1bmN0aW9uIGlzRmluaXRlKGl0KXtcbiAgICByZXR1cm4gdHlwZW9mIGl0ID09ICdudW1iZXInICYmIF9pc0Zpbml0ZShpdCk7XG4gIH1cbn0pOyIsIi8vIDIwLjEuMi4zIE51bWJlci5pc0ludGVnZXIobnVtYmVyKVxudmFyICRleHBvcnQgPSByZXF1aXJlKCcuL19leHBvcnQnKTtcblxuJGV4cG9ydCgkZXhwb3J0LlMsICdOdW1iZXInLCB7aXNJbnRlZ2VyOiByZXF1aXJlKCcuL19pcy1pbnRlZ2VyJyl9KTsiLCIvLyAyMC4xLjIuNCBOdW1iZXIuaXNOYU4obnVtYmVyKVxudmFyICRleHBvcnQgPSByZXF1aXJlKCcuL19leHBvcnQnKTtcblxuJGV4cG9ydCgkZXhwb3J0LlMsICdOdW1iZXInLCB7XG4gIGlzTmFOOiBmdW5jdGlvbiBpc05hTihudW1iZXIpe1xuICAgIHJldHVybiBudW1iZXIgIT0gbnVtYmVyO1xuICB9XG59KTsiLCIvLyAyMC4xLjIuNSBOdW1iZXIuaXNTYWZlSW50ZWdlcihudW1iZXIpXG52YXIgJGV4cG9ydCAgID0gcmVxdWlyZSgnLi9fZXhwb3J0JylcbiAgLCBpc0ludGVnZXIgPSByZXF1aXJlKCcuL19pcy1pbnRlZ2VyJylcbiAgLCBhYnMgICAgICAgPSBNYXRoLmFicztcblxuJGV4cG9ydCgkZXhwb3J0LlMsICdOdW1iZXInLCB7XG4gIGlzU2FmZUludGVnZXI6IGZ1bmN0aW9uIGlzU2FmZUludGVnZXIobnVtYmVyKXtcbiAgICByZXR1cm4gaXNJbnRlZ2VyKG51bWJlcikgJiYgYWJzKG51bWJlcikgPD0gMHgxZmZmZmZmZmZmZmZmZjtcbiAgfVxufSk7IiwiLy8gMjAuMS4yLjYgTnVtYmVyLk1BWF9TQUZFX0lOVEVHRVJcbnZhciAkZXhwb3J0ID0gcmVxdWlyZSgnLi9fZXhwb3J0Jyk7XG5cbiRleHBvcnQoJGV4cG9ydC5TLCAnTnVtYmVyJywge01BWF9TQUZFX0lOVEVHRVI6IDB4MWZmZmZmZmZmZmZmZmZ9KTsiLCIvLyAyMC4xLjIuMTAgTnVtYmVyLk1JTl9TQUZFX0lOVEVHRVJcbnZhciAkZXhwb3J0ID0gcmVxdWlyZSgnLi9fZXhwb3J0Jyk7XG5cbiRleHBvcnQoJGV4cG9ydC5TLCAnTnVtYmVyJywge01JTl9TQUZFX0lOVEVHRVI6IC0weDFmZmZmZmZmZmZmZmZmfSk7IiwidmFyICRleHBvcnQgICAgID0gcmVxdWlyZSgnLi9fZXhwb3J0JylcbiAgLCAkcGFyc2VGbG9hdCA9IHJlcXVpcmUoJy4vX3BhcnNlLWZsb2F0Jyk7XG4vLyAyMC4xLjIuMTIgTnVtYmVyLnBhcnNlRmxvYXQoc3RyaW5nKVxuJGV4cG9ydCgkZXhwb3J0LlMgKyAkZXhwb3J0LkYgKiAoTnVtYmVyLnBhcnNlRmxvYXQgIT0gJHBhcnNlRmxvYXQpLCAnTnVtYmVyJywge3BhcnNlRmxvYXQ6ICRwYXJzZUZsb2F0fSk7IiwidmFyICRleHBvcnQgICA9IHJlcXVpcmUoJy4vX2V4cG9ydCcpXG4gICwgJHBhcnNlSW50ID0gcmVxdWlyZSgnLi9fcGFyc2UtaW50Jyk7XG4vLyAyMC4xLjIuMTMgTnVtYmVyLnBhcnNlSW50KHN0cmluZywgcmFkaXgpXG4kZXhwb3J0KCRleHBvcnQuUyArICRleHBvcnQuRiAqIChOdW1iZXIucGFyc2VJbnQgIT0gJHBhcnNlSW50KSwgJ051bWJlcicsIHtwYXJzZUludDogJHBhcnNlSW50fSk7IiwiJ3VzZSBzdHJpY3QnO1xyXG52YXIgJGV4cG9ydCAgICAgID0gcmVxdWlyZSgnLi9fZXhwb3J0JylcclxuICAsIGFuSW5zdGFuY2UgICA9IHJlcXVpcmUoJy4vX2FuLWluc3RhbmNlJylcclxuICAsIHRvSW50ZWdlciAgICA9IHJlcXVpcmUoJy4vX3RvLWludGVnZXInKVxyXG4gICwgYU51bWJlclZhbHVlID0gcmVxdWlyZSgnLi9fYS1udW1iZXItdmFsdWUnKVxyXG4gICwgcmVwZWF0ICAgICAgID0gcmVxdWlyZSgnLi9fc3RyaW5nLXJlcGVhdCcpXHJcbiAgLCAkdG9GaXhlZCAgICAgPSAxLi50b0ZpeGVkXHJcbiAgLCBmbG9vciAgICAgICAgPSBNYXRoLmZsb29yXHJcbiAgLCBkYXRhICAgICAgICAgPSBbMCwgMCwgMCwgMCwgMCwgMF1cclxuICAsIEVSUk9SICAgICAgICA9ICdOdW1iZXIudG9GaXhlZDogaW5jb3JyZWN0IGludm9jYXRpb24hJ1xyXG4gICwgWkVSTyAgICAgICAgID0gJzAnO1xyXG5cclxudmFyIG11bHRpcGx5ID0gZnVuY3Rpb24obiwgYyl7XHJcbiAgdmFyIGkgID0gLTFcclxuICAgICwgYzIgPSBjO1xyXG4gIHdoaWxlKCsraSA8IDYpe1xyXG4gICAgYzIgKz0gbiAqIGRhdGFbaV07XHJcbiAgICBkYXRhW2ldID0gYzIgJSAxZTc7XHJcbiAgICBjMiA9IGZsb29yKGMyIC8gMWU3KTtcclxuICB9XHJcbn07XHJcbnZhciBkaXZpZGUgPSBmdW5jdGlvbihuKXtcclxuICB2YXIgaSA9IDZcclxuICAgICwgYyA9IDA7XHJcbiAgd2hpbGUoLS1pID49IDApe1xyXG4gICAgYyArPSBkYXRhW2ldO1xyXG4gICAgZGF0YVtpXSA9IGZsb29yKGMgLyBuKTtcclxuICAgIGMgPSAoYyAlIG4pICogMWU3O1xyXG4gIH1cclxufTtcclxudmFyIG51bVRvU3RyaW5nID0gZnVuY3Rpb24oKXtcclxuICB2YXIgaSA9IDZcclxuICAgICwgcyA9ICcnO1xyXG4gIHdoaWxlKC0taSA+PSAwKXtcclxuICAgIGlmKHMgIT09ICcnIHx8IGkgPT09IDAgfHwgZGF0YVtpXSAhPT0gMCl7XHJcbiAgICAgIHZhciB0ID0gU3RyaW5nKGRhdGFbaV0pO1xyXG4gICAgICBzID0gcyA9PT0gJycgPyB0IDogcyArIHJlcGVhdC5jYWxsKFpFUk8sIDcgLSB0Lmxlbmd0aCkgKyB0O1xyXG4gICAgfVxyXG4gIH0gcmV0dXJuIHM7XHJcbn07XHJcbnZhciBwb3cgPSBmdW5jdGlvbih4LCBuLCBhY2Mpe1xyXG4gIHJldHVybiBuID09PSAwID8gYWNjIDogbiAlIDIgPT09IDEgPyBwb3coeCwgbiAtIDEsIGFjYyAqIHgpIDogcG93KHggKiB4LCBuIC8gMiwgYWNjKTtcclxufTtcclxudmFyIGxvZyA9IGZ1bmN0aW9uKHgpe1xyXG4gIHZhciBuICA9IDBcclxuICAgICwgeDIgPSB4O1xyXG4gIHdoaWxlKHgyID49IDQwOTYpe1xyXG4gICAgbiArPSAxMjtcclxuICAgIHgyIC89IDQwOTY7XHJcbiAgfVxyXG4gIHdoaWxlKHgyID49IDIpe1xyXG4gICAgbiAgKz0gMTtcclxuICAgIHgyIC89IDI7XHJcbiAgfSByZXR1cm4gbjtcclxufTtcclxuXHJcbiRleHBvcnQoJGV4cG9ydC5QICsgJGV4cG9ydC5GICogKCEhJHRvRml4ZWQgJiYgKFxyXG4gIDAuMDAwMDgudG9GaXhlZCgzKSAhPT0gJzAuMDAwJyB8fFxyXG4gIDAuOS50b0ZpeGVkKDApICE9PSAnMScgfHxcclxuICAxLjI1NS50b0ZpeGVkKDIpICE9PSAnMS4yNScgfHxcclxuICAxMDAwMDAwMDAwMDAwMDAwMTI4Li50b0ZpeGVkKDApICE9PSAnMTAwMDAwMDAwMDAwMDAwMDEyOCdcclxuKSB8fCAhcmVxdWlyZSgnLi9fZmFpbHMnKShmdW5jdGlvbigpe1xyXG4gIC8vIFY4IH4gQW5kcm9pZCA0LjMtXHJcbiAgJHRvRml4ZWQuY2FsbCh7fSk7XHJcbn0pKSwgJ051bWJlcicsIHtcclxuICB0b0ZpeGVkOiBmdW5jdGlvbiB0b0ZpeGVkKGZyYWN0aW9uRGlnaXRzKXtcclxuICAgIHZhciB4ID0gYU51bWJlclZhbHVlKHRoaXMsIEVSUk9SKVxyXG4gICAgICAsIGYgPSB0b0ludGVnZXIoZnJhY3Rpb25EaWdpdHMpXHJcbiAgICAgICwgcyA9ICcnXHJcbiAgICAgICwgbSA9IFpFUk9cclxuICAgICAgLCBlLCB6LCBqLCBrO1xyXG4gICAgaWYoZiA8IDAgfHwgZiA+IDIwKXRocm93IFJhbmdlRXJyb3IoRVJST1IpO1xyXG4gICAgaWYoeCAhPSB4KXJldHVybiAnTmFOJztcclxuICAgIGlmKHggPD0gLTFlMjEgfHwgeCA+PSAxZTIxKXJldHVybiBTdHJpbmcoeCk7XHJcbiAgICBpZih4IDwgMCl7XHJcbiAgICAgIHMgPSAnLSc7XHJcbiAgICAgIHggPSAteDtcclxuICAgIH1cclxuICAgIGlmKHggPiAxZS0yMSl7XHJcbiAgICAgIGUgPSBsb2coeCAqIHBvdygyLCA2OSwgMSkpIC0gNjk7XHJcbiAgICAgIHogPSBlIDwgMCA/IHggKiBwb3coMiwgLWUsIDEpIDogeCAvIHBvdygyLCBlLCAxKTtcclxuICAgICAgeiAqPSAweDEwMDAwMDAwMDAwMDAwO1xyXG4gICAgICBlID0gNTIgLSBlO1xyXG4gICAgICBpZihlID4gMCl7XHJcbiAgICAgICAgbXVsdGlwbHkoMCwgeik7XHJcbiAgICAgICAgaiA9IGY7XHJcbiAgICAgICAgd2hpbGUoaiA+PSA3KXtcclxuICAgICAgICAgIG11bHRpcGx5KDFlNywgMCk7XHJcbiAgICAgICAgICBqIC09IDc7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIG11bHRpcGx5KHBvdygxMCwgaiwgMSksIDApO1xyXG4gICAgICAgIGogPSBlIC0gMTtcclxuICAgICAgICB3aGlsZShqID49IDIzKXtcclxuICAgICAgICAgIGRpdmlkZSgxIDw8IDIzKTtcclxuICAgICAgICAgIGogLT0gMjM7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGRpdmlkZSgxIDw8IGopO1xyXG4gICAgICAgIG11bHRpcGx5KDEsIDEpO1xyXG4gICAgICAgIGRpdmlkZSgyKTtcclxuICAgICAgICBtID0gbnVtVG9TdHJpbmcoKTtcclxuICAgICAgfSBlbHNlIHtcclxuICAgICAgICBtdWx0aXBseSgwLCB6KTtcclxuICAgICAgICBtdWx0aXBseSgxIDw8IC1lLCAwKTtcclxuICAgICAgICBtID0gbnVtVG9TdHJpbmcoKSArIHJlcGVhdC5jYWxsKFpFUk8sIGYpO1xyXG4gICAgICB9XHJcbiAgICB9XHJcbiAgICBpZihmID4gMCl7XHJcbiAgICAgIGsgPSBtLmxlbmd0aDtcclxuICAgICAgbSA9IHMgKyAoayA8PSBmID8gJzAuJyArIHJlcGVhdC5jYWxsKFpFUk8sIGYgLSBrKSArIG0gOiBtLnNsaWNlKDAsIGsgLSBmKSArICcuJyArIG0uc2xpY2UoayAtIGYpKTtcclxuICAgIH0gZWxzZSB7XHJcbiAgICAgIG0gPSBzICsgbTtcclxuICAgIH0gcmV0dXJuIG07XHJcbiAgfVxyXG59KTsiLCIndXNlIHN0cmljdCc7XHJcbnZhciAkZXhwb3J0ICAgICAgPSByZXF1aXJlKCcuL19leHBvcnQnKVxyXG4gICwgJGZhaWxzICAgICAgID0gcmVxdWlyZSgnLi9fZmFpbHMnKVxyXG4gICwgYU51bWJlclZhbHVlID0gcmVxdWlyZSgnLi9fYS1udW1iZXItdmFsdWUnKVxyXG4gICwgJHRvUHJlY2lzaW9uID0gMS4udG9QcmVjaXNpb247XHJcblxyXG4kZXhwb3J0KCRleHBvcnQuUCArICRleHBvcnQuRiAqICgkZmFpbHMoZnVuY3Rpb24oKXtcclxuICAvLyBJRTctXHJcbiAgcmV0dXJuICR0b1ByZWNpc2lvbi5jYWxsKDEsIHVuZGVmaW5lZCkgIT09ICcxJztcclxufSkgfHwgISRmYWlscyhmdW5jdGlvbigpe1xyXG4gIC8vIFY4IH4gQW5kcm9pZCA0LjMtXHJcbiAgJHRvUHJlY2lzaW9uLmNhbGwoe30pO1xyXG59KSksICdOdW1iZXInLCB7XHJcbiAgdG9QcmVjaXNpb246IGZ1bmN0aW9uIHRvUHJlY2lzaW9uKHByZWNpc2lvbil7XHJcbiAgICB2YXIgdGhhdCA9IGFOdW1iZXJWYWx1ZSh0aGlzLCAnTnVtYmVyI3RvUHJlY2lzaW9uOiBpbmNvcnJlY3QgaW52b2NhdGlvbiEnKTtcclxuICAgIHJldHVybiBwcmVjaXNpb24gPT09IHVuZGVmaW5lZCA/ICR0b1ByZWNpc2lvbi5jYWxsKHRoYXQpIDogJHRvUHJlY2lzaW9uLmNhbGwodGhhdCwgcHJlY2lzaW9uKTsgXHJcbiAgfVxyXG59KTsiLCIvLyAxOS4xLjMuMSBPYmplY3QuYXNzaWduKHRhcmdldCwgc291cmNlKVxudmFyICRleHBvcnQgPSByZXF1aXJlKCcuL19leHBvcnQnKTtcblxuJGV4cG9ydCgkZXhwb3J0LlMgKyAkZXhwb3J0LkYsICdPYmplY3QnLCB7YXNzaWduOiByZXF1aXJlKCcuL19vYmplY3QtYXNzaWduJyl9KTsiLCJ2YXIgJGV4cG9ydCA9IHJlcXVpcmUoJy4vX2V4cG9ydCcpXHJcbi8vIDE5LjEuMi4yIC8gMTUuMi4zLjUgT2JqZWN0LmNyZWF0ZShPIFssIFByb3BlcnRpZXNdKVxyXG4kZXhwb3J0KCRleHBvcnQuUywgJ09iamVjdCcsIHtjcmVhdGU6IHJlcXVpcmUoJy4vX29iamVjdC1jcmVhdGUnKX0pOyIsInZhciAkZXhwb3J0ID0gcmVxdWlyZSgnLi9fZXhwb3J0Jyk7XHJcbi8vIDE5LjEuMi4zIC8gMTUuMi4zLjcgT2JqZWN0LmRlZmluZVByb3BlcnRpZXMoTywgUHJvcGVydGllcylcclxuJGV4cG9ydCgkZXhwb3J0LlMgKyAkZXhwb3J0LkYgKiAhcmVxdWlyZSgnLi9fZGVzY3JpcHRvcnMnKSwgJ09iamVjdCcsIHtkZWZpbmVQcm9wZXJ0aWVzOiByZXF1aXJlKCcuL19vYmplY3QtZHBzJyl9KTsiLCJ2YXIgJGV4cG9ydCA9IHJlcXVpcmUoJy4vX2V4cG9ydCcpO1xyXG4vLyAxOS4xLjIuNCAvIDE1LjIuMy42IE9iamVjdC5kZWZpbmVQcm9wZXJ0eShPLCBQLCBBdHRyaWJ1dGVzKVxyXG4kZXhwb3J0KCRleHBvcnQuUyArICRleHBvcnQuRiAqICFyZXF1aXJlKCcuL19kZXNjcmlwdG9ycycpLCAnT2JqZWN0Jywge2RlZmluZVByb3BlcnR5OiByZXF1aXJlKCcuL19vYmplY3QtZHAnKS5mfSk7IiwiLy8gMTkuMS4yLjUgT2JqZWN0LmZyZWV6ZShPKVxudmFyIGlzT2JqZWN0ID0gcmVxdWlyZSgnLi9faXMtb2JqZWN0JylcbiAgLCBtZXRhICAgICA9IHJlcXVpcmUoJy4vX21ldGEnKS5vbkZyZWV6ZTtcblxucmVxdWlyZSgnLi9fb2JqZWN0LXNhcCcpKCdmcmVlemUnLCBmdW5jdGlvbigkZnJlZXplKXtcbiAgcmV0dXJuIGZ1bmN0aW9uIGZyZWV6ZShpdCl7XG4gICAgcmV0dXJuICRmcmVlemUgJiYgaXNPYmplY3QoaXQpID8gJGZyZWV6ZShtZXRhKGl0KSkgOiBpdDtcbiAgfTtcbn0pOyIsIi8vIDE5LjEuMi42IE9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IoTywgUClcbnZhciB0b0lPYmplY3QgICAgICAgICAgICAgICAgID0gcmVxdWlyZSgnLi9fdG8taW9iamVjdCcpXG4gICwgJGdldE93blByb3BlcnR5RGVzY3JpcHRvciA9IHJlcXVpcmUoJy4vX29iamVjdC1nb3BkJykuZjtcblxucmVxdWlyZSgnLi9fb2JqZWN0LXNhcCcpKCdnZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3InLCBmdW5jdGlvbigpe1xuICByZXR1cm4gZnVuY3Rpb24gZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yKGl0LCBrZXkpe1xuICAgIHJldHVybiAkZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yKHRvSU9iamVjdChpdCksIGtleSk7XG4gIH07XG59KTsiLCIvLyAxOS4xLjIuNyBPYmplY3QuZ2V0T3duUHJvcGVydHlOYW1lcyhPKVxucmVxdWlyZSgnLi9fb2JqZWN0LXNhcCcpKCdnZXRPd25Qcm9wZXJ0eU5hbWVzJywgZnVuY3Rpb24oKXtcbiAgcmV0dXJuIHJlcXVpcmUoJy4vX29iamVjdC1nb3BuLWV4dCcpLmY7XG59KTsiLCIvLyAxOS4xLjIuOSBPYmplY3QuZ2V0UHJvdG90eXBlT2YoTylcbnZhciB0b09iamVjdCAgICAgICAgPSByZXF1aXJlKCcuL190by1vYmplY3QnKVxuICAsICRnZXRQcm90b3R5cGVPZiA9IHJlcXVpcmUoJy4vX29iamVjdC1ncG8nKTtcblxucmVxdWlyZSgnLi9fb2JqZWN0LXNhcCcpKCdnZXRQcm90b3R5cGVPZicsIGZ1bmN0aW9uKCl7XG4gIHJldHVybiBmdW5jdGlvbiBnZXRQcm90b3R5cGVPZihpdCl7XG4gICAgcmV0dXJuICRnZXRQcm90b3R5cGVPZih0b09iamVjdChpdCkpO1xuICB9O1xufSk7IiwiLy8gMTkuMS4yLjExIE9iamVjdC5pc0V4dGVuc2libGUoTylcbnZhciBpc09iamVjdCA9IHJlcXVpcmUoJy4vX2lzLW9iamVjdCcpO1xuXG5yZXF1aXJlKCcuL19vYmplY3Qtc2FwJykoJ2lzRXh0ZW5zaWJsZScsIGZ1bmN0aW9uKCRpc0V4dGVuc2libGUpe1xuICByZXR1cm4gZnVuY3Rpb24gaXNFeHRlbnNpYmxlKGl0KXtcbiAgICByZXR1cm4gaXNPYmplY3QoaXQpID8gJGlzRXh0ZW5zaWJsZSA/ICRpc0V4dGVuc2libGUoaXQpIDogdHJ1ZSA6IGZhbHNlO1xuICB9O1xufSk7IiwiLy8gMTkuMS4yLjEyIE9iamVjdC5pc0Zyb3plbihPKVxudmFyIGlzT2JqZWN0ID0gcmVxdWlyZSgnLi9faXMtb2JqZWN0Jyk7XG5cbnJlcXVpcmUoJy4vX29iamVjdC1zYXAnKSgnaXNGcm96ZW4nLCBmdW5jdGlvbigkaXNGcm96ZW4pe1xuICByZXR1cm4gZnVuY3Rpb24gaXNGcm96ZW4oaXQpe1xuICAgIHJldHVybiBpc09iamVjdChpdCkgPyAkaXNGcm96ZW4gPyAkaXNGcm96ZW4oaXQpIDogZmFsc2UgOiB0cnVlO1xuICB9O1xufSk7IiwiLy8gMTkuMS4yLjEzIE9iamVjdC5pc1NlYWxlZChPKVxudmFyIGlzT2JqZWN0ID0gcmVxdWlyZSgnLi9faXMtb2JqZWN0Jyk7XG5cbnJlcXVpcmUoJy4vX29iamVjdC1zYXAnKSgnaXNTZWFsZWQnLCBmdW5jdGlvbigkaXNTZWFsZWQpe1xuICByZXR1cm4gZnVuY3Rpb24gaXNTZWFsZWQoaXQpe1xuICAgIHJldHVybiBpc09iamVjdChpdCkgPyAkaXNTZWFsZWQgPyAkaXNTZWFsZWQoaXQpIDogZmFsc2UgOiB0cnVlO1xuICB9O1xufSk7IiwiLy8gMTkuMS4zLjEwIE9iamVjdC5pcyh2YWx1ZTEsIHZhbHVlMilcbnZhciAkZXhwb3J0ID0gcmVxdWlyZSgnLi9fZXhwb3J0Jyk7XG4kZXhwb3J0KCRleHBvcnQuUywgJ09iamVjdCcsIHtpczogcmVxdWlyZSgnLi9fc2FtZS12YWx1ZScpfSk7IiwiLy8gMTkuMS4yLjE0IE9iamVjdC5rZXlzKE8pXG52YXIgdG9PYmplY3QgPSByZXF1aXJlKCcuL190by1vYmplY3QnKVxuICAsICRrZXlzICAgID0gcmVxdWlyZSgnLi9fb2JqZWN0LWtleXMnKTtcblxucmVxdWlyZSgnLi9fb2JqZWN0LXNhcCcpKCdrZXlzJywgZnVuY3Rpb24oKXtcbiAgcmV0dXJuIGZ1bmN0aW9uIGtleXMoaXQpe1xuICAgIHJldHVybiAka2V5cyh0b09iamVjdChpdCkpO1xuICB9O1xufSk7IiwiLy8gMTkuMS4yLjE1IE9iamVjdC5wcmV2ZW50RXh0ZW5zaW9ucyhPKVxudmFyIGlzT2JqZWN0ID0gcmVxdWlyZSgnLi9faXMtb2JqZWN0JylcbiAgLCBtZXRhICAgICA9IHJlcXVpcmUoJy4vX21ldGEnKS5vbkZyZWV6ZTtcblxucmVxdWlyZSgnLi9fb2JqZWN0LXNhcCcpKCdwcmV2ZW50RXh0ZW5zaW9ucycsIGZ1bmN0aW9uKCRwcmV2ZW50RXh0ZW5zaW9ucyl7XG4gIHJldHVybiBmdW5jdGlvbiBwcmV2ZW50RXh0ZW5zaW9ucyhpdCl7XG4gICAgcmV0dXJuICRwcmV2ZW50RXh0ZW5zaW9ucyAmJiBpc09iamVjdChpdCkgPyAkcHJldmVudEV4dGVuc2lvbnMobWV0YShpdCkpIDogaXQ7XG4gIH07XG59KTsiLCIvLyAxOS4xLjIuMTcgT2JqZWN0LnNlYWwoTylcbnZhciBpc09iamVjdCA9IHJlcXVpcmUoJy4vX2lzLW9iamVjdCcpXG4gICwgbWV0YSAgICAgPSByZXF1aXJlKCcuL19tZXRhJykub25GcmVlemU7XG5cbnJlcXVpcmUoJy4vX29iamVjdC1zYXAnKSgnc2VhbCcsIGZ1bmN0aW9uKCRzZWFsKXtcbiAgcmV0dXJuIGZ1bmN0aW9uIHNlYWwoaXQpe1xuICAgIHJldHVybiAkc2VhbCAmJiBpc09iamVjdChpdCkgPyAkc2VhbChtZXRhKGl0KSkgOiBpdDtcbiAgfTtcbn0pOyIsIi8vIDE5LjEuMy4xOSBPYmplY3Quc2V0UHJvdG90eXBlT2YoTywgcHJvdG8pXG52YXIgJGV4cG9ydCA9IHJlcXVpcmUoJy4vX2V4cG9ydCcpO1xuJGV4cG9ydCgkZXhwb3J0LlMsICdPYmplY3QnLCB7c2V0UHJvdG90eXBlT2Y6IHJlcXVpcmUoJy4vX3NldC1wcm90bycpLnNldH0pOyIsIid1c2Ugc3RyaWN0Jztcbi8vIDE5LjEuMy42IE9iamVjdC5wcm90b3R5cGUudG9TdHJpbmcoKVxudmFyIGNsYXNzb2YgPSByZXF1aXJlKCcuL19jbGFzc29mJylcbiAgLCB0ZXN0ICAgID0ge307XG50ZXN0W3JlcXVpcmUoJy4vX3drcycpKCd0b1N0cmluZ1RhZycpXSA9ICd6JztcbmlmKHRlc3QgKyAnJyAhPSAnW29iamVjdCB6XScpe1xuICByZXF1aXJlKCcuL19yZWRlZmluZScpKE9iamVjdC5wcm90b3R5cGUsICd0b1N0cmluZycsIGZ1bmN0aW9uIHRvU3RyaW5nKCl7XG4gICAgcmV0dXJuICdbb2JqZWN0ICcgKyBjbGFzc29mKHRoaXMpICsgJ10nO1xuICB9LCB0cnVlKTtcbn0iLCJ2YXIgJGV4cG9ydCAgICAgPSByZXF1aXJlKCcuL19leHBvcnQnKVxyXG4gICwgJHBhcnNlRmxvYXQgPSByZXF1aXJlKCcuL19wYXJzZS1mbG9hdCcpO1xyXG4vLyAxOC4yLjQgcGFyc2VGbG9hdChzdHJpbmcpXHJcbiRleHBvcnQoJGV4cG9ydC5HICsgJGV4cG9ydC5GICogKHBhcnNlRmxvYXQgIT0gJHBhcnNlRmxvYXQpLCB7cGFyc2VGbG9hdDogJHBhcnNlRmxvYXR9KTsiLCJ2YXIgJGV4cG9ydCAgID0gcmVxdWlyZSgnLi9fZXhwb3J0JylcclxuICAsICRwYXJzZUludCA9IHJlcXVpcmUoJy4vX3BhcnNlLWludCcpO1xyXG4vLyAxOC4yLjUgcGFyc2VJbnQoc3RyaW5nLCByYWRpeClcclxuJGV4cG9ydCgkZXhwb3J0LkcgKyAkZXhwb3J0LkYgKiAocGFyc2VJbnQgIT0gJHBhcnNlSW50KSwge3BhcnNlSW50OiAkcGFyc2VJbnR9KTsiLCIndXNlIHN0cmljdCc7XG52YXIgTElCUkFSWSAgICAgICAgICAgID0gcmVxdWlyZSgnLi9fbGlicmFyeScpXG4gICwgZ2xvYmFsICAgICAgICAgICAgID0gcmVxdWlyZSgnLi9fZ2xvYmFsJylcbiAgLCBjdHggICAgICAgICAgICAgICAgPSByZXF1aXJlKCcuL19jdHgnKVxuICAsIGNsYXNzb2YgICAgICAgICAgICA9IHJlcXVpcmUoJy4vX2NsYXNzb2YnKVxuICAsICRleHBvcnQgICAgICAgICAgICA9IHJlcXVpcmUoJy4vX2V4cG9ydCcpXG4gICwgaXNPYmplY3QgICAgICAgICAgID0gcmVxdWlyZSgnLi9faXMtb2JqZWN0JylcbiAgLCBhbk9iamVjdCAgICAgICAgICAgPSByZXF1aXJlKCcuL19hbi1vYmplY3QnKVxuICAsIGFGdW5jdGlvbiAgICAgICAgICA9IHJlcXVpcmUoJy4vX2EtZnVuY3Rpb24nKVxuICAsIGFuSW5zdGFuY2UgICAgICAgICA9IHJlcXVpcmUoJy4vX2FuLWluc3RhbmNlJylcbiAgLCBmb3JPZiAgICAgICAgICAgICAgPSByZXF1aXJlKCcuL19mb3Itb2YnKVxuICAsIHNldFByb3RvICAgICAgICAgICA9IHJlcXVpcmUoJy4vX3NldC1wcm90bycpLnNldFxuICAsIHNwZWNpZXNDb25zdHJ1Y3RvciA9IHJlcXVpcmUoJy4vX3NwZWNpZXMtY29uc3RydWN0b3InKVxuICAsIHRhc2sgICAgICAgICAgICAgICA9IHJlcXVpcmUoJy4vX3Rhc2snKS5zZXRcbiAgLCBtaWNyb3Rhc2sgICAgICAgICAgPSByZXF1aXJlKCcuL19taWNyb3Rhc2snKVxuICAsIFBST01JU0UgICAgICAgICAgICA9ICdQcm9taXNlJ1xuICAsIFR5cGVFcnJvciAgICAgICAgICA9IGdsb2JhbC5UeXBlRXJyb3JcbiAgLCBwcm9jZXNzICAgICAgICAgICAgPSBnbG9iYWwucHJvY2Vzc1xuICAsICRQcm9taXNlICAgICAgICAgICA9IGdsb2JhbFtQUk9NSVNFXVxuICAsIHByb2Nlc3MgICAgICAgICAgICA9IGdsb2JhbC5wcm9jZXNzXG4gICwgaXNOb2RlICAgICAgICAgICAgID0gY2xhc3NvZihwcm9jZXNzKSA9PSAncHJvY2VzcydcbiAgLCBlbXB0eSAgICAgICAgICAgICAgPSBmdW5jdGlvbigpeyAvKiBlbXB0eSAqLyB9XG4gICwgSW50ZXJuYWwsIEdlbmVyaWNQcm9taXNlQ2FwYWJpbGl0eSwgV3JhcHBlcjtcblxudmFyIFVTRV9OQVRJVkUgPSAhIWZ1bmN0aW9uKCl7XG4gIHRyeSB7XG4gICAgLy8gY29ycmVjdCBzdWJjbGFzc2luZyB3aXRoIEBAc3BlY2llcyBzdXBwb3J0XG4gICAgdmFyIHByb21pc2UgICAgID0gJFByb21pc2UucmVzb2x2ZSgxKVxuICAgICAgLCBGYWtlUHJvbWlzZSA9IChwcm9taXNlLmNvbnN0cnVjdG9yID0ge30pW3JlcXVpcmUoJy4vX3drcycpKCdzcGVjaWVzJyldID0gZnVuY3Rpb24oZXhlYyl7IGV4ZWMoZW1wdHksIGVtcHR5KTsgfTtcbiAgICAvLyB1bmhhbmRsZWQgcmVqZWN0aW9ucyB0cmFja2luZyBzdXBwb3J0LCBOb2RlSlMgUHJvbWlzZSB3aXRob3V0IGl0IGZhaWxzIEBAc3BlY2llcyB0ZXN0XG4gICAgcmV0dXJuIChpc05vZGUgfHwgdHlwZW9mIFByb21pc2VSZWplY3Rpb25FdmVudCA9PSAnZnVuY3Rpb24nKSAmJiBwcm9taXNlLnRoZW4oZW1wdHkpIGluc3RhbmNlb2YgRmFrZVByb21pc2U7XG4gIH0gY2F0Y2goZSl7IC8qIGVtcHR5ICovIH1cbn0oKTtcblxuLy8gaGVscGVyc1xudmFyIHNhbWVDb25zdHJ1Y3RvciA9IGZ1bmN0aW9uKGEsIGIpe1xuICAvLyB3aXRoIGxpYnJhcnkgd3JhcHBlciBzcGVjaWFsIGNhc2VcbiAgcmV0dXJuIGEgPT09IGIgfHwgYSA9PT0gJFByb21pc2UgJiYgYiA9PT0gV3JhcHBlcjtcbn07XG52YXIgaXNUaGVuYWJsZSA9IGZ1bmN0aW9uKGl0KXtcbiAgdmFyIHRoZW47XG4gIHJldHVybiBpc09iamVjdChpdCkgJiYgdHlwZW9mICh0aGVuID0gaXQudGhlbikgPT0gJ2Z1bmN0aW9uJyA/IHRoZW4gOiBmYWxzZTtcbn07XG52YXIgbmV3UHJvbWlzZUNhcGFiaWxpdHkgPSBmdW5jdGlvbihDKXtcbiAgcmV0dXJuIHNhbWVDb25zdHJ1Y3RvcigkUHJvbWlzZSwgQylcbiAgICA/IG5ldyBQcm9taXNlQ2FwYWJpbGl0eShDKVxuICAgIDogbmV3IEdlbmVyaWNQcm9taXNlQ2FwYWJpbGl0eShDKTtcbn07XG52YXIgUHJvbWlzZUNhcGFiaWxpdHkgPSBHZW5lcmljUHJvbWlzZUNhcGFiaWxpdHkgPSBmdW5jdGlvbihDKXtcbiAgdmFyIHJlc29sdmUsIHJlamVjdDtcbiAgdGhpcy5wcm9taXNlID0gbmV3IEMoZnVuY3Rpb24oJCRyZXNvbHZlLCAkJHJlamVjdCl7XG4gICAgaWYocmVzb2x2ZSAhPT0gdW5kZWZpbmVkIHx8IHJlamVjdCAhPT0gdW5kZWZpbmVkKXRocm93IFR5cGVFcnJvcignQmFkIFByb21pc2UgY29uc3RydWN0b3InKTtcbiAgICByZXNvbHZlID0gJCRyZXNvbHZlO1xuICAgIHJlamVjdCAgPSAkJHJlamVjdDtcbiAgfSk7XG4gIHRoaXMucmVzb2x2ZSA9IGFGdW5jdGlvbihyZXNvbHZlKTtcbiAgdGhpcy5yZWplY3QgID0gYUZ1bmN0aW9uKHJlamVjdCk7XG59O1xudmFyIHBlcmZvcm0gPSBmdW5jdGlvbihleGVjKXtcbiAgdHJ5IHtcbiAgICBleGVjKCk7XG4gIH0gY2F0Y2goZSl7XG4gICAgcmV0dXJuIHtlcnJvcjogZX07XG4gIH1cbn07XG52YXIgbm90aWZ5ID0gZnVuY3Rpb24ocHJvbWlzZSwgaXNSZWplY3Qpe1xuICBpZihwcm9taXNlLl9uKXJldHVybjtcbiAgcHJvbWlzZS5fbiA9IHRydWU7XG4gIHZhciBjaGFpbiA9IHByb21pc2UuX2M7XG4gIG1pY3JvdGFzayhmdW5jdGlvbigpe1xuICAgIHZhciB2YWx1ZSA9IHByb21pc2UuX3ZcbiAgICAgICwgb2sgICAgPSBwcm9taXNlLl9zID09IDFcbiAgICAgICwgaSAgICAgPSAwO1xuICAgIHZhciBydW4gPSBmdW5jdGlvbihyZWFjdGlvbil7XG4gICAgICB2YXIgaGFuZGxlciA9IG9rID8gcmVhY3Rpb24ub2sgOiByZWFjdGlvbi5mYWlsXG4gICAgICAgICwgcmVzb2x2ZSA9IHJlYWN0aW9uLnJlc29sdmVcbiAgICAgICAgLCByZWplY3QgID0gcmVhY3Rpb24ucmVqZWN0XG4gICAgICAgICwgZG9tYWluICA9IHJlYWN0aW9uLmRvbWFpblxuICAgICAgICAsIHJlc3VsdCwgdGhlbjtcbiAgICAgIHRyeSB7XG4gICAgICAgIGlmKGhhbmRsZXIpe1xuICAgICAgICAgIGlmKCFvayl7XG4gICAgICAgICAgICBpZihwcm9taXNlLl9oID09IDIpb25IYW5kbGVVbmhhbmRsZWQocHJvbWlzZSk7XG4gICAgICAgICAgICBwcm9taXNlLl9oID0gMTtcbiAgICAgICAgICB9XG4gICAgICAgICAgaWYoaGFuZGxlciA9PT0gdHJ1ZSlyZXN1bHQgPSB2YWx1ZTtcbiAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgIGlmKGRvbWFpbilkb21haW4uZW50ZXIoKTtcbiAgICAgICAgICAgIHJlc3VsdCA9IGhhbmRsZXIodmFsdWUpO1xuICAgICAgICAgICAgaWYoZG9tYWluKWRvbWFpbi5leGl0KCk7XG4gICAgICAgICAgfVxuICAgICAgICAgIGlmKHJlc3VsdCA9PT0gcmVhY3Rpb24ucHJvbWlzZSl7XG4gICAgICAgICAgICByZWplY3QoVHlwZUVycm9yKCdQcm9taXNlLWNoYWluIGN5Y2xlJykpO1xuICAgICAgICAgIH0gZWxzZSBpZih0aGVuID0gaXNUaGVuYWJsZShyZXN1bHQpKXtcbiAgICAgICAgICAgIHRoZW4uY2FsbChyZXN1bHQsIHJlc29sdmUsIHJlamVjdCk7XG4gICAgICAgICAgfSBlbHNlIHJlc29sdmUocmVzdWx0KTtcbiAgICAgICAgfSBlbHNlIHJlamVjdCh2YWx1ZSk7XG4gICAgICB9IGNhdGNoKGUpe1xuICAgICAgICByZWplY3QoZSk7XG4gICAgICB9XG4gICAgfTtcbiAgICB3aGlsZShjaGFpbi5sZW5ndGggPiBpKXJ1bihjaGFpbltpKytdKTsgLy8gdmFyaWFibGUgbGVuZ3RoIC0gY2FuJ3QgdXNlIGZvckVhY2hcbiAgICBwcm9taXNlLl9jID0gW107XG4gICAgcHJvbWlzZS5fbiA9IGZhbHNlO1xuICAgIGlmKGlzUmVqZWN0ICYmICFwcm9taXNlLl9oKW9uVW5oYW5kbGVkKHByb21pc2UpO1xuICB9KTtcbn07XG52YXIgb25VbmhhbmRsZWQgPSBmdW5jdGlvbihwcm9taXNlKXtcbiAgdGFzay5jYWxsKGdsb2JhbCwgZnVuY3Rpb24oKXtcbiAgICB2YXIgdmFsdWUgPSBwcm9taXNlLl92XG4gICAgICAsIGFicnVwdCwgaGFuZGxlciwgY29uc29sZTtcbiAgICBpZihpc1VuaGFuZGxlZChwcm9taXNlKSl7XG4gICAgICBhYnJ1cHQgPSBwZXJmb3JtKGZ1bmN0aW9uKCl7XG4gICAgICAgIGlmKGlzTm9kZSl7XG4gICAgICAgICAgcHJvY2Vzcy5lbWl0KCd1bmhhbmRsZWRSZWplY3Rpb24nLCB2YWx1ZSwgcHJvbWlzZSk7XG4gICAgICAgIH0gZWxzZSBpZihoYW5kbGVyID0gZ2xvYmFsLm9udW5oYW5kbGVkcmVqZWN0aW9uKXtcbiAgICAgICAgICBoYW5kbGVyKHtwcm9taXNlOiBwcm9taXNlLCByZWFzb246IHZhbHVlfSk7XG4gICAgICAgIH0gZWxzZSBpZigoY29uc29sZSA9IGdsb2JhbC5jb25zb2xlKSAmJiBjb25zb2xlLmVycm9yKXtcbiAgICAgICAgICBjb25zb2xlLmVycm9yKCdVbmhhbmRsZWQgcHJvbWlzZSByZWplY3Rpb24nLCB2YWx1ZSk7XG4gICAgICAgIH1cbiAgICAgIH0pO1xuICAgICAgLy8gQnJvd3NlcnMgc2hvdWxkIG5vdCB0cmlnZ2VyIGByZWplY3Rpb25IYW5kbGVkYCBldmVudCBpZiBpdCB3YXMgaGFuZGxlZCBoZXJlLCBOb2RlSlMgLSBzaG91bGRcbiAgICAgIHByb21pc2UuX2ggPSBpc05vZGUgfHwgaXNVbmhhbmRsZWQocHJvbWlzZSkgPyAyIDogMTtcbiAgICB9IHByb21pc2UuX2EgPSB1bmRlZmluZWQ7XG4gICAgaWYoYWJydXB0KXRocm93IGFicnVwdC5lcnJvcjtcbiAgfSk7XG59O1xudmFyIGlzVW5oYW5kbGVkID0gZnVuY3Rpb24ocHJvbWlzZSl7XG4gIGlmKHByb21pc2UuX2ggPT0gMSlyZXR1cm4gZmFsc2U7XG4gIHZhciBjaGFpbiA9IHByb21pc2UuX2EgfHwgcHJvbWlzZS5fY1xuICAgICwgaSAgICAgPSAwXG4gICAgLCByZWFjdGlvbjtcbiAgd2hpbGUoY2hhaW4ubGVuZ3RoID4gaSl7XG4gICAgcmVhY3Rpb24gPSBjaGFpbltpKytdO1xuICAgIGlmKHJlYWN0aW9uLmZhaWwgfHwgIWlzVW5oYW5kbGVkKHJlYWN0aW9uLnByb21pc2UpKXJldHVybiBmYWxzZTtcbiAgfSByZXR1cm4gdHJ1ZTtcbn07XG52YXIgb25IYW5kbGVVbmhhbmRsZWQgPSBmdW5jdGlvbihwcm9taXNlKXtcbiAgdGFzay5jYWxsKGdsb2JhbCwgZnVuY3Rpb24oKXtcbiAgICB2YXIgaGFuZGxlcjtcbiAgICBpZihpc05vZGUpe1xuICAgICAgcHJvY2Vzcy5lbWl0KCdyZWplY3Rpb25IYW5kbGVkJywgcHJvbWlzZSk7XG4gICAgfSBlbHNlIGlmKGhhbmRsZXIgPSBnbG9iYWwub25yZWplY3Rpb25oYW5kbGVkKXtcbiAgICAgIGhhbmRsZXIoe3Byb21pc2U6IHByb21pc2UsIHJlYXNvbjogcHJvbWlzZS5fdn0pO1xuICAgIH1cbiAgfSk7XG59O1xudmFyICRyZWplY3QgPSBmdW5jdGlvbih2YWx1ZSl7XG4gIHZhciBwcm9taXNlID0gdGhpcztcbiAgaWYocHJvbWlzZS5fZClyZXR1cm47XG4gIHByb21pc2UuX2QgPSB0cnVlO1xuICBwcm9taXNlID0gcHJvbWlzZS5fdyB8fCBwcm9taXNlOyAvLyB1bndyYXBcbiAgcHJvbWlzZS5fdiA9IHZhbHVlO1xuICBwcm9taXNlLl9zID0gMjtcbiAgaWYoIXByb21pc2UuX2EpcHJvbWlzZS5fYSA9IHByb21pc2UuX2Muc2xpY2UoKTtcbiAgbm90aWZ5KHByb21pc2UsIHRydWUpO1xufTtcbnZhciAkcmVzb2x2ZSA9IGZ1bmN0aW9uKHZhbHVlKXtcbiAgdmFyIHByb21pc2UgPSB0aGlzXG4gICAgLCB0aGVuO1xuICBpZihwcm9taXNlLl9kKXJldHVybjtcbiAgcHJvbWlzZS5fZCA9IHRydWU7XG4gIHByb21pc2UgPSBwcm9taXNlLl93IHx8IHByb21pc2U7IC8vIHVud3JhcFxuICB0cnkge1xuICAgIGlmKHByb21pc2UgPT09IHZhbHVlKXRocm93IFR5cGVFcnJvcihcIlByb21pc2UgY2FuJ3QgYmUgcmVzb2x2ZWQgaXRzZWxmXCIpO1xuICAgIGlmKHRoZW4gPSBpc1RoZW5hYmxlKHZhbHVlKSl7XG4gICAgICBtaWNyb3Rhc2soZnVuY3Rpb24oKXtcbiAgICAgICAgdmFyIHdyYXBwZXIgPSB7X3c6IHByb21pc2UsIF9kOiBmYWxzZX07IC8vIHdyYXBcbiAgICAgICAgdHJ5IHtcbiAgICAgICAgICB0aGVuLmNhbGwodmFsdWUsIGN0eCgkcmVzb2x2ZSwgd3JhcHBlciwgMSksIGN0eCgkcmVqZWN0LCB3cmFwcGVyLCAxKSk7XG4gICAgICAgIH0gY2F0Y2goZSl7XG4gICAgICAgICAgJHJlamVjdC5jYWxsKHdyYXBwZXIsIGUpO1xuICAgICAgICB9XG4gICAgICB9KTtcbiAgICB9IGVsc2Uge1xuICAgICAgcHJvbWlzZS5fdiA9IHZhbHVlO1xuICAgICAgcHJvbWlzZS5fcyA9IDE7XG4gICAgICBub3RpZnkocHJvbWlzZSwgZmFsc2UpO1xuICAgIH1cbiAgfSBjYXRjaChlKXtcbiAgICAkcmVqZWN0LmNhbGwoe193OiBwcm9taXNlLCBfZDogZmFsc2V9LCBlKTsgLy8gd3JhcFxuICB9XG59O1xuXG4vLyBjb25zdHJ1Y3RvciBwb2x5ZmlsbFxuaWYoIVVTRV9OQVRJVkUpe1xuICAvLyAyNS40LjMuMSBQcm9taXNlKGV4ZWN1dG9yKVxuICAkUHJvbWlzZSA9IGZ1bmN0aW9uIFByb21pc2UoZXhlY3V0b3Ipe1xuICAgIGFuSW5zdGFuY2UodGhpcywgJFByb21pc2UsIFBST01JU0UsICdfaCcpO1xuICAgIGFGdW5jdGlvbihleGVjdXRvcik7XG4gICAgSW50ZXJuYWwuY2FsbCh0aGlzKTtcbiAgICB0cnkge1xuICAgICAgZXhlY3V0b3IoY3R4KCRyZXNvbHZlLCB0aGlzLCAxKSwgY3R4KCRyZWplY3QsIHRoaXMsIDEpKTtcbiAgICB9IGNhdGNoKGVycil7XG4gICAgICAkcmVqZWN0LmNhbGwodGhpcywgZXJyKTtcbiAgICB9XG4gIH07XG4gIEludGVybmFsID0gZnVuY3Rpb24gUHJvbWlzZShleGVjdXRvcil7XG4gICAgdGhpcy5fYyA9IFtdOyAgICAgICAgICAgICAvLyA8LSBhd2FpdGluZyByZWFjdGlvbnNcbiAgICB0aGlzLl9hID0gdW5kZWZpbmVkOyAgICAgIC8vIDwtIGNoZWNrZWQgaW4gaXNVbmhhbmRsZWQgcmVhY3Rpb25zXG4gICAgdGhpcy5fcyA9IDA7ICAgICAgICAgICAgICAvLyA8LSBzdGF0ZVxuICAgIHRoaXMuX2QgPSBmYWxzZTsgICAgICAgICAgLy8gPC0gZG9uZVxuICAgIHRoaXMuX3YgPSB1bmRlZmluZWQ7ICAgICAgLy8gPC0gdmFsdWVcbiAgICB0aGlzLl9oID0gMDsgICAgICAgICAgICAgIC8vIDwtIHJlamVjdGlvbiBzdGF0ZSwgMCAtIGRlZmF1bHQsIDEgLSBoYW5kbGVkLCAyIC0gdW5oYW5kbGVkXG4gICAgdGhpcy5fbiA9IGZhbHNlOyAgICAgICAgICAvLyA8LSBub3RpZnlcbiAgfTtcbiAgSW50ZXJuYWwucHJvdG90eXBlID0gcmVxdWlyZSgnLi9fcmVkZWZpbmUtYWxsJykoJFByb21pc2UucHJvdG90eXBlLCB7XG4gICAgLy8gMjUuNC41LjMgUHJvbWlzZS5wcm90b3R5cGUudGhlbihvbkZ1bGZpbGxlZCwgb25SZWplY3RlZClcbiAgICB0aGVuOiBmdW5jdGlvbiB0aGVuKG9uRnVsZmlsbGVkLCBvblJlamVjdGVkKXtcbiAgICAgIHZhciByZWFjdGlvbiAgICA9IG5ld1Byb21pc2VDYXBhYmlsaXR5KHNwZWNpZXNDb25zdHJ1Y3Rvcih0aGlzLCAkUHJvbWlzZSkpO1xuICAgICAgcmVhY3Rpb24ub2sgICAgID0gdHlwZW9mIG9uRnVsZmlsbGVkID09ICdmdW5jdGlvbicgPyBvbkZ1bGZpbGxlZCA6IHRydWU7XG4gICAgICByZWFjdGlvbi5mYWlsICAgPSB0eXBlb2Ygb25SZWplY3RlZCA9PSAnZnVuY3Rpb24nICYmIG9uUmVqZWN0ZWQ7XG4gICAgICByZWFjdGlvbi5kb21haW4gPSBpc05vZGUgPyBwcm9jZXNzLmRvbWFpbiA6IHVuZGVmaW5lZDtcbiAgICAgIHRoaXMuX2MucHVzaChyZWFjdGlvbik7XG4gICAgICBpZih0aGlzLl9hKXRoaXMuX2EucHVzaChyZWFjdGlvbik7XG4gICAgICBpZih0aGlzLl9zKW5vdGlmeSh0aGlzLCBmYWxzZSk7XG4gICAgICByZXR1cm4gcmVhY3Rpb24ucHJvbWlzZTtcbiAgICB9LFxuICAgIC8vIDI1LjQuNS4xIFByb21pc2UucHJvdG90eXBlLmNhdGNoKG9uUmVqZWN0ZWQpXG4gICAgJ2NhdGNoJzogZnVuY3Rpb24ob25SZWplY3RlZCl7XG4gICAgICByZXR1cm4gdGhpcy50aGVuKHVuZGVmaW5lZCwgb25SZWplY3RlZCk7XG4gICAgfVxuICB9KTtcbiAgUHJvbWlzZUNhcGFiaWxpdHkgPSBmdW5jdGlvbigpe1xuICAgIHZhciBwcm9taXNlICA9IG5ldyBJbnRlcm5hbDtcbiAgICB0aGlzLnByb21pc2UgPSBwcm9taXNlO1xuICAgIHRoaXMucmVzb2x2ZSA9IGN0eCgkcmVzb2x2ZSwgcHJvbWlzZSwgMSk7XG4gICAgdGhpcy5yZWplY3QgID0gY3R4KCRyZWplY3QsIHByb21pc2UsIDEpO1xuICB9O1xufVxuXG4kZXhwb3J0KCRleHBvcnQuRyArICRleHBvcnQuVyArICRleHBvcnQuRiAqICFVU0VfTkFUSVZFLCB7UHJvbWlzZTogJFByb21pc2V9KTtcbnJlcXVpcmUoJy4vX3NldC10by1zdHJpbmctdGFnJykoJFByb21pc2UsIFBST01JU0UpO1xucmVxdWlyZSgnLi9fc2V0LXNwZWNpZXMnKShQUk9NSVNFKTtcbldyYXBwZXIgPSByZXF1aXJlKCcuL19jb3JlJylbUFJPTUlTRV07XG5cbi8vIHN0YXRpY3NcbiRleHBvcnQoJGV4cG9ydC5TICsgJGV4cG9ydC5GICogIVVTRV9OQVRJVkUsIFBST01JU0UsIHtcbiAgLy8gMjUuNC40LjUgUHJvbWlzZS5yZWplY3QocilcbiAgcmVqZWN0OiBmdW5jdGlvbiByZWplY3Qocil7XG4gICAgdmFyIGNhcGFiaWxpdHkgPSBuZXdQcm9taXNlQ2FwYWJpbGl0eSh0aGlzKVxuICAgICAgLCAkJHJlamVjdCAgID0gY2FwYWJpbGl0eS5yZWplY3Q7XG4gICAgJCRyZWplY3Qocik7XG4gICAgcmV0dXJuIGNhcGFiaWxpdHkucHJvbWlzZTtcbiAgfVxufSk7XG4kZXhwb3J0KCRleHBvcnQuUyArICRleHBvcnQuRiAqIChMSUJSQVJZIHx8ICFVU0VfTkFUSVZFKSwgUFJPTUlTRSwge1xuICAvLyAyNS40LjQuNiBQcm9taXNlLnJlc29sdmUoeClcbiAgcmVzb2x2ZTogZnVuY3Rpb24gcmVzb2x2ZSh4KXtcbiAgICAvLyBpbnN0YW5jZW9mIGluc3RlYWQgb2YgaW50ZXJuYWwgc2xvdCBjaGVjayBiZWNhdXNlIHdlIHNob3VsZCBmaXggaXQgd2l0aG91dCByZXBsYWNlbWVudCBuYXRpdmUgUHJvbWlzZSBjb3JlXG4gICAgaWYoeCBpbnN0YW5jZW9mICRQcm9taXNlICYmIHNhbWVDb25zdHJ1Y3Rvcih4LmNvbnN0cnVjdG9yLCB0aGlzKSlyZXR1cm4geDtcbiAgICB2YXIgY2FwYWJpbGl0eSA9IG5ld1Byb21pc2VDYXBhYmlsaXR5KHRoaXMpXG4gICAgICAsICQkcmVzb2x2ZSAgPSBjYXBhYmlsaXR5LnJlc29sdmU7XG4gICAgJCRyZXNvbHZlKHgpO1xuICAgIHJldHVybiBjYXBhYmlsaXR5LnByb21pc2U7XG4gIH1cbn0pO1xuJGV4cG9ydCgkZXhwb3J0LlMgKyAkZXhwb3J0LkYgKiAhKFVTRV9OQVRJVkUgJiYgcmVxdWlyZSgnLi9faXRlci1kZXRlY3QnKShmdW5jdGlvbihpdGVyKXtcbiAgJFByb21pc2UuYWxsKGl0ZXIpWydjYXRjaCddKGVtcHR5KTtcbn0pKSwgUFJPTUlTRSwge1xuICAvLyAyNS40LjQuMSBQcm9taXNlLmFsbChpdGVyYWJsZSlcbiAgYWxsOiBmdW5jdGlvbiBhbGwoaXRlcmFibGUpe1xuICAgIHZhciBDICAgICAgICAgID0gdGhpc1xuICAgICAgLCBjYXBhYmlsaXR5ID0gbmV3UHJvbWlzZUNhcGFiaWxpdHkoQylcbiAgICAgICwgcmVzb2x2ZSAgICA9IGNhcGFiaWxpdHkucmVzb2x2ZVxuICAgICAgLCByZWplY3QgICAgID0gY2FwYWJpbGl0eS5yZWplY3Q7XG4gICAgdmFyIGFicnVwdCA9IHBlcmZvcm0oZnVuY3Rpb24oKXtcbiAgICAgIHZhciB2YWx1ZXMgICAgPSBbXVxuICAgICAgICAsIGluZGV4ICAgICA9IDBcbiAgICAgICAgLCByZW1haW5pbmcgPSAxO1xuICAgICAgZm9yT2YoaXRlcmFibGUsIGZhbHNlLCBmdW5jdGlvbihwcm9taXNlKXtcbiAgICAgICAgdmFyICRpbmRleCAgICAgICAgPSBpbmRleCsrXG4gICAgICAgICAgLCBhbHJlYWR5Q2FsbGVkID0gZmFsc2U7XG4gICAgICAgIHZhbHVlcy5wdXNoKHVuZGVmaW5lZCk7XG4gICAgICAgIHJlbWFpbmluZysrO1xuICAgICAgICBDLnJlc29sdmUocHJvbWlzZSkudGhlbihmdW5jdGlvbih2YWx1ZSl7XG4gICAgICAgICAgaWYoYWxyZWFkeUNhbGxlZClyZXR1cm47XG4gICAgICAgICAgYWxyZWFkeUNhbGxlZCAgPSB0cnVlO1xuICAgICAgICAgIHZhbHVlc1skaW5kZXhdID0gdmFsdWU7XG4gICAgICAgICAgLS1yZW1haW5pbmcgfHwgcmVzb2x2ZSh2YWx1ZXMpO1xuICAgICAgICB9LCByZWplY3QpO1xuICAgICAgfSk7XG4gICAgICAtLXJlbWFpbmluZyB8fCByZXNvbHZlKHZhbHVlcyk7XG4gICAgfSk7XG4gICAgaWYoYWJydXB0KXJlamVjdChhYnJ1cHQuZXJyb3IpO1xuICAgIHJldHVybiBjYXBhYmlsaXR5LnByb21pc2U7XG4gIH0sXG4gIC8vIDI1LjQuNC40IFByb21pc2UucmFjZShpdGVyYWJsZSlcbiAgcmFjZTogZnVuY3Rpb24gcmFjZShpdGVyYWJsZSl7XG4gICAgdmFyIEMgICAgICAgICAgPSB0aGlzXG4gICAgICAsIGNhcGFiaWxpdHkgPSBuZXdQcm9taXNlQ2FwYWJpbGl0eShDKVxuICAgICAgLCByZWplY3QgICAgID0gY2FwYWJpbGl0eS5yZWplY3Q7XG4gICAgdmFyIGFicnVwdCA9IHBlcmZvcm0oZnVuY3Rpb24oKXtcbiAgICAgIGZvck9mKGl0ZXJhYmxlLCBmYWxzZSwgZnVuY3Rpb24ocHJvbWlzZSl7XG4gICAgICAgIEMucmVzb2x2ZShwcm9taXNlKS50aGVuKGNhcGFiaWxpdHkucmVzb2x2ZSwgcmVqZWN0KTtcbiAgICAgIH0pO1xuICAgIH0pO1xuICAgIGlmKGFicnVwdClyZWplY3QoYWJydXB0LmVycm9yKTtcbiAgICByZXR1cm4gY2FwYWJpbGl0eS5wcm9taXNlO1xuICB9XG59KTsiLCIvLyAyNi4xLjEgUmVmbGVjdC5hcHBseSh0YXJnZXQsIHRoaXNBcmd1bWVudCwgYXJndW1lbnRzTGlzdClcbnZhciAkZXhwb3J0ID0gcmVxdWlyZSgnLi9fZXhwb3J0JylcbiAgLCBfYXBwbHkgID0gRnVuY3Rpb24uYXBwbHk7XG5cbiRleHBvcnQoJGV4cG9ydC5TLCAnUmVmbGVjdCcsIHtcbiAgYXBwbHk6IGZ1bmN0aW9uIGFwcGx5KHRhcmdldCwgdGhpc0FyZ3VtZW50LCBhcmd1bWVudHNMaXN0KXtcbiAgICByZXR1cm4gX2FwcGx5LmNhbGwodGFyZ2V0LCB0aGlzQXJndW1lbnQsIGFyZ3VtZW50c0xpc3QpO1xuICB9XG59KTsiLCIvLyAyNi4xLjIgUmVmbGVjdC5jb25zdHJ1Y3QodGFyZ2V0LCBhcmd1bWVudHNMaXN0IFssIG5ld1RhcmdldF0pXG52YXIgJGV4cG9ydCAgID0gcmVxdWlyZSgnLi9fZXhwb3J0JylcbiAgLCBjcmVhdGUgICAgPSByZXF1aXJlKCcuL19vYmplY3QtY3JlYXRlJylcbiAgLCBhRnVuY3Rpb24gPSByZXF1aXJlKCcuL19hLWZ1bmN0aW9uJylcbiAgLCBhbk9iamVjdCAgPSByZXF1aXJlKCcuL19hbi1vYmplY3QnKVxuICAsIGlzT2JqZWN0ICA9IHJlcXVpcmUoJy4vX2lzLW9iamVjdCcpXG4gICwgYmluZCAgICAgID0gcmVxdWlyZSgnLi9fYmluZCcpO1xuXG4vLyBNUyBFZGdlIHN1cHBvcnRzIG9ubHkgMiBhcmd1bWVudHNcbi8vIEZGIE5pZ2h0bHkgc2V0cyB0aGlyZCBhcmd1bWVudCBhcyBgbmV3LnRhcmdldGAsIGJ1dCBkb2VzIG5vdCBjcmVhdGUgYHRoaXNgIGZyb20gaXRcbiRleHBvcnQoJGV4cG9ydC5TICsgJGV4cG9ydC5GICogcmVxdWlyZSgnLi9fZmFpbHMnKShmdW5jdGlvbigpe1xuICBmdW5jdGlvbiBGKCl7fVxuICByZXR1cm4gIShSZWZsZWN0LmNvbnN0cnVjdChmdW5jdGlvbigpe30sIFtdLCBGKSBpbnN0YW5jZW9mIEYpO1xufSksICdSZWZsZWN0Jywge1xuICBjb25zdHJ1Y3Q6IGZ1bmN0aW9uIGNvbnN0cnVjdChUYXJnZXQsIGFyZ3MgLyosIG5ld1RhcmdldCovKXtcbiAgICBhRnVuY3Rpb24oVGFyZ2V0KTtcbiAgICB2YXIgbmV3VGFyZ2V0ID0gYXJndW1lbnRzLmxlbmd0aCA8IDMgPyBUYXJnZXQgOiBhRnVuY3Rpb24oYXJndW1lbnRzWzJdKTtcbiAgICBpZihUYXJnZXQgPT0gbmV3VGFyZ2V0KXtcbiAgICAgIC8vIHcvbyBhbHRlcmVkIG5ld1RhcmdldCwgb3B0aW1pemF0aW9uIGZvciAwLTQgYXJndW1lbnRzXG4gICAgICBpZihhcmdzICE9IHVuZGVmaW5lZClzd2l0Y2goYW5PYmplY3QoYXJncykubGVuZ3RoKXtcbiAgICAgICAgY2FzZSAwOiByZXR1cm4gbmV3IFRhcmdldDtcbiAgICAgICAgY2FzZSAxOiByZXR1cm4gbmV3IFRhcmdldChhcmdzWzBdKTtcbiAgICAgICAgY2FzZSAyOiByZXR1cm4gbmV3IFRhcmdldChhcmdzWzBdLCBhcmdzWzFdKTtcbiAgICAgICAgY2FzZSAzOiByZXR1cm4gbmV3IFRhcmdldChhcmdzWzBdLCBhcmdzWzFdLCBhcmdzWzJdKTtcbiAgICAgICAgY2FzZSA0OiByZXR1cm4gbmV3IFRhcmdldChhcmdzWzBdLCBhcmdzWzFdLCBhcmdzWzJdLCBhcmdzWzNdKTtcbiAgICAgIH1cbiAgICAgIC8vIHcvbyBhbHRlcmVkIG5ld1RhcmdldCwgbG90IG9mIGFyZ3VtZW50cyBjYXNlXG4gICAgICB2YXIgJGFyZ3MgPSBbbnVsbF07XG4gICAgICAkYXJncy5wdXNoLmFwcGx5KCRhcmdzLCBhcmdzKTtcbiAgICAgIHJldHVybiBuZXcgKGJpbmQuYXBwbHkoVGFyZ2V0LCAkYXJncykpO1xuICAgIH1cbiAgICAvLyB3aXRoIGFsdGVyZWQgbmV3VGFyZ2V0LCBub3Qgc3VwcG9ydCBidWlsdC1pbiBjb25zdHJ1Y3RvcnNcbiAgICB2YXIgcHJvdG8gICAgPSBuZXdUYXJnZXQucHJvdG90eXBlXG4gICAgICAsIGluc3RhbmNlID0gY3JlYXRlKGlzT2JqZWN0KHByb3RvKSA/IHByb3RvIDogT2JqZWN0LnByb3RvdHlwZSlcbiAgICAgICwgcmVzdWx0ICAgPSBGdW5jdGlvbi5hcHBseS5jYWxsKFRhcmdldCwgaW5zdGFuY2UsIGFyZ3MpO1xuICAgIHJldHVybiBpc09iamVjdChyZXN1bHQpID8gcmVzdWx0IDogaW5zdGFuY2U7XG4gIH1cbn0pOyIsIi8vIDI2LjEuMyBSZWZsZWN0LmRlZmluZVByb3BlcnR5KHRhcmdldCwgcHJvcGVydHlLZXksIGF0dHJpYnV0ZXMpXG52YXIgZFAgICAgICAgICAgPSByZXF1aXJlKCcuL19vYmplY3QtZHAnKVxuICAsICRleHBvcnQgICAgID0gcmVxdWlyZSgnLi9fZXhwb3J0JylcbiAgLCBhbk9iamVjdCAgICA9IHJlcXVpcmUoJy4vX2FuLW9iamVjdCcpXG4gICwgdG9QcmltaXRpdmUgPSByZXF1aXJlKCcuL190by1wcmltaXRpdmUnKTtcblxuLy8gTVMgRWRnZSBoYXMgYnJva2VuIFJlZmxlY3QuZGVmaW5lUHJvcGVydHkgLSB0aHJvd2luZyBpbnN0ZWFkIG9mIHJldHVybmluZyBmYWxzZVxuJGV4cG9ydCgkZXhwb3J0LlMgKyAkZXhwb3J0LkYgKiByZXF1aXJlKCcuL19mYWlscycpKGZ1bmN0aW9uKCl7XG4gIFJlZmxlY3QuZGVmaW5lUHJvcGVydHkoZFAuZih7fSwgMSwge3ZhbHVlOiAxfSksIDEsIHt2YWx1ZTogMn0pO1xufSksICdSZWZsZWN0Jywge1xuICBkZWZpbmVQcm9wZXJ0eTogZnVuY3Rpb24gZGVmaW5lUHJvcGVydHkodGFyZ2V0LCBwcm9wZXJ0eUtleSwgYXR0cmlidXRlcyl7XG4gICAgYW5PYmplY3QodGFyZ2V0KTtcbiAgICBwcm9wZXJ0eUtleSA9IHRvUHJpbWl0aXZlKHByb3BlcnR5S2V5LCB0cnVlKTtcbiAgICBhbk9iamVjdChhdHRyaWJ1dGVzKTtcbiAgICB0cnkge1xuICAgICAgZFAuZih0YXJnZXQsIHByb3BlcnR5S2V5LCBhdHRyaWJ1dGVzKTtcbiAgICAgIHJldHVybiB0cnVlO1xuICAgIH0gY2F0Y2goZSl7XG4gICAgICByZXR1cm4gZmFsc2U7XG4gICAgfVxuICB9XG59KTsiLCIvLyAyNi4xLjQgUmVmbGVjdC5kZWxldGVQcm9wZXJ0eSh0YXJnZXQsIHByb3BlcnR5S2V5KVxudmFyICRleHBvcnQgID0gcmVxdWlyZSgnLi9fZXhwb3J0JylcbiAgLCBnT1BEICAgICA9IHJlcXVpcmUoJy4vX29iamVjdC1nb3BkJykuZlxuICAsIGFuT2JqZWN0ID0gcmVxdWlyZSgnLi9fYW4tb2JqZWN0Jyk7XG5cbiRleHBvcnQoJGV4cG9ydC5TLCAnUmVmbGVjdCcsIHtcbiAgZGVsZXRlUHJvcGVydHk6IGZ1bmN0aW9uIGRlbGV0ZVByb3BlcnR5KHRhcmdldCwgcHJvcGVydHlLZXkpe1xuICAgIHZhciBkZXNjID0gZ09QRChhbk9iamVjdCh0YXJnZXQpLCBwcm9wZXJ0eUtleSk7XG4gICAgcmV0dXJuIGRlc2MgJiYgIWRlc2MuY29uZmlndXJhYmxlID8gZmFsc2UgOiBkZWxldGUgdGFyZ2V0W3Byb3BlcnR5S2V5XTtcbiAgfVxufSk7IiwiJ3VzZSBzdHJpY3QnO1xuLy8gMjYuMS41IFJlZmxlY3QuZW51bWVyYXRlKHRhcmdldClcbnZhciAkZXhwb3J0ICA9IHJlcXVpcmUoJy4vX2V4cG9ydCcpXG4gICwgYW5PYmplY3QgPSByZXF1aXJlKCcuL19hbi1vYmplY3QnKTtcbnZhciBFbnVtZXJhdGUgPSBmdW5jdGlvbihpdGVyYXRlZCl7XG4gIHRoaXMuX3QgPSBhbk9iamVjdChpdGVyYXRlZCk7IC8vIHRhcmdldFxuICB0aGlzLl9pID0gMDsgICAgICAgICAgICAgICAgICAvLyBuZXh0IGluZGV4XG4gIHZhciBrZXlzID0gdGhpcy5fayA9IFtdICAgICAgIC8vIGtleXNcbiAgICAsIGtleTtcbiAgZm9yKGtleSBpbiBpdGVyYXRlZClrZXlzLnB1c2goa2V5KTtcbn07XG5yZXF1aXJlKCcuL19pdGVyLWNyZWF0ZScpKEVudW1lcmF0ZSwgJ09iamVjdCcsIGZ1bmN0aW9uKCl7XG4gIHZhciB0aGF0ID0gdGhpc1xuICAgICwga2V5cyA9IHRoYXQuX2tcbiAgICAsIGtleTtcbiAgZG8ge1xuICAgIGlmKHRoYXQuX2kgPj0ga2V5cy5sZW5ndGgpcmV0dXJuIHt2YWx1ZTogdW5kZWZpbmVkLCBkb25lOiB0cnVlfTtcbiAgfSB3aGlsZSghKChrZXkgPSBrZXlzW3RoYXQuX2krK10pIGluIHRoYXQuX3QpKTtcbiAgcmV0dXJuIHt2YWx1ZToga2V5LCBkb25lOiBmYWxzZX07XG59KTtcblxuJGV4cG9ydCgkZXhwb3J0LlMsICdSZWZsZWN0Jywge1xuICBlbnVtZXJhdGU6IGZ1bmN0aW9uIGVudW1lcmF0ZSh0YXJnZXQpe1xuICAgIHJldHVybiBuZXcgRW51bWVyYXRlKHRhcmdldCk7XG4gIH1cbn0pOyIsIi8vIDI2LjEuNyBSZWZsZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcih0YXJnZXQsIHByb3BlcnR5S2V5KVxudmFyIGdPUEQgICAgID0gcmVxdWlyZSgnLi9fb2JqZWN0LWdvcGQnKVxuICAsICRleHBvcnQgID0gcmVxdWlyZSgnLi9fZXhwb3J0JylcbiAgLCBhbk9iamVjdCA9IHJlcXVpcmUoJy4vX2FuLW9iamVjdCcpO1xuXG4kZXhwb3J0KCRleHBvcnQuUywgJ1JlZmxlY3QnLCB7XG4gIGdldE93blByb3BlcnR5RGVzY3JpcHRvcjogZnVuY3Rpb24gZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yKHRhcmdldCwgcHJvcGVydHlLZXkpe1xuICAgIHJldHVybiBnT1BELmYoYW5PYmplY3QodGFyZ2V0KSwgcHJvcGVydHlLZXkpO1xuICB9XG59KTsiLCIvLyAyNi4xLjggUmVmbGVjdC5nZXRQcm90b3R5cGVPZih0YXJnZXQpXG52YXIgJGV4cG9ydCAgPSByZXF1aXJlKCcuL19leHBvcnQnKVxuICAsIGdldFByb3RvID0gcmVxdWlyZSgnLi9fb2JqZWN0LWdwbycpXG4gICwgYW5PYmplY3QgPSByZXF1aXJlKCcuL19hbi1vYmplY3QnKTtcblxuJGV4cG9ydCgkZXhwb3J0LlMsICdSZWZsZWN0Jywge1xuICBnZXRQcm90b3R5cGVPZjogZnVuY3Rpb24gZ2V0UHJvdG90eXBlT2YodGFyZ2V0KXtcbiAgICByZXR1cm4gZ2V0UHJvdG8oYW5PYmplY3QodGFyZ2V0KSk7XG4gIH1cbn0pOyIsIi8vIDI2LjEuNiBSZWZsZWN0LmdldCh0YXJnZXQsIHByb3BlcnR5S2V5IFssIHJlY2VpdmVyXSlcbnZhciBnT1BEICAgICAgICAgICA9IHJlcXVpcmUoJy4vX29iamVjdC1nb3BkJylcbiAgLCBnZXRQcm90b3R5cGVPZiA9IHJlcXVpcmUoJy4vX29iamVjdC1ncG8nKVxuICAsIGhhcyAgICAgICAgICAgID0gcmVxdWlyZSgnLi9faGFzJylcbiAgLCAkZXhwb3J0ICAgICAgICA9IHJlcXVpcmUoJy4vX2V4cG9ydCcpXG4gICwgaXNPYmplY3QgICAgICAgPSByZXF1aXJlKCcuL19pcy1vYmplY3QnKVxuICAsIGFuT2JqZWN0ICAgICAgID0gcmVxdWlyZSgnLi9fYW4tb2JqZWN0Jyk7XG5cbmZ1bmN0aW9uIGdldCh0YXJnZXQsIHByb3BlcnR5S2V5LyosIHJlY2VpdmVyKi8pe1xuICB2YXIgcmVjZWl2ZXIgPSBhcmd1bWVudHMubGVuZ3RoIDwgMyA/IHRhcmdldCA6IGFyZ3VtZW50c1syXVxuICAgICwgZGVzYywgcHJvdG87XG4gIGlmKGFuT2JqZWN0KHRhcmdldCkgPT09IHJlY2VpdmVyKXJldHVybiB0YXJnZXRbcHJvcGVydHlLZXldO1xuICBpZihkZXNjID0gZ09QRC5mKHRhcmdldCwgcHJvcGVydHlLZXkpKXJldHVybiBoYXMoZGVzYywgJ3ZhbHVlJylcbiAgICA/IGRlc2MudmFsdWVcbiAgICA6IGRlc2MuZ2V0ICE9PSB1bmRlZmluZWRcbiAgICAgID8gZGVzYy5nZXQuY2FsbChyZWNlaXZlcilcbiAgICAgIDogdW5kZWZpbmVkO1xuICBpZihpc09iamVjdChwcm90byA9IGdldFByb3RvdHlwZU9mKHRhcmdldCkpKXJldHVybiBnZXQocHJvdG8sIHByb3BlcnR5S2V5LCByZWNlaXZlcik7XG59XG5cbiRleHBvcnQoJGV4cG9ydC5TLCAnUmVmbGVjdCcsIHtnZXQ6IGdldH0pOyIsIi8vIDI2LjEuOSBSZWZsZWN0Lmhhcyh0YXJnZXQsIHByb3BlcnR5S2V5KVxudmFyICRleHBvcnQgPSByZXF1aXJlKCcuL19leHBvcnQnKTtcblxuJGV4cG9ydCgkZXhwb3J0LlMsICdSZWZsZWN0Jywge1xuICBoYXM6IGZ1bmN0aW9uIGhhcyh0YXJnZXQsIHByb3BlcnR5S2V5KXtcbiAgICByZXR1cm4gcHJvcGVydHlLZXkgaW4gdGFyZ2V0O1xuICB9XG59KTsiLCIvLyAyNi4xLjEwIFJlZmxlY3QuaXNFeHRlbnNpYmxlKHRhcmdldClcbnZhciAkZXhwb3J0ICAgICAgID0gcmVxdWlyZSgnLi9fZXhwb3J0JylcbiAgLCBhbk9iamVjdCAgICAgID0gcmVxdWlyZSgnLi9fYW4tb2JqZWN0JylcbiAgLCAkaXNFeHRlbnNpYmxlID0gT2JqZWN0LmlzRXh0ZW5zaWJsZTtcblxuJGV4cG9ydCgkZXhwb3J0LlMsICdSZWZsZWN0Jywge1xuICBpc0V4dGVuc2libGU6IGZ1bmN0aW9uIGlzRXh0ZW5zaWJsZSh0YXJnZXQpe1xuICAgIGFuT2JqZWN0KHRhcmdldCk7XG4gICAgcmV0dXJuICRpc0V4dGVuc2libGUgPyAkaXNFeHRlbnNpYmxlKHRhcmdldCkgOiB0cnVlO1xuICB9XG59KTsiLCIvLyAyNi4xLjExIFJlZmxlY3Qub3duS2V5cyh0YXJnZXQpXG52YXIgJGV4cG9ydCA9IHJlcXVpcmUoJy4vX2V4cG9ydCcpO1xuXG4kZXhwb3J0KCRleHBvcnQuUywgJ1JlZmxlY3QnLCB7b3duS2V5czogcmVxdWlyZSgnLi9fb3duLWtleXMnKX0pOyIsIi8vIDI2LjEuMTIgUmVmbGVjdC5wcmV2ZW50RXh0ZW5zaW9ucyh0YXJnZXQpXG52YXIgJGV4cG9ydCAgICAgICAgICAgID0gcmVxdWlyZSgnLi9fZXhwb3J0JylcbiAgLCBhbk9iamVjdCAgICAgICAgICAgPSByZXF1aXJlKCcuL19hbi1vYmplY3QnKVxuICAsICRwcmV2ZW50RXh0ZW5zaW9ucyA9IE9iamVjdC5wcmV2ZW50RXh0ZW5zaW9ucztcblxuJGV4cG9ydCgkZXhwb3J0LlMsICdSZWZsZWN0Jywge1xuICBwcmV2ZW50RXh0ZW5zaW9uczogZnVuY3Rpb24gcHJldmVudEV4dGVuc2lvbnModGFyZ2V0KXtcbiAgICBhbk9iamVjdCh0YXJnZXQpO1xuICAgIHRyeSB7XG4gICAgICBpZigkcHJldmVudEV4dGVuc2lvbnMpJHByZXZlbnRFeHRlbnNpb25zKHRhcmdldCk7XG4gICAgICByZXR1cm4gdHJ1ZTtcbiAgICB9IGNhdGNoKGUpe1xuICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH1cbiAgfVxufSk7IiwiLy8gMjYuMS4xNCBSZWZsZWN0LnNldFByb3RvdHlwZU9mKHRhcmdldCwgcHJvdG8pXG52YXIgJGV4cG9ydCAgPSByZXF1aXJlKCcuL19leHBvcnQnKVxuICAsIHNldFByb3RvID0gcmVxdWlyZSgnLi9fc2V0LXByb3RvJyk7XG5cbmlmKHNldFByb3RvKSRleHBvcnQoJGV4cG9ydC5TLCAnUmVmbGVjdCcsIHtcbiAgc2V0UHJvdG90eXBlT2Y6IGZ1bmN0aW9uIHNldFByb3RvdHlwZU9mKHRhcmdldCwgcHJvdG8pe1xuICAgIHNldFByb3RvLmNoZWNrKHRhcmdldCwgcHJvdG8pO1xuICAgIHRyeSB7XG4gICAgICBzZXRQcm90by5zZXQodGFyZ2V0LCBwcm90byk7XG4gICAgICByZXR1cm4gdHJ1ZTtcbiAgICB9IGNhdGNoKGUpe1xuICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH1cbiAgfVxufSk7IiwiLy8gMjYuMS4xMyBSZWZsZWN0LnNldCh0YXJnZXQsIHByb3BlcnR5S2V5LCBWIFssIHJlY2VpdmVyXSlcbnZhciBkUCAgICAgICAgICAgICA9IHJlcXVpcmUoJy4vX29iamVjdC1kcCcpXG4gICwgZ09QRCAgICAgICAgICAgPSByZXF1aXJlKCcuL19vYmplY3QtZ29wZCcpXG4gICwgZ2V0UHJvdG90eXBlT2YgPSByZXF1aXJlKCcuL19vYmplY3QtZ3BvJylcbiAgLCBoYXMgICAgICAgICAgICA9IHJlcXVpcmUoJy4vX2hhcycpXG4gICwgJGV4cG9ydCAgICAgICAgPSByZXF1aXJlKCcuL19leHBvcnQnKVxuICAsIGNyZWF0ZURlc2MgICAgID0gcmVxdWlyZSgnLi9fcHJvcGVydHktZGVzYycpXG4gICwgYW5PYmplY3QgICAgICAgPSByZXF1aXJlKCcuL19hbi1vYmplY3QnKVxuICAsIGlzT2JqZWN0ICAgICAgID0gcmVxdWlyZSgnLi9faXMtb2JqZWN0Jyk7XG5cbmZ1bmN0aW9uIHNldCh0YXJnZXQsIHByb3BlcnR5S2V5LCBWLyosIHJlY2VpdmVyKi8pe1xuICB2YXIgcmVjZWl2ZXIgPSBhcmd1bWVudHMubGVuZ3RoIDwgNCA/IHRhcmdldCA6IGFyZ3VtZW50c1szXVxuICAgICwgb3duRGVzYyAgPSBnT1BELmYoYW5PYmplY3QodGFyZ2V0KSwgcHJvcGVydHlLZXkpXG4gICAgLCBleGlzdGluZ0Rlc2NyaXB0b3IsIHByb3RvO1xuICBpZighb3duRGVzYyl7XG4gICAgaWYoaXNPYmplY3QocHJvdG8gPSBnZXRQcm90b3R5cGVPZih0YXJnZXQpKSl7XG4gICAgICByZXR1cm4gc2V0KHByb3RvLCBwcm9wZXJ0eUtleSwgViwgcmVjZWl2ZXIpO1xuICAgIH1cbiAgICBvd25EZXNjID0gY3JlYXRlRGVzYygwKTtcbiAgfVxuICBpZihoYXMob3duRGVzYywgJ3ZhbHVlJykpe1xuICAgIGlmKG93bkRlc2Mud3JpdGFibGUgPT09IGZhbHNlIHx8ICFpc09iamVjdChyZWNlaXZlcikpcmV0dXJuIGZhbHNlO1xuICAgIGV4aXN0aW5nRGVzY3JpcHRvciA9IGdPUEQuZihyZWNlaXZlciwgcHJvcGVydHlLZXkpIHx8IGNyZWF0ZURlc2MoMCk7XG4gICAgZXhpc3RpbmdEZXNjcmlwdG9yLnZhbHVlID0gVjtcbiAgICBkUC5mKHJlY2VpdmVyLCBwcm9wZXJ0eUtleSwgZXhpc3RpbmdEZXNjcmlwdG9yKTtcbiAgICByZXR1cm4gdHJ1ZTtcbiAgfVxuICByZXR1cm4gb3duRGVzYy5zZXQgPT09IHVuZGVmaW5lZCA/IGZhbHNlIDogKG93bkRlc2Muc2V0LmNhbGwocmVjZWl2ZXIsIFYpLCB0cnVlKTtcbn1cblxuJGV4cG9ydCgkZXhwb3J0LlMsICdSZWZsZWN0Jywge3NldDogc2V0fSk7IiwidmFyIGdsb2JhbCAgICAgICAgICAgID0gcmVxdWlyZSgnLi9fZ2xvYmFsJylcbiAgLCBpbmhlcml0SWZSZXF1aXJlZCA9IHJlcXVpcmUoJy4vX2luaGVyaXQtaWYtcmVxdWlyZWQnKVxuICAsIGRQICAgICAgICAgICAgICAgID0gcmVxdWlyZSgnLi9fb2JqZWN0LWRwJykuZlxuICAsIGdPUE4gICAgICAgICAgICAgID0gcmVxdWlyZSgnLi9fb2JqZWN0LWdvcG4nKS5mXG4gICwgaXNSZWdFeHAgICAgICAgICAgPSByZXF1aXJlKCcuL19pcy1yZWdleHAnKVxuICAsICRmbGFncyAgICAgICAgICAgID0gcmVxdWlyZSgnLi9fZmxhZ3MnKVxuICAsICRSZWdFeHAgICAgICAgICAgID0gZ2xvYmFsLlJlZ0V4cFxuICAsIEJhc2UgICAgICAgICAgICAgID0gJFJlZ0V4cFxuICAsIHByb3RvICAgICAgICAgICAgID0gJFJlZ0V4cC5wcm90b3R5cGVcbiAgLCByZTEgICAgICAgICAgICAgICA9IC9hL2dcbiAgLCByZTIgICAgICAgICAgICAgICA9IC9hL2dcbiAgLy8gXCJuZXdcIiBjcmVhdGVzIGEgbmV3IG9iamVjdCwgb2xkIHdlYmtpdCBidWdneSBoZXJlXG4gICwgQ09SUkVDVF9ORVcgICAgICAgPSBuZXcgJFJlZ0V4cChyZTEpICE9PSByZTE7XG5cbmlmKHJlcXVpcmUoJy4vX2Rlc2NyaXB0b3JzJykgJiYgKCFDT1JSRUNUX05FVyB8fCByZXF1aXJlKCcuL19mYWlscycpKGZ1bmN0aW9uKCl7XG4gIHJlMltyZXF1aXJlKCcuL193a3MnKSgnbWF0Y2gnKV0gPSBmYWxzZTtcbiAgLy8gUmVnRXhwIGNvbnN0cnVjdG9yIGNhbiBhbHRlciBmbGFncyBhbmQgSXNSZWdFeHAgd29ya3MgY29ycmVjdCB3aXRoIEBAbWF0Y2hcbiAgcmV0dXJuICRSZWdFeHAocmUxKSAhPSByZTEgfHwgJFJlZ0V4cChyZTIpID09IHJlMiB8fCAkUmVnRXhwKHJlMSwgJ2knKSAhPSAnL2EvaSc7XG59KSkpe1xuICAkUmVnRXhwID0gZnVuY3Rpb24gUmVnRXhwKHAsIGYpe1xuICAgIHZhciB0aVJFID0gdGhpcyBpbnN0YW5jZW9mICRSZWdFeHBcbiAgICAgICwgcGlSRSA9IGlzUmVnRXhwKHApXG4gICAgICAsIGZpVSAgPSBmID09PSB1bmRlZmluZWQ7XG4gICAgcmV0dXJuICF0aVJFICYmIHBpUkUgJiYgcC5jb25zdHJ1Y3RvciA9PT0gJFJlZ0V4cCAmJiBmaVUgPyBwXG4gICAgICA6IGluaGVyaXRJZlJlcXVpcmVkKENPUlJFQ1RfTkVXXG4gICAgICAgID8gbmV3IEJhc2UocGlSRSAmJiAhZmlVID8gcC5zb3VyY2UgOiBwLCBmKVxuICAgICAgICA6IEJhc2UoKHBpUkUgPSBwIGluc3RhbmNlb2YgJFJlZ0V4cCkgPyBwLnNvdXJjZSA6IHAsIHBpUkUgJiYgZmlVID8gJGZsYWdzLmNhbGwocCkgOiBmKVxuICAgICAgLCB0aVJFID8gdGhpcyA6IHByb3RvLCAkUmVnRXhwKTtcbiAgfTtcbiAgdmFyIHByb3h5ID0gZnVuY3Rpb24oa2V5KXtcbiAgICBrZXkgaW4gJFJlZ0V4cCB8fCBkUCgkUmVnRXhwLCBrZXksIHtcbiAgICAgIGNvbmZpZ3VyYWJsZTogdHJ1ZSxcbiAgICAgIGdldDogZnVuY3Rpb24oKXsgcmV0dXJuIEJhc2Vba2V5XTsgfSxcbiAgICAgIHNldDogZnVuY3Rpb24oaXQpeyBCYXNlW2tleV0gPSBpdDsgfVxuICAgIH0pO1xuICB9O1xuICBmb3IodmFyIGtleXMgPSBnT1BOKEJhc2UpLCBpID0gMDsga2V5cy5sZW5ndGggPiBpOyApcHJveHkoa2V5c1tpKytdKTtcbiAgcHJvdG8uY29uc3RydWN0b3IgPSAkUmVnRXhwO1xuICAkUmVnRXhwLnByb3RvdHlwZSA9IHByb3RvO1xuICByZXF1aXJlKCcuL19yZWRlZmluZScpKGdsb2JhbCwgJ1JlZ0V4cCcsICRSZWdFeHApO1xufVxuXG5yZXF1aXJlKCcuL19zZXQtc3BlY2llcycpKCdSZWdFeHAnKTsiLCIvLyAyMS4yLjUuMyBnZXQgUmVnRXhwLnByb3RvdHlwZS5mbGFncygpXG5pZihyZXF1aXJlKCcuL19kZXNjcmlwdG9ycycpICYmIC8uL2cuZmxhZ3MgIT0gJ2cnKXJlcXVpcmUoJy4vX29iamVjdC1kcCcpLmYoUmVnRXhwLnByb3RvdHlwZSwgJ2ZsYWdzJywge1xuICBjb25maWd1cmFibGU6IHRydWUsXG4gIGdldDogcmVxdWlyZSgnLi9fZmxhZ3MnKVxufSk7IiwiLy8gQEBtYXRjaCBsb2dpY1xucmVxdWlyZSgnLi9fZml4LXJlLXdrcycpKCdtYXRjaCcsIDEsIGZ1bmN0aW9uKGRlZmluZWQsIE1BVENILCAkbWF0Y2gpe1xuICAvLyAyMS4xLjMuMTEgU3RyaW5nLnByb3RvdHlwZS5tYXRjaChyZWdleHApXG4gIHJldHVybiBbZnVuY3Rpb24gbWF0Y2gocmVnZXhwKXtcbiAgICAndXNlIHN0cmljdCc7XG4gICAgdmFyIE8gID0gZGVmaW5lZCh0aGlzKVxuICAgICAgLCBmbiA9IHJlZ2V4cCA9PSB1bmRlZmluZWQgPyB1bmRlZmluZWQgOiByZWdleHBbTUFUQ0hdO1xuICAgIHJldHVybiBmbiAhPT0gdW5kZWZpbmVkID8gZm4uY2FsbChyZWdleHAsIE8pIDogbmV3IFJlZ0V4cChyZWdleHApW01BVENIXShTdHJpbmcoTykpO1xuICB9LCAkbWF0Y2hdO1xufSk7IiwiLy8gQEByZXBsYWNlIGxvZ2ljXG5yZXF1aXJlKCcuL19maXgtcmUtd2tzJykoJ3JlcGxhY2UnLCAyLCBmdW5jdGlvbihkZWZpbmVkLCBSRVBMQUNFLCAkcmVwbGFjZSl7XG4gIC8vIDIxLjEuMy4xNCBTdHJpbmcucHJvdG90eXBlLnJlcGxhY2Uoc2VhcmNoVmFsdWUsIHJlcGxhY2VWYWx1ZSlcbiAgcmV0dXJuIFtmdW5jdGlvbiByZXBsYWNlKHNlYXJjaFZhbHVlLCByZXBsYWNlVmFsdWUpe1xuICAgICd1c2Ugc3RyaWN0JztcbiAgICB2YXIgTyAgPSBkZWZpbmVkKHRoaXMpXG4gICAgICAsIGZuID0gc2VhcmNoVmFsdWUgPT0gdW5kZWZpbmVkID8gdW5kZWZpbmVkIDogc2VhcmNoVmFsdWVbUkVQTEFDRV07XG4gICAgcmV0dXJuIGZuICE9PSB1bmRlZmluZWRcbiAgICAgID8gZm4uY2FsbChzZWFyY2hWYWx1ZSwgTywgcmVwbGFjZVZhbHVlKVxuICAgICAgOiAkcmVwbGFjZS5jYWxsKFN0cmluZyhPKSwgc2VhcmNoVmFsdWUsIHJlcGxhY2VWYWx1ZSk7XG4gIH0sICRyZXBsYWNlXTtcbn0pOyIsIi8vIEBAc2VhcmNoIGxvZ2ljXG5yZXF1aXJlKCcuL19maXgtcmUtd2tzJykoJ3NlYXJjaCcsIDEsIGZ1bmN0aW9uKGRlZmluZWQsIFNFQVJDSCwgJHNlYXJjaCl7XG4gIC8vIDIxLjEuMy4xNSBTdHJpbmcucHJvdG90eXBlLnNlYXJjaChyZWdleHApXG4gIHJldHVybiBbZnVuY3Rpb24gc2VhcmNoKHJlZ2V4cCl7XG4gICAgJ3VzZSBzdHJpY3QnO1xuICAgIHZhciBPICA9IGRlZmluZWQodGhpcylcbiAgICAgICwgZm4gPSByZWdleHAgPT0gdW5kZWZpbmVkID8gdW5kZWZpbmVkIDogcmVnZXhwW1NFQVJDSF07XG4gICAgcmV0dXJuIGZuICE9PSB1bmRlZmluZWQgPyBmbi5jYWxsKHJlZ2V4cCwgTykgOiBuZXcgUmVnRXhwKHJlZ2V4cClbU0VBUkNIXShTdHJpbmcoTykpO1xuICB9LCAkc2VhcmNoXTtcbn0pOyIsIi8vIEBAc3BsaXQgbG9naWNcbnJlcXVpcmUoJy4vX2ZpeC1yZS13a3MnKSgnc3BsaXQnLCAyLCBmdW5jdGlvbihkZWZpbmVkLCBTUExJVCwgJHNwbGl0KXtcbiAgJ3VzZSBzdHJpY3QnO1xuICB2YXIgaXNSZWdFeHAgICA9IHJlcXVpcmUoJy4vX2lzLXJlZ2V4cCcpXG4gICAgLCBfc3BsaXQgICAgID0gJHNwbGl0XG4gICAgLCAkcHVzaCAgICAgID0gW10ucHVzaFxuICAgICwgJFNQTElUICAgICA9ICdzcGxpdCdcbiAgICAsIExFTkdUSCAgICAgPSAnbGVuZ3RoJ1xuICAgICwgTEFTVF9JTkRFWCA9ICdsYXN0SW5kZXgnO1xuICBpZihcbiAgICAnYWJiYydbJFNQTElUXSgvKGIpKi8pWzFdID09ICdjJyB8fFxuICAgICd0ZXN0J1skU1BMSVRdKC8oPzopLywgLTEpW0xFTkdUSF0gIT0gNCB8fFxuICAgICdhYidbJFNQTElUXSgvKD86YWIpKi8pW0xFTkdUSF0gIT0gMiB8fFxuICAgICcuJ1skU1BMSVRdKC8oLj8pKC4/KS8pW0xFTkdUSF0gIT0gNCB8fFxuICAgICcuJ1skU1BMSVRdKC8oKSgpLylbTEVOR1RIXSA+IDEgfHxcbiAgICAnJ1skU1BMSVRdKC8uPy8pW0xFTkdUSF1cbiAgKXtcbiAgICB2YXIgTlBDRyA9IC8oKT8/Ly5leGVjKCcnKVsxXSA9PT0gdW5kZWZpbmVkOyAvLyBub25wYXJ0aWNpcGF0aW5nIGNhcHR1cmluZyBncm91cFxuICAgIC8vIGJhc2VkIG9uIGVzNS1zaGltIGltcGxlbWVudGF0aW9uLCBuZWVkIHRvIHJld29yayBpdFxuICAgICRzcGxpdCA9IGZ1bmN0aW9uKHNlcGFyYXRvciwgbGltaXQpe1xuICAgICAgdmFyIHN0cmluZyA9IFN0cmluZyh0aGlzKTtcbiAgICAgIGlmKHNlcGFyYXRvciA9PT0gdW5kZWZpbmVkICYmIGxpbWl0ID09PSAwKXJldHVybiBbXTtcbiAgICAgIC8vIElmIGBzZXBhcmF0b3JgIGlzIG5vdCBhIHJlZ2V4LCB1c2UgbmF0aXZlIHNwbGl0XG4gICAgICBpZighaXNSZWdFeHAoc2VwYXJhdG9yKSlyZXR1cm4gX3NwbGl0LmNhbGwoc3RyaW5nLCBzZXBhcmF0b3IsIGxpbWl0KTtcbiAgICAgIHZhciBvdXRwdXQgPSBbXTtcbiAgICAgIHZhciBmbGFncyA9IChzZXBhcmF0b3IuaWdub3JlQ2FzZSA/ICdpJyA6ICcnKSArXG4gICAgICAgICAgICAgICAgICAoc2VwYXJhdG9yLm11bHRpbGluZSA/ICdtJyA6ICcnKSArXG4gICAgICAgICAgICAgICAgICAoc2VwYXJhdG9yLnVuaWNvZGUgPyAndScgOiAnJykgK1xuICAgICAgICAgICAgICAgICAgKHNlcGFyYXRvci5zdGlja3kgPyAneScgOiAnJyk7XG4gICAgICB2YXIgbGFzdExhc3RJbmRleCA9IDA7XG4gICAgICB2YXIgc3BsaXRMaW1pdCA9IGxpbWl0ID09PSB1bmRlZmluZWQgPyA0Mjk0OTY3Mjk1IDogbGltaXQgPj4+IDA7XG4gICAgICAvLyBNYWtlIGBnbG9iYWxgIGFuZCBhdm9pZCBgbGFzdEluZGV4YCBpc3N1ZXMgYnkgd29ya2luZyB3aXRoIGEgY29weVxuICAgICAgdmFyIHNlcGFyYXRvckNvcHkgPSBuZXcgUmVnRXhwKHNlcGFyYXRvci5zb3VyY2UsIGZsYWdzICsgJ2cnKTtcbiAgICAgIHZhciBzZXBhcmF0b3IyLCBtYXRjaCwgbGFzdEluZGV4LCBsYXN0TGVuZ3RoLCBpO1xuICAgICAgLy8gRG9lc24ndCBuZWVkIGZsYWdzIGd5LCBidXQgdGhleSBkb24ndCBodXJ0XG4gICAgICBpZighTlBDRylzZXBhcmF0b3IyID0gbmV3IFJlZ0V4cCgnXicgKyBzZXBhcmF0b3JDb3B5LnNvdXJjZSArICckKD8hXFxcXHMpJywgZmxhZ3MpO1xuICAgICAgd2hpbGUobWF0Y2ggPSBzZXBhcmF0b3JDb3B5LmV4ZWMoc3RyaW5nKSl7XG4gICAgICAgIC8vIGBzZXBhcmF0b3JDb3B5Lmxhc3RJbmRleGAgaXMgbm90IHJlbGlhYmxlIGNyb3NzLWJyb3dzZXJcbiAgICAgICAgbGFzdEluZGV4ID0gbWF0Y2guaW5kZXggKyBtYXRjaFswXVtMRU5HVEhdO1xuICAgICAgICBpZihsYXN0SW5kZXggPiBsYXN0TGFzdEluZGV4KXtcbiAgICAgICAgICBvdXRwdXQucHVzaChzdHJpbmcuc2xpY2UobGFzdExhc3RJbmRleCwgbWF0Y2guaW5kZXgpKTtcbiAgICAgICAgICAvLyBGaXggYnJvd3NlcnMgd2hvc2UgYGV4ZWNgIG1ldGhvZHMgZG9uJ3QgY29uc2lzdGVudGx5IHJldHVybiBgdW5kZWZpbmVkYCBmb3IgTlBDR1xuICAgICAgICAgIGlmKCFOUENHICYmIG1hdGNoW0xFTkdUSF0gPiAxKW1hdGNoWzBdLnJlcGxhY2Uoc2VwYXJhdG9yMiwgZnVuY3Rpb24oKXtcbiAgICAgICAgICAgIGZvcihpID0gMTsgaSA8IGFyZ3VtZW50c1tMRU5HVEhdIC0gMjsgaSsrKWlmKGFyZ3VtZW50c1tpXSA9PT0gdW5kZWZpbmVkKW1hdGNoW2ldID0gdW5kZWZpbmVkO1xuICAgICAgICAgIH0pO1xuICAgICAgICAgIGlmKG1hdGNoW0xFTkdUSF0gPiAxICYmIG1hdGNoLmluZGV4IDwgc3RyaW5nW0xFTkdUSF0pJHB1c2guYXBwbHkob3V0cHV0LCBtYXRjaC5zbGljZSgxKSk7XG4gICAgICAgICAgbGFzdExlbmd0aCA9IG1hdGNoWzBdW0xFTkdUSF07XG4gICAgICAgICAgbGFzdExhc3RJbmRleCA9IGxhc3RJbmRleDtcbiAgICAgICAgICBpZihvdXRwdXRbTEVOR1RIXSA+PSBzcGxpdExpbWl0KWJyZWFrO1xuICAgICAgICB9XG4gICAgICAgIGlmKHNlcGFyYXRvckNvcHlbTEFTVF9JTkRFWF0gPT09IG1hdGNoLmluZGV4KXNlcGFyYXRvckNvcHlbTEFTVF9JTkRFWF0rKzsgLy8gQXZvaWQgYW4gaW5maW5pdGUgbG9vcFxuICAgICAgfVxuICAgICAgaWYobGFzdExhc3RJbmRleCA9PT0gc3RyaW5nW0xFTkdUSF0pe1xuICAgICAgICBpZihsYXN0TGVuZ3RoIHx8ICFzZXBhcmF0b3JDb3B5LnRlc3QoJycpKW91dHB1dC5wdXNoKCcnKTtcbiAgICAgIH0gZWxzZSBvdXRwdXQucHVzaChzdHJpbmcuc2xpY2UobGFzdExhc3RJbmRleCkpO1xuICAgICAgcmV0dXJuIG91dHB1dFtMRU5HVEhdID4gc3BsaXRMaW1pdCA/IG91dHB1dC5zbGljZSgwLCBzcGxpdExpbWl0KSA6IG91dHB1dDtcbiAgICB9O1xuICAvLyBDaGFrcmEsIFY4XG4gIH0gZWxzZSBpZignMCdbJFNQTElUXSh1bmRlZmluZWQsIDApW0xFTkdUSF0pe1xuICAgICRzcGxpdCA9IGZ1bmN0aW9uKHNlcGFyYXRvciwgbGltaXQpe1xuICAgICAgcmV0dXJuIHNlcGFyYXRvciA9PT0gdW5kZWZpbmVkICYmIGxpbWl0ID09PSAwID8gW10gOiBfc3BsaXQuY2FsbCh0aGlzLCBzZXBhcmF0b3IsIGxpbWl0KTtcbiAgICB9O1xuICB9XG4gIC8vIDIxLjEuMy4xNyBTdHJpbmcucHJvdG90eXBlLnNwbGl0KHNlcGFyYXRvciwgbGltaXQpXG4gIHJldHVybiBbZnVuY3Rpb24gc3BsaXQoc2VwYXJhdG9yLCBsaW1pdCl7XG4gICAgdmFyIE8gID0gZGVmaW5lZCh0aGlzKVxuICAgICAgLCBmbiA9IHNlcGFyYXRvciA9PSB1bmRlZmluZWQgPyB1bmRlZmluZWQgOiBzZXBhcmF0b3JbU1BMSVRdO1xuICAgIHJldHVybiBmbiAhPT0gdW5kZWZpbmVkID8gZm4uY2FsbChzZXBhcmF0b3IsIE8sIGxpbWl0KSA6ICRzcGxpdC5jYWxsKFN0cmluZyhPKSwgc2VwYXJhdG9yLCBsaW1pdCk7XG4gIH0sICRzcGxpdF07XG59KTsiLCIndXNlIHN0cmljdCc7XHJcbnJlcXVpcmUoJy4vZXM2LnJlZ2V4cC5mbGFncycpO1xyXG52YXIgYW5PYmplY3QgICAgPSByZXF1aXJlKCcuL19hbi1vYmplY3QnKVxyXG4gICwgJGZsYWdzICAgICAgPSByZXF1aXJlKCcuL19mbGFncycpXHJcbiAgLCBERVNDUklQVE9SUyA9IHJlcXVpcmUoJy4vX2Rlc2NyaXB0b3JzJylcclxuICAsIFRPX1NUUklORyAgID0gJ3RvU3RyaW5nJ1xyXG4gICwgJHRvU3RyaW5nICAgPSAvLi9bVE9fU1RSSU5HXTtcclxuXHJcbnZhciBkZWZpbmUgPSBmdW5jdGlvbihmbil7XHJcbiAgcmVxdWlyZSgnLi9fcmVkZWZpbmUnKShSZWdFeHAucHJvdG90eXBlLCBUT19TVFJJTkcsIGZuLCB0cnVlKTtcclxufTtcclxuXHJcbi8vIDIxLjIuNS4xNCBSZWdFeHAucHJvdG90eXBlLnRvU3RyaW5nKClcclxuaWYocmVxdWlyZSgnLi9fZmFpbHMnKShmdW5jdGlvbigpeyByZXR1cm4gJHRvU3RyaW5nLmNhbGwoe3NvdXJjZTogJ2EnLCBmbGFnczogJ2InfSkgIT0gJy9hL2InOyB9KSl7XHJcbiAgZGVmaW5lKGZ1bmN0aW9uIHRvU3RyaW5nKCl7XHJcbiAgICB2YXIgUiA9IGFuT2JqZWN0KHRoaXMpO1xyXG4gICAgcmV0dXJuICcvJy5jb25jYXQoUi5zb3VyY2UsICcvJyxcclxuICAgICAgJ2ZsYWdzJyBpbiBSID8gUi5mbGFncyA6ICFERVNDUklQVE9SUyAmJiBSIGluc3RhbmNlb2YgUmVnRXhwID8gJGZsYWdzLmNhbGwoUikgOiB1bmRlZmluZWQpO1xyXG4gIH0pO1xyXG4vLyBGRjQ0LSBSZWdFeHAjdG9TdHJpbmcgaGFzIGEgd3JvbmcgbmFtZVxyXG59IGVsc2UgaWYoJHRvU3RyaW5nLm5hbWUgIT0gVE9fU1RSSU5HKXtcclxuICBkZWZpbmUoZnVuY3Rpb24gdG9TdHJpbmcoKXtcclxuICAgIHJldHVybiAkdG9TdHJpbmcuY2FsbCh0aGlzKTtcclxuICB9KTtcclxufSIsIid1c2Ugc3RyaWN0JztcbnZhciBzdHJvbmcgPSByZXF1aXJlKCcuL19jb2xsZWN0aW9uLXN0cm9uZycpO1xuXG4vLyAyMy4yIFNldCBPYmplY3RzXG5tb2R1bGUuZXhwb3J0cyA9IHJlcXVpcmUoJy4vX2NvbGxlY3Rpb24nKSgnU2V0JywgZnVuY3Rpb24oZ2V0KXtcbiAgcmV0dXJuIGZ1bmN0aW9uIFNldCgpeyByZXR1cm4gZ2V0KHRoaXMsIGFyZ3VtZW50cy5sZW5ndGggPiAwID8gYXJndW1lbnRzWzBdIDogdW5kZWZpbmVkKTsgfTtcbn0sIHtcbiAgLy8gMjMuMi4zLjEgU2V0LnByb3RvdHlwZS5hZGQodmFsdWUpXG4gIGFkZDogZnVuY3Rpb24gYWRkKHZhbHVlKXtcbiAgICByZXR1cm4gc3Ryb25nLmRlZih0aGlzLCB2YWx1ZSA9IHZhbHVlID09PSAwID8gMCA6IHZhbHVlLCB2YWx1ZSk7XG4gIH1cbn0sIHN0cm9uZyk7IiwiJ3VzZSBzdHJpY3QnO1xuLy8gQi4yLjMuMiBTdHJpbmcucHJvdG90eXBlLmFuY2hvcihuYW1lKVxucmVxdWlyZSgnLi9fc3RyaW5nLWh0bWwnKSgnYW5jaG9yJywgZnVuY3Rpb24oY3JlYXRlSFRNTCl7XG4gIHJldHVybiBmdW5jdGlvbiBhbmNob3IobmFtZSl7XG4gICAgcmV0dXJuIGNyZWF0ZUhUTUwodGhpcywgJ2EnLCAnbmFtZScsIG5hbWUpO1xuICB9XG59KTsiLCIndXNlIHN0cmljdCc7XG4vLyBCLjIuMy4zIFN0cmluZy5wcm90b3R5cGUuYmlnKClcbnJlcXVpcmUoJy4vX3N0cmluZy1odG1sJykoJ2JpZycsIGZ1bmN0aW9uKGNyZWF0ZUhUTUwpe1xuICByZXR1cm4gZnVuY3Rpb24gYmlnKCl7XG4gICAgcmV0dXJuIGNyZWF0ZUhUTUwodGhpcywgJ2JpZycsICcnLCAnJyk7XG4gIH1cbn0pOyIsIid1c2Ugc3RyaWN0Jztcbi8vIEIuMi4zLjQgU3RyaW5nLnByb3RvdHlwZS5ibGluaygpXG5yZXF1aXJlKCcuL19zdHJpbmctaHRtbCcpKCdibGluaycsIGZ1bmN0aW9uKGNyZWF0ZUhUTUwpe1xuICByZXR1cm4gZnVuY3Rpb24gYmxpbmsoKXtcbiAgICByZXR1cm4gY3JlYXRlSFRNTCh0aGlzLCAnYmxpbmsnLCAnJywgJycpO1xuICB9XG59KTsiLCIndXNlIHN0cmljdCc7XG4vLyBCLjIuMy41IFN0cmluZy5wcm90b3R5cGUuYm9sZCgpXG5yZXF1aXJlKCcuL19zdHJpbmctaHRtbCcpKCdib2xkJywgZnVuY3Rpb24oY3JlYXRlSFRNTCl7XG4gIHJldHVybiBmdW5jdGlvbiBib2xkKCl7XG4gICAgcmV0dXJuIGNyZWF0ZUhUTUwodGhpcywgJ2InLCAnJywgJycpO1xuICB9XG59KTsiLCIndXNlIHN0cmljdCc7XG52YXIgJGV4cG9ydCA9IHJlcXVpcmUoJy4vX2V4cG9ydCcpXG4gICwgJGF0ICAgICA9IHJlcXVpcmUoJy4vX3N0cmluZy1hdCcpKGZhbHNlKTtcbiRleHBvcnQoJGV4cG9ydC5QLCAnU3RyaW5nJywge1xuICAvLyAyMS4xLjMuMyBTdHJpbmcucHJvdG90eXBlLmNvZGVQb2ludEF0KHBvcylcbiAgY29kZVBvaW50QXQ6IGZ1bmN0aW9uIGNvZGVQb2ludEF0KHBvcyl7XG4gICAgcmV0dXJuICRhdCh0aGlzLCBwb3MpO1xuICB9XG59KTsiLCIvLyAyMS4xLjMuNiBTdHJpbmcucHJvdG90eXBlLmVuZHNXaXRoKHNlYXJjaFN0cmluZyBbLCBlbmRQb3NpdGlvbl0pXG4ndXNlIHN0cmljdCc7XG52YXIgJGV4cG9ydCAgID0gcmVxdWlyZSgnLi9fZXhwb3J0JylcbiAgLCB0b0xlbmd0aCAgPSByZXF1aXJlKCcuL190by1sZW5ndGgnKVxuICAsIGNvbnRleHQgICA9IHJlcXVpcmUoJy4vX3N0cmluZy1jb250ZXh0JylcbiAgLCBFTkRTX1dJVEggPSAnZW5kc1dpdGgnXG4gICwgJGVuZHNXaXRoID0gJydbRU5EU19XSVRIXTtcblxuJGV4cG9ydCgkZXhwb3J0LlAgKyAkZXhwb3J0LkYgKiByZXF1aXJlKCcuL19mYWlscy1pcy1yZWdleHAnKShFTkRTX1dJVEgpLCAnU3RyaW5nJywge1xuICBlbmRzV2l0aDogZnVuY3Rpb24gZW5kc1dpdGgoc2VhcmNoU3RyaW5nIC8qLCBlbmRQb3NpdGlvbiA9IEBsZW5ndGggKi8pe1xuICAgIHZhciB0aGF0ID0gY29udGV4dCh0aGlzLCBzZWFyY2hTdHJpbmcsIEVORFNfV0lUSClcbiAgICAgICwgZW5kUG9zaXRpb24gPSBhcmd1bWVudHMubGVuZ3RoID4gMSA/IGFyZ3VtZW50c1sxXSA6IHVuZGVmaW5lZFxuICAgICAgLCBsZW4gICAgPSB0b0xlbmd0aCh0aGF0Lmxlbmd0aClcbiAgICAgICwgZW5kICAgID0gZW5kUG9zaXRpb24gPT09IHVuZGVmaW5lZCA/IGxlbiA6IE1hdGgubWluKHRvTGVuZ3RoKGVuZFBvc2l0aW9uKSwgbGVuKVxuICAgICAgLCBzZWFyY2ggPSBTdHJpbmcoc2VhcmNoU3RyaW5nKTtcbiAgICByZXR1cm4gJGVuZHNXaXRoXG4gICAgICA/ICRlbmRzV2l0aC5jYWxsKHRoYXQsIHNlYXJjaCwgZW5kKVxuICAgICAgOiB0aGF0LnNsaWNlKGVuZCAtIHNlYXJjaC5sZW5ndGgsIGVuZCkgPT09IHNlYXJjaDtcbiAgfVxufSk7IiwiJ3VzZSBzdHJpY3QnO1xuLy8gQi4yLjMuNiBTdHJpbmcucHJvdG90eXBlLmZpeGVkKClcbnJlcXVpcmUoJy4vX3N0cmluZy1odG1sJykoJ2ZpeGVkJywgZnVuY3Rpb24oY3JlYXRlSFRNTCl7XG4gIHJldHVybiBmdW5jdGlvbiBmaXhlZCgpe1xuICAgIHJldHVybiBjcmVhdGVIVE1MKHRoaXMsICd0dCcsICcnLCAnJyk7XG4gIH1cbn0pOyIsIid1c2Ugc3RyaWN0Jztcbi8vIEIuMi4zLjcgU3RyaW5nLnByb3RvdHlwZS5mb250Y29sb3IoY29sb3IpXG5yZXF1aXJlKCcuL19zdHJpbmctaHRtbCcpKCdmb250Y29sb3InLCBmdW5jdGlvbihjcmVhdGVIVE1MKXtcbiAgcmV0dXJuIGZ1bmN0aW9uIGZvbnRjb2xvcihjb2xvcil7XG4gICAgcmV0dXJuIGNyZWF0ZUhUTUwodGhpcywgJ2ZvbnQnLCAnY29sb3InLCBjb2xvcik7XG4gIH1cbn0pOyIsIid1c2Ugc3RyaWN0Jztcbi8vIEIuMi4zLjggU3RyaW5nLnByb3RvdHlwZS5mb250c2l6ZShzaXplKVxucmVxdWlyZSgnLi9fc3RyaW5nLWh0bWwnKSgnZm9udHNpemUnLCBmdW5jdGlvbihjcmVhdGVIVE1MKXtcbiAgcmV0dXJuIGZ1bmN0aW9uIGZvbnRzaXplKHNpemUpe1xuICAgIHJldHVybiBjcmVhdGVIVE1MKHRoaXMsICdmb250JywgJ3NpemUnLCBzaXplKTtcbiAgfVxufSk7IiwidmFyICRleHBvcnQgICAgICAgID0gcmVxdWlyZSgnLi9fZXhwb3J0JylcbiAgLCB0b0luZGV4ICAgICAgICA9IHJlcXVpcmUoJy4vX3RvLWluZGV4JylcbiAgLCBmcm9tQ2hhckNvZGUgICA9IFN0cmluZy5mcm9tQ2hhckNvZGVcbiAgLCAkZnJvbUNvZGVQb2ludCA9IFN0cmluZy5mcm9tQ29kZVBvaW50O1xuXG4vLyBsZW5ndGggc2hvdWxkIGJlIDEsIG9sZCBGRiBwcm9ibGVtXG4kZXhwb3J0KCRleHBvcnQuUyArICRleHBvcnQuRiAqICghISRmcm9tQ29kZVBvaW50ICYmICRmcm9tQ29kZVBvaW50Lmxlbmd0aCAhPSAxKSwgJ1N0cmluZycsIHtcbiAgLy8gMjEuMS4yLjIgU3RyaW5nLmZyb21Db2RlUG9pbnQoLi4uY29kZVBvaW50cylcbiAgZnJvbUNvZGVQb2ludDogZnVuY3Rpb24gZnJvbUNvZGVQb2ludCh4KXsgLy8gZXNsaW50LWRpc2FibGUtbGluZSBuby11bnVzZWQtdmFyc1xuICAgIHZhciByZXMgID0gW11cbiAgICAgICwgYUxlbiA9IGFyZ3VtZW50cy5sZW5ndGhcbiAgICAgICwgaSAgICA9IDBcbiAgICAgICwgY29kZTtcbiAgICB3aGlsZShhTGVuID4gaSl7XG4gICAgICBjb2RlID0gK2FyZ3VtZW50c1tpKytdO1xuICAgICAgaWYodG9JbmRleChjb2RlLCAweDEwZmZmZikgIT09IGNvZGUpdGhyb3cgUmFuZ2VFcnJvcihjb2RlICsgJyBpcyBub3QgYSB2YWxpZCBjb2RlIHBvaW50Jyk7XG4gICAgICByZXMucHVzaChjb2RlIDwgMHgxMDAwMFxuICAgICAgICA/IGZyb21DaGFyQ29kZShjb2RlKVxuICAgICAgICA6IGZyb21DaGFyQ29kZSgoKGNvZGUgLT0gMHgxMDAwMCkgPj4gMTApICsgMHhkODAwLCBjb2RlICUgMHg0MDAgKyAweGRjMDApXG4gICAgICApO1xuICAgIH0gcmV0dXJuIHJlcy5qb2luKCcnKTtcbiAgfVxufSk7IiwiLy8gMjEuMS4zLjcgU3RyaW5nLnByb3RvdHlwZS5pbmNsdWRlcyhzZWFyY2hTdHJpbmcsIHBvc2l0aW9uID0gMClcbid1c2Ugc3RyaWN0JztcbnZhciAkZXhwb3J0ICA9IHJlcXVpcmUoJy4vX2V4cG9ydCcpXG4gICwgY29udGV4dCAgPSByZXF1aXJlKCcuL19zdHJpbmctY29udGV4dCcpXG4gICwgSU5DTFVERVMgPSAnaW5jbHVkZXMnO1xuXG4kZXhwb3J0KCRleHBvcnQuUCArICRleHBvcnQuRiAqIHJlcXVpcmUoJy4vX2ZhaWxzLWlzLXJlZ2V4cCcpKElOQ0xVREVTKSwgJ1N0cmluZycsIHtcbiAgaW5jbHVkZXM6IGZ1bmN0aW9uIGluY2x1ZGVzKHNlYXJjaFN0cmluZyAvKiwgcG9zaXRpb24gPSAwICovKXtcbiAgICByZXR1cm4gISF+Y29udGV4dCh0aGlzLCBzZWFyY2hTdHJpbmcsIElOQ0xVREVTKVxuICAgICAgLmluZGV4T2Yoc2VhcmNoU3RyaW5nLCBhcmd1bWVudHMubGVuZ3RoID4gMSA/IGFyZ3VtZW50c1sxXSA6IHVuZGVmaW5lZCk7XG4gIH1cbn0pOyIsIid1c2Ugc3RyaWN0Jztcbi8vIEIuMi4zLjkgU3RyaW5nLnByb3RvdHlwZS5pdGFsaWNzKClcbnJlcXVpcmUoJy4vX3N0cmluZy1odG1sJykoJ2l0YWxpY3MnLCBmdW5jdGlvbihjcmVhdGVIVE1MKXtcbiAgcmV0dXJuIGZ1bmN0aW9uIGl0YWxpY3MoKXtcbiAgICByZXR1cm4gY3JlYXRlSFRNTCh0aGlzLCAnaScsICcnLCAnJyk7XG4gIH1cbn0pOyIsIid1c2Ugc3RyaWN0JztcbnZhciAkYXQgID0gcmVxdWlyZSgnLi9fc3RyaW5nLWF0JykodHJ1ZSk7XG5cbi8vIDIxLjEuMy4yNyBTdHJpbmcucHJvdG90eXBlW0BAaXRlcmF0b3JdKClcbnJlcXVpcmUoJy4vX2l0ZXItZGVmaW5lJykoU3RyaW5nLCAnU3RyaW5nJywgZnVuY3Rpb24oaXRlcmF0ZWQpe1xuICB0aGlzLl90ID0gU3RyaW5nKGl0ZXJhdGVkKTsgLy8gdGFyZ2V0XG4gIHRoaXMuX2kgPSAwOyAgICAgICAgICAgICAgICAvLyBuZXh0IGluZGV4XG4vLyAyMS4xLjUuMi4xICVTdHJpbmdJdGVyYXRvclByb3RvdHlwZSUubmV4dCgpXG59LCBmdW5jdGlvbigpe1xuICB2YXIgTyAgICAgPSB0aGlzLl90XG4gICAgLCBpbmRleCA9IHRoaXMuX2lcbiAgICAsIHBvaW50O1xuICBpZihpbmRleCA+PSBPLmxlbmd0aClyZXR1cm4ge3ZhbHVlOiB1bmRlZmluZWQsIGRvbmU6IHRydWV9O1xuICBwb2ludCA9ICRhdChPLCBpbmRleCk7XG4gIHRoaXMuX2kgKz0gcG9pbnQubGVuZ3RoO1xuICByZXR1cm4ge3ZhbHVlOiBwb2ludCwgZG9uZTogZmFsc2V9O1xufSk7IiwiJ3VzZSBzdHJpY3QnO1xuLy8gQi4yLjMuMTAgU3RyaW5nLnByb3RvdHlwZS5saW5rKHVybClcbnJlcXVpcmUoJy4vX3N0cmluZy1odG1sJykoJ2xpbmsnLCBmdW5jdGlvbihjcmVhdGVIVE1MKXtcbiAgcmV0dXJuIGZ1bmN0aW9uIGxpbmsodXJsKXtcbiAgICByZXR1cm4gY3JlYXRlSFRNTCh0aGlzLCAnYScsICdocmVmJywgdXJsKTtcbiAgfVxufSk7IiwidmFyICRleHBvcnQgICA9IHJlcXVpcmUoJy4vX2V4cG9ydCcpXG4gICwgdG9JT2JqZWN0ID0gcmVxdWlyZSgnLi9fdG8taW9iamVjdCcpXG4gICwgdG9MZW5ndGggID0gcmVxdWlyZSgnLi9fdG8tbGVuZ3RoJyk7XG5cbiRleHBvcnQoJGV4cG9ydC5TLCAnU3RyaW5nJywge1xuICAvLyAyMS4xLjIuNCBTdHJpbmcucmF3KGNhbGxTaXRlLCAuLi5zdWJzdGl0dXRpb25zKVxuICByYXc6IGZ1bmN0aW9uIHJhdyhjYWxsU2l0ZSl7XG4gICAgdmFyIHRwbCAgPSB0b0lPYmplY3QoY2FsbFNpdGUucmF3KVxuICAgICAgLCBsZW4gID0gdG9MZW5ndGgodHBsLmxlbmd0aClcbiAgICAgICwgYUxlbiA9IGFyZ3VtZW50cy5sZW5ndGhcbiAgICAgICwgcmVzICA9IFtdXG4gICAgICAsIGkgICAgPSAwO1xuICAgIHdoaWxlKGxlbiA+IGkpe1xuICAgICAgcmVzLnB1c2goU3RyaW5nKHRwbFtpKytdKSk7XG4gICAgICBpZihpIDwgYUxlbilyZXMucHVzaChTdHJpbmcoYXJndW1lbnRzW2ldKSk7XG4gICAgfSByZXR1cm4gcmVzLmpvaW4oJycpO1xuICB9XG59KTsiLCJ2YXIgJGV4cG9ydCA9IHJlcXVpcmUoJy4vX2V4cG9ydCcpO1xuXG4kZXhwb3J0KCRleHBvcnQuUCwgJ1N0cmluZycsIHtcbiAgLy8gMjEuMS4zLjEzIFN0cmluZy5wcm90b3R5cGUucmVwZWF0KGNvdW50KVxuICByZXBlYXQ6IHJlcXVpcmUoJy4vX3N0cmluZy1yZXBlYXQnKVxufSk7IiwiJ3VzZSBzdHJpY3QnO1xuLy8gQi4yLjMuMTEgU3RyaW5nLnByb3RvdHlwZS5zbWFsbCgpXG5yZXF1aXJlKCcuL19zdHJpbmctaHRtbCcpKCdzbWFsbCcsIGZ1bmN0aW9uKGNyZWF0ZUhUTUwpe1xuICByZXR1cm4gZnVuY3Rpb24gc21hbGwoKXtcbiAgICByZXR1cm4gY3JlYXRlSFRNTCh0aGlzLCAnc21hbGwnLCAnJywgJycpO1xuICB9XG59KTsiLCIvLyAyMS4xLjMuMTggU3RyaW5nLnByb3RvdHlwZS5zdGFydHNXaXRoKHNlYXJjaFN0cmluZyBbLCBwb3NpdGlvbiBdKVxuJ3VzZSBzdHJpY3QnO1xudmFyICRleHBvcnQgICAgID0gcmVxdWlyZSgnLi9fZXhwb3J0JylcbiAgLCB0b0xlbmd0aCAgICA9IHJlcXVpcmUoJy4vX3RvLWxlbmd0aCcpXG4gICwgY29udGV4dCAgICAgPSByZXF1aXJlKCcuL19zdHJpbmctY29udGV4dCcpXG4gICwgU1RBUlRTX1dJVEggPSAnc3RhcnRzV2l0aCdcbiAgLCAkc3RhcnRzV2l0aCA9ICcnW1NUQVJUU19XSVRIXTtcblxuJGV4cG9ydCgkZXhwb3J0LlAgKyAkZXhwb3J0LkYgKiByZXF1aXJlKCcuL19mYWlscy1pcy1yZWdleHAnKShTVEFSVFNfV0lUSCksICdTdHJpbmcnLCB7XG4gIHN0YXJ0c1dpdGg6IGZ1bmN0aW9uIHN0YXJ0c1dpdGgoc2VhcmNoU3RyaW5nIC8qLCBwb3NpdGlvbiA9IDAgKi8pe1xuICAgIHZhciB0aGF0ICAgPSBjb250ZXh0KHRoaXMsIHNlYXJjaFN0cmluZywgU1RBUlRTX1dJVEgpXG4gICAgICAsIGluZGV4ICA9IHRvTGVuZ3RoKE1hdGgubWluKGFyZ3VtZW50cy5sZW5ndGggPiAxID8gYXJndW1lbnRzWzFdIDogdW5kZWZpbmVkLCB0aGF0Lmxlbmd0aCkpXG4gICAgICAsIHNlYXJjaCA9IFN0cmluZyhzZWFyY2hTdHJpbmcpO1xuICAgIHJldHVybiAkc3RhcnRzV2l0aFxuICAgICAgPyAkc3RhcnRzV2l0aC5jYWxsKHRoYXQsIHNlYXJjaCwgaW5kZXgpXG4gICAgICA6IHRoYXQuc2xpY2UoaW5kZXgsIGluZGV4ICsgc2VhcmNoLmxlbmd0aCkgPT09IHNlYXJjaDtcbiAgfVxufSk7IiwiJ3VzZSBzdHJpY3QnO1xuLy8gQi4yLjMuMTIgU3RyaW5nLnByb3RvdHlwZS5zdHJpa2UoKVxucmVxdWlyZSgnLi9fc3RyaW5nLWh0bWwnKSgnc3RyaWtlJywgZnVuY3Rpb24oY3JlYXRlSFRNTCl7XG4gIHJldHVybiBmdW5jdGlvbiBzdHJpa2UoKXtcbiAgICByZXR1cm4gY3JlYXRlSFRNTCh0aGlzLCAnc3RyaWtlJywgJycsICcnKTtcbiAgfVxufSk7IiwiJ3VzZSBzdHJpY3QnO1xuLy8gQi4yLjMuMTMgU3RyaW5nLnByb3RvdHlwZS5zdWIoKVxucmVxdWlyZSgnLi9fc3RyaW5nLWh0bWwnKSgnc3ViJywgZnVuY3Rpb24oY3JlYXRlSFRNTCl7XG4gIHJldHVybiBmdW5jdGlvbiBzdWIoKXtcbiAgICByZXR1cm4gY3JlYXRlSFRNTCh0aGlzLCAnc3ViJywgJycsICcnKTtcbiAgfVxufSk7IiwiJ3VzZSBzdHJpY3QnO1xuLy8gQi4yLjMuMTQgU3RyaW5nLnByb3RvdHlwZS5zdXAoKVxucmVxdWlyZSgnLi9fc3RyaW5nLWh0bWwnKSgnc3VwJywgZnVuY3Rpb24oY3JlYXRlSFRNTCl7XG4gIHJldHVybiBmdW5jdGlvbiBzdXAoKXtcbiAgICByZXR1cm4gY3JlYXRlSFRNTCh0aGlzLCAnc3VwJywgJycsICcnKTtcbiAgfVxufSk7IiwiJ3VzZSBzdHJpY3QnO1xuLy8gMjEuMS4zLjI1IFN0cmluZy5wcm90b3R5cGUudHJpbSgpXG5yZXF1aXJlKCcuL19zdHJpbmctdHJpbScpKCd0cmltJywgZnVuY3Rpb24oJHRyaW0pe1xuICByZXR1cm4gZnVuY3Rpb24gdHJpbSgpe1xuICAgIHJldHVybiAkdHJpbSh0aGlzLCAzKTtcbiAgfTtcbn0pOyIsIid1c2Ugc3RyaWN0Jztcbi8vIEVDTUFTY3JpcHQgNiBzeW1ib2xzIHNoaW1cbnZhciBnbG9iYWwgICAgICAgICA9IHJlcXVpcmUoJy4vX2dsb2JhbCcpXG4gICwgY29yZSAgICAgICAgICAgPSByZXF1aXJlKCcuL19jb3JlJylcbiAgLCBoYXMgICAgICAgICAgICA9IHJlcXVpcmUoJy4vX2hhcycpXG4gICwgREVTQ1JJUFRPUlMgICAgPSByZXF1aXJlKCcuL19kZXNjcmlwdG9ycycpXG4gICwgJGV4cG9ydCAgICAgICAgPSByZXF1aXJlKCcuL19leHBvcnQnKVxuICAsIHJlZGVmaW5lICAgICAgID0gcmVxdWlyZSgnLi9fcmVkZWZpbmUnKVxuICAsIE1FVEEgICAgICAgICAgID0gcmVxdWlyZSgnLi9fbWV0YScpLktFWVxuICAsICRmYWlscyAgICAgICAgID0gcmVxdWlyZSgnLi9fZmFpbHMnKVxuICAsIHNoYXJlZCAgICAgICAgID0gcmVxdWlyZSgnLi9fc2hhcmVkJylcbiAgLCBzZXRUb1N0cmluZ1RhZyA9IHJlcXVpcmUoJy4vX3NldC10by1zdHJpbmctdGFnJylcbiAgLCB1aWQgICAgICAgICAgICA9IHJlcXVpcmUoJy4vX3VpZCcpXG4gICwgd2tzICAgICAgICAgICAgPSByZXF1aXJlKCcuL193a3MnKVxuICAsIGtleU9mICAgICAgICAgID0gcmVxdWlyZSgnLi9fa2V5b2YnKVxuICAsIGVudW1LZXlzICAgICAgID0gcmVxdWlyZSgnLi9fZW51bS1rZXlzJylcbiAgLCBpc0FycmF5ICAgICAgICA9IHJlcXVpcmUoJy4vX2lzLWFycmF5JylcbiAgLCBhbk9iamVjdCAgICAgICA9IHJlcXVpcmUoJy4vX2FuLW9iamVjdCcpXG4gICwgdG9JT2JqZWN0ICAgICAgPSByZXF1aXJlKCcuL190by1pb2JqZWN0JylcbiAgLCB0b1ByaW1pdGl2ZSAgICA9IHJlcXVpcmUoJy4vX3RvLXByaW1pdGl2ZScpXG4gICwgY3JlYXRlRGVzYyAgICAgPSByZXF1aXJlKCcuL19wcm9wZXJ0eS1kZXNjJylcbiAgLCBfY3JlYXRlICAgICAgICA9IHJlcXVpcmUoJy4vX29iamVjdC1jcmVhdGUnKVxuICAsIGdPUE5FeHQgICAgICAgID0gcmVxdWlyZSgnLi9fb2JqZWN0LWdvcG4tZXh0JylcbiAgLCAkR09QRCAgICAgICAgICA9IHJlcXVpcmUoJy4vX29iamVjdC1nb3BkJylcbiAgLCAkRFAgICAgICAgICAgICA9IHJlcXVpcmUoJy4vX29iamVjdC1kcCcpXG4gICwgZ09QRCAgICAgICAgICAgPSAkR09QRC5mXG4gICwgZFAgICAgICAgICAgICAgPSAkRFAuZlxuICAsIGdPUE4gICAgICAgICAgID0gZ09QTkV4dC5mXG4gICwgJFN5bWJvbCAgICAgICAgPSBnbG9iYWwuU3ltYm9sXG4gICwgJEpTT04gICAgICAgICAgPSBnbG9iYWwuSlNPTlxuICAsIF9zdHJpbmdpZnkgICAgID0gJEpTT04gJiYgJEpTT04uc3RyaW5naWZ5XG4gICwgc2V0dGVyICAgICAgICAgPSBmYWxzZVxuICAsIFBST1RPVFlQRSAgICAgID0gJ3Byb3RvdHlwZSdcbiAgLCBISURERU4gICAgICAgICA9IHdrcygnX2hpZGRlbicpXG4gICwgVE9fUFJJTUlUSVZFICAgPSB3a3MoJ3RvUHJpbWl0aXZlJylcbiAgLCBpc0VudW0gICAgICAgICA9IHt9LnByb3BlcnR5SXNFbnVtZXJhYmxlXG4gICwgU3ltYm9sUmVnaXN0cnkgPSBzaGFyZWQoJ3N5bWJvbC1yZWdpc3RyeScpXG4gICwgQWxsU3ltYm9scyAgICAgPSBzaGFyZWQoJ3N5bWJvbHMnKVxuICAsIE9iamVjdFByb3RvICAgID0gT2JqZWN0W1BST1RPVFlQRV1cbiAgLCBVU0VfTkFUSVZFICAgICA9IHR5cGVvZiAkU3ltYm9sID09ICdmdW5jdGlvbidcbiAgLCBRT2JqZWN0ICAgICAgICA9IGdsb2JhbC5RT2JqZWN0O1xuXG4vLyBmYWxsYmFjayBmb3Igb2xkIEFuZHJvaWQsIGh0dHBzOi8vY29kZS5nb29nbGUuY29tL3AvdjgvaXNzdWVzL2RldGFpbD9pZD02ODdcbnZhciBzZXRTeW1ib2xEZXNjID0gREVTQ1JJUFRPUlMgJiYgJGZhaWxzKGZ1bmN0aW9uKCl7XG4gIHJldHVybiBfY3JlYXRlKGRQKHt9LCAnYScsIHtcbiAgICBnZXQ6IGZ1bmN0aW9uKCl7IHJldHVybiBkUCh0aGlzLCAnYScsIHt2YWx1ZTogN30pLmE7IH1cbiAgfSkpLmEgIT0gNztcbn0pID8gZnVuY3Rpb24oaXQsIGtleSwgRCl7XG4gIHZhciBwcm90b0Rlc2MgPSBnT1BEKE9iamVjdFByb3RvLCBrZXkpO1xuICBpZihwcm90b0Rlc2MpZGVsZXRlIE9iamVjdFByb3RvW2tleV07XG4gIGRQKGl0LCBrZXksIEQpO1xuICBpZihwcm90b0Rlc2MgJiYgaXQgIT09IE9iamVjdFByb3RvKWRQKE9iamVjdFByb3RvLCBrZXksIHByb3RvRGVzYyk7XG59IDogZFA7XG5cbnZhciB3cmFwID0gZnVuY3Rpb24odGFnKXtcbiAgdmFyIHN5bSA9IEFsbFN5bWJvbHNbdGFnXSA9IF9jcmVhdGUoJFN5bWJvbFtQUk9UT1RZUEVdKTtcbiAgc3ltLl9rID0gdGFnO1xuICBERVNDUklQVE9SUyAmJiBzZXR0ZXIgJiYgc2V0U3ltYm9sRGVzYyhPYmplY3RQcm90bywgdGFnLCB7XG4gICAgY29uZmlndXJhYmxlOiB0cnVlLFxuICAgIHNldDogZnVuY3Rpb24odmFsdWUpe1xuICAgICAgaWYoaGFzKHRoaXMsIEhJRERFTikgJiYgaGFzKHRoaXNbSElEREVOXSwgdGFnKSl0aGlzW0hJRERFTl1bdGFnXSA9IGZhbHNlO1xuICAgICAgc2V0U3ltYm9sRGVzYyh0aGlzLCB0YWcsIGNyZWF0ZURlc2MoMSwgdmFsdWUpKTtcbiAgICB9XG4gIH0pO1xuICByZXR1cm4gc3ltO1xufTtcblxudmFyIGlzU3ltYm9sID0gVVNFX05BVElWRSAmJiB0eXBlb2YgJFN5bWJvbC5pdGVyYXRvciA9PSAnc3ltYm9sJyA/IGZ1bmN0aW9uKGl0KXtcbiAgcmV0dXJuIHR5cGVvZiBpdCA9PSAnc3ltYm9sJztcbn0gOiBmdW5jdGlvbihpdCl7XG4gIHJldHVybiBpdCBpbnN0YW5jZW9mICRTeW1ib2w7XG59O1xuXG52YXIgJGRlZmluZVByb3BlcnR5ID0gZnVuY3Rpb24gZGVmaW5lUHJvcGVydHkoaXQsIGtleSwgRCl7XG4gIGFuT2JqZWN0KGl0KTtcbiAga2V5ID0gdG9QcmltaXRpdmUoa2V5LCB0cnVlKTtcbiAgYW5PYmplY3QoRCk7XG4gIGlmKGhhcyhBbGxTeW1ib2xzLCBrZXkpKXtcbiAgICBpZighRC5lbnVtZXJhYmxlKXtcbiAgICAgIGlmKCFoYXMoaXQsIEhJRERFTikpZFAoaXQsIEhJRERFTiwgY3JlYXRlRGVzYygxLCB7fSkpO1xuICAgICAgaXRbSElEREVOXVtrZXldID0gdHJ1ZTtcbiAgICB9IGVsc2Uge1xuICAgICAgaWYoaGFzKGl0LCBISURERU4pICYmIGl0W0hJRERFTl1ba2V5XSlpdFtISURERU5dW2tleV0gPSBmYWxzZTtcbiAgICAgIEQgPSBfY3JlYXRlKEQsIHtlbnVtZXJhYmxlOiBjcmVhdGVEZXNjKDAsIGZhbHNlKX0pO1xuICAgIH0gcmV0dXJuIHNldFN5bWJvbERlc2MoaXQsIGtleSwgRCk7XG4gIH0gcmV0dXJuIGRQKGl0LCBrZXksIEQpO1xufTtcbnZhciAkZGVmaW5lUHJvcGVydGllcyA9IGZ1bmN0aW9uIGRlZmluZVByb3BlcnRpZXMoaXQsIFApe1xuICBhbk9iamVjdChpdCk7XG4gIHZhciBrZXlzID0gZW51bUtleXMoUCA9IHRvSU9iamVjdChQKSlcbiAgICAsIGkgICAgPSAwXG4gICAgLCBsID0ga2V5cy5sZW5ndGhcbiAgICAsIGtleTtcbiAgd2hpbGUobCA+IGkpJGRlZmluZVByb3BlcnR5KGl0LCBrZXkgPSBrZXlzW2krK10sIFBba2V5XSk7XG4gIHJldHVybiBpdDtcbn07XG52YXIgJGNyZWF0ZSA9IGZ1bmN0aW9uIGNyZWF0ZShpdCwgUCl7XG4gIHJldHVybiBQID09PSB1bmRlZmluZWQgPyBfY3JlYXRlKGl0KSA6ICRkZWZpbmVQcm9wZXJ0aWVzKF9jcmVhdGUoaXQpLCBQKTtcbn07XG52YXIgJHByb3BlcnR5SXNFbnVtZXJhYmxlID0gZnVuY3Rpb24gcHJvcGVydHlJc0VudW1lcmFibGUoa2V5KXtcbiAgdmFyIEUgPSBpc0VudW0uY2FsbCh0aGlzLCBrZXkgPSB0b1ByaW1pdGl2ZShrZXksIHRydWUpKTtcbiAgcmV0dXJuIEUgfHwgIWhhcyh0aGlzLCBrZXkpIHx8ICFoYXMoQWxsU3ltYm9scywga2V5KSB8fCBoYXModGhpcywgSElEREVOKSAmJiB0aGlzW0hJRERFTl1ba2V5XSA/IEUgOiB0cnVlO1xufTtcbnZhciAkZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yID0gZnVuY3Rpb24gZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yKGl0LCBrZXkpe1xuICB2YXIgRCA9IGdPUEQoaXQgPSB0b0lPYmplY3QoaXQpLCBrZXkgPSB0b1ByaW1pdGl2ZShrZXksIHRydWUpKTtcbiAgaWYoRCAmJiBoYXMoQWxsU3ltYm9scywga2V5KSAmJiAhKGhhcyhpdCwgSElEREVOKSAmJiBpdFtISURERU5dW2tleV0pKUQuZW51bWVyYWJsZSA9IHRydWU7XG4gIHJldHVybiBEO1xufTtcbnZhciAkZ2V0T3duUHJvcGVydHlOYW1lcyA9IGZ1bmN0aW9uIGdldE93blByb3BlcnR5TmFtZXMoaXQpe1xuICB2YXIgbmFtZXMgID0gZ09QTih0b0lPYmplY3QoaXQpKVxuICAgICwgcmVzdWx0ID0gW11cbiAgICAsIGkgICAgICA9IDBcbiAgICAsIGtleTtcbiAgd2hpbGUobmFtZXMubGVuZ3RoID4gaSlpZighaGFzKEFsbFN5bWJvbHMsIGtleSA9IG5hbWVzW2krK10pICYmIGtleSAhPSBISURERU4gJiYga2V5ICE9IE1FVEEpcmVzdWx0LnB1c2goa2V5KTtcbiAgcmV0dXJuIHJlc3VsdDtcbn07XG52YXIgJGdldE93blByb3BlcnR5U3ltYm9scyA9IGZ1bmN0aW9uIGdldE93blByb3BlcnR5U3ltYm9scyhpdCl7XG4gIHZhciBuYW1lcyAgPSBnT1BOKHRvSU9iamVjdChpdCkpXG4gICAgLCByZXN1bHQgPSBbXVxuICAgICwgaSAgICAgID0gMFxuICAgICwga2V5O1xuICB3aGlsZShuYW1lcy5sZW5ndGggPiBpKWlmKGhhcyhBbGxTeW1ib2xzLCBrZXkgPSBuYW1lc1tpKytdKSlyZXN1bHQucHVzaChBbGxTeW1ib2xzW2tleV0pO1xuICByZXR1cm4gcmVzdWx0O1xufTtcbnZhciAkc3RyaW5naWZ5ID0gZnVuY3Rpb24gc3RyaW5naWZ5KGl0KXtcbiAgaWYoaXQgPT09IHVuZGVmaW5lZCB8fCBpc1N5bWJvbChpdCkpcmV0dXJuOyAvLyBJRTggcmV0dXJucyBzdHJpbmcgb24gdW5kZWZpbmVkXG4gIHZhciBhcmdzID0gW2l0XVxuICAgICwgaSAgICA9IDFcbiAgICAsIHJlcGxhY2VyLCAkcmVwbGFjZXI7XG4gIHdoaWxlKGFyZ3VtZW50cy5sZW5ndGggPiBpKWFyZ3MucHVzaChhcmd1bWVudHNbaSsrXSk7XG4gIHJlcGxhY2VyID0gYXJnc1sxXTtcbiAgaWYodHlwZW9mIHJlcGxhY2VyID09ICdmdW5jdGlvbicpJHJlcGxhY2VyID0gcmVwbGFjZXI7XG4gIGlmKCRyZXBsYWNlciB8fCAhaXNBcnJheShyZXBsYWNlcikpcmVwbGFjZXIgPSBmdW5jdGlvbihrZXksIHZhbHVlKXtcbiAgICBpZigkcmVwbGFjZXIpdmFsdWUgPSAkcmVwbGFjZXIuY2FsbCh0aGlzLCBrZXksIHZhbHVlKTtcbiAgICBpZighaXNTeW1ib2wodmFsdWUpKXJldHVybiB2YWx1ZTtcbiAgfTtcbiAgYXJnc1sxXSA9IHJlcGxhY2VyO1xuICByZXR1cm4gX3N0cmluZ2lmeS5hcHBseSgkSlNPTiwgYXJncyk7XG59O1xudmFyIEJVR0dZX0pTT04gPSAkZmFpbHMoZnVuY3Rpb24oKXtcbiAgdmFyIFMgPSAkU3ltYm9sKCk7XG4gIC8vIE1TIEVkZ2UgY29udmVydHMgc3ltYm9sIHZhbHVlcyB0byBKU09OIGFzIHt9XG4gIC8vIFdlYktpdCBjb252ZXJ0cyBzeW1ib2wgdmFsdWVzIHRvIEpTT04gYXMgbnVsbFxuICAvLyBWOCB0aHJvd3Mgb24gYm94ZWQgc3ltYm9sc1xuICByZXR1cm4gX3N0cmluZ2lmeShbU10pICE9ICdbbnVsbF0nIHx8IF9zdHJpbmdpZnkoe2E6IFN9KSAhPSAne30nIHx8IF9zdHJpbmdpZnkoT2JqZWN0KFMpKSAhPSAne30nO1xufSk7XG5cbi8vIDE5LjQuMS4xIFN5bWJvbChbZGVzY3JpcHRpb25dKVxuaWYoIVVTRV9OQVRJVkUpe1xuICAkU3ltYm9sID0gZnVuY3Rpb24gU3ltYm9sKCl7XG4gICAgaWYodGhpcyBpbnN0YW5jZW9mICRTeW1ib2wpdGhyb3cgVHlwZUVycm9yKCdTeW1ib2wgaXMgbm90IGEgY29uc3RydWN0b3IhJyk7XG4gICAgcmV0dXJuIHdyYXAodWlkKGFyZ3VtZW50cy5sZW5ndGggPiAwID8gYXJndW1lbnRzWzBdIDogdW5kZWZpbmVkKSk7XG4gIH07XG4gIHJlZGVmaW5lKCRTeW1ib2xbUFJPVE9UWVBFXSwgJ3RvU3RyaW5nJywgZnVuY3Rpb24gdG9TdHJpbmcoKXtcbiAgICByZXR1cm4gdGhpcy5faztcbiAgfSk7XG5cbiAgJEdPUEQuZiA9ICRnZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3I7XG4gICREUC5mICAgPSAkZGVmaW5lUHJvcGVydHk7XG4gIHJlcXVpcmUoJy4vX29iamVjdC1nb3BuJykuZiA9IGdPUE5FeHQuZiA9ICRnZXRPd25Qcm9wZXJ0eU5hbWVzO1xuICByZXF1aXJlKCcuL19vYmplY3QtcGllJykuZiAgPSAkcHJvcGVydHlJc0VudW1lcmFibGVcbiAgcmVxdWlyZSgnLi9fb2JqZWN0LWdvcHMnKS5mID0gJGdldE93blByb3BlcnR5U3ltYm9scztcblxuICBpZihERVNDUklQVE9SUyAmJiAhcmVxdWlyZSgnLi9fbGlicmFyeScpKXtcbiAgICByZWRlZmluZShPYmplY3RQcm90bywgJ3Byb3BlcnR5SXNFbnVtZXJhYmxlJywgJHByb3BlcnR5SXNFbnVtZXJhYmxlLCB0cnVlKTtcbiAgfVxufVxuXG4kZXhwb3J0KCRleHBvcnQuRyArICRleHBvcnQuVyArICRleHBvcnQuRiAqICFVU0VfTkFUSVZFLCB7U3ltYm9sOiAkU3ltYm9sfSk7XG5cbi8vIDE5LjQuMi4yIFN5bWJvbC5oYXNJbnN0YW5jZVxuLy8gMTkuNC4yLjMgU3ltYm9sLmlzQ29uY2F0U3ByZWFkYWJsZVxuLy8gMTkuNC4yLjQgU3ltYm9sLml0ZXJhdG9yXG4vLyAxOS40LjIuNiBTeW1ib2wubWF0Y2hcbi8vIDE5LjQuMi44IFN5bWJvbC5yZXBsYWNlXG4vLyAxOS40LjIuOSBTeW1ib2wuc2VhcmNoXG4vLyAxOS40LjIuMTAgU3ltYm9sLnNwZWNpZXNcbi8vIDE5LjQuMi4xMSBTeW1ib2wuc3BsaXRcbi8vIDE5LjQuMi4xMiBTeW1ib2wudG9QcmltaXRpdmVcbi8vIDE5LjQuMi4xMyBTeW1ib2wudG9TdHJpbmdUYWdcbi8vIDE5LjQuMi4xNCBTeW1ib2wudW5zY29wYWJsZXNcbmZvcih2YXIgc3ltYm9scyA9IChcbiAgJ2hhc0luc3RhbmNlLGlzQ29uY2F0U3ByZWFkYWJsZSxpdGVyYXRvcixtYXRjaCxyZXBsYWNlLHNlYXJjaCxzcGVjaWVzLHNwbGl0LHRvUHJpbWl0aXZlLHRvU3RyaW5nVGFnLHVuc2NvcGFibGVzJ1xuKS5zcGxpdCgnLCcpLCBpID0gMDsgc3ltYm9scy5sZW5ndGggPiBpOyApe1xuICB2YXIga2V5ICAgICA9IHN5bWJvbHNbaSsrXVxuICAgICwgV3JhcHBlciA9IGNvcmUuU3ltYm9sXG4gICAgLCBzeW0gICAgID0gd2tzKGtleSk7XG4gIGlmKCEoa2V5IGluIFdyYXBwZXIpKWRQKFdyYXBwZXIsIGtleSwge3ZhbHVlOiBVU0VfTkFUSVZFID8gc3ltIDogd3JhcChzeW0pfSk7XG59O1xuXG4vLyBEb24ndCB1c2Ugc2V0dGVycyBpbiBRdCBTY3JpcHQsIGh0dHBzOi8vZ2l0aHViLmNvbS96bG9pcm9jay9jb3JlLWpzL2lzc3Vlcy8xNzNcbmlmKCFRT2JqZWN0IHx8ICFRT2JqZWN0W1BST1RPVFlQRV0gfHwgIVFPYmplY3RbUFJPVE9UWVBFXS5maW5kQ2hpbGQpc2V0dGVyID0gdHJ1ZTtcblxuJGV4cG9ydCgkZXhwb3J0LlMgKyAkZXhwb3J0LkYgKiAhVVNFX05BVElWRSwgJ1N5bWJvbCcsIHtcbiAgLy8gMTkuNC4yLjEgU3ltYm9sLmZvcihrZXkpXG4gICdmb3InOiBmdW5jdGlvbihrZXkpe1xuICAgIHJldHVybiBoYXMoU3ltYm9sUmVnaXN0cnksIGtleSArPSAnJylcbiAgICAgID8gU3ltYm9sUmVnaXN0cnlba2V5XVxuICAgICAgOiBTeW1ib2xSZWdpc3RyeVtrZXldID0gJFN5bWJvbChrZXkpO1xuICB9LFxuICAvLyAxOS40LjIuNSBTeW1ib2wua2V5Rm9yKHN5bSlcbiAga2V5Rm9yOiBmdW5jdGlvbiBrZXlGb3Ioa2V5KXtcbiAgICBpZihpc1N5bWJvbChrZXkpKXJldHVybiBrZXlPZihTeW1ib2xSZWdpc3RyeSwga2V5KTtcbiAgICB0aHJvdyBUeXBlRXJyb3Ioa2V5ICsgJyBpcyBub3QgYSBzeW1ib2whJyk7XG4gIH0sXG4gIHVzZVNldHRlcjogZnVuY3Rpb24oKXsgc2V0dGVyID0gdHJ1ZTsgfSxcbiAgdXNlU2ltcGxlOiBmdW5jdGlvbigpeyBzZXR0ZXIgPSBmYWxzZTsgfVxufSk7XG5cbiRleHBvcnQoJGV4cG9ydC5TICsgJGV4cG9ydC5GICogIVVTRV9OQVRJVkUsICdPYmplY3QnLCB7XG4gIC8vIDE5LjEuMi4yIE9iamVjdC5jcmVhdGUoTyBbLCBQcm9wZXJ0aWVzXSlcbiAgY3JlYXRlOiAkY3JlYXRlLFxuICAvLyAxOS4xLjIuNCBPYmplY3QuZGVmaW5lUHJvcGVydHkoTywgUCwgQXR0cmlidXRlcylcbiAgZGVmaW5lUHJvcGVydHk6ICRkZWZpbmVQcm9wZXJ0eSxcbiAgLy8gMTkuMS4yLjMgT2JqZWN0LmRlZmluZVByb3BlcnRpZXMoTywgUHJvcGVydGllcylcbiAgZGVmaW5lUHJvcGVydGllczogJGRlZmluZVByb3BlcnRpZXMsXG4gIC8vIDE5LjEuMi42IE9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IoTywgUClcbiAgZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yOiAkZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yLFxuICAvLyAxOS4xLjIuNyBPYmplY3QuZ2V0T3duUHJvcGVydHlOYW1lcyhPKVxuICBnZXRPd25Qcm9wZXJ0eU5hbWVzOiAkZ2V0T3duUHJvcGVydHlOYW1lcyxcbiAgLy8gMTkuMS4yLjggT2JqZWN0LmdldE93blByb3BlcnR5U3ltYm9scyhPKVxuICBnZXRPd25Qcm9wZXJ0eVN5bWJvbHM6ICRnZXRPd25Qcm9wZXJ0eVN5bWJvbHNcbn0pO1xuXG4vLyAyNC4zLjIgSlNPTi5zdHJpbmdpZnkodmFsdWUgWywgcmVwbGFjZXIgWywgc3BhY2VdXSlcbiRKU09OICYmICRleHBvcnQoJGV4cG9ydC5TICsgJGV4cG9ydC5GICogKCFVU0VfTkFUSVZFIHx8IEJVR0dZX0pTT04pLCAnSlNPTicsIHtzdHJpbmdpZnk6ICRzdHJpbmdpZnl9KTtcblxuLy8gMTkuNC4zLjQgU3ltYm9sLnByb3RvdHlwZVtAQHRvUHJpbWl0aXZlXShoaW50KVxuJFN5bWJvbFtQUk9UT1RZUEVdW1RPX1BSSU1JVElWRV0gfHwgcmVxdWlyZSgnLi9faGlkZScpKCRTeW1ib2xbUFJPVE9UWVBFXSwgVE9fUFJJTUlUSVZFLCAkU3ltYm9sW1BST1RPVFlQRV0udmFsdWVPZik7XG4vLyAxOS40LjMuNSBTeW1ib2wucHJvdG90eXBlW0BAdG9TdHJpbmdUYWddXG5zZXRUb1N0cmluZ1RhZygkU3ltYm9sLCAnU3ltYm9sJyk7XG4vLyAyMC4yLjEuOSBNYXRoW0BAdG9TdHJpbmdUYWddXG5zZXRUb1N0cmluZ1RhZyhNYXRoLCAnTWF0aCcsIHRydWUpO1xuLy8gMjQuMy4zIEpTT05bQEB0b1N0cmluZ1RhZ11cbnNldFRvU3RyaW5nVGFnKGdsb2JhbC5KU09OLCAnSlNPTicsIHRydWUpOyIsIid1c2Ugc3RyaWN0JztcbnZhciAkZXhwb3J0ICAgICAgPSByZXF1aXJlKCcuL19leHBvcnQnKVxuICAsICR0eXBlZCAgICAgICA9IHJlcXVpcmUoJy4vX3R5cGVkJylcbiAgLCBidWZmZXIgICAgICAgPSByZXF1aXJlKCcuL190eXBlZC1idWZmZXInKVxuICAsIGFuT2JqZWN0ICAgICA9IHJlcXVpcmUoJy4vX2FuLW9iamVjdCcpXG4gICwgdG9JbmRleCAgICAgID0gcmVxdWlyZSgnLi9fdG8taW5kZXgnKVxuICAsIHRvTGVuZ3RoICAgICA9IHJlcXVpcmUoJy4vX3RvLWxlbmd0aCcpXG4gICwgaXNPYmplY3QgICAgID0gcmVxdWlyZSgnLi9faXMtb2JqZWN0JylcbiAgLCBUWVBFRF9BUlJBWSAgPSByZXF1aXJlKCcuL193a3MnKSgndHlwZWRfYXJyYXknKVxuICAsIEFycmF5QnVmZmVyICA9IHJlcXVpcmUoJy4vX2dsb2JhbCcpLkFycmF5QnVmZmVyXG4gICwgc3BlY2llc0NvbnN0cnVjdG9yID0gcmVxdWlyZSgnLi9fc3BlY2llcy1jb25zdHJ1Y3RvcicpXG4gICwgJEFycmF5QnVmZmVyID0gYnVmZmVyLkFycmF5QnVmZmVyXG4gICwgJERhdGFWaWV3ICAgID0gYnVmZmVyLkRhdGFWaWV3XG4gICwgJGlzVmlldyAgICAgID0gJHR5cGVkLkFCViAmJiBBcnJheUJ1ZmZlci5pc1ZpZXdcbiAgLCAkc2xpY2UgICAgICAgPSAkQXJyYXlCdWZmZXIucHJvdG90eXBlLnNsaWNlXG4gICwgVklFVyAgICAgICAgID0gJHR5cGVkLlZJRVdcbiAgLCBBUlJBWV9CVUZGRVIgPSAnQXJyYXlCdWZmZXInO1xuXG4kZXhwb3J0KCRleHBvcnQuRyArICRleHBvcnQuVyArICRleHBvcnQuRiAqIChBcnJheUJ1ZmZlciAhPT0gJEFycmF5QnVmZmVyKSwge0FycmF5QnVmZmVyOiAkQXJyYXlCdWZmZXJ9KTtcblxuJGV4cG9ydCgkZXhwb3J0LlMgKyAkZXhwb3J0LkYgKiAhJHR5cGVkLkNPTlNUUiwgQVJSQVlfQlVGRkVSLCB7XG4gIC8vIDI0LjEuMy4xIEFycmF5QnVmZmVyLmlzVmlldyhhcmcpXG4gIGlzVmlldzogZnVuY3Rpb24gaXNWaWV3KGl0KXtcbiAgICByZXR1cm4gJGlzVmlldyAmJiAkaXNWaWV3KGl0KSB8fCBpc09iamVjdChpdCkgJiYgVklFVyBpbiBpdDtcbiAgfVxufSk7XG5cbiRleHBvcnQoJGV4cG9ydC5QICsgJGV4cG9ydC5VICsgJGV4cG9ydC5GICogcmVxdWlyZSgnLi9fZmFpbHMnKShmdW5jdGlvbigpe1xuICByZXR1cm4gIW5ldyAkQXJyYXlCdWZmZXIoMikuc2xpY2UoMSwgdW5kZWZpbmVkKS5ieXRlTGVuZ3RoO1xufSksIEFSUkFZX0JVRkZFUiwge1xuICAvLyAyNC4xLjQuMyBBcnJheUJ1ZmZlci5wcm90b3R5cGUuc2xpY2Uoc3RhcnQsIGVuZClcbiAgc2xpY2U6IGZ1bmN0aW9uIHNsaWNlKHN0YXJ0LCBlbmQpe1xuICAgIGlmKCRzbGljZSAhPT0gdW5kZWZpbmVkICYmIGVuZCA9PT0gdW5kZWZpbmVkKXJldHVybiAkc2xpY2UuY2FsbChhbk9iamVjdCh0aGlzKSwgc3RhcnQpOyAvLyBGRiBmaXhcbiAgICB2YXIgbGVuICAgID0gYW5PYmplY3QodGhpcykuYnl0ZUxlbmd0aFxuICAgICAgLCBmaXJzdCAgPSB0b0luZGV4KHN0YXJ0LCBsZW4pXG4gICAgICAsIGZpbmFsICA9IHRvSW5kZXgoZW5kID09PSB1bmRlZmluZWQgPyBsZW4gOiBlbmQsIGxlbilcbiAgICAgICwgcmVzdWx0ID0gbmV3IChzcGVjaWVzQ29uc3RydWN0b3IodGhpcywgJEFycmF5QnVmZmVyKSkodG9MZW5ndGgoZmluYWwgLSBmaXJzdCkpXG4gICAgICAsIHZpZXdTICA9IG5ldyAkRGF0YVZpZXcodGhpcylcbiAgICAgICwgdmlld1QgID0gbmV3ICREYXRhVmlldyhyZXN1bHQpXG4gICAgICAsIGluZGV4ICA9IDA7XG4gICAgd2hpbGUoZmlyc3QgPCBmaW5hbCl7XG4gICAgICB2aWV3VC5zZXRVaW50OChpbmRleCsrLCB2aWV3Uy5nZXRVaW50OChmaXJzdCsrKSk7XG4gICAgfSByZXR1cm4gcmVzdWx0O1xuICB9XG59KTtcblxucmVxdWlyZSgnLi9fc2V0LXNwZWNpZXMnKShBUlJBWV9CVUZGRVIpOyIsInZhciAkZXhwb3J0ID0gcmVxdWlyZSgnLi9fZXhwb3J0Jyk7XG4kZXhwb3J0KCRleHBvcnQuRyArICRleHBvcnQuVyArICRleHBvcnQuRiAqICFyZXF1aXJlKCcuL190eXBlZCcpLkFCViwge1xuICBEYXRhVmlldzogcmVxdWlyZSgnLi9fdHlwZWQtYnVmZmVyJykuRGF0YVZpZXdcbn0pOyIsInJlcXVpcmUoJy4vX3R5cGVkLWFycmF5JykoJ0Zsb2F0MzInLCA0LCBmdW5jdGlvbihpbml0KXtcbiAgcmV0dXJuIGZ1bmN0aW9uIEZsb2F0MzJBcnJheShkYXRhLCBieXRlT2Zmc2V0LCBsZW5ndGgpe1xuICAgIHJldHVybiBpbml0KHRoaXMsIGRhdGEsIGJ5dGVPZmZzZXQsIGxlbmd0aCk7XG4gIH07XG59KTsiLCJyZXF1aXJlKCcuL190eXBlZC1hcnJheScpKCdGbG9hdDY0JywgOCwgZnVuY3Rpb24oaW5pdCl7XG4gIHJldHVybiBmdW5jdGlvbiBGbG9hdDY0QXJyYXkoZGF0YSwgYnl0ZU9mZnNldCwgbGVuZ3RoKXtcbiAgICByZXR1cm4gaW5pdCh0aGlzLCBkYXRhLCBieXRlT2Zmc2V0LCBsZW5ndGgpO1xuICB9O1xufSk7IiwicmVxdWlyZSgnLi9fdHlwZWQtYXJyYXknKSgnSW50MTYnLCAyLCBmdW5jdGlvbihpbml0KXtcbiAgcmV0dXJuIGZ1bmN0aW9uIEludDE2QXJyYXkoZGF0YSwgYnl0ZU9mZnNldCwgbGVuZ3RoKXtcbiAgICByZXR1cm4gaW5pdCh0aGlzLCBkYXRhLCBieXRlT2Zmc2V0LCBsZW5ndGgpO1xuICB9O1xufSk7IiwicmVxdWlyZSgnLi9fdHlwZWQtYXJyYXknKSgnSW50MzInLCA0LCBmdW5jdGlvbihpbml0KXtcbiAgcmV0dXJuIGZ1bmN0aW9uIEludDMyQXJyYXkoZGF0YSwgYnl0ZU9mZnNldCwgbGVuZ3RoKXtcbiAgICByZXR1cm4gaW5pdCh0aGlzLCBkYXRhLCBieXRlT2Zmc2V0LCBsZW5ndGgpO1xuICB9O1xufSk7IiwicmVxdWlyZSgnLi9fdHlwZWQtYXJyYXknKSgnSW50OCcsIDEsIGZ1bmN0aW9uKGluaXQpe1xuICByZXR1cm4gZnVuY3Rpb24gSW50OEFycmF5KGRhdGEsIGJ5dGVPZmZzZXQsIGxlbmd0aCl7XG4gICAgcmV0dXJuIGluaXQodGhpcywgZGF0YSwgYnl0ZU9mZnNldCwgbGVuZ3RoKTtcbiAgfTtcbn0pOyIsInJlcXVpcmUoJy4vX3R5cGVkLWFycmF5JykoJ1VpbnQxNicsIDIsIGZ1bmN0aW9uKGluaXQpe1xuICByZXR1cm4gZnVuY3Rpb24gVWludDE2QXJyYXkoZGF0YSwgYnl0ZU9mZnNldCwgbGVuZ3RoKXtcbiAgICByZXR1cm4gaW5pdCh0aGlzLCBkYXRhLCBieXRlT2Zmc2V0LCBsZW5ndGgpO1xuICB9O1xufSk7IiwicmVxdWlyZSgnLi9fdHlwZWQtYXJyYXknKSgnVWludDMyJywgNCwgZnVuY3Rpb24oaW5pdCl7XG4gIHJldHVybiBmdW5jdGlvbiBVaW50MzJBcnJheShkYXRhLCBieXRlT2Zmc2V0LCBsZW5ndGgpe1xuICAgIHJldHVybiBpbml0KHRoaXMsIGRhdGEsIGJ5dGVPZmZzZXQsIGxlbmd0aCk7XG4gIH07XG59KTsiLCJyZXF1aXJlKCcuL190eXBlZC1hcnJheScpKCdVaW50OCcsIDEsIGZ1bmN0aW9uKGluaXQpe1xuICByZXR1cm4gZnVuY3Rpb24gVWludDhBcnJheShkYXRhLCBieXRlT2Zmc2V0LCBsZW5ndGgpe1xuICAgIHJldHVybiBpbml0KHRoaXMsIGRhdGEsIGJ5dGVPZmZzZXQsIGxlbmd0aCk7XG4gIH07XG59KTsiLCJyZXF1aXJlKCcuL190eXBlZC1hcnJheScpKCdVaW50OCcsIDEsIGZ1bmN0aW9uKGluaXQpe1xuICByZXR1cm4gZnVuY3Rpb24gVWludDhDbGFtcGVkQXJyYXkoZGF0YSwgYnl0ZU9mZnNldCwgbGVuZ3RoKXtcbiAgICByZXR1cm4gaW5pdCh0aGlzLCBkYXRhLCBieXRlT2Zmc2V0LCBsZW5ndGgpO1xuICB9O1xufSwgdHJ1ZSk7IiwiJ3VzZSBzdHJpY3QnO1xudmFyIGVhY2ggICAgICAgICA9IHJlcXVpcmUoJy4vX2FycmF5LW1ldGhvZHMnKSgwKVxuICAsIHJlZGVmaW5lICAgICA9IHJlcXVpcmUoJy4vX3JlZGVmaW5lJylcbiAgLCBtZXRhICAgICAgICAgPSByZXF1aXJlKCcuL19tZXRhJylcbiAgLCBhc3NpZ24gICAgICAgPSByZXF1aXJlKCcuL19vYmplY3QtYXNzaWduJylcbiAgLCB3ZWFrICAgICAgICAgPSByZXF1aXJlKCcuL19jb2xsZWN0aW9uLXdlYWsnKVxuICAsIGlzT2JqZWN0ICAgICA9IHJlcXVpcmUoJy4vX2lzLW9iamVjdCcpXG4gICwgaGFzICAgICAgICAgID0gcmVxdWlyZSgnLi9faGFzJylcbiAgLCBnZXRXZWFrICAgICAgPSBtZXRhLmdldFdlYWtcbiAgLCBpc0V4dGVuc2libGUgPSBPYmplY3QuaXNFeHRlbnNpYmxlXG4gICwgdW5jYXVnaHRGcm96ZW5TdG9yZSA9IHdlYWsudWZzdG9yZVxuICAsIHRtcCAgICAgICAgICA9IHt9XG4gICwgSW50ZXJuYWxNYXA7XG5cbnZhciB3cmFwcGVyID0gZnVuY3Rpb24oZ2V0KXtcbiAgcmV0dXJuIGZ1bmN0aW9uIFdlYWtNYXAoKXtcbiAgICByZXR1cm4gZ2V0KHRoaXMsIGFyZ3VtZW50cy5sZW5ndGggPiAwID8gYXJndW1lbnRzWzBdIDogdW5kZWZpbmVkKTtcbiAgfTtcbn07XG5cbnZhciBtZXRob2RzID0ge1xuICAvLyAyMy4zLjMuMyBXZWFrTWFwLnByb3RvdHlwZS5nZXQoa2V5KVxuICBnZXQ6IGZ1bmN0aW9uIGdldChrZXkpe1xuICAgIGlmKGlzT2JqZWN0KGtleSkpe1xuICAgICAgdmFyIGRhdGEgPSBnZXRXZWFrKGtleSk7XG4gICAgICBpZihkYXRhID09PSB0cnVlKXJldHVybiB1bmNhdWdodEZyb3plblN0b3JlKHRoaXMpLmdldChrZXkpO1xuICAgICAgcmV0dXJuIGRhdGEgPyBkYXRhW3RoaXMuX2ldIDogdW5kZWZpbmVkO1xuICAgIH1cbiAgfSxcbiAgLy8gMjMuMy4zLjUgV2Vha01hcC5wcm90b3R5cGUuc2V0KGtleSwgdmFsdWUpXG4gIHNldDogZnVuY3Rpb24gc2V0KGtleSwgdmFsdWUpe1xuICAgIHJldHVybiB3ZWFrLmRlZih0aGlzLCBrZXksIHZhbHVlKTtcbiAgfVxufTtcblxuLy8gMjMuMyBXZWFrTWFwIE9iamVjdHNcbnZhciAkV2Vha01hcCA9IG1vZHVsZS5leHBvcnRzID0gcmVxdWlyZSgnLi9fY29sbGVjdGlvbicpKCdXZWFrTWFwJywgd3JhcHBlciwgbWV0aG9kcywgd2VhaywgdHJ1ZSwgdHJ1ZSk7XG5cbi8vIElFMTEgV2Vha01hcCBmcm96ZW4ga2V5cyBmaXhcbmlmKG5ldyAkV2Vha01hcCgpLnNldCgoT2JqZWN0LmZyZWV6ZSB8fCBPYmplY3QpKHRtcCksIDcpLmdldCh0bXApICE9IDcpe1xuICBJbnRlcm5hbE1hcCA9IHdlYWsuZ2V0Q29uc3RydWN0b3Iod3JhcHBlcik7XG4gIGFzc2lnbihJbnRlcm5hbE1hcC5wcm90b3R5cGUsIG1ldGhvZHMpO1xuICBtZXRhLk5FRUQgPSB0cnVlO1xuICBlYWNoKFsnZGVsZXRlJywgJ2hhcycsICdnZXQnLCAnc2V0J10sIGZ1bmN0aW9uKGtleSl7XG4gICAgdmFyIHByb3RvICA9ICRXZWFrTWFwLnByb3RvdHlwZVxuICAgICAgLCBtZXRob2QgPSBwcm90b1trZXldO1xuICAgIHJlZGVmaW5lKHByb3RvLCBrZXksIGZ1bmN0aW9uKGEsIGIpe1xuICAgICAgLy8gc3RvcmUgZnJvemVuIG9iamVjdHMgb24gaW50ZXJuYWwgd2Vha21hcCBzaGltXG4gICAgICBpZihpc09iamVjdChhKSAmJiAhaXNFeHRlbnNpYmxlKGEpKXtcbiAgICAgICAgaWYoIXRoaXMuX2YpdGhpcy5fZiA9IG5ldyBJbnRlcm5hbE1hcDtcbiAgICAgICAgdmFyIHJlc3VsdCA9IHRoaXMuX2Zba2V5XShhLCBiKTtcbiAgICAgICAgcmV0dXJuIGtleSA9PSAnc2V0JyA/IHRoaXMgOiByZXN1bHQ7XG4gICAgICAvLyBzdG9yZSBhbGwgdGhlIHJlc3Qgb24gbmF0aXZlIHdlYWttYXBcbiAgICAgIH0gcmV0dXJuIG1ldGhvZC5jYWxsKHRoaXMsIGEsIGIpO1xuICAgIH0pO1xuICB9KTtcbn0iLCIndXNlIHN0cmljdCc7XG52YXIgd2VhayA9IHJlcXVpcmUoJy4vX2NvbGxlY3Rpb24td2VhaycpO1xuXG4vLyAyMy40IFdlYWtTZXQgT2JqZWN0c1xucmVxdWlyZSgnLi9fY29sbGVjdGlvbicpKCdXZWFrU2V0JywgZnVuY3Rpb24oZ2V0KXtcbiAgcmV0dXJuIGZ1bmN0aW9uIFdlYWtTZXQoKXsgcmV0dXJuIGdldCh0aGlzLCBhcmd1bWVudHMubGVuZ3RoID4gMCA/IGFyZ3VtZW50c1swXSA6IHVuZGVmaW5lZCk7IH07XG59LCB7XG4gIC8vIDIzLjQuMy4xIFdlYWtTZXQucHJvdG90eXBlLmFkZCh2YWx1ZSlcbiAgYWRkOiBmdW5jdGlvbiBhZGQodmFsdWUpe1xuICAgIHJldHVybiB3ZWFrLmRlZih0aGlzLCB2YWx1ZSwgdHJ1ZSk7XG4gIH1cbn0sIHdlYWssIGZhbHNlLCB0cnVlKTsiLCIndXNlIHN0cmljdCc7XG4vLyBodHRwczovL2dpdGh1Yi5jb20vdGMzOS9BcnJheS5wcm90b3R5cGUuaW5jbHVkZXNcbnZhciAkZXhwb3J0ICAgPSByZXF1aXJlKCcuL19leHBvcnQnKVxuICAsICRpbmNsdWRlcyA9IHJlcXVpcmUoJy4vX2FycmF5LWluY2x1ZGVzJykodHJ1ZSk7XG5cbiRleHBvcnQoJGV4cG9ydC5QLCAnQXJyYXknLCB7XG4gIGluY2x1ZGVzOiBmdW5jdGlvbiBpbmNsdWRlcyhlbCAvKiwgZnJvbUluZGV4ID0gMCAqLyl7XG4gICAgcmV0dXJuICRpbmNsdWRlcyh0aGlzLCBlbCwgYXJndW1lbnRzLmxlbmd0aCA+IDEgPyBhcmd1bWVudHNbMV0gOiB1bmRlZmluZWQpO1xuICB9XG59KTtcblxucmVxdWlyZSgnLi9fYWRkLXRvLXVuc2NvcGFibGVzJykoJ2luY2x1ZGVzJyk7IiwiLy8gaHR0cHM6Ly9naXRodWIuY29tL2xqaGFyYi9wcm9wb3NhbC1pcy1lcnJvclxudmFyICRleHBvcnQgPSByZXF1aXJlKCcuL19leHBvcnQnKVxuICAsIGNvZiAgICAgPSByZXF1aXJlKCcuL19jb2YnKTtcblxuJGV4cG9ydCgkZXhwb3J0LlMsICdFcnJvcicsIHtcbiAgaXNFcnJvcjogZnVuY3Rpb24gaXNFcnJvcihpdCl7XG4gICAgcmV0dXJuIGNvZihpdCkgPT09ICdFcnJvcic7XG4gIH1cbn0pOyIsIi8vIGh0dHBzOi8vZ2l0aHViLmNvbS9EYXZpZEJydWFudC9NYXAtU2V0LnByb3RvdHlwZS50b0pTT05cbnZhciAkZXhwb3J0ICA9IHJlcXVpcmUoJy4vX2V4cG9ydCcpO1xuXG4kZXhwb3J0KCRleHBvcnQuUCArICRleHBvcnQuUiwgJ01hcCcsIHt0b0pTT046IHJlcXVpcmUoJy4vX2NvbGxlY3Rpb24tdG8tanNvbicpKCdNYXAnKX0pOyIsIi8vIGh0dHBzOi8vZ2lzdC5naXRodWIuY29tL0JyZW5kYW5FaWNoLzQyOTRkNWMyMTJhNmQyMjU0NzAzXG52YXIgJGV4cG9ydCA9IHJlcXVpcmUoJy4vX2V4cG9ydCcpO1xuXG4kZXhwb3J0KCRleHBvcnQuUywgJ01hdGgnLCB7XG4gIGlhZGRoOiBmdW5jdGlvbiBpYWRkaCh4MCwgeDEsIHkwLCB5MSl7XG4gICAgdmFyICR4MCA9IHgwID4+PiAwXG4gICAgICAsICR4MSA9IHgxID4+PiAwXG4gICAgICAsICR5MCA9IHkwID4+PiAwO1xuICAgIHJldHVybiAkeDEgKyAoeTEgPj4+IDApICsgKCgkeDAgJiAkeTAgfCAoJHgwIHwgJHkwKSAmIH4oJHgwICsgJHkwID4+PiAwKSkgPj4+IDMxKSB8IDA7XG4gIH1cbn0pOyIsIi8vIGh0dHBzOi8vZ2lzdC5naXRodWIuY29tL0JyZW5kYW5FaWNoLzQyOTRkNWMyMTJhNmQyMjU0NzAzXG52YXIgJGV4cG9ydCA9IHJlcXVpcmUoJy4vX2V4cG9ydCcpO1xuXG4kZXhwb3J0KCRleHBvcnQuUywgJ01hdGgnLCB7XG4gIGltdWxoOiBmdW5jdGlvbiBpbXVsaCh1LCB2KXtcbiAgICB2YXIgVUlOVDE2ID0gMHhmZmZmXG4gICAgICAsICR1ID0gK3VcbiAgICAgICwgJHYgPSArdlxuICAgICAgLCB1MCA9ICR1ICYgVUlOVDE2XG4gICAgICAsIHYwID0gJHYgJiBVSU5UMTZcbiAgICAgICwgdTEgPSAkdSA+PiAxNlxuICAgICAgLCB2MSA9ICR2ID4+IDE2XG4gICAgICAsIHQgID0gKHUxICogdjAgPj4+IDApICsgKHUwICogdjAgPj4+IDE2KTtcbiAgICByZXR1cm4gdTEgKiB2MSArICh0ID4+IDE2KSArICgodTAgKiB2MSA+Pj4gMCkgKyAodCAmIFVJTlQxNikgPj4gMTYpO1xuICB9XG59KTsiLCIvLyBodHRwczovL2dpc3QuZ2l0aHViLmNvbS9CcmVuZGFuRWljaC80Mjk0ZDVjMjEyYTZkMjI1NDcwM1xudmFyICRleHBvcnQgPSByZXF1aXJlKCcuL19leHBvcnQnKTtcblxuJGV4cG9ydCgkZXhwb3J0LlMsICdNYXRoJywge1xuICBpc3ViaDogZnVuY3Rpb24gaXN1YmgoeDAsIHgxLCB5MCwgeTEpe1xuICAgIHZhciAkeDAgPSB4MCA+Pj4gMFxuICAgICAgLCAkeDEgPSB4MSA+Pj4gMFxuICAgICAgLCAkeTAgPSB5MCA+Pj4gMDtcbiAgICByZXR1cm4gJHgxIC0gKHkxID4+PiAwKSAtICgofiR4MCAmICR5MCB8IH4oJHgwIF4gJHkwKSAmICR4MCAtICR5MCA+Pj4gMCkgPj4+IDMxKSB8IDA7XG4gIH1cbn0pOyIsIi8vIGh0dHBzOi8vZ2lzdC5naXRodWIuY29tL0JyZW5kYW5FaWNoLzQyOTRkNWMyMTJhNmQyMjU0NzAzXG52YXIgJGV4cG9ydCA9IHJlcXVpcmUoJy4vX2V4cG9ydCcpO1xuXG4kZXhwb3J0KCRleHBvcnQuUywgJ01hdGgnLCB7XG4gIHVtdWxoOiBmdW5jdGlvbiB1bXVsaCh1LCB2KXtcbiAgICB2YXIgVUlOVDE2ID0gMHhmZmZmXG4gICAgICAsICR1ID0gK3VcbiAgICAgICwgJHYgPSArdlxuICAgICAgLCB1MCA9ICR1ICYgVUlOVDE2XG4gICAgICAsIHYwID0gJHYgJiBVSU5UMTZcbiAgICAgICwgdTEgPSAkdSA+Pj4gMTZcbiAgICAgICwgdjEgPSAkdiA+Pj4gMTZcbiAgICAgICwgdCAgPSAodTEgKiB2MCA+Pj4gMCkgKyAodTAgKiB2MCA+Pj4gMTYpO1xuICAgIHJldHVybiB1MSAqIHYxICsgKHQgPj4+IDE2KSArICgodTAgKiB2MSA+Pj4gMCkgKyAodCAmIFVJTlQxNikgPj4+IDE2KTtcbiAgfVxufSk7IiwiJ3VzZSBzdHJpY3QnO1xyXG52YXIgJGV4cG9ydCAgICAgICAgID0gcmVxdWlyZSgnLi9fZXhwb3J0JylcclxuICAsIHRvT2JqZWN0ICAgICAgICA9IHJlcXVpcmUoJy4vX3RvLW9iamVjdCcpXHJcbiAgLCBhRnVuY3Rpb24gICAgICAgPSByZXF1aXJlKCcuL19hLWZ1bmN0aW9uJylcclxuICAsICRkZWZpbmVQcm9wZXJ0eSA9IHJlcXVpcmUoJy4vX29iamVjdC1kcCcpO1xyXG5cclxuLy8gQi4yLjIuMiBPYmplY3QucHJvdG90eXBlLl9fZGVmaW5lR2V0dGVyX18oUCwgZ2V0dGVyKVxyXG5yZXF1aXJlKCcuL19kZXNjcmlwdG9ycycpICYmICRleHBvcnQoJGV4cG9ydC5QICsgcmVxdWlyZSgnLi9fb2JqZWN0LWZvcmNlZC1wYW0nKSwgJ09iamVjdCcsIHtcclxuICBfX2RlZmluZUdldHRlcl9fOiBmdW5jdGlvbiBfX2RlZmluZUdldHRlcl9fKFAsIGdldHRlcil7XHJcbiAgICAkZGVmaW5lUHJvcGVydHkuZih0b09iamVjdCh0aGlzKSwgUCwge2dldDogYUZ1bmN0aW9uKGdldHRlciksIGVudW1lcmFibGU6IHRydWUsIGNvbmZpZ3VyYWJsZTogdHJ1ZX0pO1xyXG4gIH1cclxufSk7IiwiJ3VzZSBzdHJpY3QnO1xyXG52YXIgJGV4cG9ydCAgICAgICAgID0gcmVxdWlyZSgnLi9fZXhwb3J0JylcclxuICAsIHRvT2JqZWN0ICAgICAgICA9IHJlcXVpcmUoJy4vX3RvLW9iamVjdCcpXHJcbiAgLCBhRnVuY3Rpb24gICAgICAgPSByZXF1aXJlKCcuL19hLWZ1bmN0aW9uJylcclxuICAsICRkZWZpbmVQcm9wZXJ0eSA9IHJlcXVpcmUoJy4vX29iamVjdC1kcCcpO1xyXG5cclxuLy8gQi4yLjIuMyBPYmplY3QucHJvdG90eXBlLl9fZGVmaW5lU2V0dGVyX18oUCwgc2V0dGVyKVxyXG5yZXF1aXJlKCcuL19kZXNjcmlwdG9ycycpICYmICRleHBvcnQoJGV4cG9ydC5QICsgcmVxdWlyZSgnLi9fb2JqZWN0LWZvcmNlZC1wYW0nKSwgJ09iamVjdCcsIHtcclxuICBfX2RlZmluZVNldHRlcl9fOiBmdW5jdGlvbiBfX2RlZmluZVNldHRlcl9fKFAsIHNldHRlcil7XHJcbiAgICAkZGVmaW5lUHJvcGVydHkuZih0b09iamVjdCh0aGlzKSwgUCwge3NldDogYUZ1bmN0aW9uKHNldHRlciksIGVudW1lcmFibGU6IHRydWUsIGNvbmZpZ3VyYWJsZTogdHJ1ZX0pO1xyXG4gIH1cclxufSk7IiwiLy8gaHR0cHM6Ly9naXRodWIuY29tL3RjMzkvcHJvcG9zYWwtb2JqZWN0LXZhbHVlcy1lbnRyaWVzXG52YXIgJGV4cG9ydCAgPSByZXF1aXJlKCcuL19leHBvcnQnKVxuICAsICRlbnRyaWVzID0gcmVxdWlyZSgnLi9fb2JqZWN0LXRvLWFycmF5JykodHJ1ZSk7XG5cbiRleHBvcnQoJGV4cG9ydC5TLCAnT2JqZWN0Jywge1xuICBlbnRyaWVzOiBmdW5jdGlvbiBlbnRyaWVzKGl0KXtcbiAgICByZXR1cm4gJGVudHJpZXMoaXQpO1xuICB9XG59KTsiLCIvLyBodHRwczovL2dpdGh1Yi5jb20vdGMzOS9wcm9wb3NhbC1vYmplY3QtZ2V0b3ducHJvcGVydHlkZXNjcmlwdG9yc1xudmFyICRleHBvcnQgICAgPSByZXF1aXJlKCcuL19leHBvcnQnKVxuICAsIG93bktleXMgICAgPSByZXF1aXJlKCcuL19vd24ta2V5cycpXG4gICwgdG9JT2JqZWN0ICA9IHJlcXVpcmUoJy4vX3RvLWlvYmplY3QnKVxuICAsIGNyZWF0ZURlc2MgPSByZXF1aXJlKCcuL19wcm9wZXJ0eS1kZXNjJylcbiAgLCBnT1BEICAgICAgID0gcmVxdWlyZSgnLi9fb2JqZWN0LWdvcGQnKVxuICAsIGRQICAgICAgICAgPSByZXF1aXJlKCcuL19vYmplY3QtZHAnKTtcblxuJGV4cG9ydCgkZXhwb3J0LlMsICdPYmplY3QnLCB7XG4gIGdldE93blByb3BlcnR5RGVzY3JpcHRvcnM6IGZ1bmN0aW9uIGdldE93blByb3BlcnR5RGVzY3JpcHRvcnMob2JqZWN0KXtcbiAgICB2YXIgTyAgICAgICA9IHRvSU9iamVjdChvYmplY3QpXG4gICAgICAsIGdldERlc2MgPSBnT1BELmZcbiAgICAgICwga2V5cyAgICA9IG93bktleXMoTylcbiAgICAgICwgcmVzdWx0ICA9IHt9XG4gICAgICAsIGkgICAgICAgPSAwXG4gICAgICAsIGtleSwgRDtcbiAgICB3aGlsZShrZXlzLmxlbmd0aCA+IGkpe1xuICAgICAgRCA9IGdldERlc2MoTywga2V5ID0ga2V5c1tpKytdKTtcbiAgICAgIGlmKGtleSBpbiByZXN1bHQpZFAuZihyZXN1bHQsIGtleSwgY3JlYXRlRGVzYygwLCBEKSk7XG4gICAgICBlbHNlIHJlc3VsdFtrZXldID0gRDtcbiAgICB9IHJldHVybiByZXN1bHQ7XG4gIH1cbn0pOyIsIid1c2Ugc3RyaWN0JztcclxudmFyICRleHBvcnQgICAgICAgICAgICAgICAgICA9IHJlcXVpcmUoJy4vX2V4cG9ydCcpXHJcbiAgLCB0b09iamVjdCAgICAgICAgICAgICAgICAgPSByZXF1aXJlKCcuL190by1vYmplY3QnKVxyXG4gICwgdG9QcmltaXRpdmUgICAgICAgICAgICAgID0gcmVxdWlyZSgnLi9fdG8tcHJpbWl0aXZlJylcclxuICAsIGdldFByb3RvdHlwZU9mICAgICAgICAgICA9IHJlcXVpcmUoJy4vX29iamVjdC1ncG8nKVxyXG4gICwgZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yID0gcmVxdWlyZSgnLi9fb2JqZWN0LWdvcGQnKS5mO1xyXG5cclxuLy8gQi4yLjIuNCBPYmplY3QucHJvdG90eXBlLl9fbG9va3VwR2V0dGVyX18oUClcclxucmVxdWlyZSgnLi9fZGVzY3JpcHRvcnMnKSAmJiAkZXhwb3J0KCRleHBvcnQuUCArIHJlcXVpcmUoJy4vX29iamVjdC1mb3JjZWQtcGFtJyksICdPYmplY3QnLCB7XHJcbiAgX19sb29rdXBHZXR0ZXJfXzogZnVuY3Rpb24gX19sb29rdXBHZXR0ZXJfXyhQKXtcclxuICAgIHZhciBPID0gdG9PYmplY3QodGhpcylcclxuICAgICAgLCBLID0gdG9QcmltaXRpdmUoUCwgdHJ1ZSlcclxuICAgICAgLCBEO1xyXG4gICAgZG8ge1xyXG4gICAgICBpZihEID0gZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yKE8sIEspKXJldHVybiBELmdldDtcclxuICAgIH0gd2hpbGUoTyA9IGdldFByb3RvdHlwZU9mKE8pKTtcclxuICB9XHJcbn0pOyIsIid1c2Ugc3RyaWN0JztcclxudmFyICRleHBvcnQgICAgICAgICAgICAgICAgICA9IHJlcXVpcmUoJy4vX2V4cG9ydCcpXHJcbiAgLCB0b09iamVjdCAgICAgICAgICAgICAgICAgPSByZXF1aXJlKCcuL190by1vYmplY3QnKVxyXG4gICwgdG9QcmltaXRpdmUgICAgICAgICAgICAgID0gcmVxdWlyZSgnLi9fdG8tcHJpbWl0aXZlJylcclxuICAsIGdldFByb3RvdHlwZU9mICAgICAgICAgICA9IHJlcXVpcmUoJy4vX29iamVjdC1ncG8nKVxyXG4gICwgZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yID0gcmVxdWlyZSgnLi9fb2JqZWN0LWdvcGQnKS5mO1xyXG5cclxuLy8gQi4yLjIuNSBPYmplY3QucHJvdG90eXBlLl9fbG9va3VwU2V0dGVyX18oUClcclxucmVxdWlyZSgnLi9fZGVzY3JpcHRvcnMnKSAmJiAkZXhwb3J0KCRleHBvcnQuUCArIHJlcXVpcmUoJy4vX29iamVjdC1mb3JjZWQtcGFtJyksICdPYmplY3QnLCB7XHJcbiAgX19sb29rdXBTZXR0ZXJfXzogZnVuY3Rpb24gX19sb29rdXBTZXR0ZXJfXyhQKXtcclxuICAgIHZhciBPID0gdG9PYmplY3QodGhpcylcclxuICAgICAgLCBLID0gdG9QcmltaXRpdmUoUCwgdHJ1ZSlcclxuICAgICAgLCBEO1xyXG4gICAgZG8ge1xyXG4gICAgICBpZihEID0gZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yKE8sIEspKXJldHVybiBELnNldDtcclxuICAgIH0gd2hpbGUoTyA9IGdldFByb3RvdHlwZU9mKE8pKTtcclxuICB9XHJcbn0pOyIsIi8vIGh0dHBzOi8vZ2l0aHViLmNvbS90YzM5L3Byb3Bvc2FsLW9iamVjdC12YWx1ZXMtZW50cmllc1xudmFyICRleHBvcnQgPSByZXF1aXJlKCcuL19leHBvcnQnKVxuICAsICR2YWx1ZXMgPSByZXF1aXJlKCcuL19vYmplY3QtdG8tYXJyYXknKShmYWxzZSk7XG5cbiRleHBvcnQoJGV4cG9ydC5TLCAnT2JqZWN0Jywge1xuICB2YWx1ZXM6IGZ1bmN0aW9uIHZhbHVlcyhpdCl7XG4gICAgcmV0dXJuICR2YWx1ZXMoaXQpO1xuICB9XG59KTsiLCJ2YXIgbWV0YWRhdGEgICAgICAgICAgICAgICAgICA9IHJlcXVpcmUoJy4vX21ldGFkYXRhJylcbiAgLCBhbk9iamVjdCAgICAgICAgICAgICAgICAgID0gcmVxdWlyZSgnLi9fYW4tb2JqZWN0JylcbiAgLCB0b01ldGFLZXkgICAgICAgICAgICAgICAgID0gbWV0YWRhdGEua2V5XG4gICwgb3JkaW5hcnlEZWZpbmVPd25NZXRhZGF0YSA9IG1ldGFkYXRhLnNldDtcblxubWV0YWRhdGEuZXhwKHtkZWZpbmVNZXRhZGF0YTogZnVuY3Rpb24gZGVmaW5lTWV0YWRhdGEobWV0YWRhdGFLZXksIG1ldGFkYXRhVmFsdWUsIHRhcmdldCwgdGFyZ2V0S2V5KXtcbiAgb3JkaW5hcnlEZWZpbmVPd25NZXRhZGF0YShtZXRhZGF0YUtleSwgbWV0YWRhdGFWYWx1ZSwgYW5PYmplY3QodGFyZ2V0KSwgdG9NZXRhS2V5KHRhcmdldEtleSkpO1xufX0pOyIsInZhciBtZXRhZGF0YSAgICAgICAgICAgICAgID0gcmVxdWlyZSgnLi9fbWV0YWRhdGEnKVxuICAsIGFuT2JqZWN0ICAgICAgICAgICAgICAgPSByZXF1aXJlKCcuL19hbi1vYmplY3QnKVxuICAsIHRvTWV0YUtleSAgICAgICAgICAgICAgPSBtZXRhZGF0YS5rZXlcbiAgLCBnZXRPckNyZWF0ZU1ldGFkYXRhTWFwID0gbWV0YWRhdGEubWFwXG4gICwgc3RvcmUgICAgICAgICAgICAgICAgICA9IG1ldGFkYXRhLnN0b3JlO1xuXG5tZXRhZGF0YS5leHAoe2RlbGV0ZU1ldGFkYXRhOiBmdW5jdGlvbiBkZWxldGVNZXRhZGF0YShtZXRhZGF0YUtleSwgdGFyZ2V0IC8qLCB0YXJnZXRLZXkgKi8pe1xuICB2YXIgdGFyZ2V0S2V5ICAgPSBhcmd1bWVudHMubGVuZ3RoIDwgMyA/IHVuZGVmaW5lZCA6IHRvTWV0YUtleShhcmd1bWVudHNbMl0pXG4gICAgLCBtZXRhZGF0YU1hcCA9IGdldE9yQ3JlYXRlTWV0YWRhdGFNYXAoYW5PYmplY3QodGFyZ2V0KSwgdGFyZ2V0S2V5LCBmYWxzZSk7XG4gIGlmKG1ldGFkYXRhTWFwID09PSB1bmRlZmluZWQgfHwgIW1ldGFkYXRhTWFwWydkZWxldGUnXShtZXRhZGF0YUtleSkpcmV0dXJuIGZhbHNlO1xuICBpZihtZXRhZGF0YU1hcC5zaXplKXJldHVybiB0cnVlO1xuICB2YXIgdGFyZ2V0TWV0YWRhdGEgPSBzdG9yZS5nZXQodGFyZ2V0KTtcbiAgdGFyZ2V0TWV0YWRhdGFbJ2RlbGV0ZSddKHRhcmdldEtleSk7XG4gIHJldHVybiAhIXRhcmdldE1ldGFkYXRhLnNpemUgfHwgc3RvcmVbJ2RlbGV0ZSddKHRhcmdldCk7XG59fSk7IiwidmFyIFNldCAgICAgICAgICAgICAgICAgICAgID0gcmVxdWlyZSgnLi9lczYuc2V0JylcbiAgLCBmcm9tICAgICAgICAgICAgICAgICAgICA9IHJlcXVpcmUoJy4vX2FycmF5LWZyb20taXRlcmFibGUnKVxuICAsIG1ldGFkYXRhICAgICAgICAgICAgICAgID0gcmVxdWlyZSgnLi9fbWV0YWRhdGEnKVxuICAsIGFuT2JqZWN0ICAgICAgICAgICAgICAgID0gcmVxdWlyZSgnLi9fYW4tb2JqZWN0JylcbiAgLCBnZXRQcm90b3R5cGVPZiAgICAgICAgICA9IHJlcXVpcmUoJy4vX29iamVjdC1ncG8nKVxuICAsIG9yZGluYXJ5T3duTWV0YWRhdGFLZXlzID0gbWV0YWRhdGEua2V5c1xuICAsIHRvTWV0YUtleSAgICAgICAgICAgICAgID0gbWV0YWRhdGEua2V5O1xuXG52YXIgb3JkaW5hcnlNZXRhZGF0YUtleXMgPSBmdW5jdGlvbihPLCBQKXtcbiAgdmFyIG9LZXlzICA9IG9yZGluYXJ5T3duTWV0YWRhdGFLZXlzKE8sIFApXG4gICAgLCBwYXJlbnQgPSBnZXRQcm90b3R5cGVPZihPKTtcbiAgaWYocGFyZW50ID09PSBudWxsKXJldHVybiBvS2V5cztcbiAgdmFyIHBLZXlzICA9IG9yZGluYXJ5TWV0YWRhdGFLZXlzKHBhcmVudCwgUCk7XG4gIHJldHVybiBwS2V5cy5sZW5ndGggPyBvS2V5cy5sZW5ndGggPyBmcm9tKG5ldyBTZXQob0tleXMuY29uY2F0KHBLZXlzKSkpIDogcEtleXMgOiBvS2V5cztcbn07XG5cbm1ldGFkYXRhLmV4cCh7Z2V0TWV0YWRhdGFLZXlzOiBmdW5jdGlvbiBnZXRNZXRhZGF0YUtleXModGFyZ2V0IC8qLCB0YXJnZXRLZXkgKi8pe1xuICByZXR1cm4gb3JkaW5hcnlNZXRhZGF0YUtleXMoYW5PYmplY3QodGFyZ2V0KSwgYXJndW1lbnRzLmxlbmd0aCA8IDIgPyB1bmRlZmluZWQgOiB0b01ldGFLZXkoYXJndW1lbnRzWzFdKSk7XG59fSk7IiwidmFyIG1ldGFkYXRhICAgICAgICAgICAgICAgPSByZXF1aXJlKCcuL19tZXRhZGF0YScpXG4gICwgYW5PYmplY3QgICAgICAgICAgICAgICA9IHJlcXVpcmUoJy4vX2FuLW9iamVjdCcpXG4gICwgZ2V0UHJvdG90eXBlT2YgICAgICAgICA9IHJlcXVpcmUoJy4vX29iamVjdC1ncG8nKVxuICAsIG9yZGluYXJ5SGFzT3duTWV0YWRhdGEgPSBtZXRhZGF0YS5oYXNcbiAgLCBvcmRpbmFyeUdldE93bk1ldGFkYXRhID0gbWV0YWRhdGEuZ2V0XG4gICwgdG9NZXRhS2V5ICAgICAgICAgICAgICA9IG1ldGFkYXRhLmtleTtcblxudmFyIG9yZGluYXJ5R2V0TWV0YWRhdGEgPSBmdW5jdGlvbihNZXRhZGF0YUtleSwgTywgUCl7XG4gIHZhciBoYXNPd24gPSBvcmRpbmFyeUhhc093bk1ldGFkYXRhKE1ldGFkYXRhS2V5LCBPLCBQKTtcbiAgaWYoaGFzT3duKXJldHVybiBvcmRpbmFyeUdldE93bk1ldGFkYXRhKE1ldGFkYXRhS2V5LCBPLCBQKTtcbiAgdmFyIHBhcmVudCA9IGdldFByb3RvdHlwZU9mKE8pO1xuICByZXR1cm4gcGFyZW50ICE9PSBudWxsID8gb3JkaW5hcnlHZXRNZXRhZGF0YShNZXRhZGF0YUtleSwgcGFyZW50LCBQKSA6IHVuZGVmaW5lZDtcbn07XG5cbm1ldGFkYXRhLmV4cCh7Z2V0TWV0YWRhdGE6IGZ1bmN0aW9uIGdldE1ldGFkYXRhKG1ldGFkYXRhS2V5LCB0YXJnZXQgLyosIHRhcmdldEtleSAqLyl7XG4gIHJldHVybiBvcmRpbmFyeUdldE1ldGFkYXRhKG1ldGFkYXRhS2V5LCBhbk9iamVjdCh0YXJnZXQpLCBhcmd1bWVudHMubGVuZ3RoIDwgMyA/IHVuZGVmaW5lZCA6IHRvTWV0YUtleShhcmd1bWVudHNbMl0pKTtcbn19KTsiLCJ2YXIgbWV0YWRhdGEgICAgICAgICAgICAgICAgPSByZXF1aXJlKCcuL19tZXRhZGF0YScpXG4gICwgYW5PYmplY3QgICAgICAgICAgICAgICAgPSByZXF1aXJlKCcuL19hbi1vYmplY3QnKVxuICAsIG9yZGluYXJ5T3duTWV0YWRhdGFLZXlzID0gbWV0YWRhdGEua2V5c1xuICAsIHRvTWV0YUtleSAgICAgICAgICAgICAgID0gbWV0YWRhdGEua2V5O1xuXG5tZXRhZGF0YS5leHAoe2dldE93bk1ldGFkYXRhS2V5czogZnVuY3Rpb24gZ2V0T3duTWV0YWRhdGFLZXlzKHRhcmdldCAvKiwgdGFyZ2V0S2V5ICovKXtcbiAgcmV0dXJuIG9yZGluYXJ5T3duTWV0YWRhdGFLZXlzKGFuT2JqZWN0KHRhcmdldCksIGFyZ3VtZW50cy5sZW5ndGggPCAyID8gdW5kZWZpbmVkIDogdG9NZXRhS2V5KGFyZ3VtZW50c1sxXSkpO1xufX0pOyIsInZhciBtZXRhZGF0YSAgICAgICAgICAgICAgID0gcmVxdWlyZSgnLi9fbWV0YWRhdGEnKVxuICAsIGFuT2JqZWN0ICAgICAgICAgICAgICAgPSByZXF1aXJlKCcuL19hbi1vYmplY3QnKVxuICAsIG9yZGluYXJ5R2V0T3duTWV0YWRhdGEgPSBtZXRhZGF0YS5nZXRcbiAgLCB0b01ldGFLZXkgICAgICAgICAgICAgID0gbWV0YWRhdGEua2V5O1xuXG5tZXRhZGF0YS5leHAoe2dldE93bk1ldGFkYXRhOiBmdW5jdGlvbiBnZXRPd25NZXRhZGF0YShtZXRhZGF0YUtleSwgdGFyZ2V0IC8qLCB0YXJnZXRLZXkgKi8pe1xuICByZXR1cm4gb3JkaW5hcnlHZXRPd25NZXRhZGF0YShtZXRhZGF0YUtleSwgYW5PYmplY3QodGFyZ2V0KVxuICAgICwgYXJndW1lbnRzLmxlbmd0aCA8IDMgPyB1bmRlZmluZWQgOiB0b01ldGFLZXkoYXJndW1lbnRzWzJdKSk7XG59fSk7IiwidmFyIG1ldGFkYXRhICAgICAgICAgICAgICAgPSByZXF1aXJlKCcuL19tZXRhZGF0YScpXG4gICwgYW5PYmplY3QgICAgICAgICAgICAgICA9IHJlcXVpcmUoJy4vX2FuLW9iamVjdCcpXG4gICwgZ2V0UHJvdG90eXBlT2YgICAgICAgICA9IHJlcXVpcmUoJy4vX29iamVjdC1ncG8nKVxuICAsIG9yZGluYXJ5SGFzT3duTWV0YWRhdGEgPSBtZXRhZGF0YS5oYXNcbiAgLCB0b01ldGFLZXkgICAgICAgICAgICAgID0gbWV0YWRhdGEua2V5O1xuXG52YXIgb3JkaW5hcnlIYXNNZXRhZGF0YSA9IGZ1bmN0aW9uKE1ldGFkYXRhS2V5LCBPLCBQKXtcbiAgdmFyIGhhc093biA9IG9yZGluYXJ5SGFzT3duTWV0YWRhdGEoTWV0YWRhdGFLZXksIE8sIFApO1xuICBpZihoYXNPd24pcmV0dXJuIHRydWU7XG4gIHZhciBwYXJlbnQgPSBnZXRQcm90b3R5cGVPZihPKTtcbiAgcmV0dXJuIHBhcmVudCAhPT0gbnVsbCA/IG9yZGluYXJ5SGFzTWV0YWRhdGEoTWV0YWRhdGFLZXksIHBhcmVudCwgUCkgOiBmYWxzZTtcbn07XG5cbm1ldGFkYXRhLmV4cCh7aGFzTWV0YWRhdGE6IGZ1bmN0aW9uIGhhc01ldGFkYXRhKG1ldGFkYXRhS2V5LCB0YXJnZXQgLyosIHRhcmdldEtleSAqLyl7XG4gIHJldHVybiBvcmRpbmFyeUhhc01ldGFkYXRhKG1ldGFkYXRhS2V5LCBhbk9iamVjdCh0YXJnZXQpLCBhcmd1bWVudHMubGVuZ3RoIDwgMyA/IHVuZGVmaW5lZCA6IHRvTWV0YUtleShhcmd1bWVudHNbMl0pKTtcbn19KTsiLCJ2YXIgbWV0YWRhdGEgICAgICAgICAgICAgICA9IHJlcXVpcmUoJy4vX21ldGFkYXRhJylcbiAgLCBhbk9iamVjdCAgICAgICAgICAgICAgID0gcmVxdWlyZSgnLi9fYW4tb2JqZWN0JylcbiAgLCBvcmRpbmFyeUhhc093bk1ldGFkYXRhID0gbWV0YWRhdGEuaGFzXG4gICwgdG9NZXRhS2V5ICAgICAgICAgICAgICA9IG1ldGFkYXRhLmtleTtcblxubWV0YWRhdGEuZXhwKHtoYXNPd25NZXRhZGF0YTogZnVuY3Rpb24gaGFzT3duTWV0YWRhdGEobWV0YWRhdGFLZXksIHRhcmdldCAvKiwgdGFyZ2V0S2V5ICovKXtcbiAgcmV0dXJuIG9yZGluYXJ5SGFzT3duTWV0YWRhdGEobWV0YWRhdGFLZXksIGFuT2JqZWN0KHRhcmdldClcbiAgICAsIGFyZ3VtZW50cy5sZW5ndGggPCAzID8gdW5kZWZpbmVkIDogdG9NZXRhS2V5KGFyZ3VtZW50c1syXSkpO1xufX0pOyIsInZhciBtZXRhZGF0YSAgICAgICAgICAgICAgICAgID0gcmVxdWlyZSgnLi9fbWV0YWRhdGEnKVxuICAsIGFuT2JqZWN0ICAgICAgICAgICAgICAgICAgPSByZXF1aXJlKCcuL19hbi1vYmplY3QnKVxuICAsIGFGdW5jdGlvbiAgICAgICAgICAgICAgICAgPSByZXF1aXJlKCcuL19hLWZ1bmN0aW9uJylcbiAgLCB0b01ldGFLZXkgICAgICAgICAgICAgICAgID0gbWV0YWRhdGEua2V5XG4gICwgb3JkaW5hcnlEZWZpbmVPd25NZXRhZGF0YSA9IG1ldGFkYXRhLnNldDtcblxubWV0YWRhdGEuZXhwKHttZXRhZGF0YTogZnVuY3Rpb24gbWV0YWRhdGEobWV0YWRhdGFLZXksIG1ldGFkYXRhVmFsdWUpe1xuICByZXR1cm4gZnVuY3Rpb24gZGVjb3JhdG9yKHRhcmdldCwgdGFyZ2V0S2V5KXtcbiAgICBvcmRpbmFyeURlZmluZU93bk1ldGFkYXRhKFxuICAgICAgbWV0YWRhdGFLZXksIG1ldGFkYXRhVmFsdWUsXG4gICAgICAodGFyZ2V0S2V5ICE9PSB1bmRlZmluZWQgPyBhbk9iamVjdCA6IGFGdW5jdGlvbikodGFyZ2V0KSxcbiAgICAgIHRvTWV0YUtleSh0YXJnZXRLZXkpXG4gICAgKTtcbiAgfTtcbn19KTsiLCIvLyBodHRwczovL2dpdGh1Yi5jb20vRGF2aWRCcnVhbnQvTWFwLVNldC5wcm90b3R5cGUudG9KU09OXG52YXIgJGV4cG9ydCAgPSByZXF1aXJlKCcuL19leHBvcnQnKTtcblxuJGV4cG9ydCgkZXhwb3J0LlAgKyAkZXhwb3J0LlIsICdTZXQnLCB7dG9KU09OOiByZXF1aXJlKCcuL19jb2xsZWN0aW9uLXRvLWpzb24nKSgnU2V0Jyl9KTsiLCIndXNlIHN0cmljdCc7XG4vLyBodHRwczovL2dpdGh1Yi5jb20vbWF0aGlhc2J5bmVucy9TdHJpbmcucHJvdG90eXBlLmF0XG52YXIgJGV4cG9ydCA9IHJlcXVpcmUoJy4vX2V4cG9ydCcpXG4gICwgJGF0ICAgICA9IHJlcXVpcmUoJy4vX3N0cmluZy1hdCcpKHRydWUpO1xuXG4kZXhwb3J0KCRleHBvcnQuUCwgJ1N0cmluZycsIHtcbiAgYXQ6IGZ1bmN0aW9uIGF0KHBvcyl7XG4gICAgcmV0dXJuICRhdCh0aGlzLCBwb3MpO1xuICB9XG59KTsiLCIndXNlIHN0cmljdCc7XHJcbi8vIGh0dHBzOi8vdGMzOS5naXRodWIuaW8vU3RyaW5nLnByb3RvdHlwZS5tYXRjaEFsbC9cclxudmFyICRleHBvcnQgICAgID0gcmVxdWlyZSgnLi9fZXhwb3J0JylcclxuICAsIGRlZmluZWQgICAgID0gcmVxdWlyZSgnLi9fZGVmaW5lZCcpXHJcbiAgLCB0b0xlbmd0aCAgICA9IHJlcXVpcmUoJy4vX3RvLWxlbmd0aCcpXHJcbiAgLCBpc1JlZ0V4cCAgICA9IHJlcXVpcmUoJy4vX2lzLXJlZ2V4cCcpXHJcbiAgLCBnZXRGbGFncyAgICA9IHJlcXVpcmUoJy4vX2ZsYWdzJylcclxuICAsIFJlZ0V4cFByb3RvID0gUmVnRXhwLnByb3RvdHlwZTtcclxuXHJcbnZhciAkUmVnRXhwU3RyaW5nSXRlcmF0b3IgPSBmdW5jdGlvbihyZWdleHAsIHN0cmluZyl7XHJcbiAgdGhpcy5fciA9IHJlZ2V4cDtcclxuICB0aGlzLl9zID0gc3RyaW5nO1xyXG59O1xyXG5cclxucmVxdWlyZSgnLi9faXRlci1jcmVhdGUnKSgkUmVnRXhwU3RyaW5nSXRlcmF0b3IsICdSZWdFeHAgU3RyaW5nJywgZnVuY3Rpb24gbmV4dCgpe1xyXG4gIHZhciBtYXRjaCA9IHRoaXMuX3IuZXhlYyh0aGlzLl9zKTtcclxuICByZXR1cm4ge3ZhbHVlOiBtYXRjaCwgZG9uZTogbWF0Y2ggPT09IG51bGx9O1xyXG59KTtcclxuXHJcbiRleHBvcnQoJGV4cG9ydC5QLCAnU3RyaW5nJywge1xyXG4gIG1hdGNoQWxsOiBmdW5jdGlvbiBtYXRjaEFsbChyZWdleHApe1xyXG4gICAgZGVmaW5lZCh0aGlzKTtcclxuICAgIGlmKCFpc1JlZ0V4cChyZWdleHApKXRocm93IFR5cGVFcnJvcihyZWdleHAgKyAnIGlzIG5vdCBhIHJlZ2V4cCEnKTtcclxuICAgIHZhciBTICAgICA9IFN0cmluZyh0aGlzKVxyXG4gICAgICAsIGZsYWdzID0gJ2ZsYWdzJyBpbiBSZWdFeHBQcm90byA/IFN0cmluZyhyZWdleHAuZmxhZ3MpIDogZ2V0RmxhZ3MuY2FsbChyZWdleHApXHJcbiAgICAgICwgcnggICAgPSBuZXcgUmVnRXhwKHJlZ2V4cC5zb3VyY2UsIH5mbGFncy5pbmRleE9mKCdnJykgPyBmbGFncyA6ICdnJyArIGZsYWdzKTtcclxuICAgIHJ4Lmxhc3RJbmRleCA9IHRvTGVuZ3RoKHJlZ2V4cC5sYXN0SW5kZXgpO1xyXG4gICAgcmV0dXJuIG5ldyAkUmVnRXhwU3RyaW5nSXRlcmF0b3IocngsIFMpO1xyXG4gIH1cclxufSk7IiwiJ3VzZSBzdHJpY3QnO1xuLy8gaHR0cHM6Ly9naXRodWIuY29tL3RjMzkvcHJvcG9zYWwtc3RyaW5nLXBhZC1zdGFydC1lbmRcbnZhciAkZXhwb3J0ID0gcmVxdWlyZSgnLi9fZXhwb3J0JylcbiAgLCAkcGFkICAgID0gcmVxdWlyZSgnLi9fc3RyaW5nLXBhZCcpO1xuXG4kZXhwb3J0KCRleHBvcnQuUCwgJ1N0cmluZycsIHtcbiAgcGFkRW5kOiBmdW5jdGlvbiBwYWRFbmQobWF4TGVuZ3RoIC8qLCBmaWxsU3RyaW5nID0gJyAnICovKXtcbiAgICByZXR1cm4gJHBhZCh0aGlzLCBtYXhMZW5ndGgsIGFyZ3VtZW50cy5sZW5ndGggPiAxID8gYXJndW1lbnRzWzFdIDogdW5kZWZpbmVkLCBmYWxzZSk7XG4gIH1cbn0pOyIsIid1c2Ugc3RyaWN0Jztcbi8vIGh0dHBzOi8vZ2l0aHViLmNvbS90YzM5L3Byb3Bvc2FsLXN0cmluZy1wYWQtc3RhcnQtZW5kXG52YXIgJGV4cG9ydCA9IHJlcXVpcmUoJy4vX2V4cG9ydCcpXG4gICwgJHBhZCAgICA9IHJlcXVpcmUoJy4vX3N0cmluZy1wYWQnKTtcblxuJGV4cG9ydCgkZXhwb3J0LlAsICdTdHJpbmcnLCB7XG4gIHBhZFN0YXJ0OiBmdW5jdGlvbiBwYWRTdGFydChtYXhMZW5ndGggLyosIGZpbGxTdHJpbmcgPSAnICcgKi8pe1xuICAgIHJldHVybiAkcGFkKHRoaXMsIG1heExlbmd0aCwgYXJndW1lbnRzLmxlbmd0aCA+IDEgPyBhcmd1bWVudHNbMV0gOiB1bmRlZmluZWQsIHRydWUpO1xuICB9XG59KTsiLCIndXNlIHN0cmljdCc7XG4vLyBodHRwczovL2dpdGh1Yi5jb20vc2VibWFya2JhZ2UvZWNtYXNjcmlwdC1zdHJpbmctbGVmdC1yaWdodC10cmltXG5yZXF1aXJlKCcuL19zdHJpbmctdHJpbScpKCd0cmltTGVmdCcsIGZ1bmN0aW9uKCR0cmltKXtcbiAgcmV0dXJuIGZ1bmN0aW9uIHRyaW1MZWZ0KCl7XG4gICAgcmV0dXJuICR0cmltKHRoaXMsIDEpO1xuICB9O1xufSwgJ3RyaW1TdGFydCcpOyIsIid1c2Ugc3RyaWN0Jztcbi8vIGh0dHBzOi8vZ2l0aHViLmNvbS9zZWJtYXJrYmFnZS9lY21hc2NyaXB0LXN0cmluZy1sZWZ0LXJpZ2h0LXRyaW1cbnJlcXVpcmUoJy4vX3N0cmluZy10cmltJykoJ3RyaW1SaWdodCcsIGZ1bmN0aW9uKCR0cmltKXtcbiAgcmV0dXJuIGZ1bmN0aW9uIHRyaW1SaWdodCgpe1xuICAgIHJldHVybiAkdHJpbSh0aGlzLCAyKTtcbiAgfTtcbn0sICd0cmltRW5kJyk7IiwiLy8gaHR0cHM6Ly9naXRodWIuY29tL2xqaGFyYi9wcm9wb3NhbC1nbG9iYWxcbnZhciAkZXhwb3J0ID0gcmVxdWlyZSgnLi9fZXhwb3J0Jyk7XG5cbiRleHBvcnQoJGV4cG9ydC5TLCAnU3lzdGVtJywge2dsb2JhbDogcmVxdWlyZSgnLi9fZ2xvYmFsJyl9KTsiLCJ2YXIgJGl0ZXJhdG9ycyAgICA9IHJlcXVpcmUoJy4vZXM2LmFycmF5Lml0ZXJhdG9yJylcbiAgLCByZWRlZmluZSAgICAgID0gcmVxdWlyZSgnLi9fcmVkZWZpbmUnKVxuICAsIGdsb2JhbCAgICAgICAgPSByZXF1aXJlKCcuL19nbG9iYWwnKVxuICAsIGhpZGUgICAgICAgICAgPSByZXF1aXJlKCcuL19oaWRlJylcbiAgLCBJdGVyYXRvcnMgICAgID0gcmVxdWlyZSgnLi9faXRlcmF0b3JzJylcbiAgLCB3a3MgICAgICAgICAgID0gcmVxdWlyZSgnLi9fd2tzJylcbiAgLCBJVEVSQVRPUiAgICAgID0gd2tzKCdpdGVyYXRvcicpXG4gICwgVE9fU1RSSU5HX1RBRyA9IHdrcygndG9TdHJpbmdUYWcnKVxuICAsIEFycmF5VmFsdWVzICAgPSBJdGVyYXRvcnMuQXJyYXk7XG5cbmZvcih2YXIgY29sbGVjdGlvbnMgPSBbJ05vZGVMaXN0JywgJ0RPTVRva2VuTGlzdCcsICdNZWRpYUxpc3QnLCAnU3R5bGVTaGVldExpc3QnLCAnQ1NTUnVsZUxpc3QnXSwgaSA9IDA7IGkgPCA1OyBpKyspe1xuICB2YXIgTkFNRSAgICAgICA9IGNvbGxlY3Rpb25zW2ldXG4gICAgLCBDb2xsZWN0aW9uID0gZ2xvYmFsW05BTUVdXG4gICAgLCBwcm90byAgICAgID0gQ29sbGVjdGlvbiAmJiBDb2xsZWN0aW9uLnByb3RvdHlwZVxuICAgICwga2V5O1xuICBpZihwcm90byl7XG4gICAgaWYoIXByb3RvW0lURVJBVE9SXSloaWRlKHByb3RvLCBJVEVSQVRPUiwgQXJyYXlWYWx1ZXMpO1xuICAgIGlmKCFwcm90b1tUT19TVFJJTkdfVEFHXSloaWRlKHByb3RvLCBUT19TVFJJTkdfVEFHLCBOQU1FKTtcbiAgICBJdGVyYXRvcnNbTkFNRV0gPSBBcnJheVZhbHVlcztcbiAgICBmb3Ioa2V5IGluICRpdGVyYXRvcnMpaWYoIXByb3RvW2tleV0pcmVkZWZpbmUocHJvdG8sIGtleSwgJGl0ZXJhdG9yc1trZXldLCB0cnVlKTtcbiAgfVxufSIsInZhciAkZXhwb3J0ID0gcmVxdWlyZSgnLi9fZXhwb3J0JylcbiAgLCAkdGFzayAgID0gcmVxdWlyZSgnLi9fdGFzaycpO1xuJGV4cG9ydCgkZXhwb3J0LkcgKyAkZXhwb3J0LkIsIHtcbiAgc2V0SW1tZWRpYXRlOiAgICR0YXNrLnNldCxcbiAgY2xlYXJJbW1lZGlhdGU6ICR0YXNrLmNsZWFyXG59KTsiLCIvLyBpZTktIHNldFRpbWVvdXQgJiBzZXRJbnRlcnZhbCBhZGRpdGlvbmFsIHBhcmFtZXRlcnMgZml4XG52YXIgZ2xvYmFsICAgICA9IHJlcXVpcmUoJy4vX2dsb2JhbCcpXG4gICwgJGV4cG9ydCAgICA9IHJlcXVpcmUoJy4vX2V4cG9ydCcpXG4gICwgaW52b2tlICAgICA9IHJlcXVpcmUoJy4vX2ludm9rZScpXG4gICwgcGFydGlhbCAgICA9IHJlcXVpcmUoJy4vX3BhcnRpYWwnKVxuICAsIG5hdmlnYXRvciAgPSBnbG9iYWwubmF2aWdhdG9yXG4gICwgTVNJRSAgICAgICA9ICEhbmF2aWdhdG9yICYmIC9NU0lFIC5cXC4vLnRlc3QobmF2aWdhdG9yLnVzZXJBZ2VudCk7IC8vIDwtIGRpcnR5IGllOS0gY2hlY2tcbnZhciB3cmFwID0gZnVuY3Rpb24oc2V0KXtcbiAgcmV0dXJuIE1TSUUgPyBmdW5jdGlvbihmbiwgdGltZSAvKiwgLi4uYXJncyAqLyl7XG4gICAgcmV0dXJuIHNldChpbnZva2UoXG4gICAgICBwYXJ0aWFsLFxuICAgICAgW10uc2xpY2UuY2FsbChhcmd1bWVudHMsIDIpLFxuICAgICAgdHlwZW9mIGZuID09ICdmdW5jdGlvbicgPyBmbiA6IEZ1bmN0aW9uKGZuKVxuICAgICksIHRpbWUpO1xuICB9IDogc2V0O1xufTtcbiRleHBvcnQoJGV4cG9ydC5HICsgJGV4cG9ydC5CICsgJGV4cG9ydC5GICogTVNJRSwge1xuICBzZXRUaW1lb3V0OiAgd3JhcChnbG9iYWwuc2V0VGltZW91dCksXG4gIHNldEludGVydmFsOiB3cmFwKGdsb2JhbC5zZXRJbnRlcnZhbClcbn0pOyIsInJlcXVpcmUoJy4vbW9kdWxlcy9lczYuc3ltYm9sJyk7XG5yZXF1aXJlKCcuL21vZHVsZXMvZXM2Lm9iamVjdC5jcmVhdGUnKTtcbnJlcXVpcmUoJy4vbW9kdWxlcy9lczYub2JqZWN0LmRlZmluZS1wcm9wZXJ0eScpO1xucmVxdWlyZSgnLi9tb2R1bGVzL2VzNi5vYmplY3QuZGVmaW5lLXByb3BlcnRpZXMnKTtcbnJlcXVpcmUoJy4vbW9kdWxlcy9lczYub2JqZWN0LmdldC1vd24tcHJvcGVydHktZGVzY3JpcHRvcicpO1xucmVxdWlyZSgnLi9tb2R1bGVzL2VzNi5vYmplY3QuZ2V0LXByb3RvdHlwZS1vZicpO1xucmVxdWlyZSgnLi9tb2R1bGVzL2VzNi5vYmplY3Qua2V5cycpO1xucmVxdWlyZSgnLi9tb2R1bGVzL2VzNi5vYmplY3QuZ2V0LW93bi1wcm9wZXJ0eS1uYW1lcycpO1xucmVxdWlyZSgnLi9tb2R1bGVzL2VzNi5vYmplY3QuZnJlZXplJyk7XG5yZXF1aXJlKCcuL21vZHVsZXMvZXM2Lm9iamVjdC5zZWFsJyk7XG5yZXF1aXJlKCcuL21vZHVsZXMvZXM2Lm9iamVjdC5wcmV2ZW50LWV4dGVuc2lvbnMnKTtcbnJlcXVpcmUoJy4vbW9kdWxlcy9lczYub2JqZWN0LmlzLWZyb3plbicpO1xucmVxdWlyZSgnLi9tb2R1bGVzL2VzNi5vYmplY3QuaXMtc2VhbGVkJyk7XG5yZXF1aXJlKCcuL21vZHVsZXMvZXM2Lm9iamVjdC5pcy1leHRlbnNpYmxlJyk7XG5yZXF1aXJlKCcuL21vZHVsZXMvZXM2Lm9iamVjdC5hc3NpZ24nKTtcbnJlcXVpcmUoJy4vbW9kdWxlcy9lczYub2JqZWN0LmlzJyk7XG5yZXF1aXJlKCcuL21vZHVsZXMvZXM2Lm9iamVjdC5zZXQtcHJvdG90eXBlLW9mJyk7XG5yZXF1aXJlKCcuL21vZHVsZXMvZXM2Lm9iamVjdC50by1zdHJpbmcnKTtcbnJlcXVpcmUoJy4vbW9kdWxlcy9lczYuZnVuY3Rpb24uYmluZCcpO1xucmVxdWlyZSgnLi9tb2R1bGVzL2VzNi5mdW5jdGlvbi5uYW1lJyk7XG5yZXF1aXJlKCcuL21vZHVsZXMvZXM2LmZ1bmN0aW9uLmhhcy1pbnN0YW5jZScpO1xucmVxdWlyZSgnLi9tb2R1bGVzL2VzNi5wYXJzZS1pbnQnKTtcbnJlcXVpcmUoJy4vbW9kdWxlcy9lczYucGFyc2UtZmxvYXQnKTtcbnJlcXVpcmUoJy4vbW9kdWxlcy9lczYubnVtYmVyLmNvbnN0cnVjdG9yJyk7XG5yZXF1aXJlKCcuL21vZHVsZXMvZXM2Lm51bWJlci50by1maXhlZCcpO1xucmVxdWlyZSgnLi9tb2R1bGVzL2VzNi5udW1iZXIudG8tcHJlY2lzaW9uJyk7XG5yZXF1aXJlKCcuL21vZHVsZXMvZXM2Lm51bWJlci5lcHNpbG9uJyk7XG5yZXF1aXJlKCcuL21vZHVsZXMvZXM2Lm51bWJlci5pcy1maW5pdGUnKTtcbnJlcXVpcmUoJy4vbW9kdWxlcy9lczYubnVtYmVyLmlzLWludGVnZXInKTtcbnJlcXVpcmUoJy4vbW9kdWxlcy9lczYubnVtYmVyLmlzLW5hbicpO1xucmVxdWlyZSgnLi9tb2R1bGVzL2VzNi5udW1iZXIuaXMtc2FmZS1pbnRlZ2VyJyk7XG5yZXF1aXJlKCcuL21vZHVsZXMvZXM2Lm51bWJlci5tYXgtc2FmZS1pbnRlZ2VyJyk7XG5yZXF1aXJlKCcuL21vZHVsZXMvZXM2Lm51bWJlci5taW4tc2FmZS1pbnRlZ2VyJyk7XG5yZXF1aXJlKCcuL21vZHVsZXMvZXM2Lm51bWJlci5wYXJzZS1mbG9hdCcpO1xucmVxdWlyZSgnLi9tb2R1bGVzL2VzNi5udW1iZXIucGFyc2UtaW50Jyk7XG5yZXF1aXJlKCcuL21vZHVsZXMvZXM2Lm1hdGguYWNvc2gnKTtcbnJlcXVpcmUoJy4vbW9kdWxlcy9lczYubWF0aC5hc2luaCcpO1xucmVxdWlyZSgnLi9tb2R1bGVzL2VzNi5tYXRoLmF0YW5oJyk7XG5yZXF1aXJlKCcuL21vZHVsZXMvZXM2Lm1hdGguY2JydCcpO1xucmVxdWlyZSgnLi9tb2R1bGVzL2VzNi5tYXRoLmNsejMyJyk7XG5yZXF1aXJlKCcuL21vZHVsZXMvZXM2Lm1hdGguY29zaCcpO1xucmVxdWlyZSgnLi9tb2R1bGVzL2VzNi5tYXRoLmV4cG0xJyk7XG5yZXF1aXJlKCcuL21vZHVsZXMvZXM2Lm1hdGguZnJvdW5kJyk7XG5yZXF1aXJlKCcuL21vZHVsZXMvZXM2Lm1hdGguaHlwb3QnKTtcbnJlcXVpcmUoJy4vbW9kdWxlcy9lczYubWF0aC5pbXVsJyk7XG5yZXF1aXJlKCcuL21vZHVsZXMvZXM2Lm1hdGgubG9nMTAnKTtcbnJlcXVpcmUoJy4vbW9kdWxlcy9lczYubWF0aC5sb2cxcCcpO1xucmVxdWlyZSgnLi9tb2R1bGVzL2VzNi5tYXRoLmxvZzInKTtcbnJlcXVpcmUoJy4vbW9kdWxlcy9lczYubWF0aC5zaWduJyk7XG5yZXF1aXJlKCcuL21vZHVsZXMvZXM2Lm1hdGguc2luaCcpO1xucmVxdWlyZSgnLi9tb2R1bGVzL2VzNi5tYXRoLnRhbmgnKTtcbnJlcXVpcmUoJy4vbW9kdWxlcy9lczYubWF0aC50cnVuYycpO1xucmVxdWlyZSgnLi9tb2R1bGVzL2VzNi5zdHJpbmcuZnJvbS1jb2RlLXBvaW50Jyk7XG5yZXF1aXJlKCcuL21vZHVsZXMvZXM2LnN0cmluZy5yYXcnKTtcbnJlcXVpcmUoJy4vbW9kdWxlcy9lczYuc3RyaW5nLnRyaW0nKTtcbnJlcXVpcmUoJy4vbW9kdWxlcy9lczYuc3RyaW5nLml0ZXJhdG9yJyk7XG5yZXF1aXJlKCcuL21vZHVsZXMvZXM2LnN0cmluZy5jb2RlLXBvaW50LWF0Jyk7XG5yZXF1aXJlKCcuL21vZHVsZXMvZXM2LnN0cmluZy5lbmRzLXdpdGgnKTtcbnJlcXVpcmUoJy4vbW9kdWxlcy9lczYuc3RyaW5nLmluY2x1ZGVzJyk7XG5yZXF1aXJlKCcuL21vZHVsZXMvZXM2LnN0cmluZy5yZXBlYXQnKTtcbnJlcXVpcmUoJy4vbW9kdWxlcy9lczYuc3RyaW5nLnN0YXJ0cy13aXRoJyk7XG5yZXF1aXJlKCcuL21vZHVsZXMvZXM2LnN0cmluZy5hbmNob3InKTtcbnJlcXVpcmUoJy4vbW9kdWxlcy9lczYuc3RyaW5nLmJpZycpO1xucmVxdWlyZSgnLi9tb2R1bGVzL2VzNi5zdHJpbmcuYmxpbmsnKTtcbnJlcXVpcmUoJy4vbW9kdWxlcy9lczYuc3RyaW5nLmJvbGQnKTtcbnJlcXVpcmUoJy4vbW9kdWxlcy9lczYuc3RyaW5nLmZpeGVkJyk7XG5yZXF1aXJlKCcuL21vZHVsZXMvZXM2LnN0cmluZy5mb250Y29sb3InKTtcbnJlcXVpcmUoJy4vbW9kdWxlcy9lczYuc3RyaW5nLmZvbnRzaXplJyk7XG5yZXF1aXJlKCcuL21vZHVsZXMvZXM2LnN0cmluZy5pdGFsaWNzJyk7XG5yZXF1aXJlKCcuL21vZHVsZXMvZXM2LnN0cmluZy5saW5rJyk7XG5yZXF1aXJlKCcuL21vZHVsZXMvZXM2LnN0cmluZy5zbWFsbCcpO1xucmVxdWlyZSgnLi9tb2R1bGVzL2VzNi5zdHJpbmcuc3RyaWtlJyk7XG5yZXF1aXJlKCcuL21vZHVsZXMvZXM2LnN0cmluZy5zdWInKTtcbnJlcXVpcmUoJy4vbW9kdWxlcy9lczYuc3RyaW5nLnN1cCcpO1xucmVxdWlyZSgnLi9tb2R1bGVzL2VzNi5kYXRlLm5vdycpO1xucmVxdWlyZSgnLi9tb2R1bGVzL2VzNi5kYXRlLnRvLWpzb24nKTtcbnJlcXVpcmUoJy4vbW9kdWxlcy9lczYuZGF0ZS50by1pc28tc3RyaW5nJyk7XG5yZXF1aXJlKCcuL21vZHVsZXMvZXM2LmRhdGUudG8tc3RyaW5nJyk7XG5yZXF1aXJlKCcuL21vZHVsZXMvZXM2LmRhdGUudG8tcHJpbWl0aXZlJyk7XG5yZXF1aXJlKCcuL21vZHVsZXMvZXM2LmFycmF5LmlzLWFycmF5Jyk7XG5yZXF1aXJlKCcuL21vZHVsZXMvZXM2LmFycmF5LmZyb20nKTtcbnJlcXVpcmUoJy4vbW9kdWxlcy9lczYuYXJyYXkub2YnKTtcbnJlcXVpcmUoJy4vbW9kdWxlcy9lczYuYXJyYXkuam9pbicpO1xucmVxdWlyZSgnLi9tb2R1bGVzL2VzNi5hcnJheS5zbGljZScpO1xucmVxdWlyZSgnLi9tb2R1bGVzL2VzNi5hcnJheS5zb3J0Jyk7XG5yZXF1aXJlKCcuL21vZHVsZXMvZXM2LmFycmF5LmZvci1lYWNoJyk7XG5yZXF1aXJlKCcuL21vZHVsZXMvZXM2LmFycmF5Lm1hcCcpO1xucmVxdWlyZSgnLi9tb2R1bGVzL2VzNi5hcnJheS5maWx0ZXInKTtcbnJlcXVpcmUoJy4vbW9kdWxlcy9lczYuYXJyYXkuc29tZScpO1xucmVxdWlyZSgnLi9tb2R1bGVzL2VzNi5hcnJheS5ldmVyeScpO1xucmVxdWlyZSgnLi9tb2R1bGVzL2VzNi5hcnJheS5yZWR1Y2UnKTtcbnJlcXVpcmUoJy4vbW9kdWxlcy9lczYuYXJyYXkucmVkdWNlLXJpZ2h0Jyk7XG5yZXF1aXJlKCcuL21vZHVsZXMvZXM2LmFycmF5LmluZGV4LW9mJyk7XG5yZXF1aXJlKCcuL21vZHVsZXMvZXM2LmFycmF5Lmxhc3QtaW5kZXgtb2YnKTtcbnJlcXVpcmUoJy4vbW9kdWxlcy9lczYuYXJyYXkuY29weS13aXRoaW4nKTtcbnJlcXVpcmUoJy4vbW9kdWxlcy9lczYuYXJyYXkuZmlsbCcpO1xucmVxdWlyZSgnLi9tb2R1bGVzL2VzNi5hcnJheS5maW5kJyk7XG5yZXF1aXJlKCcuL21vZHVsZXMvZXM2LmFycmF5LmZpbmQtaW5kZXgnKTtcbnJlcXVpcmUoJy4vbW9kdWxlcy9lczYuYXJyYXkuc3BlY2llcycpO1xucmVxdWlyZSgnLi9tb2R1bGVzL2VzNi5hcnJheS5pdGVyYXRvcicpO1xucmVxdWlyZSgnLi9tb2R1bGVzL2VzNi5yZWdleHAuY29uc3RydWN0b3InKTtcbnJlcXVpcmUoJy4vbW9kdWxlcy9lczYucmVnZXhwLnRvLXN0cmluZycpO1xucmVxdWlyZSgnLi9tb2R1bGVzL2VzNi5yZWdleHAuZmxhZ3MnKTtcbnJlcXVpcmUoJy4vbW9kdWxlcy9lczYucmVnZXhwLm1hdGNoJyk7XG5yZXF1aXJlKCcuL21vZHVsZXMvZXM2LnJlZ2V4cC5yZXBsYWNlJyk7XG5yZXF1aXJlKCcuL21vZHVsZXMvZXM2LnJlZ2V4cC5zZWFyY2gnKTtcbnJlcXVpcmUoJy4vbW9kdWxlcy9lczYucmVnZXhwLnNwbGl0Jyk7XG5yZXF1aXJlKCcuL21vZHVsZXMvZXM2LnByb21pc2UnKTtcbnJlcXVpcmUoJy4vbW9kdWxlcy9lczYubWFwJyk7XG5yZXF1aXJlKCcuL21vZHVsZXMvZXM2LnNldCcpO1xucmVxdWlyZSgnLi9tb2R1bGVzL2VzNi53ZWFrLW1hcCcpO1xucmVxdWlyZSgnLi9tb2R1bGVzL2VzNi53ZWFrLXNldCcpO1xucmVxdWlyZSgnLi9tb2R1bGVzL2VzNi50eXBlZC5hcnJheS1idWZmZXInKTtcbnJlcXVpcmUoJy4vbW9kdWxlcy9lczYudHlwZWQuZGF0YS12aWV3Jyk7XG5yZXF1aXJlKCcuL21vZHVsZXMvZXM2LnR5cGVkLmludDgtYXJyYXknKTtcbnJlcXVpcmUoJy4vbW9kdWxlcy9lczYudHlwZWQudWludDgtYXJyYXknKTtcbnJlcXVpcmUoJy4vbW9kdWxlcy9lczYudHlwZWQudWludDgtY2xhbXBlZC1hcnJheScpO1xucmVxdWlyZSgnLi9tb2R1bGVzL2VzNi50eXBlZC5pbnQxNi1hcnJheScpO1xucmVxdWlyZSgnLi9tb2R1bGVzL2VzNi50eXBlZC51aW50MTYtYXJyYXknKTtcbnJlcXVpcmUoJy4vbW9kdWxlcy9lczYudHlwZWQuaW50MzItYXJyYXknKTtcbnJlcXVpcmUoJy4vbW9kdWxlcy9lczYudHlwZWQudWludDMyLWFycmF5Jyk7XG5yZXF1aXJlKCcuL21vZHVsZXMvZXM2LnR5cGVkLmZsb2F0MzItYXJyYXknKTtcbnJlcXVpcmUoJy4vbW9kdWxlcy9lczYudHlwZWQuZmxvYXQ2NC1hcnJheScpO1xucmVxdWlyZSgnLi9tb2R1bGVzL2VzNi5yZWZsZWN0LmFwcGx5Jyk7XG5yZXF1aXJlKCcuL21vZHVsZXMvZXM2LnJlZmxlY3QuY29uc3RydWN0Jyk7XG5yZXF1aXJlKCcuL21vZHVsZXMvZXM2LnJlZmxlY3QuZGVmaW5lLXByb3BlcnR5Jyk7XG5yZXF1aXJlKCcuL21vZHVsZXMvZXM2LnJlZmxlY3QuZGVsZXRlLXByb3BlcnR5Jyk7XG5yZXF1aXJlKCcuL21vZHVsZXMvZXM2LnJlZmxlY3QuZW51bWVyYXRlJyk7XG5yZXF1aXJlKCcuL21vZHVsZXMvZXM2LnJlZmxlY3QuZ2V0Jyk7XG5yZXF1aXJlKCcuL21vZHVsZXMvZXM2LnJlZmxlY3QuZ2V0LW93bi1wcm9wZXJ0eS1kZXNjcmlwdG9yJyk7XG5yZXF1aXJlKCcuL21vZHVsZXMvZXM2LnJlZmxlY3QuZ2V0LXByb3RvdHlwZS1vZicpO1xucmVxdWlyZSgnLi9tb2R1bGVzL2VzNi5yZWZsZWN0LmhhcycpO1xucmVxdWlyZSgnLi9tb2R1bGVzL2VzNi5yZWZsZWN0LmlzLWV4dGVuc2libGUnKTtcbnJlcXVpcmUoJy4vbW9kdWxlcy9lczYucmVmbGVjdC5vd24ta2V5cycpO1xucmVxdWlyZSgnLi9tb2R1bGVzL2VzNi5yZWZsZWN0LnByZXZlbnQtZXh0ZW5zaW9ucycpO1xucmVxdWlyZSgnLi9tb2R1bGVzL2VzNi5yZWZsZWN0LnNldCcpO1xucmVxdWlyZSgnLi9tb2R1bGVzL2VzNi5yZWZsZWN0LnNldC1wcm90b3R5cGUtb2YnKTtcbnJlcXVpcmUoJy4vbW9kdWxlcy9lczcuYXJyYXkuaW5jbHVkZXMnKTtcbnJlcXVpcmUoJy4vbW9kdWxlcy9lczcuc3RyaW5nLmF0Jyk7XG5yZXF1aXJlKCcuL21vZHVsZXMvZXM3LnN0cmluZy5wYWQtc3RhcnQnKTtcbnJlcXVpcmUoJy4vbW9kdWxlcy9lczcuc3RyaW5nLnBhZC1lbmQnKTtcbnJlcXVpcmUoJy4vbW9kdWxlcy9lczcuc3RyaW5nLnRyaW0tbGVmdCcpO1xucmVxdWlyZSgnLi9tb2R1bGVzL2VzNy5zdHJpbmcudHJpbS1yaWdodCcpO1xucmVxdWlyZSgnLi9tb2R1bGVzL2VzNy5zdHJpbmcubWF0Y2gtYWxsJyk7XG5yZXF1aXJlKCcuL21vZHVsZXMvZXM3Lm9iamVjdC5nZXQtb3duLXByb3BlcnR5LWRlc2NyaXB0b3JzJyk7XG5yZXF1aXJlKCcuL21vZHVsZXMvZXM3Lm9iamVjdC52YWx1ZXMnKTtcbnJlcXVpcmUoJy4vbW9kdWxlcy9lczcub2JqZWN0LmVudHJpZXMnKTtcbnJlcXVpcmUoJy4vbW9kdWxlcy9lczcub2JqZWN0LmRlZmluZS1nZXR0ZXInKTtcbnJlcXVpcmUoJy4vbW9kdWxlcy9lczcub2JqZWN0LmRlZmluZS1zZXR0ZXInKTtcbnJlcXVpcmUoJy4vbW9kdWxlcy9lczcub2JqZWN0Lmxvb2t1cC1nZXR0ZXInKTtcbnJlcXVpcmUoJy4vbW9kdWxlcy9lczcub2JqZWN0Lmxvb2t1cC1zZXR0ZXInKTtcbnJlcXVpcmUoJy4vbW9kdWxlcy9lczcubWFwLnRvLWpzb24nKTtcbnJlcXVpcmUoJy4vbW9kdWxlcy9lczcuc2V0LnRvLWpzb24nKTtcbnJlcXVpcmUoJy4vbW9kdWxlcy9lczcuc3lzdGVtLmdsb2JhbCcpO1xucmVxdWlyZSgnLi9tb2R1bGVzL2VzNy5lcnJvci5pcy1lcnJvcicpO1xucmVxdWlyZSgnLi9tb2R1bGVzL2VzNy5tYXRoLmlhZGRoJyk7XG5yZXF1aXJlKCcuL21vZHVsZXMvZXM3Lm1hdGguaXN1YmgnKTtcbnJlcXVpcmUoJy4vbW9kdWxlcy9lczcubWF0aC5pbXVsaCcpO1xucmVxdWlyZSgnLi9tb2R1bGVzL2VzNy5tYXRoLnVtdWxoJyk7XG5yZXF1aXJlKCcuL21vZHVsZXMvZXM3LnJlZmxlY3QuZGVmaW5lLW1ldGFkYXRhJyk7XG5yZXF1aXJlKCcuL21vZHVsZXMvZXM3LnJlZmxlY3QuZGVsZXRlLW1ldGFkYXRhJyk7XG5yZXF1aXJlKCcuL21vZHVsZXMvZXM3LnJlZmxlY3QuZ2V0LW1ldGFkYXRhJyk7XG5yZXF1aXJlKCcuL21vZHVsZXMvZXM3LnJlZmxlY3QuZ2V0LW1ldGFkYXRhLWtleXMnKTtcbnJlcXVpcmUoJy4vbW9kdWxlcy9lczcucmVmbGVjdC5nZXQtb3duLW1ldGFkYXRhJyk7XG5yZXF1aXJlKCcuL21vZHVsZXMvZXM3LnJlZmxlY3QuZ2V0LW93bi1tZXRhZGF0YS1rZXlzJyk7XG5yZXF1aXJlKCcuL21vZHVsZXMvZXM3LnJlZmxlY3QuaGFzLW1ldGFkYXRhJyk7XG5yZXF1aXJlKCcuL21vZHVsZXMvZXM3LnJlZmxlY3QuaGFzLW93bi1tZXRhZGF0YScpO1xucmVxdWlyZSgnLi9tb2R1bGVzL2VzNy5yZWZsZWN0Lm1ldGFkYXRhJyk7XG5yZXF1aXJlKCcuL21vZHVsZXMvd2ViLnRpbWVycycpO1xucmVxdWlyZSgnLi9tb2R1bGVzL3dlYi5pbW1lZGlhdGUnKTtcbnJlcXVpcmUoJy4vbW9kdWxlcy93ZWIuZG9tLml0ZXJhYmxlJyk7XG5tb2R1bGUuZXhwb3J0cyA9IHJlcXVpcmUoJy4vbW9kdWxlcy9fY29yZScpOyIsIi8qKlxuICogQ29weXJpZ2h0IChjKSAyMDE0LCBGYWNlYm9vaywgSW5jLlxuICogQWxsIHJpZ2h0cyByZXNlcnZlZC5cbiAqXG4gKiBUaGlzIHNvdXJjZSBjb2RlIGlzIGxpY2Vuc2VkIHVuZGVyIHRoZSBCU0Qtc3R5bGUgbGljZW5zZSBmb3VuZCBpbiB0aGVcbiAqIGh0dHBzOi8vcmF3LmdpdGh1Yi5jb20vZmFjZWJvb2svcmVnZW5lcmF0b3IvbWFzdGVyL0xJQ0VOU0UgZmlsZS4gQW5cbiAqIGFkZGl0aW9uYWwgZ3JhbnQgb2YgcGF0ZW50IHJpZ2h0cyBjYW4gYmUgZm91bmQgaW4gdGhlIFBBVEVOVFMgZmlsZSBpblxuICogdGhlIHNhbWUgZGlyZWN0b3J5LlxuICovXG5cbiEoZnVuY3Rpb24oZ2xvYmFsKSB7XG4gIFwidXNlIHN0cmljdFwiO1xuXG4gIHZhciBoYXNPd24gPSBPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5O1xuICB2YXIgdW5kZWZpbmVkOyAvLyBNb3JlIGNvbXByZXNzaWJsZSB0aGFuIHZvaWQgMC5cbiAgdmFyIGl0ZXJhdG9yU3ltYm9sID1cbiAgICB0eXBlb2YgU3ltYm9sID09PSBcImZ1bmN0aW9uXCIgJiYgU3ltYm9sLml0ZXJhdG9yIHx8IFwiQEBpdGVyYXRvclwiO1xuXG4gIHZhciBpbk1vZHVsZSA9IHR5cGVvZiBtb2R1bGUgPT09IFwib2JqZWN0XCI7XG4gIHZhciBydW50aW1lID0gZ2xvYmFsLnJlZ2VuZXJhdG9yUnVudGltZTtcbiAgaWYgKHJ1bnRpbWUpIHtcbiAgICBpZiAoaW5Nb2R1bGUpIHtcbiAgICAgIC8vIElmIHJlZ2VuZXJhdG9yUnVudGltZSBpcyBkZWZpbmVkIGdsb2JhbGx5IGFuZCB3ZSdyZSBpbiBhIG1vZHVsZSxcbiAgICAgIC8vIG1ha2UgdGhlIGV4cG9ydHMgb2JqZWN0IGlkZW50aWNhbCB0byByZWdlbmVyYXRvclJ1bnRpbWUuXG4gICAgICBtb2R1bGUuZXhwb3J0cyA9IHJ1bnRpbWU7XG4gICAgfVxuICAgIC8vIERvbid0IGJvdGhlciBldmFsdWF0aW5nIHRoZSByZXN0IG9mIHRoaXMgZmlsZSBpZiB0aGUgcnVudGltZSB3YXNcbiAgICAvLyBhbHJlYWR5IGRlZmluZWQgZ2xvYmFsbHkuXG4gICAgcmV0dXJuO1xuICB9XG5cbiAgLy8gRGVmaW5lIHRoZSBydW50aW1lIGdsb2JhbGx5IChhcyBleHBlY3RlZCBieSBnZW5lcmF0ZWQgY29kZSkgYXMgZWl0aGVyXG4gIC8vIG1vZHVsZS5leHBvcnRzIChpZiB3ZSdyZSBpbiBhIG1vZHVsZSkgb3IgYSBuZXcsIGVtcHR5IG9iamVjdC5cbiAgcnVudGltZSA9IGdsb2JhbC5yZWdlbmVyYXRvclJ1bnRpbWUgPSBpbk1vZHVsZSA/IG1vZHVsZS5leHBvcnRzIDoge307XG5cbiAgZnVuY3Rpb24gd3JhcChpbm5lckZuLCBvdXRlckZuLCBzZWxmLCB0cnlMb2NzTGlzdCkge1xuICAgIC8vIElmIG91dGVyRm4gcHJvdmlkZWQsIHRoZW4gb3V0ZXJGbi5wcm90b3R5cGUgaW5zdGFuY2VvZiBHZW5lcmF0b3IuXG4gICAgdmFyIGdlbmVyYXRvciA9IE9iamVjdC5jcmVhdGUoKG91dGVyRm4gfHwgR2VuZXJhdG9yKS5wcm90b3R5cGUpO1xuICAgIHZhciBjb250ZXh0ID0gbmV3IENvbnRleHQodHJ5TG9jc0xpc3QgfHwgW10pO1xuXG4gICAgLy8gVGhlIC5faW52b2tlIG1ldGhvZCB1bmlmaWVzIHRoZSBpbXBsZW1lbnRhdGlvbnMgb2YgdGhlIC5uZXh0LFxuICAgIC8vIC50aHJvdywgYW5kIC5yZXR1cm4gbWV0aG9kcy5cbiAgICBnZW5lcmF0b3IuX2ludm9rZSA9IG1ha2VJbnZva2VNZXRob2QoaW5uZXJGbiwgc2VsZiwgY29udGV4dCk7XG5cbiAgICByZXR1cm4gZ2VuZXJhdG9yO1xuICB9XG4gIHJ1bnRpbWUud3JhcCA9IHdyYXA7XG5cbiAgLy8gVHJ5L2NhdGNoIGhlbHBlciB0byBtaW5pbWl6ZSBkZW9wdGltaXphdGlvbnMuIFJldHVybnMgYSBjb21wbGV0aW9uXG4gIC8vIHJlY29yZCBsaWtlIGNvbnRleHQudHJ5RW50cmllc1tpXS5jb21wbGV0aW9uLiBUaGlzIGludGVyZmFjZSBjb3VsZFxuICAvLyBoYXZlIGJlZW4gKGFuZCB3YXMgcHJldmlvdXNseSkgZGVzaWduZWQgdG8gdGFrZSBhIGNsb3N1cmUgdG8gYmVcbiAgLy8gaW52b2tlZCB3aXRob3V0IGFyZ3VtZW50cywgYnV0IGluIGFsbCB0aGUgY2FzZXMgd2UgY2FyZSBhYm91dCB3ZVxuICAvLyBhbHJlYWR5IGhhdmUgYW4gZXhpc3RpbmcgbWV0aG9kIHdlIHdhbnQgdG8gY2FsbCwgc28gdGhlcmUncyBubyBuZWVkXG4gIC8vIHRvIGNyZWF0ZSBhIG5ldyBmdW5jdGlvbiBvYmplY3QuIFdlIGNhbiBldmVuIGdldCBhd2F5IHdpdGggYXNzdW1pbmdcbiAgLy8gdGhlIG1ldGhvZCB0YWtlcyBleGFjdGx5IG9uZSBhcmd1bWVudCwgc2luY2UgdGhhdCBoYXBwZW5zIHRvIGJlIHRydWVcbiAgLy8gaW4gZXZlcnkgY2FzZSwgc28gd2UgZG9uJ3QgaGF2ZSB0byB0b3VjaCB0aGUgYXJndW1lbnRzIG9iamVjdC4gVGhlXG4gIC8vIG9ubHkgYWRkaXRpb25hbCBhbGxvY2F0aW9uIHJlcXVpcmVkIGlzIHRoZSBjb21wbGV0aW9uIHJlY29yZCwgd2hpY2hcbiAgLy8gaGFzIGEgc3RhYmxlIHNoYXBlIGFuZCBzbyBob3BlZnVsbHkgc2hvdWxkIGJlIGNoZWFwIHRvIGFsbG9jYXRlLlxuICBmdW5jdGlvbiB0cnlDYXRjaChmbiwgb2JqLCBhcmcpIHtcbiAgICB0cnkge1xuICAgICAgcmV0dXJuIHsgdHlwZTogXCJub3JtYWxcIiwgYXJnOiBmbi5jYWxsKG9iaiwgYXJnKSB9O1xuICAgIH0gY2F0Y2ggKGVycikge1xuICAgICAgcmV0dXJuIHsgdHlwZTogXCJ0aHJvd1wiLCBhcmc6IGVyciB9O1xuICAgIH1cbiAgfVxuXG4gIHZhciBHZW5TdGF0ZVN1c3BlbmRlZFN0YXJ0ID0gXCJzdXNwZW5kZWRTdGFydFwiO1xuICB2YXIgR2VuU3RhdGVTdXNwZW5kZWRZaWVsZCA9IFwic3VzcGVuZGVkWWllbGRcIjtcbiAgdmFyIEdlblN0YXRlRXhlY3V0aW5nID0gXCJleGVjdXRpbmdcIjtcbiAgdmFyIEdlblN0YXRlQ29tcGxldGVkID0gXCJjb21wbGV0ZWRcIjtcblxuICAvLyBSZXR1cm5pbmcgdGhpcyBvYmplY3QgZnJvbSB0aGUgaW5uZXJGbiBoYXMgdGhlIHNhbWUgZWZmZWN0IGFzXG4gIC8vIGJyZWFraW5nIG91dCBvZiB0aGUgZGlzcGF0Y2ggc3dpdGNoIHN0YXRlbWVudC5cbiAgdmFyIENvbnRpbnVlU2VudGluZWwgPSB7fTtcblxuICAvLyBEdW1teSBjb25zdHJ1Y3RvciBmdW5jdGlvbnMgdGhhdCB3ZSB1c2UgYXMgdGhlIC5jb25zdHJ1Y3RvciBhbmRcbiAgLy8gLmNvbnN0cnVjdG9yLnByb3RvdHlwZSBwcm9wZXJ0aWVzIGZvciBmdW5jdGlvbnMgdGhhdCByZXR1cm4gR2VuZXJhdG9yXG4gIC8vIG9iamVjdHMuIEZvciBmdWxsIHNwZWMgY29tcGxpYW5jZSwgeW91IG1heSB3aXNoIHRvIGNvbmZpZ3VyZSB5b3VyXG4gIC8vIG1pbmlmaWVyIG5vdCB0byBtYW5nbGUgdGhlIG5hbWVzIG9mIHRoZXNlIHR3byBmdW5jdGlvbnMuXG4gIGZ1bmN0aW9uIEdlbmVyYXRvcigpIHt9XG4gIGZ1bmN0aW9uIEdlbmVyYXRvckZ1bmN0aW9uKCkge31cbiAgZnVuY3Rpb24gR2VuZXJhdG9yRnVuY3Rpb25Qcm90b3R5cGUoKSB7fVxuXG4gIHZhciBHcCA9IEdlbmVyYXRvckZ1bmN0aW9uUHJvdG90eXBlLnByb3RvdHlwZSA9IEdlbmVyYXRvci5wcm90b3R5cGU7XG4gIEdlbmVyYXRvckZ1bmN0aW9uLnByb3RvdHlwZSA9IEdwLmNvbnN0cnVjdG9yID0gR2VuZXJhdG9yRnVuY3Rpb25Qcm90b3R5cGU7XG4gIEdlbmVyYXRvckZ1bmN0aW9uUHJvdG90eXBlLmNvbnN0cnVjdG9yID0gR2VuZXJhdG9yRnVuY3Rpb247XG4gIEdlbmVyYXRvckZ1bmN0aW9uLmRpc3BsYXlOYW1lID0gXCJHZW5lcmF0b3JGdW5jdGlvblwiO1xuXG4gIC8vIEhlbHBlciBmb3IgZGVmaW5pbmcgdGhlIC5uZXh0LCAudGhyb3csIGFuZCAucmV0dXJuIG1ldGhvZHMgb2YgdGhlXG4gIC8vIEl0ZXJhdG9yIGludGVyZmFjZSBpbiB0ZXJtcyBvZiBhIHNpbmdsZSAuX2ludm9rZSBtZXRob2QuXG4gIGZ1bmN0aW9uIGRlZmluZUl0ZXJhdG9yTWV0aG9kcyhwcm90b3R5cGUpIHtcbiAgICBbXCJuZXh0XCIsIFwidGhyb3dcIiwgXCJyZXR1cm5cIl0uZm9yRWFjaChmdW5jdGlvbihtZXRob2QpIHtcbiAgICAgIHByb3RvdHlwZVttZXRob2RdID0gZnVuY3Rpb24oYXJnKSB7XG4gICAgICAgIHJldHVybiB0aGlzLl9pbnZva2UobWV0aG9kLCBhcmcpO1xuICAgICAgfTtcbiAgICB9KTtcbiAgfVxuXG4gIHJ1bnRpbWUuaXNHZW5lcmF0b3JGdW5jdGlvbiA9IGZ1bmN0aW9uKGdlbkZ1bikge1xuICAgIHZhciBjdG9yID0gdHlwZW9mIGdlbkZ1biA9PT0gXCJmdW5jdGlvblwiICYmIGdlbkZ1bi5jb25zdHJ1Y3RvcjtcbiAgICByZXR1cm4gY3RvclxuICAgICAgPyBjdG9yID09PSBHZW5lcmF0b3JGdW5jdGlvbiB8fFxuICAgICAgICAvLyBGb3IgdGhlIG5hdGl2ZSBHZW5lcmF0b3JGdW5jdGlvbiBjb25zdHJ1Y3RvciwgdGhlIGJlc3Qgd2UgY2FuXG4gICAgICAgIC8vIGRvIGlzIHRvIGNoZWNrIGl0cyAubmFtZSBwcm9wZXJ0eS5cbiAgICAgICAgKGN0b3IuZGlzcGxheU5hbWUgfHwgY3Rvci5uYW1lKSA9PT0gXCJHZW5lcmF0b3JGdW5jdGlvblwiXG4gICAgICA6IGZhbHNlO1xuICB9O1xuXG4gIHJ1bnRpbWUubWFyayA9IGZ1bmN0aW9uKGdlbkZ1bikge1xuICAgIGlmIChPYmplY3Quc2V0UHJvdG90eXBlT2YpIHtcbiAgICAgIE9iamVjdC5zZXRQcm90b3R5cGVPZihnZW5GdW4sIEdlbmVyYXRvckZ1bmN0aW9uUHJvdG90eXBlKTtcbiAgICB9IGVsc2Uge1xuICAgICAgZ2VuRnVuLl9fcHJvdG9fXyA9IEdlbmVyYXRvckZ1bmN0aW9uUHJvdG90eXBlO1xuICAgIH1cbiAgICBnZW5GdW4ucHJvdG90eXBlID0gT2JqZWN0LmNyZWF0ZShHcCk7XG4gICAgcmV0dXJuIGdlbkZ1bjtcbiAgfTtcblxuICAvLyBXaXRoaW4gdGhlIGJvZHkgb2YgYW55IGFzeW5jIGZ1bmN0aW9uLCBgYXdhaXQgeGAgaXMgdHJhbnNmb3JtZWQgdG9cbiAgLy8gYHlpZWxkIHJlZ2VuZXJhdG9yUnVudGltZS5hd3JhcCh4KWAsIHNvIHRoYXQgdGhlIHJ1bnRpbWUgY2FuIHRlc3RcbiAgLy8gYHZhbHVlIGluc3RhbmNlb2YgQXdhaXRBcmd1bWVudGAgdG8gZGV0ZXJtaW5lIGlmIHRoZSB5aWVsZGVkIHZhbHVlIGlzXG4gIC8vIG1lYW50IHRvIGJlIGF3YWl0ZWQuIFNvbWUgbWF5IGNvbnNpZGVyIHRoZSBuYW1lIG9mIHRoaXMgbWV0aG9kIHRvb1xuICAvLyBjdXRlc3ksIGJ1dCB0aGV5IGFyZSBjdXJtdWRnZW9ucy5cbiAgcnVudGltZS5hd3JhcCA9IGZ1bmN0aW9uKGFyZykge1xuICAgIHJldHVybiBuZXcgQXdhaXRBcmd1bWVudChhcmcpO1xuICB9O1xuXG4gIGZ1bmN0aW9uIEF3YWl0QXJndW1lbnQoYXJnKSB7XG4gICAgdGhpcy5hcmcgPSBhcmc7XG4gIH1cblxuICBmdW5jdGlvbiBBc3luY0l0ZXJhdG9yKGdlbmVyYXRvcikge1xuICAgIC8vIFRoaXMgaW52b2tlIGZ1bmN0aW9uIGlzIHdyaXR0ZW4gaW4gYSBzdHlsZSB0aGF0IGFzc3VtZXMgc29tZVxuICAgIC8vIGNhbGxpbmcgZnVuY3Rpb24gKG9yIFByb21pc2UpIHdpbGwgaGFuZGxlIGV4Y2VwdGlvbnMuXG4gICAgZnVuY3Rpb24gaW52b2tlKG1ldGhvZCwgYXJnKSB7XG4gICAgICB2YXIgcmVzdWx0ID0gZ2VuZXJhdG9yW21ldGhvZF0oYXJnKTtcbiAgICAgIHZhciB2YWx1ZSA9IHJlc3VsdC52YWx1ZTtcbiAgICAgIHJldHVybiB2YWx1ZSBpbnN0YW5jZW9mIEF3YWl0QXJndW1lbnRcbiAgICAgICAgPyBQcm9taXNlLnJlc29sdmUodmFsdWUuYXJnKS50aGVuKGludm9rZU5leHQsIGludm9rZVRocm93KVxuICAgICAgICA6IFByb21pc2UucmVzb2x2ZSh2YWx1ZSkudGhlbihmdW5jdGlvbih1bndyYXBwZWQpIHtcbiAgICAgICAgICAgIC8vIFdoZW4gYSB5aWVsZGVkIFByb21pc2UgaXMgcmVzb2x2ZWQsIGl0cyBmaW5hbCB2YWx1ZSBiZWNvbWVzXG4gICAgICAgICAgICAvLyB0aGUgLnZhbHVlIG9mIHRoZSBQcm9taXNlPHt2YWx1ZSxkb25lfT4gcmVzdWx0IGZvciB0aGVcbiAgICAgICAgICAgIC8vIGN1cnJlbnQgaXRlcmF0aW9uLiBJZiB0aGUgUHJvbWlzZSBpcyByZWplY3RlZCwgaG93ZXZlciwgdGhlXG4gICAgICAgICAgICAvLyByZXN1bHQgZm9yIHRoaXMgaXRlcmF0aW9uIHdpbGwgYmUgcmVqZWN0ZWQgd2l0aCB0aGUgc2FtZVxuICAgICAgICAgICAgLy8gcmVhc29uLiBOb3RlIHRoYXQgcmVqZWN0aW9ucyBvZiB5aWVsZGVkIFByb21pc2VzIGFyZSBub3RcbiAgICAgICAgICAgIC8vIHRocm93biBiYWNrIGludG8gdGhlIGdlbmVyYXRvciBmdW5jdGlvbiwgYXMgaXMgdGhlIGNhc2VcbiAgICAgICAgICAgIC8vIHdoZW4gYW4gYXdhaXRlZCBQcm9taXNlIGlzIHJlamVjdGVkLiBUaGlzIGRpZmZlcmVuY2UgaW5cbiAgICAgICAgICAgIC8vIGJlaGF2aW9yIGJldHdlZW4geWllbGQgYW5kIGF3YWl0IGlzIGltcG9ydGFudCwgYmVjYXVzZSBpdFxuICAgICAgICAgICAgLy8gYWxsb3dzIHRoZSBjb25zdW1lciB0byBkZWNpZGUgd2hhdCB0byBkbyB3aXRoIHRoZSB5aWVsZGVkXG4gICAgICAgICAgICAvLyByZWplY3Rpb24gKHN3YWxsb3cgaXQgYW5kIGNvbnRpbnVlLCBtYW51YWxseSAudGhyb3cgaXQgYmFja1xuICAgICAgICAgICAgLy8gaW50byB0aGUgZ2VuZXJhdG9yLCBhYmFuZG9uIGl0ZXJhdGlvbiwgd2hhdGV2ZXIpLiBXaXRoXG4gICAgICAgICAgICAvLyBhd2FpdCwgYnkgY29udHJhc3QsIHRoZXJlIGlzIG5vIG9wcG9ydHVuaXR5IHRvIGV4YW1pbmUgdGhlXG4gICAgICAgICAgICAvLyByZWplY3Rpb24gcmVhc29uIG91dHNpZGUgdGhlIGdlbmVyYXRvciBmdW5jdGlvbiwgc28gdGhlXG4gICAgICAgICAgICAvLyBvbmx5IG9wdGlvbiBpcyB0byB0aHJvdyBpdCBmcm9tIHRoZSBhd2FpdCBleHByZXNzaW9uLCBhbmRcbiAgICAgICAgICAgIC8vIGxldCB0aGUgZ2VuZXJhdG9yIGZ1bmN0aW9uIGhhbmRsZSB0aGUgZXhjZXB0aW9uLlxuICAgICAgICAgICAgcmVzdWx0LnZhbHVlID0gdW53cmFwcGVkO1xuICAgICAgICAgICAgcmV0dXJuIHJlc3VsdDtcbiAgICAgICAgICB9KTtcbiAgICB9XG5cbiAgICBpZiAodHlwZW9mIHByb2Nlc3MgPT09IFwib2JqZWN0XCIgJiYgcHJvY2Vzcy5kb21haW4pIHtcbiAgICAgIGludm9rZSA9IHByb2Nlc3MuZG9tYWluLmJpbmQoaW52b2tlKTtcbiAgICB9XG5cbiAgICB2YXIgaW52b2tlTmV4dCA9IGludm9rZS5iaW5kKGdlbmVyYXRvciwgXCJuZXh0XCIpO1xuICAgIHZhciBpbnZva2VUaHJvdyA9IGludm9rZS5iaW5kKGdlbmVyYXRvciwgXCJ0aHJvd1wiKTtcbiAgICB2YXIgaW52b2tlUmV0dXJuID0gaW52b2tlLmJpbmQoZ2VuZXJhdG9yLCBcInJldHVyblwiKTtcbiAgICB2YXIgcHJldmlvdXNQcm9taXNlO1xuXG4gICAgZnVuY3Rpb24gZW5xdWV1ZShtZXRob2QsIGFyZykge1xuICAgICAgZnVuY3Rpb24gY2FsbEludm9rZVdpdGhNZXRob2RBbmRBcmcoKSB7XG4gICAgICAgIHJldHVybiBpbnZva2UobWV0aG9kLCBhcmcpO1xuICAgICAgfVxuXG4gICAgICByZXR1cm4gcHJldmlvdXNQcm9taXNlID1cbiAgICAgICAgLy8gSWYgZW5xdWV1ZSBoYXMgYmVlbiBjYWxsZWQgYmVmb3JlLCB0aGVuIHdlIHdhbnQgdG8gd2FpdCB1bnRpbFxuICAgICAgICAvLyBhbGwgcHJldmlvdXMgUHJvbWlzZXMgaGF2ZSBiZWVuIHJlc29sdmVkIGJlZm9yZSBjYWxsaW5nIGludm9rZSxcbiAgICAgICAgLy8gc28gdGhhdCByZXN1bHRzIGFyZSBhbHdheXMgZGVsaXZlcmVkIGluIHRoZSBjb3JyZWN0IG9yZGVyLiBJZlxuICAgICAgICAvLyBlbnF1ZXVlIGhhcyBub3QgYmVlbiBjYWxsZWQgYmVmb3JlLCB0aGVuIGl0IGlzIGltcG9ydGFudCB0b1xuICAgICAgICAvLyBjYWxsIGludm9rZSBpbW1lZGlhdGVseSwgd2l0aG91dCB3YWl0aW5nIG9uIGEgY2FsbGJhY2sgdG8gZmlyZSxcbiAgICAgICAgLy8gc28gdGhhdCB0aGUgYXN5bmMgZ2VuZXJhdG9yIGZ1bmN0aW9uIGhhcyB0aGUgb3Bwb3J0dW5pdHkgdG8gZG9cbiAgICAgICAgLy8gYW55IG5lY2Vzc2FyeSBzZXR1cCBpbiBhIHByZWRpY3RhYmxlIHdheS4gVGhpcyBwcmVkaWN0YWJpbGl0eVxuICAgICAgICAvLyBpcyB3aHkgdGhlIFByb21pc2UgY29uc3RydWN0b3Igc3luY2hyb25vdXNseSBpbnZva2VzIGl0c1xuICAgICAgICAvLyBleGVjdXRvciBjYWxsYmFjaywgYW5kIHdoeSBhc3luYyBmdW5jdGlvbnMgc3luY2hyb25vdXNseVxuICAgICAgICAvLyBleGVjdXRlIGNvZGUgYmVmb3JlIHRoZSBmaXJzdCBhd2FpdC4gU2luY2Ugd2UgaW1wbGVtZW50IHNpbXBsZVxuICAgICAgICAvLyBhc3luYyBmdW5jdGlvbnMgaW4gdGVybXMgb2YgYXN5bmMgZ2VuZXJhdG9ycywgaXQgaXMgZXNwZWNpYWxseVxuICAgICAgICAvLyBpbXBvcnRhbnQgdG8gZ2V0IHRoaXMgcmlnaHQsIGV2ZW4gdGhvdWdoIGl0IHJlcXVpcmVzIGNhcmUuXG4gICAgICAgIHByZXZpb3VzUHJvbWlzZSA/IHByZXZpb3VzUHJvbWlzZS50aGVuKFxuICAgICAgICAgIGNhbGxJbnZva2VXaXRoTWV0aG9kQW5kQXJnLFxuICAgICAgICAgIC8vIEF2b2lkIHByb3BhZ2F0aW5nIGZhaWx1cmVzIHRvIFByb21pc2VzIHJldHVybmVkIGJ5IGxhdGVyXG4gICAgICAgICAgLy8gaW52b2NhdGlvbnMgb2YgdGhlIGl0ZXJhdG9yLlxuICAgICAgICAgIGNhbGxJbnZva2VXaXRoTWV0aG9kQW5kQXJnXG4gICAgICAgICkgOiBuZXcgUHJvbWlzZShmdW5jdGlvbiAocmVzb2x2ZSkge1xuICAgICAgICAgIHJlc29sdmUoY2FsbEludm9rZVdpdGhNZXRob2RBbmRBcmcoKSk7XG4gICAgICAgIH0pO1xuICAgIH1cblxuICAgIC8vIERlZmluZSB0aGUgdW5pZmllZCBoZWxwZXIgbWV0aG9kIHRoYXQgaXMgdXNlZCB0byBpbXBsZW1lbnQgLm5leHQsXG4gICAgLy8gLnRocm93LCBhbmQgLnJldHVybiAoc2VlIGRlZmluZUl0ZXJhdG9yTWV0aG9kcykuXG4gICAgdGhpcy5faW52b2tlID0gZW5xdWV1ZTtcbiAgfVxuXG4gIGRlZmluZUl0ZXJhdG9yTWV0aG9kcyhBc3luY0l0ZXJhdG9yLnByb3RvdHlwZSk7XG5cbiAgLy8gTm90ZSB0aGF0IHNpbXBsZSBhc3luYyBmdW5jdGlvbnMgYXJlIGltcGxlbWVudGVkIG9uIHRvcCBvZlxuICAvLyBBc3luY0l0ZXJhdG9yIG9iamVjdHM7IHRoZXkganVzdCByZXR1cm4gYSBQcm9taXNlIGZvciB0aGUgdmFsdWUgb2ZcbiAgLy8gdGhlIGZpbmFsIHJlc3VsdCBwcm9kdWNlZCBieSB0aGUgaXRlcmF0b3IuXG4gIHJ1bnRpbWUuYXN5bmMgPSBmdW5jdGlvbihpbm5lckZuLCBvdXRlckZuLCBzZWxmLCB0cnlMb2NzTGlzdCkge1xuICAgIHZhciBpdGVyID0gbmV3IEFzeW5jSXRlcmF0b3IoXG4gICAgICB3cmFwKGlubmVyRm4sIG91dGVyRm4sIHNlbGYsIHRyeUxvY3NMaXN0KVxuICAgICk7XG5cbiAgICByZXR1cm4gcnVudGltZS5pc0dlbmVyYXRvckZ1bmN0aW9uKG91dGVyRm4pXG4gICAgICA/IGl0ZXIgLy8gSWYgb3V0ZXJGbiBpcyBhIGdlbmVyYXRvciwgcmV0dXJuIHRoZSBmdWxsIGl0ZXJhdG9yLlxuICAgICAgOiBpdGVyLm5leHQoKS50aGVuKGZ1bmN0aW9uKHJlc3VsdCkge1xuICAgICAgICAgIHJldHVybiByZXN1bHQuZG9uZSA/IHJlc3VsdC52YWx1ZSA6IGl0ZXIubmV4dCgpO1xuICAgICAgICB9KTtcbiAgfTtcblxuICBmdW5jdGlvbiBtYWtlSW52b2tlTWV0aG9kKGlubmVyRm4sIHNlbGYsIGNvbnRleHQpIHtcbiAgICB2YXIgc3RhdGUgPSBHZW5TdGF0ZVN1c3BlbmRlZFN0YXJ0O1xuXG4gICAgcmV0dXJuIGZ1bmN0aW9uIGludm9rZShtZXRob2QsIGFyZykge1xuICAgICAgaWYgKHN0YXRlID09PSBHZW5TdGF0ZUV4ZWN1dGluZykge1xuICAgICAgICB0aHJvdyBuZXcgRXJyb3IoXCJHZW5lcmF0b3IgaXMgYWxyZWFkeSBydW5uaW5nXCIpO1xuICAgICAgfVxuXG4gICAgICBpZiAoc3RhdGUgPT09IEdlblN0YXRlQ29tcGxldGVkKSB7XG4gICAgICAgIGlmIChtZXRob2QgPT09IFwidGhyb3dcIikge1xuICAgICAgICAgIHRocm93IGFyZztcbiAgICAgICAgfVxuXG4gICAgICAgIC8vIEJlIGZvcmdpdmluZywgcGVyIDI1LjMuMy4zLjMgb2YgdGhlIHNwZWM6XG4gICAgICAgIC8vIGh0dHBzOi8vcGVvcGxlLm1vemlsbGEub3JnL35qb3JlbmRvcmZmL2VzNi1kcmFmdC5odG1sI3NlYy1nZW5lcmF0b3JyZXN1bWVcbiAgICAgICAgcmV0dXJuIGRvbmVSZXN1bHQoKTtcbiAgICAgIH1cblxuICAgICAgd2hpbGUgKHRydWUpIHtcbiAgICAgICAgdmFyIGRlbGVnYXRlID0gY29udGV4dC5kZWxlZ2F0ZTtcbiAgICAgICAgaWYgKGRlbGVnYXRlKSB7XG4gICAgICAgICAgaWYgKG1ldGhvZCA9PT0gXCJyZXR1cm5cIiB8fFxuICAgICAgICAgICAgICAobWV0aG9kID09PSBcInRocm93XCIgJiYgZGVsZWdhdGUuaXRlcmF0b3JbbWV0aG9kXSA9PT0gdW5kZWZpbmVkKSkge1xuICAgICAgICAgICAgLy8gQSByZXR1cm4gb3IgdGhyb3cgKHdoZW4gdGhlIGRlbGVnYXRlIGl0ZXJhdG9yIGhhcyBubyB0aHJvd1xuICAgICAgICAgICAgLy8gbWV0aG9kKSBhbHdheXMgdGVybWluYXRlcyB0aGUgeWllbGQqIGxvb3AuXG4gICAgICAgICAgICBjb250ZXh0LmRlbGVnYXRlID0gbnVsbDtcblxuICAgICAgICAgICAgLy8gSWYgdGhlIGRlbGVnYXRlIGl0ZXJhdG9yIGhhcyBhIHJldHVybiBtZXRob2QsIGdpdmUgaXQgYVxuICAgICAgICAgICAgLy8gY2hhbmNlIHRvIGNsZWFuIHVwLlxuICAgICAgICAgICAgdmFyIHJldHVybk1ldGhvZCA9IGRlbGVnYXRlLml0ZXJhdG9yW1wicmV0dXJuXCJdO1xuICAgICAgICAgICAgaWYgKHJldHVybk1ldGhvZCkge1xuICAgICAgICAgICAgICB2YXIgcmVjb3JkID0gdHJ5Q2F0Y2gocmV0dXJuTWV0aG9kLCBkZWxlZ2F0ZS5pdGVyYXRvciwgYXJnKTtcbiAgICAgICAgICAgICAgaWYgKHJlY29yZC50eXBlID09PSBcInRocm93XCIpIHtcbiAgICAgICAgICAgICAgICAvLyBJZiB0aGUgcmV0dXJuIG1ldGhvZCB0aHJldyBhbiBleGNlcHRpb24sIGxldCB0aGF0XG4gICAgICAgICAgICAgICAgLy8gZXhjZXB0aW9uIHByZXZhaWwgb3ZlciB0aGUgb3JpZ2luYWwgcmV0dXJuIG9yIHRocm93LlxuICAgICAgICAgICAgICAgIG1ldGhvZCA9IFwidGhyb3dcIjtcbiAgICAgICAgICAgICAgICBhcmcgPSByZWNvcmQuYXJnO1xuICAgICAgICAgICAgICAgIGNvbnRpbnVlO1xuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIGlmIChtZXRob2QgPT09IFwicmV0dXJuXCIpIHtcbiAgICAgICAgICAgICAgLy8gQ29udGludWUgd2l0aCB0aGUgb3V0ZXIgcmV0dXJuLCBub3cgdGhhdCB0aGUgZGVsZWdhdGVcbiAgICAgICAgICAgICAgLy8gaXRlcmF0b3IgaGFzIGJlZW4gdGVybWluYXRlZC5cbiAgICAgICAgICAgICAgY29udGludWU7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfVxuXG4gICAgICAgICAgdmFyIHJlY29yZCA9IHRyeUNhdGNoKFxuICAgICAgICAgICAgZGVsZWdhdGUuaXRlcmF0b3JbbWV0aG9kXSxcbiAgICAgICAgICAgIGRlbGVnYXRlLml0ZXJhdG9yLFxuICAgICAgICAgICAgYXJnXG4gICAgICAgICAgKTtcblxuICAgICAgICAgIGlmIChyZWNvcmQudHlwZSA9PT0gXCJ0aHJvd1wiKSB7XG4gICAgICAgICAgICBjb250ZXh0LmRlbGVnYXRlID0gbnVsbDtcblxuICAgICAgICAgICAgLy8gTGlrZSByZXR1cm5pbmcgZ2VuZXJhdG9yLnRocm93KHVuY2F1Z2h0KSwgYnV0IHdpdGhvdXQgdGhlXG4gICAgICAgICAgICAvLyBvdmVyaGVhZCBvZiBhbiBleHRyYSBmdW5jdGlvbiBjYWxsLlxuICAgICAgICAgICAgbWV0aG9kID0gXCJ0aHJvd1wiO1xuICAgICAgICAgICAgYXJnID0gcmVjb3JkLmFyZztcbiAgICAgICAgICAgIGNvbnRpbnVlO1xuICAgICAgICAgIH1cblxuICAgICAgICAgIC8vIERlbGVnYXRlIGdlbmVyYXRvciByYW4gYW5kIGhhbmRsZWQgaXRzIG93biBleGNlcHRpb25zIHNvXG4gICAgICAgICAgLy8gcmVnYXJkbGVzcyBvZiB3aGF0IHRoZSBtZXRob2Qgd2FzLCB3ZSBjb250aW51ZSBhcyBpZiBpdCBpc1xuICAgICAgICAgIC8vIFwibmV4dFwiIHdpdGggYW4gdW5kZWZpbmVkIGFyZy5cbiAgICAgICAgICBtZXRob2QgPSBcIm5leHRcIjtcbiAgICAgICAgICBhcmcgPSB1bmRlZmluZWQ7XG5cbiAgICAgICAgICB2YXIgaW5mbyA9IHJlY29yZC5hcmc7XG4gICAgICAgICAgaWYgKGluZm8uZG9uZSkge1xuICAgICAgICAgICAgY29udGV4dFtkZWxlZ2F0ZS5yZXN1bHROYW1lXSA9IGluZm8udmFsdWU7XG4gICAgICAgICAgICBjb250ZXh0Lm5leHQgPSBkZWxlZ2F0ZS5uZXh0TG9jO1xuICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBzdGF0ZSA9IEdlblN0YXRlU3VzcGVuZGVkWWllbGQ7XG4gICAgICAgICAgICByZXR1cm4gaW5mbztcbiAgICAgICAgICB9XG5cbiAgICAgICAgICBjb250ZXh0LmRlbGVnYXRlID0gbnVsbDtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmIChtZXRob2QgPT09IFwibmV4dFwiKSB7XG4gICAgICAgICAgY29udGV4dC5fc2VudCA9IGFyZztcblxuICAgICAgICAgIGlmIChzdGF0ZSA9PT0gR2VuU3RhdGVTdXNwZW5kZWRZaWVsZCkge1xuICAgICAgICAgICAgY29udGV4dC5zZW50ID0gYXJnO1xuICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBjb250ZXh0LnNlbnQgPSB1bmRlZmluZWQ7XG4gICAgICAgICAgfVxuICAgICAgICB9IGVsc2UgaWYgKG1ldGhvZCA9PT0gXCJ0aHJvd1wiKSB7XG4gICAgICAgICAgaWYgKHN0YXRlID09PSBHZW5TdGF0ZVN1c3BlbmRlZFN0YXJ0KSB7XG4gICAgICAgICAgICBzdGF0ZSA9IEdlblN0YXRlQ29tcGxldGVkO1xuICAgICAgICAgICAgdGhyb3cgYXJnO1xuICAgICAgICAgIH1cblxuICAgICAgICAgIGlmIChjb250ZXh0LmRpc3BhdGNoRXhjZXB0aW9uKGFyZykpIHtcbiAgICAgICAgICAgIC8vIElmIHRoZSBkaXNwYXRjaGVkIGV4Y2VwdGlvbiB3YXMgY2F1Z2h0IGJ5IGEgY2F0Y2ggYmxvY2ssXG4gICAgICAgICAgICAvLyB0aGVuIGxldCB0aGF0IGNhdGNoIGJsb2NrIGhhbmRsZSB0aGUgZXhjZXB0aW9uIG5vcm1hbGx5LlxuICAgICAgICAgICAgbWV0aG9kID0gXCJuZXh0XCI7XG4gICAgICAgICAgICBhcmcgPSB1bmRlZmluZWQ7XG4gICAgICAgICAgfVxuXG4gICAgICAgIH0gZWxzZSBpZiAobWV0aG9kID09PSBcInJldHVyblwiKSB7XG4gICAgICAgICAgY29udGV4dC5hYnJ1cHQoXCJyZXR1cm5cIiwgYXJnKTtcbiAgICAgICAgfVxuXG4gICAgICAgIHN0YXRlID0gR2VuU3RhdGVFeGVjdXRpbmc7XG5cbiAgICAgICAgdmFyIHJlY29yZCA9IHRyeUNhdGNoKGlubmVyRm4sIHNlbGYsIGNvbnRleHQpO1xuICAgICAgICBpZiAocmVjb3JkLnR5cGUgPT09IFwibm9ybWFsXCIpIHtcbiAgICAgICAgICAvLyBJZiBhbiBleGNlcHRpb24gaXMgdGhyb3duIGZyb20gaW5uZXJGbiwgd2UgbGVhdmUgc3RhdGUgPT09XG4gICAgICAgICAgLy8gR2VuU3RhdGVFeGVjdXRpbmcgYW5kIGxvb3AgYmFjayBmb3IgYW5vdGhlciBpbnZvY2F0aW9uLlxuICAgICAgICAgIHN0YXRlID0gY29udGV4dC5kb25lXG4gICAgICAgICAgICA/IEdlblN0YXRlQ29tcGxldGVkXG4gICAgICAgICAgICA6IEdlblN0YXRlU3VzcGVuZGVkWWllbGQ7XG5cbiAgICAgICAgICB2YXIgaW5mbyA9IHtcbiAgICAgICAgICAgIHZhbHVlOiByZWNvcmQuYXJnLFxuICAgICAgICAgICAgZG9uZTogY29udGV4dC5kb25lXG4gICAgICAgICAgfTtcblxuICAgICAgICAgIGlmIChyZWNvcmQuYXJnID09PSBDb250aW51ZVNlbnRpbmVsKSB7XG4gICAgICAgICAgICBpZiAoY29udGV4dC5kZWxlZ2F0ZSAmJiBtZXRob2QgPT09IFwibmV4dFwiKSB7XG4gICAgICAgICAgICAgIC8vIERlbGliZXJhdGVseSBmb3JnZXQgdGhlIGxhc3Qgc2VudCB2YWx1ZSBzbyB0aGF0IHdlIGRvbid0XG4gICAgICAgICAgICAgIC8vIGFjY2lkZW50YWxseSBwYXNzIGl0IG9uIHRvIHRoZSBkZWxlZ2F0ZS5cbiAgICAgICAgICAgICAgYXJnID0gdW5kZWZpbmVkO1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICByZXR1cm4gaW5mbztcbiAgICAgICAgICB9XG5cbiAgICAgICAgfSBlbHNlIGlmIChyZWNvcmQudHlwZSA9PT0gXCJ0aHJvd1wiKSB7XG4gICAgICAgICAgc3RhdGUgPSBHZW5TdGF0ZUNvbXBsZXRlZDtcbiAgICAgICAgICAvLyBEaXNwYXRjaCB0aGUgZXhjZXB0aW9uIGJ5IGxvb3BpbmcgYmFjayBhcm91bmQgdG8gdGhlXG4gICAgICAgICAgLy8gY29udGV4dC5kaXNwYXRjaEV4Y2VwdGlvbihhcmcpIGNhbGwgYWJvdmUuXG4gICAgICAgICAgbWV0aG9kID0gXCJ0aHJvd1wiO1xuICAgICAgICAgIGFyZyA9IHJlY29yZC5hcmc7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9O1xuICB9XG5cbiAgLy8gRGVmaW5lIEdlbmVyYXRvci5wcm90b3R5cGUue25leHQsdGhyb3cscmV0dXJufSBpbiB0ZXJtcyBvZiB0aGVcbiAgLy8gdW5pZmllZCAuX2ludm9rZSBoZWxwZXIgbWV0aG9kLlxuICBkZWZpbmVJdGVyYXRvck1ldGhvZHMoR3ApO1xuXG4gIEdwW2l0ZXJhdG9yU3ltYm9sXSA9IGZ1bmN0aW9uKCkge1xuICAgIHJldHVybiB0aGlzO1xuICB9O1xuXG4gIEdwLnRvU3RyaW5nID0gZnVuY3Rpb24oKSB7XG4gICAgcmV0dXJuIFwiW29iamVjdCBHZW5lcmF0b3JdXCI7XG4gIH07XG5cbiAgZnVuY3Rpb24gcHVzaFRyeUVudHJ5KGxvY3MpIHtcbiAgICB2YXIgZW50cnkgPSB7IHRyeUxvYzogbG9jc1swXSB9O1xuXG4gICAgaWYgKDEgaW4gbG9jcykge1xuICAgICAgZW50cnkuY2F0Y2hMb2MgPSBsb2NzWzFdO1xuICAgIH1cblxuICAgIGlmICgyIGluIGxvY3MpIHtcbiAgICAgIGVudHJ5LmZpbmFsbHlMb2MgPSBsb2NzWzJdO1xuICAgICAgZW50cnkuYWZ0ZXJMb2MgPSBsb2NzWzNdO1xuICAgIH1cblxuICAgIHRoaXMudHJ5RW50cmllcy5wdXNoKGVudHJ5KTtcbiAgfVxuXG4gIGZ1bmN0aW9uIHJlc2V0VHJ5RW50cnkoZW50cnkpIHtcbiAgICB2YXIgcmVjb3JkID0gZW50cnkuY29tcGxldGlvbiB8fCB7fTtcbiAgICByZWNvcmQudHlwZSA9IFwibm9ybWFsXCI7XG4gICAgZGVsZXRlIHJlY29yZC5hcmc7XG4gICAgZW50cnkuY29tcGxldGlvbiA9IHJlY29yZDtcbiAgfVxuXG4gIGZ1bmN0aW9uIENvbnRleHQodHJ5TG9jc0xpc3QpIHtcbiAgICAvLyBUaGUgcm9vdCBlbnRyeSBvYmplY3QgKGVmZmVjdGl2ZWx5IGEgdHJ5IHN0YXRlbWVudCB3aXRob3V0IGEgY2F0Y2hcbiAgICAvLyBvciBhIGZpbmFsbHkgYmxvY2spIGdpdmVzIHVzIGEgcGxhY2UgdG8gc3RvcmUgdmFsdWVzIHRocm93biBmcm9tXG4gICAgLy8gbG9jYXRpb25zIHdoZXJlIHRoZXJlIGlzIG5vIGVuY2xvc2luZyB0cnkgc3RhdGVtZW50LlxuICAgIHRoaXMudHJ5RW50cmllcyA9IFt7IHRyeUxvYzogXCJyb290XCIgfV07XG4gICAgdHJ5TG9jc0xpc3QuZm9yRWFjaChwdXNoVHJ5RW50cnksIHRoaXMpO1xuICAgIHRoaXMucmVzZXQodHJ1ZSk7XG4gIH1cblxuICBydW50aW1lLmtleXMgPSBmdW5jdGlvbihvYmplY3QpIHtcbiAgICB2YXIga2V5cyA9IFtdO1xuICAgIGZvciAodmFyIGtleSBpbiBvYmplY3QpIHtcbiAgICAgIGtleXMucHVzaChrZXkpO1xuICAgIH1cbiAgICBrZXlzLnJldmVyc2UoKTtcblxuICAgIC8vIFJhdGhlciB0aGFuIHJldHVybmluZyBhbiBvYmplY3Qgd2l0aCBhIG5leHQgbWV0aG9kLCB3ZSBrZWVwXG4gICAgLy8gdGhpbmdzIHNpbXBsZSBhbmQgcmV0dXJuIHRoZSBuZXh0IGZ1bmN0aW9uIGl0c2VsZi5cbiAgICByZXR1cm4gZnVuY3Rpb24gbmV4dCgpIHtcbiAgICAgIHdoaWxlIChrZXlzLmxlbmd0aCkge1xuICAgICAgICB2YXIga2V5ID0ga2V5cy5wb3AoKTtcbiAgICAgICAgaWYgKGtleSBpbiBvYmplY3QpIHtcbiAgICAgICAgICBuZXh0LnZhbHVlID0ga2V5O1xuICAgICAgICAgIG5leHQuZG9uZSA9IGZhbHNlO1xuICAgICAgICAgIHJldHVybiBuZXh0O1xuICAgICAgICB9XG4gICAgICB9XG5cbiAgICAgIC8vIFRvIGF2b2lkIGNyZWF0aW5nIGFuIGFkZGl0aW9uYWwgb2JqZWN0LCB3ZSBqdXN0IGhhbmcgdGhlIC52YWx1ZVxuICAgICAgLy8gYW5kIC5kb25lIHByb3BlcnRpZXMgb2ZmIHRoZSBuZXh0IGZ1bmN0aW9uIG9iamVjdCBpdHNlbGYuIFRoaXNcbiAgICAgIC8vIGFsc28gZW5zdXJlcyB0aGF0IHRoZSBtaW5pZmllciB3aWxsIG5vdCBhbm9ueW1pemUgdGhlIGZ1bmN0aW9uLlxuICAgICAgbmV4dC5kb25lID0gdHJ1ZTtcbiAgICAgIHJldHVybiBuZXh0O1xuICAgIH07XG4gIH07XG5cbiAgZnVuY3Rpb24gdmFsdWVzKGl0ZXJhYmxlKSB7XG4gICAgaWYgKGl0ZXJhYmxlKSB7XG4gICAgICB2YXIgaXRlcmF0b3JNZXRob2QgPSBpdGVyYWJsZVtpdGVyYXRvclN5bWJvbF07XG4gICAgICBpZiAoaXRlcmF0b3JNZXRob2QpIHtcbiAgICAgICAgcmV0dXJuIGl0ZXJhdG9yTWV0aG9kLmNhbGwoaXRlcmFibGUpO1xuICAgICAgfVxuXG4gICAgICBpZiAodHlwZW9mIGl0ZXJhYmxlLm5leHQgPT09IFwiZnVuY3Rpb25cIikge1xuICAgICAgICByZXR1cm4gaXRlcmFibGU7XG4gICAgICB9XG5cbiAgICAgIGlmICghaXNOYU4oaXRlcmFibGUubGVuZ3RoKSkge1xuICAgICAgICB2YXIgaSA9IC0xLCBuZXh0ID0gZnVuY3Rpb24gbmV4dCgpIHtcbiAgICAgICAgICB3aGlsZSAoKytpIDwgaXRlcmFibGUubGVuZ3RoKSB7XG4gICAgICAgICAgICBpZiAoaGFzT3duLmNhbGwoaXRlcmFibGUsIGkpKSB7XG4gICAgICAgICAgICAgIG5leHQudmFsdWUgPSBpdGVyYWJsZVtpXTtcbiAgICAgICAgICAgICAgbmV4dC5kb25lID0gZmFsc2U7XG4gICAgICAgICAgICAgIHJldHVybiBuZXh0O1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH1cblxuICAgICAgICAgIG5leHQudmFsdWUgPSB1bmRlZmluZWQ7XG4gICAgICAgICAgbmV4dC5kb25lID0gdHJ1ZTtcblxuICAgICAgICAgIHJldHVybiBuZXh0O1xuICAgICAgICB9O1xuXG4gICAgICAgIHJldHVybiBuZXh0Lm5leHQgPSBuZXh0O1xuICAgICAgfVxuICAgIH1cblxuICAgIC8vIFJldHVybiBhbiBpdGVyYXRvciB3aXRoIG5vIHZhbHVlcy5cbiAgICByZXR1cm4geyBuZXh0OiBkb25lUmVzdWx0IH07XG4gIH1cbiAgcnVudGltZS52YWx1ZXMgPSB2YWx1ZXM7XG5cbiAgZnVuY3Rpb24gZG9uZVJlc3VsdCgpIHtcbiAgICByZXR1cm4geyB2YWx1ZTogdW5kZWZpbmVkLCBkb25lOiB0cnVlIH07XG4gIH1cblxuICBDb250ZXh0LnByb3RvdHlwZSA9IHtcbiAgICBjb25zdHJ1Y3RvcjogQ29udGV4dCxcblxuICAgIHJlc2V0OiBmdW5jdGlvbihza2lwVGVtcFJlc2V0KSB7XG4gICAgICB0aGlzLnByZXYgPSAwO1xuICAgICAgdGhpcy5uZXh0ID0gMDtcbiAgICAgIHRoaXMuc2VudCA9IHVuZGVmaW5lZDtcbiAgICAgIHRoaXMuZG9uZSA9IGZhbHNlO1xuICAgICAgdGhpcy5kZWxlZ2F0ZSA9IG51bGw7XG5cbiAgICAgIHRoaXMudHJ5RW50cmllcy5mb3JFYWNoKHJlc2V0VHJ5RW50cnkpO1xuXG4gICAgICBpZiAoIXNraXBUZW1wUmVzZXQpIHtcbiAgICAgICAgZm9yICh2YXIgbmFtZSBpbiB0aGlzKSB7XG4gICAgICAgICAgLy8gTm90IHN1cmUgYWJvdXQgdGhlIG9wdGltYWwgb3JkZXIgb2YgdGhlc2UgY29uZGl0aW9uczpcbiAgICAgICAgICBpZiAobmFtZS5jaGFyQXQoMCkgPT09IFwidFwiICYmXG4gICAgICAgICAgICAgIGhhc093bi5jYWxsKHRoaXMsIG5hbWUpICYmXG4gICAgICAgICAgICAgICFpc05hTigrbmFtZS5zbGljZSgxKSkpIHtcbiAgICAgICAgICAgIHRoaXNbbmFtZV0gPSB1bmRlZmluZWQ7XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICB9XG4gICAgfSxcblxuICAgIHN0b3A6IGZ1bmN0aW9uKCkge1xuICAgICAgdGhpcy5kb25lID0gdHJ1ZTtcblxuICAgICAgdmFyIHJvb3RFbnRyeSA9IHRoaXMudHJ5RW50cmllc1swXTtcbiAgICAgIHZhciByb290UmVjb3JkID0gcm9vdEVudHJ5LmNvbXBsZXRpb247XG4gICAgICBpZiAocm9vdFJlY29yZC50eXBlID09PSBcInRocm93XCIpIHtcbiAgICAgICAgdGhyb3cgcm9vdFJlY29yZC5hcmc7XG4gICAgICB9XG5cbiAgICAgIHJldHVybiB0aGlzLnJ2YWw7XG4gICAgfSxcblxuICAgIGRpc3BhdGNoRXhjZXB0aW9uOiBmdW5jdGlvbihleGNlcHRpb24pIHtcbiAgICAgIGlmICh0aGlzLmRvbmUpIHtcbiAgICAgICAgdGhyb3cgZXhjZXB0aW9uO1xuICAgICAgfVxuXG4gICAgICB2YXIgY29udGV4dCA9IHRoaXM7XG4gICAgICBmdW5jdGlvbiBoYW5kbGUobG9jLCBjYXVnaHQpIHtcbiAgICAgICAgcmVjb3JkLnR5cGUgPSBcInRocm93XCI7XG4gICAgICAgIHJlY29yZC5hcmcgPSBleGNlcHRpb247XG4gICAgICAgIGNvbnRleHQubmV4dCA9IGxvYztcbiAgICAgICAgcmV0dXJuICEhY2F1Z2h0O1xuICAgICAgfVxuXG4gICAgICBmb3IgKHZhciBpID0gdGhpcy50cnlFbnRyaWVzLmxlbmd0aCAtIDE7IGkgPj0gMDsgLS1pKSB7XG4gICAgICAgIHZhciBlbnRyeSA9IHRoaXMudHJ5RW50cmllc1tpXTtcbiAgICAgICAgdmFyIHJlY29yZCA9IGVudHJ5LmNvbXBsZXRpb247XG5cbiAgICAgICAgaWYgKGVudHJ5LnRyeUxvYyA9PT0gXCJyb290XCIpIHtcbiAgICAgICAgICAvLyBFeGNlcHRpb24gdGhyb3duIG91dHNpZGUgb2YgYW55IHRyeSBibG9jayB0aGF0IGNvdWxkIGhhbmRsZVxuICAgICAgICAgIC8vIGl0LCBzbyBzZXQgdGhlIGNvbXBsZXRpb24gdmFsdWUgb2YgdGhlIGVudGlyZSBmdW5jdGlvbiB0b1xuICAgICAgICAgIC8vIHRocm93IHRoZSBleGNlcHRpb24uXG4gICAgICAgICAgcmV0dXJuIGhhbmRsZShcImVuZFwiKTtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmIChlbnRyeS50cnlMb2MgPD0gdGhpcy5wcmV2KSB7XG4gICAgICAgICAgdmFyIGhhc0NhdGNoID0gaGFzT3duLmNhbGwoZW50cnksIFwiY2F0Y2hMb2NcIik7XG4gICAgICAgICAgdmFyIGhhc0ZpbmFsbHkgPSBoYXNPd24uY2FsbChlbnRyeSwgXCJmaW5hbGx5TG9jXCIpO1xuXG4gICAgICAgICAgaWYgKGhhc0NhdGNoICYmIGhhc0ZpbmFsbHkpIHtcbiAgICAgICAgICAgIGlmICh0aGlzLnByZXYgPCBlbnRyeS5jYXRjaExvYykge1xuICAgICAgICAgICAgICByZXR1cm4gaGFuZGxlKGVudHJ5LmNhdGNoTG9jLCB0cnVlKTtcbiAgICAgICAgICAgIH0gZWxzZSBpZiAodGhpcy5wcmV2IDwgZW50cnkuZmluYWxseUxvYykge1xuICAgICAgICAgICAgICByZXR1cm4gaGFuZGxlKGVudHJ5LmZpbmFsbHlMb2MpO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgfSBlbHNlIGlmIChoYXNDYXRjaCkge1xuICAgICAgICAgICAgaWYgKHRoaXMucHJldiA8IGVudHJ5LmNhdGNoTG9jKSB7XG4gICAgICAgICAgICAgIHJldHVybiBoYW5kbGUoZW50cnkuY2F0Y2hMb2MsIHRydWUpO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgfSBlbHNlIGlmIChoYXNGaW5hbGx5KSB7XG4gICAgICAgICAgICBpZiAodGhpcy5wcmV2IDwgZW50cnkuZmluYWxseUxvYykge1xuICAgICAgICAgICAgICByZXR1cm4gaGFuZGxlKGVudHJ5LmZpbmFsbHlMb2MpO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcihcInRyeSBzdGF0ZW1lbnQgd2l0aG91dCBjYXRjaCBvciBmaW5hbGx5XCIpO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgfVxuICAgIH0sXG5cbiAgICBhYnJ1cHQ6IGZ1bmN0aW9uKHR5cGUsIGFyZykge1xuICAgICAgZm9yICh2YXIgaSA9IHRoaXMudHJ5RW50cmllcy5sZW5ndGggLSAxOyBpID49IDA7IC0taSkge1xuICAgICAgICB2YXIgZW50cnkgPSB0aGlzLnRyeUVudHJpZXNbaV07XG4gICAgICAgIGlmIChlbnRyeS50cnlMb2MgPD0gdGhpcy5wcmV2ICYmXG4gICAgICAgICAgICBoYXNPd24uY2FsbChlbnRyeSwgXCJmaW5hbGx5TG9jXCIpICYmXG4gICAgICAgICAgICB0aGlzLnByZXYgPCBlbnRyeS5maW5hbGx5TG9jKSB7XG4gICAgICAgICAgdmFyIGZpbmFsbHlFbnRyeSA9IGVudHJ5O1xuICAgICAgICAgIGJyZWFrO1xuICAgICAgICB9XG4gICAgICB9XG5cbiAgICAgIGlmIChmaW5hbGx5RW50cnkgJiZcbiAgICAgICAgICAodHlwZSA9PT0gXCJicmVha1wiIHx8XG4gICAgICAgICAgIHR5cGUgPT09IFwiY29udGludWVcIikgJiZcbiAgICAgICAgICBmaW5hbGx5RW50cnkudHJ5TG9jIDw9IGFyZyAmJlxuICAgICAgICAgIGFyZyA8PSBmaW5hbGx5RW50cnkuZmluYWxseUxvYykge1xuICAgICAgICAvLyBJZ25vcmUgdGhlIGZpbmFsbHkgZW50cnkgaWYgY29udHJvbCBpcyBub3QganVtcGluZyB0byBhXG4gICAgICAgIC8vIGxvY2F0aW9uIG91dHNpZGUgdGhlIHRyeS9jYXRjaCBibG9jay5cbiAgICAgICAgZmluYWxseUVudHJ5ID0gbnVsbDtcbiAgICAgIH1cblxuICAgICAgdmFyIHJlY29yZCA9IGZpbmFsbHlFbnRyeSA/IGZpbmFsbHlFbnRyeS5jb21wbGV0aW9uIDoge307XG4gICAgICByZWNvcmQudHlwZSA9IHR5cGU7XG4gICAgICByZWNvcmQuYXJnID0gYXJnO1xuXG4gICAgICBpZiAoZmluYWxseUVudHJ5KSB7XG4gICAgICAgIHRoaXMubmV4dCA9IGZpbmFsbHlFbnRyeS5maW5hbGx5TG9jO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgdGhpcy5jb21wbGV0ZShyZWNvcmQpO1xuICAgICAgfVxuXG4gICAgICByZXR1cm4gQ29udGludWVTZW50aW5lbDtcbiAgICB9LFxuXG4gICAgY29tcGxldGU6IGZ1bmN0aW9uKHJlY29yZCwgYWZ0ZXJMb2MpIHtcbiAgICAgIGlmIChyZWNvcmQudHlwZSA9PT0gXCJ0aHJvd1wiKSB7XG4gICAgICAgIHRocm93IHJlY29yZC5hcmc7XG4gICAgICB9XG5cbiAgICAgIGlmIChyZWNvcmQudHlwZSA9PT0gXCJicmVha1wiIHx8XG4gICAgICAgICAgcmVjb3JkLnR5cGUgPT09IFwiY29udGludWVcIikge1xuICAgICAgICB0aGlzLm5leHQgPSByZWNvcmQuYXJnO1xuICAgICAgfSBlbHNlIGlmIChyZWNvcmQudHlwZSA9PT0gXCJyZXR1cm5cIikge1xuICAgICAgICB0aGlzLnJ2YWwgPSByZWNvcmQuYXJnO1xuICAgICAgICB0aGlzLm5leHQgPSBcImVuZFwiO1xuICAgICAgfSBlbHNlIGlmIChyZWNvcmQudHlwZSA9PT0gXCJub3JtYWxcIiAmJiBhZnRlckxvYykge1xuICAgICAgICB0aGlzLm5leHQgPSBhZnRlckxvYztcbiAgICAgIH1cbiAgICB9LFxuXG4gICAgZmluaXNoOiBmdW5jdGlvbihmaW5hbGx5TG9jKSB7XG4gICAgICBmb3IgKHZhciBpID0gdGhpcy50cnlFbnRyaWVzLmxlbmd0aCAtIDE7IGkgPj0gMDsgLS1pKSB7XG4gICAgICAgIHZhciBlbnRyeSA9IHRoaXMudHJ5RW50cmllc1tpXTtcbiAgICAgICAgaWYgKGVudHJ5LmZpbmFsbHlMb2MgPT09IGZpbmFsbHlMb2MpIHtcbiAgICAgICAgICB0aGlzLmNvbXBsZXRlKGVudHJ5LmNvbXBsZXRpb24sIGVudHJ5LmFmdGVyTG9jKTtcbiAgICAgICAgICByZXNldFRyeUVudHJ5KGVudHJ5KTtcbiAgICAgICAgICByZXR1cm4gQ29udGludWVTZW50aW5lbDtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH0sXG5cbiAgICBcImNhdGNoXCI6IGZ1bmN0aW9uKHRyeUxvYykge1xuICAgICAgZm9yICh2YXIgaSA9IHRoaXMudHJ5RW50cmllcy5sZW5ndGggLSAxOyBpID49IDA7IC0taSkge1xuICAgICAgICB2YXIgZW50cnkgPSB0aGlzLnRyeUVudHJpZXNbaV07XG4gICAgICAgIGlmIChlbnRyeS50cnlMb2MgPT09IHRyeUxvYykge1xuICAgICAgICAgIHZhciByZWNvcmQgPSBlbnRyeS5jb21wbGV0aW9uO1xuICAgICAgICAgIGlmIChyZWNvcmQudHlwZSA9PT0gXCJ0aHJvd1wiKSB7XG4gICAgICAgICAgICB2YXIgdGhyb3duID0gcmVjb3JkLmFyZztcbiAgICAgICAgICAgIHJlc2V0VHJ5RW50cnkoZW50cnkpO1xuICAgICAgICAgIH1cbiAgICAgICAgICByZXR1cm4gdGhyb3duO1xuICAgICAgICB9XG4gICAgICB9XG5cbiAgICAgIC8vIFRoZSBjb250ZXh0LmNhdGNoIG1ldGhvZCBtdXN0IG9ubHkgYmUgY2FsbGVkIHdpdGggYSBsb2NhdGlvblxuICAgICAgLy8gYXJndW1lbnQgdGhhdCBjb3JyZXNwb25kcyB0byBhIGtub3duIGNhdGNoIGJsb2NrLlxuICAgICAgdGhyb3cgbmV3IEVycm9yKFwiaWxsZWdhbCBjYXRjaCBhdHRlbXB0XCIpO1xuICAgIH0sXG5cbiAgICBkZWxlZ2F0ZVlpZWxkOiBmdW5jdGlvbihpdGVyYWJsZSwgcmVzdWx0TmFtZSwgbmV4dExvYykge1xuICAgICAgdGhpcy5kZWxlZ2F0ZSA9IHtcbiAgICAgICAgaXRlcmF0b3I6IHZhbHVlcyhpdGVyYWJsZSksXG4gICAgICAgIHJlc3VsdE5hbWU6IHJlc3VsdE5hbWUsXG4gICAgICAgIG5leHRMb2M6IG5leHRMb2NcbiAgICAgIH07XG5cbiAgICAgIHJldHVybiBDb250aW51ZVNlbnRpbmVsO1xuICAgIH1cbiAgfTtcbn0pKFxuICAvLyBBbW9uZyB0aGUgdmFyaW91cyB0cmlja3MgZm9yIG9idGFpbmluZyBhIHJlZmVyZW5jZSB0byB0aGUgZ2xvYmFsXG4gIC8vIG9iamVjdCwgdGhpcyBzZWVtcyB0byBiZSB0aGUgbW9zdCByZWxpYWJsZSB0ZWNobmlxdWUgdGhhdCBkb2VzIG5vdFxuICAvLyB1c2UgaW5kaXJlY3QgZXZhbCAod2hpY2ggdmlvbGF0ZXMgQ29udGVudCBTZWN1cml0eSBQb2xpY3kpLlxuICB0eXBlb2YgZ2xvYmFsID09PSBcIm9iamVjdFwiID8gZ2xvYmFsIDpcbiAgdHlwZW9mIHdpbmRvdyA9PT0gXCJvYmplY3RcIiA/IHdpbmRvdyA6XG4gIHR5cGVvZiBzZWxmID09PSBcIm9iamVjdFwiID8gc2VsZiA6IHRoaXNcbik7XG4iLCIvLyBzaGltIGZvciB1c2luZyBwcm9jZXNzIGluIGJyb3dzZXJcblxudmFyIHByb2Nlc3MgPSBtb2R1bGUuZXhwb3J0cyA9IHt9O1xudmFyIHF1ZXVlID0gW107XG52YXIgZHJhaW5pbmcgPSBmYWxzZTtcbnZhciBjdXJyZW50UXVldWU7XG52YXIgcXVldWVJbmRleCA9IC0xO1xuXG5mdW5jdGlvbiBjbGVhblVwTmV4dFRpY2soKSB7XG4gICAgZHJhaW5pbmcgPSBmYWxzZTtcbiAgICBpZiAoY3VycmVudFF1ZXVlLmxlbmd0aCkge1xuICAgICAgICBxdWV1ZSA9IGN1cnJlbnRRdWV1ZS5jb25jYXQocXVldWUpO1xuICAgIH0gZWxzZSB7XG4gICAgICAgIHF1ZXVlSW5kZXggPSAtMTtcbiAgICB9XG4gICAgaWYgKHF1ZXVlLmxlbmd0aCkge1xuICAgICAgICBkcmFpblF1ZXVlKCk7XG4gICAgfVxufVxuXG5mdW5jdGlvbiBkcmFpblF1ZXVlKCkge1xuICAgIGlmIChkcmFpbmluZykge1xuICAgICAgICByZXR1cm47XG4gICAgfVxuICAgIHZhciB0aW1lb3V0ID0gc2V0VGltZW91dChjbGVhblVwTmV4dFRpY2spO1xuICAgIGRyYWluaW5nID0gdHJ1ZTtcblxuICAgIHZhciBsZW4gPSBxdWV1ZS5sZW5ndGg7XG4gICAgd2hpbGUobGVuKSB7XG4gICAgICAgIGN1cnJlbnRRdWV1ZSA9IHF1ZXVlO1xuICAgICAgICBxdWV1ZSA9IFtdO1xuICAgICAgICB3aGlsZSAoKytxdWV1ZUluZGV4IDwgbGVuKSB7XG4gICAgICAgICAgICBpZiAoY3VycmVudFF1ZXVlKSB7XG4gICAgICAgICAgICAgICAgY3VycmVudFF1ZXVlW3F1ZXVlSW5kZXhdLnJ1bigpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIHF1ZXVlSW5kZXggPSAtMTtcbiAgICAgICAgbGVuID0gcXVldWUubGVuZ3RoO1xuICAgIH1cbiAgICBjdXJyZW50UXVldWUgPSBudWxsO1xuICAgIGRyYWluaW5nID0gZmFsc2U7XG4gICAgY2xlYXJUaW1lb3V0KHRpbWVvdXQpO1xufVxuXG5wcm9jZXNzLm5leHRUaWNrID0gZnVuY3Rpb24gKGZ1bikge1xuICAgIHZhciBhcmdzID0gbmV3IEFycmF5KGFyZ3VtZW50cy5sZW5ndGggLSAxKTtcbiAgICBpZiAoYXJndW1lbnRzLmxlbmd0aCA+IDEpIHtcbiAgICAgICAgZm9yICh2YXIgaSA9IDE7IGkgPCBhcmd1bWVudHMubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgICAgIGFyZ3NbaSAtIDFdID0gYXJndW1lbnRzW2ldO1xuICAgICAgICB9XG4gICAgfVxuICAgIHF1ZXVlLnB1c2gobmV3IEl0ZW0oZnVuLCBhcmdzKSk7XG4gICAgaWYgKHF1ZXVlLmxlbmd0aCA9PT0gMSAmJiAhZHJhaW5pbmcpIHtcbiAgICAgICAgc2V0VGltZW91dChkcmFpblF1ZXVlLCAwKTtcbiAgICB9XG59O1xuXG4vLyB2OCBsaWtlcyBwcmVkaWN0aWJsZSBvYmplY3RzXG5mdW5jdGlvbiBJdGVtKGZ1biwgYXJyYXkpIHtcbiAgICB0aGlzLmZ1biA9IGZ1bjtcbiAgICB0aGlzLmFycmF5ID0gYXJyYXk7XG59XG5JdGVtLnByb3RvdHlwZS5ydW4gPSBmdW5jdGlvbiAoKSB7XG4gICAgdGhpcy5mdW4uYXBwbHkobnVsbCwgdGhpcy5hcnJheSk7XG59O1xucHJvY2Vzcy50aXRsZSA9ICdicm93c2VyJztcbnByb2Nlc3MuYnJvd3NlciA9IHRydWU7XG5wcm9jZXNzLmVudiA9IHt9O1xucHJvY2Vzcy5hcmd2ID0gW107XG5wcm9jZXNzLnZlcnNpb24gPSAnJzsgLy8gZW1wdHkgc3RyaW5nIHRvIGF2b2lkIHJlZ2V4cCBpc3N1ZXNcbnByb2Nlc3MudmVyc2lvbnMgPSB7fTtcblxuZnVuY3Rpb24gbm9vcCgpIHt9XG5cbnByb2Nlc3Mub24gPSBub29wO1xucHJvY2Vzcy5hZGRMaXN0ZW5lciA9IG5vb3A7XG5wcm9jZXNzLm9uY2UgPSBub29wO1xucHJvY2Vzcy5vZmYgPSBub29wO1xucHJvY2Vzcy5yZW1vdmVMaXN0ZW5lciA9IG5vb3A7XG5wcm9jZXNzLnJlbW92ZUFsbExpc3RlbmVycyA9IG5vb3A7XG5wcm9jZXNzLmVtaXQgPSBub29wO1xuXG5wcm9jZXNzLmJpbmRpbmcgPSBmdW5jdGlvbiAobmFtZSkge1xuICAgIHRocm93IG5ldyBFcnJvcigncHJvY2Vzcy5iaW5kaW5nIGlzIG5vdCBzdXBwb3J0ZWQnKTtcbn07XG5cbnByb2Nlc3MuY3dkID0gZnVuY3Rpb24gKCkgeyByZXR1cm4gJy8nIH07XG5wcm9jZXNzLmNoZGlyID0gZnVuY3Rpb24gKGRpcikge1xuICAgIHRocm93IG5ldyBFcnJvcigncHJvY2Vzcy5jaGRpciBpcyBub3Qgc3VwcG9ydGVkJyk7XG59O1xucHJvY2Vzcy51bWFzayA9IGZ1bmN0aW9uKCkgeyByZXR1cm4gMDsgfTtcbiIsImV4cG9ydCBkZWZhdWx0IHtcclxuICB0ZW1wbzogMTIwLFxyXG4gIG9jdGF2ZTogNCxcclxuICBsZW5ndGg6IDQsXHJcbiAgdmVsb2NpdHk6IDEwMCxcclxuICBxdWFudGl6ZTogNzUsXHJcbiAgbG9vcENvdW50OiAyLFxyXG59O1xyXG4iLCJpbXBvcnQgU3ludGF4IGZyb20gXCIuL1N5bnRheFwiO1xyXG5pbXBvcnQgU2Nhbm5lciBmcm9tIFwiLi9TY2FubmVyXCI7XHJcblxyXG5jb25zdCBOT1RFX0lOREVYRVMgPSB7IGM6IDAsIGQ6IDIsIGU6IDQsIGY6IDUsIGc6IDcsIGE6IDksIGI6IDExIH07XHJcblxyXG5leHBvcnQgZGVmYXVsdCBjbGFzcyBNTUxQYXJzZXIge1xyXG4gIGNvbnN0cnVjdG9yKHNvdXJjZSkge1xyXG4gICAgdGhpcy5zY2FubmVyID0gbmV3IFNjYW5uZXIoc291cmNlKTtcclxuICB9XHJcblxyXG4gIHBhcnNlKCkge1xyXG4gICAgbGV0IHJlc3VsdCA9IFtdO1xyXG5cclxuICAgIHRoaXMuX3JlYWRVbnRpbChcIjtcIiwgKCkgPT4ge1xyXG4gICAgICByZXN1bHQgPSByZXN1bHQuY29uY2F0KHRoaXMuYWR2YW5jZSgpKTtcclxuICAgIH0pO1xyXG5cclxuICAgIHJldHVybiByZXN1bHQ7XHJcbiAgfVxyXG5cclxuICBhZHZhbmNlKCkge1xyXG4gICAgc3dpdGNoICh0aGlzLnNjYW5uZXIucGVlaygpKSB7XHJcbiAgICBjYXNlIFwiY1wiOlxyXG4gICAgY2FzZSBcImRcIjpcclxuICAgIGNhc2UgXCJlXCI6XHJcbiAgICBjYXNlIFwiZlwiOlxyXG4gICAgY2FzZSBcImdcIjpcclxuICAgIGNhc2UgXCJhXCI6XHJcbiAgICBjYXNlIFwiYlwiOlxyXG4gICAgICByZXR1cm4gdGhpcy5yZWFkTm90ZSgpO1xyXG4gICAgY2FzZSBcIltcIjpcclxuICAgICAgcmV0dXJuIHRoaXMucmVhZENob3JkKCk7XHJcbiAgICBjYXNlIFwiclwiOlxyXG4gICAgICByZXR1cm4gdGhpcy5yZWFkUmVzdCgpO1xyXG4gICAgY2FzZSBcIm9cIjpcclxuICAgICAgcmV0dXJuIHRoaXMucmVhZE9jdGF2ZSgpO1xyXG4gICAgY2FzZSBcIj5cIjpcclxuICAgICAgcmV0dXJuIHRoaXMucmVhZE9jdGF2ZVNoaWZ0KCsxKTtcclxuICAgIGNhc2UgXCI8XCI6XHJcbiAgICAgIHJldHVybiB0aGlzLnJlYWRPY3RhdmVTaGlmdCgtMSk7XHJcbiAgICBjYXNlIFwibFwiOlxyXG4gICAgICByZXR1cm4gdGhpcy5yZWFkTm90ZUxlbmd0aCgpO1xyXG4gICAgY2FzZSBcInFcIjpcclxuICAgICAgcmV0dXJuIHRoaXMucmVhZE5vdGVRdWFudGl6ZSgpO1xyXG4gICAgY2FzZSBcInZcIjpcclxuICAgICAgcmV0dXJuIHRoaXMucmVhZE5vdGVWZWxvY2l0eSgpO1xyXG4gICAgY2FzZSBcInRcIjpcclxuICAgICAgcmV0dXJuIHRoaXMucmVhZFRlbXBvKCk7XHJcbiAgICBjYXNlIFwiJFwiOlxyXG4gICAgICByZXR1cm4gdGhpcy5yZWFkSW5maW5pdGVMb29wKCk7XHJcbiAgICBjYXNlIFwiL1wiOlxyXG4gICAgICByZXR1cm4gdGhpcy5yZWFkTG9vcCgpO1xyXG4gICAgY2FzZSBcIkBcIjpcclxuICAgICAgcmV0dXJuIHRoaXMucmVhZFRvbmUoKTtcclxuICAgIGNhc2UgXCJ3XCI6XHJcbiAgICAgIHJldHVybiB0aGlzLnJlYWRXYXZlRm9ybSgpO1xyXG4gICAgY2FzZSBcInNcIjpcclxuICAgICAgcmV0dXJuIHRoaXMucmVhZEVudmVsb3BlKCk7XHJcbiAgICBkZWZhdWx0OlxyXG4gICAgICAvLyBkbyBub3RoaW5nXHJcbiAgICB9XHJcbiAgICB0aGlzLnNjYW5uZXIudGhyb3dVbmV4cGVjdGVkVG9rZW4oKTtcclxuICB9XHJcblxyXG4gIHJlYWROb3RlKCkge1xyXG4gICAgcmV0dXJuIHtcclxuICAgICAgdHlwZTogU3ludGF4Lk5vdGUsXHJcbiAgICAgIG5vdGVOdW1iZXJzOiBbIHRoaXMuX3JlYWROb3RlTnVtYmVyKDApIF0sXHJcbiAgICAgIG5vdGVMZW5ndGg6IHRoaXMuX3JlYWRMZW5ndGgoKSxcclxuICAgIH07XHJcbiAgfVxyXG5cclxuICByZWFkQ2hvcmQoKSB7XHJcbiAgICB0aGlzLnNjYW5uZXIuZXhwZWN0KFwiW1wiKTtcclxuXHJcbiAgICBsZXQgbm90ZUxpc3QgPSBbXTtcclxuICAgIGxldCBvZmZzZXQgPSAwO1xyXG5cclxuICAgIHRoaXMuX3JlYWRVbnRpbChcIl1cIiwgKCkgPT4ge1xyXG4gICAgICBzd2l0Y2ggKHRoaXMuc2Nhbm5lci5wZWVrKCkpIHtcclxuICAgICAgY2FzZSBcImNcIjpcclxuICAgICAgY2FzZSBcImRcIjpcclxuICAgICAgY2FzZSBcImVcIjpcclxuICAgICAgY2FzZSBcImZcIjpcclxuICAgICAgY2FzZSBcImdcIjpcclxuICAgICAgY2FzZSBcImFcIjpcclxuICAgICAgY2FzZSBcImJcIjpcclxuICAgICAgICBub3RlTGlzdC5wdXNoKHRoaXMuX3JlYWROb3RlTnVtYmVyKG9mZnNldCkpO1xyXG4gICAgICAgIGJyZWFrO1xyXG4gICAgICBjYXNlIFwiPlwiOlxyXG4gICAgICAgIHRoaXMuc2Nhbm5lci5uZXh0KCk7XHJcbiAgICAgICAgb2Zmc2V0ICs9IDEyO1xyXG4gICAgICAgIGJyZWFrO1xyXG4gICAgICBjYXNlIFwiPFwiOlxyXG4gICAgICAgIHRoaXMuc2Nhbm5lci5uZXh0KCk7XHJcbiAgICAgICAgb2Zmc2V0IC09IDEyO1xyXG4gICAgICAgIGJyZWFrO1xyXG4gICAgICBkZWZhdWx0OlxyXG4gICAgICAgIHRoaXMuc2Nhbm5lci50aHJvd1VuZXhwZWN0ZWRUb2tlbigpO1xyXG4gICAgICB9XHJcbiAgICB9KTtcclxuXHJcbiAgICB0aGlzLnNjYW5uZXIuZXhwZWN0KFwiXVwiKTtcclxuXHJcbiAgICByZXR1cm4ge1xyXG4gICAgICB0eXBlOiBTeW50YXguTm90ZSxcclxuICAgICAgbm90ZU51bWJlcnM6IG5vdGVMaXN0LFxyXG4gICAgICBub3RlTGVuZ3RoOiB0aGlzLl9yZWFkTGVuZ3RoKCksXHJcbiAgICB9O1xyXG4gIH1cclxuXHJcbiAgcmVhZFJlc3QoKSB7XHJcbiAgICB0aGlzLnNjYW5uZXIuZXhwZWN0KFwiclwiKTtcclxuXHJcbiAgICByZXR1cm4ge1xyXG4gICAgICB0eXBlOiBTeW50YXguUmVzdCxcclxuICAgICAgbm90ZUxlbmd0aDogdGhpcy5fcmVhZExlbmd0aCgpLFxyXG4gICAgfTtcclxuICB9XHJcblxyXG4gIHJlYWRPY3RhdmUoKSB7XHJcbiAgICB0aGlzLnNjYW5uZXIuZXhwZWN0KFwib1wiKTtcclxuXHJcbiAgICByZXR1cm4ge1xyXG4gICAgICB0eXBlOiBTeW50YXguT2N0YXZlLFxyXG4gICAgICB2YWx1ZTogdGhpcy5fcmVhZEFyZ3VtZW50KC9cXGQrLyksXHJcbiAgICB9O1xyXG4gIH1cclxuXHJcbiAgcmVhZE9jdGF2ZVNoaWZ0KGRpcmVjdGlvbikge1xyXG4gICAgdGhpcy5zY2FubmVyLmV4cGVjdCgvPHw+Lyk7XHJcblxyXG4gICAgcmV0dXJuIHtcclxuICAgICAgdHlwZTogU3ludGF4Lk9jdGF2ZVNoaWZ0LFxyXG4gICAgICBkaXJlY3Rpb246IGRpcmVjdGlvbnwwLFxyXG4gICAgICB2YWx1ZTogdGhpcy5fcmVhZEFyZ3VtZW50KC9cXGQrLyksXHJcbiAgICB9O1xyXG4gIH1cclxuXHJcbiAgcmVhZE5vdGVMZW5ndGgoKSB7XHJcbiAgICB0aGlzLnNjYW5uZXIuZXhwZWN0KFwibFwiKTtcclxuXHJcbiAgICByZXR1cm4ge1xyXG4gICAgICB0eXBlOiBTeW50YXguTm90ZUxlbmd0aCxcclxuICAgICAgbm90ZUxlbmd0aDogdGhpcy5fcmVhZExlbmd0aCgpLFxyXG4gICAgfTtcclxuICB9XHJcblxyXG4gIHJlYWROb3RlUXVhbnRpemUoKSB7XHJcbiAgICB0aGlzLnNjYW5uZXIuZXhwZWN0KFwicVwiKTtcclxuXHJcbiAgICByZXR1cm4ge1xyXG4gICAgICB0eXBlOiBTeW50YXguTm90ZVF1YW50aXplLFxyXG4gICAgICB2YWx1ZTogdGhpcy5fcmVhZEFyZ3VtZW50KC9cXGQrLyksXHJcbiAgICB9O1xyXG4gIH1cclxuXHJcbiAgcmVhZE5vdGVWZWxvY2l0eSgpIHtcclxuICAgIHRoaXMuc2Nhbm5lci5leHBlY3QoXCJ2XCIpO1xyXG5cclxuICAgIHJldHVybiB7XHJcbiAgICAgIHR5cGU6IFN5bnRheC5Ob3RlVmVsb2NpdHksXHJcbiAgICAgIHZhbHVlOiB0aGlzLl9yZWFkQXJndW1lbnQoL1xcZCsvKSxcclxuICAgIH07XHJcbiAgfVxyXG5cclxuICByZWFkVGVtcG8oKSB7XHJcbiAgICB0aGlzLnNjYW5uZXIuZXhwZWN0KFwidFwiKTtcclxuXHJcbiAgICByZXR1cm4ge1xyXG4gICAgICB0eXBlOiBTeW50YXguVGVtcG8sXHJcbiAgICAgIHZhbHVlOiB0aGlzLl9yZWFkQXJndW1lbnQoL1xcZCsoXFwuXFxkKyk/LyksXHJcbiAgICB9O1xyXG4gIH1cclxuXHJcbiAgcmVhZEluZmluaXRlTG9vcCgpIHtcclxuICAgIHRoaXMuc2Nhbm5lci5leHBlY3QoXCIkXCIpO1xyXG5cclxuICAgIHJldHVybiB7XHJcbiAgICAgIHR5cGU6IFN5bnRheC5JbmZpbml0ZUxvb3AsXHJcbiAgICB9O1xyXG4gIH1cclxuXHJcbiAgcmVhZExvb3AoKSB7XHJcbiAgICB0aGlzLnNjYW5uZXIuZXhwZWN0KFwiL1wiKTtcclxuICAgIHRoaXMuc2Nhbm5lci5leHBlY3QoXCI6XCIpO1xyXG5cclxuICAgIGxldCByZXN1bHQgPSBbXTtcclxuICAgIGxldCBsb29wQmVnaW4gPSB7IHR5cGU6IFN5bnRheC5Mb29wQmVnaW4gfTtcclxuICAgIGxldCBsb29wRW5kID0geyB0eXBlOiBTeW50YXguTG9vcEVuZCB9O1xyXG5cclxuICAgIHJlc3VsdCA9IHJlc3VsdC5jb25jYXQobG9vcEJlZ2luKTtcclxuICAgIHRoaXMuX3JlYWRVbnRpbCgvW3w6XS8sICgpID0+IHtcclxuICAgICAgcmVzdWx0ID0gcmVzdWx0LmNvbmNhdCh0aGlzLmFkdmFuY2UoKSk7XHJcbiAgICB9KTtcclxuICAgIHJlc3VsdCA9IHJlc3VsdC5jb25jYXQodGhpcy5fcmVhZExvb3BFeGl0KCkpO1xyXG5cclxuICAgIHRoaXMuc2Nhbm5lci5leHBlY3QoXCI6XCIpO1xyXG4gICAgdGhpcy5zY2FubmVyLmV4cGVjdChcIi9cIik7XHJcblxyXG4gICAgbG9vcEJlZ2luLnZhbHVlID0gdGhpcy5fcmVhZEFyZ3VtZW50KC9cXGQrLykgfHwgbnVsbDtcclxuXHJcbiAgICByZXN1bHQgPSByZXN1bHQuY29uY2F0KGxvb3BFbmQpO1xyXG5cclxuICAgIHJldHVybiByZXN1bHQ7XHJcbiAgfVxyXG4gIFxyXG4gIHJlYWRUb25lKCl7XHJcbiAgICB0aGlzLnNjYW5uZXIuZXhwZWN0KFwiQFwiKTtcclxuICAgIHJldHVybiB7XHJcbiAgICAgIHR5cGU6IFN5bnRheC5Ub25lLFxyXG4gICAgICB2YWx1ZTogdGhpcy5fcmVhZEFyZ3VtZW50KC9cXGQrLylcclxuICAgIH07XHJcbiAgfVxyXG4gIFxyXG4gIHJlYWRXYXZlRm9ybSgpe1xyXG4gICAgdGhpcy5zY2FubmVyLmV4cGVjdChcIndcIik7XHJcbiAgICB0aGlzLnNjYW5uZXIuZXhwZWN0KFwiXFxcIlwiKTtcclxuICAgIGxldCB3YXZlRGF0YSA9IHRoaXMuc2Nhbm5lci5zY2FuKC9bMC05YS1mQS1GXSs/Lyk7XHJcbiAgICB0aGlzLnNjYW5uZXIuZXhwZWN0KFwiXFxcIlwiKTtcclxuICAgIHJldHVybiB7XHJcbiAgICAgIHR5cGU6IFN5bnRheC5XYXZlRm9ybSxcclxuICAgICAgdmFsdWU6IHdhdmVEYXRhXHJcbiAgICB9O1xyXG4gIH1cclxuICBcclxuICByZWFkRW52ZWxvcGUoKXtcclxuICAgIHRoaXMuc2Nhbm5lci5leHBlY3QoXCJzXCIpO1xyXG4gICAgbGV0IGEgPSB0aGlzLl9yZWFkQXJndW1lbnQoL1xcZCsoXFwuXFxkKyk/Lyk7XHJcbiAgICB0aGlzLnNjYW5uZXIuZXhwZWN0KFwiLFwiKTtcclxuICAgIGxldCBkID0gdGhpcy5fcmVhZEFyZ3VtZW50KC9cXGQrKFxcLlxcZCspPy8pO1xyXG4gICAgdGhpcy5zY2FubmVyLmV4cGVjdChcIixcIik7XHJcbiAgICBsZXQgcyA9IHRoaXMuX3JlYWRBcmd1bWVudCgvXFxkKyhcXC5cXGQrKT8vKTtcclxuICAgIHRoaXMuc2Nhbm5lci5leHBlY3QoXCIsXCIpO1xyXG4gICAgbGV0IHIgPSB0aGlzLl9yZWFkQXJndW1lbnQoL1xcZCsoXFwuXFxkKyk/Lyk7XHJcbiAgICByZXR1cm4ge1xyXG4gICAgICB0eXBlOlN5bnRheC5FbnZlbG9wZSxcclxuICAgICAgYTphLGQ6ZCxzOnMscjpyXHJcbiAgICB9XHJcbiAgfVxyXG5cclxuICBfcmVhZFVudGlsKG1hdGNoZXIsIGNhbGxiYWNrKSB7XHJcbiAgICB3aGlsZSAodGhpcy5zY2FubmVyLmhhc05leHQoKSkge1xyXG4gICAgICB0aGlzLnNjYW5uZXIuZm9yd2FyZCgpO1xyXG4gICAgICBpZiAoIXRoaXMuc2Nhbm5lci5oYXNOZXh0KCkgfHwgdGhpcy5zY2FubmVyLm1hdGNoKG1hdGNoZXIpKSB7XHJcbiAgICAgICAgYnJlYWs7XHJcbiAgICAgIH1cclxuICAgICAgY2FsbGJhY2soKTtcclxuICAgIH1cclxuICB9XHJcblxyXG4gIF9yZWFkQXJndW1lbnQobWF0Y2hlcikge1xyXG4gICAgbGV0IG51bSA9IHRoaXMuc2Nhbm5lci5zY2FuKG1hdGNoZXIpO1xyXG5cclxuICAgIHJldHVybiBudW0gIT09IG51bGwgPyArbnVtIDogbnVsbDtcclxuICB9XHJcblxyXG4gIF9yZWFkTm90ZU51bWJlcihvZmZzZXQpIHtcclxuICAgIGxldCBub3RlSW5kZXggPSBOT1RFX0lOREVYRVNbdGhpcy5zY2FubmVyLm5leHQoKV07XHJcblxyXG4gICAgcmV0dXJuIG5vdGVJbmRleCArIHRoaXMuX3JlYWRBY2NpZGVudGFsKCkgKyBvZmZzZXQ7XHJcbiAgfVxyXG5cclxuICBfcmVhZEFjY2lkZW50YWwoKSB7XHJcbiAgICBpZiAodGhpcy5zY2FubmVyLm1hdGNoKFwiK1wiKSkge1xyXG4gICAgICByZXR1cm4gKzEgKiB0aGlzLnNjYW5uZXIuc2NhbigvXFwrKy8pLmxlbmd0aDtcclxuICAgIH1cclxuICAgIGlmICh0aGlzLnNjYW5uZXIubWF0Y2goXCItXCIpKSB7XHJcbiAgICAgIHJldHVybiAtMSAqIHRoaXMuc2Nhbm5lci5zY2FuKC9cXC0rLykubGVuZ3RoO1xyXG4gICAgfVxyXG4gICAgcmV0dXJuIDA7XHJcbiAgfVxyXG5cclxuICBfcmVhZERvdCgpIHtcclxuICAgIGxldCBsZW4gPSAodGhpcy5zY2FubmVyLnNjYW4oL1xcLisvKSB8fCBcIlwiKS5sZW5ndGg7XHJcbiAgICBsZXQgcmVzdWx0ID0gbmV3IEFycmF5KGxlbik7XHJcblxyXG4gICAgZm9yIChsZXQgaSA9IDA7IGkgPCBsZW47IGkrKykge1xyXG4gICAgICByZXN1bHRbaV0gPSAwO1xyXG4gICAgfVxyXG5cclxuICAgIHJldHVybiByZXN1bHQ7XHJcbiAgfVxyXG5cclxuICBfcmVhZExlbmd0aCgpIHtcclxuICAgIGxldCByZXN1bHQgPSBbXTtcclxuXHJcbiAgICByZXN1bHQgPSByZXN1bHQuY29uY2F0KHRoaXMuX3JlYWRBcmd1bWVudCgvXFxkKy8pKTtcclxuICAgIHJlc3VsdCA9IHJlc3VsdC5jb25jYXQodGhpcy5fcmVhZERvdCgpKTtcclxuXHJcbiAgICBsZXQgdGllID0gdGhpcy5fcmVhZFRpZSgpO1xyXG5cclxuICAgIGlmICh0aWUpIHtcclxuICAgICAgcmVzdWx0ID0gcmVzdWx0LmNvbmNhdCh0aWUpO1xyXG4gICAgfVxyXG5cclxuICAgIHJldHVybiByZXN1bHQ7XHJcbiAgfVxyXG5cclxuICBfcmVhZFRpZSgpIHtcclxuICAgIHRoaXMuc2Nhbm5lci5mb3J3YXJkKCk7XHJcblxyXG4gICAgaWYgKHRoaXMuc2Nhbm5lci5tYXRjaChcIl5cIikpIHtcclxuICAgICAgdGhpcy5zY2FubmVyLm5leHQoKTtcclxuICAgICAgcmV0dXJuIHRoaXMuX3JlYWRMZW5ndGgoKTtcclxuICAgIH1cclxuXHJcbiAgICByZXR1cm4gbnVsbDtcclxuICB9XHJcblxyXG4gIF9yZWFkTG9vcEV4aXQoKSB7XHJcbiAgICBsZXQgcmVzdWx0ID0gW107XHJcblxyXG4gICAgaWYgKHRoaXMuc2Nhbm5lci5tYXRjaChcInxcIikpIHtcclxuICAgICAgdGhpcy5zY2FubmVyLm5leHQoKTtcclxuXHJcbiAgICAgIGxldCBsb29wRXhpdCA9IHsgdHlwZTogU3ludGF4Lkxvb3BFeGl0IH07XHJcblxyXG4gICAgICByZXN1bHQgPSByZXN1bHQuY29uY2F0KGxvb3BFeGl0KTtcclxuXHJcbiAgICAgIHRoaXMuX3JlYWRVbnRpbChcIjpcIiwgKCkgPT4ge1xyXG4gICAgICAgIHJlc3VsdCA9IHJlc3VsdC5jb25jYXQodGhpcy5hZHZhbmNlKCkpO1xyXG4gICAgICB9KTtcclxuICAgIH1cclxuXHJcbiAgICByZXR1cm4gcmVzdWx0O1xyXG4gIH1cclxufVxyXG4iLCJleHBvcnQgZGVmYXVsdCBjbGFzcyBTY2FubmVyIHtcclxuICBjb25zdHJ1Y3Rvcihzb3VyY2UpIHtcclxuICAgIHRoaXMuc291cmNlID0gc291cmNlO1xyXG4gICAgdGhpcy5pbmRleCA9IDA7XHJcbiAgfVxyXG5cclxuICBoYXNOZXh0KCkge1xyXG4gICAgcmV0dXJuIHRoaXMuaW5kZXggPCB0aGlzLnNvdXJjZS5sZW5ndGg7XHJcbiAgfVxyXG5cclxuICBwZWVrKCkge1xyXG4gICAgcmV0dXJuIHRoaXMuc291cmNlLmNoYXJBdCh0aGlzLmluZGV4KSB8fCBcIlwiO1xyXG4gIH1cclxuXHJcbiAgbmV4dCgpIHtcclxuICAgIHJldHVybiB0aGlzLnNvdXJjZS5jaGFyQXQodGhpcy5pbmRleCsrKSB8fCBcIlwiO1xyXG4gIH1cclxuXHJcbiAgZm9yd2FyZCgpIHtcclxuICAgIHdoaWxlICh0aGlzLmhhc05leHQoKSAmJiB0aGlzLm1hdGNoKC9cXHMvKSkge1xyXG4gICAgICB0aGlzLmluZGV4ICs9IDE7XHJcbiAgICB9XHJcbiAgfVxyXG5cclxuICBtYXRjaChtYXRjaGVyKSB7XHJcbiAgICBpZiAobWF0Y2hlciBpbnN0YW5jZW9mIFJlZ0V4cCkge1xyXG4gICAgICByZXR1cm4gbWF0Y2hlci50ZXN0KHRoaXMucGVlaygpKTtcclxuICAgIH1cclxuICAgIHJldHVybiB0aGlzLnBlZWsoKSA9PT0gbWF0Y2hlcjtcclxuICB9XHJcblxyXG4gIGV4cGVjdChtYXRjaGVyKSB7XHJcbiAgICBpZiAoIXRoaXMubWF0Y2gobWF0Y2hlcikpIHtcclxuICAgICAgdGhpcy50aHJvd1VuZXhwZWN0ZWRUb2tlbigpO1xyXG4gICAgfVxyXG4gICAgdGhpcy5pbmRleCArPSAxO1xyXG4gIH1cclxuXHJcbiAgc2NhbihtYXRjaGVyKSB7XHJcbiAgICBsZXQgdGFyZ2V0ID0gdGhpcy5zb3VyY2Uuc3Vic3RyKHRoaXMuaW5kZXgpO1xyXG4gICAgbGV0IHJlc3VsdCA9IG51bGw7XHJcblxyXG4gICAgaWYgKG1hdGNoZXIgaW5zdGFuY2VvZiBSZWdFeHApIHtcclxuICAgICAgbGV0IG1hdGNoZWQgPSBtYXRjaGVyLmV4ZWModGFyZ2V0KTtcclxuXHJcbiAgICAgIGlmIChtYXRjaGVkICYmIG1hdGNoZWQuaW5kZXggPT09IDApIHtcclxuICAgICAgICByZXN1bHQgPSBtYXRjaGVkWzBdO1xyXG4gICAgICB9XHJcbiAgICB9IGVsc2UgaWYgKHRhcmdldC5zdWJzdHIoMCwgbWF0Y2hlci5sZW5ndGgpID09PSBtYXRjaGVyKSB7XHJcbiAgICAgIHJlc3VsdCA9IG1hdGNoZXI7XHJcbiAgICB9XHJcblxyXG4gICAgaWYgKHJlc3VsdCkge1xyXG4gICAgICB0aGlzLmluZGV4ICs9IHJlc3VsdC5sZW5ndGg7XHJcbiAgICB9XHJcblxyXG4gICAgcmV0dXJuIHJlc3VsdDtcclxuICB9XHJcblxyXG4gIHRocm93VW5leHBlY3RlZFRva2VuKCkge1xyXG4gICAgbGV0IGlkZW50aWZpZXIgPSB0aGlzLnBlZWsoKSB8fCBcIklMTEVHQUxcIjtcclxuXHJcbiAgICB0aHJvdyBuZXcgU3ludGF4RXJyb3IoYFVuZXhwZWN0ZWQgdG9rZW46ICR7aWRlbnRpZmllcn1gKTtcclxuICB9XHJcbn1cclxuIiwiZXhwb3J0IGRlZmF1bHQge1xyXG4gIE5vdGU6IFwiTm90ZVwiLFxyXG4gIFJlc3Q6IFwiUmVzdFwiLFxyXG4gIE9jdGF2ZTogXCJPY3RhdmVcIixcclxuICBPY3RhdmVTaGlmdDogXCJPY3RhdmVTaGlmdFwiLFxyXG4gIE5vdGVMZW5ndGg6IFwiTm90ZUxlbmd0aFwiLFxyXG4gIE5vdGVWZWxvY2l0eTogXCJOb3RlVmVsb2NpdHlcIixcclxuICBOb3RlUXVhbnRpemU6IFwiTm90ZVF1YW50aXplXCIsXHJcbiAgVGVtcG86IFwiVGVtcG9cIixcclxuICBJbmZpbml0ZUxvb3A6IFwiSW5maW5pdGVMb29wXCIsXHJcbiAgTG9vcEJlZ2luOiBcIkxvb3BCZWdpblwiLFxyXG4gIExvb3BFeGl0OiBcIkxvb3BFeGl0XCIsXHJcbiAgTG9vcEVuZDogXCJMb29wRW5kXCIsXHJcbiAgVG9uZTpcIlRvbmVcIixcclxuICBXYXZlRm9ybTpcIldhdmVGb3JtXCIsXHJcbiAgRW52ZWxvcGU6XCJFbnZlbG9wZVwiXHJcbn07XHJcbiIsIlwidXNlIHN0cmljdFwiO1xyXG4vLy8vIFdlYiBBdWRpbyBBUEkg44Op44OD44OR44O844Kv44Op44K5IC8vLy9cclxuXHJcbi8vIE1NTFBhcnNlcuOBr21vaGF5b25hb+OBleOCk+OBruOCguOBrlxyXG4vLyBodHRwczovL2dpdGh1Yi5jb20vbW9oYXlvbmFvL21tbC1pdGVyYXRvclxyXG5cclxuaW1wb3J0IFN5bnRheCBmcm9tIFwiLi9TeW50YXhcIjtcclxuaW1wb3J0IFNjYW5uZXIgZnJvbSBcIi4vU2Nhbm5lclwiO1xyXG5pbXBvcnQgTU1MUGFyc2VyIGZyb20gXCIuL01NTFBhcnNlclwiO1xyXG5pbXBvcnQgRGVmYXVsdFBhcmFtcyBmcm9tIFwiLi9EZWZhdWx0UGFyYW1zXCI7XHJcbmltcG9ydCBsemJhc2U2MiBmcm9tIFwiLi9semJhc2U2Mi5taW5cIjtcclxuXHJcbi8vIHZhciBmZnQgPSBuZXcgRkZUKDQwOTYsIDQ0MTAwKTtcclxuY29uc3QgQlVGRkVSX1NJWkUgPSAxMDI0O1xyXG5jb25zdCBUSU1FX0JBU0UgPSA5NjtcclxuXHJcbi8vIE1JREnjg47jg7zjg4ggPT4g5YaN55Sf44Os44O844OI5aSJ5o+b44OG44O844OW44OrXHJcbnZhciBub3RlRnJlcSA9IFtdO1xyXG5mb3IgKHZhciBpID0gLTY5OyBpIDwgNTg7ICsraSkge1xyXG4gIG5vdGVGcmVxLnB1c2goTWF0aC5wb3coMiwgaSAvIDEyKSk7XHJcbn1cclxuXHJcbi8vIE1JREnjg47jg7zjg4jlkajms6LmlbAg5aSJ5o+b44OG44O844OW44OrXHJcbnZhciBtaWRpRnJlcSA9IFtdO1xyXG5mb3IgKGxldCBpID0gMDsgaSA8IDEyNzsgKytpKSB7XHJcbiAgbWlkaUZyZXEucHVzaChtaWRpY3BzKGkpKTtcclxufVxyXG5mdW5jdGlvbiBtaWRpY3BzKG5vdGVOdW1iZXIpIHtcclxuICByZXR1cm4gNDQwICogTWF0aC5wb3coMiwgKG5vdGVOdW1iZXIgLSA2OSkgKiAxIC8gMTIpO1xyXG59XHJcblxyXG5leHBvcnQgZnVuY3Rpb24gZGVjb2RlU3RyKGJpdHMsIHdhdmVzdHIpIHtcclxuICB2YXIgYXJyID0gW107XHJcbiAgdmFyIG4gPSBiaXRzIC8gNCB8IDA7XHJcbiAgdmFyIGMgPSAwO1xyXG4gIHZhciB6ZXJvcG9zID0gMSA8PCAoYml0cyAtIDEpO1xyXG4gIHdoaWxlIChjIDwgd2F2ZXN0ci5sZW5ndGgpIHtcclxuICAgIHZhciBkID0gMDtcclxuICAgIGZvciAodmFyIGkgPSAwOyBpIDwgbjsgKytpKSB7XHJcbiAgICAgIGQgPSAoZCA8PCA0KSArIHBhcnNlSW50KHdhdmVzdHIuY2hhckF0KGMrKyksICcxNicpO1xyXG4gICAgfVxyXG4gICAgYXJyLnB1c2goKGQgLSB6ZXJvcG9zKSAvIHplcm9wb3MpO1xyXG4gIH1cclxuICByZXR1cm4gYXJyO1xyXG59XHJcblxyXG52YXIgd2F2ZXMgPSBbXHJcbiAgZGVjb2RlU3RyKDQsICdFRUVFRUVFRUVFRUVFRUVFMDAwMDAwMDAwMDAwMDAwMCcpLFxyXG4gIGRlY29kZVN0cig0LCAnMDAxMTIyMzM0NDU1NjY3Nzg4OTlBQUJCQ0NEREVFRkYnKSxcclxuICBkZWNvZGVTdHIoNCwgJzAyMzQ2NjQ1OUFBOEE3QTk3Nzk2NTY1NkFDQUFDREVGJyksXHJcbiAgZGVjb2RlU3RyKDQsICdCRENEQ0E5OTlBQ0RDREI5NDIxMjM2Nzc3NjMyMTI0NycpLFxyXG4gIGRlY29kZVN0cig0LCAnN0FDREVEQ0E3NDIxMDEyNDdCREVEQjczMjAxMzdFNzgnKSxcclxuICBkZWNvZGVTdHIoNCwgJ0FDQ0E3NzlCREVEQTY2Njc5OTk0MTAxMjY3NzQyMjQ3JyksXHJcbiAgZGVjb2RlU3RyKDQsICc3RUM5Q0VBN0NGRDhBQjcyOEQ5NDU3MjAzODUxMzUzMScpLFxyXG4gIGRlY29kZVN0cig0LCAnRUU3N0VFNzdFRTc3RUU3NzAwNzcwMDc3MDA3NzAwNzcnKSxcclxuICBkZWNvZGVTdHIoNCwgJ0VFRUU4ODg4ODg4ODg4ODgwMDAwODg4ODg4ODg4ODg4JykvL+ODjuOCpOOCuueUqOOBruODgOODn+ODvOazouW9olxyXG5dO1xyXG5cclxuXHJcblxyXG52YXIgd2F2ZVNhbXBsZXMgPSBbXTtcclxuZXhwb3J0IGZ1bmN0aW9uIFdhdmVTYW1wbGUoYXVkaW9jdHgsIGNoLCBzYW1wbGVMZW5ndGgsIHNhbXBsZVJhdGUpIHtcclxuXHJcbiAgdGhpcy5zYW1wbGUgPSBhdWRpb2N0eC5jcmVhdGVCdWZmZXIoY2gsIHNhbXBsZUxlbmd0aCwgc2FtcGxlUmF0ZSB8fCBhdWRpb2N0eC5zYW1wbGVSYXRlKTtcclxuICB0aGlzLmxvb3AgPSBmYWxzZTtcclxuICB0aGlzLnN0YXJ0ID0gMDtcclxuICB0aGlzLmVuZCA9IChzYW1wbGVMZW5ndGggLSAxKSAvIChzYW1wbGVSYXRlIHx8IGF1ZGlvY3R4LnNhbXBsZVJhdGUpO1xyXG59XHJcblxyXG5leHBvcnQgZnVuY3Rpb24gY3JlYXRlV2F2ZVNhbXBsZUZyb21XYXZlcyhhdWRpb2N0eCwgc2FtcGxlTGVuZ3RoKSB7XHJcbiAgZm9yICh2YXIgaSA9IDAsIGVuZCA9IHdhdmVzLmxlbmd0aDsgaSA8IGVuZDsgKytpKSB7XHJcbiAgICB2YXIgc2FtcGxlID0gbmV3IFdhdmVTYW1wbGUoYXVkaW9jdHgsIDEsIHNhbXBsZUxlbmd0aCk7XHJcbiAgICB3YXZlU2FtcGxlcy5wdXNoKHNhbXBsZSk7XHJcbiAgICBpZiAoaSAhPSA4KSB7XHJcbiAgICAgIHZhciB3YXZlZGF0YSA9IHdhdmVzW2ldO1xyXG4gICAgICB2YXIgZGVsdGEgPSA0NDAuMCAqIHdhdmVkYXRhLmxlbmd0aCAvIGF1ZGlvY3R4LnNhbXBsZVJhdGU7XHJcbiAgICAgIHZhciBzdGltZSA9IDA7XHJcbiAgICAgIHZhciBvdXRwdXQgPSBzYW1wbGUuc2FtcGxlLmdldENoYW5uZWxEYXRhKDApO1xyXG4gICAgICB2YXIgbGVuID0gd2F2ZWRhdGEubGVuZ3RoO1xyXG4gICAgICB2YXIgaW5kZXggPSAwO1xyXG4gICAgICB2YXIgZW5kc2FtcGxlID0gMDtcclxuICAgICAgZm9yICh2YXIgaiA9IDA7IGogPCBzYW1wbGVMZW5ndGg7ICsraikge1xyXG4gICAgICAgIGluZGV4ID0gc3RpbWUgfCAwO1xyXG4gICAgICAgIG91dHB1dFtqXSA9IHdhdmVkYXRhW2luZGV4XTtcclxuICAgICAgICBzdGltZSArPSBkZWx0YTtcclxuICAgICAgICBpZiAoc3RpbWUgPj0gbGVuKSB7XHJcbiAgICAgICAgICBzdGltZSA9IHN0aW1lIC0gbGVuO1xyXG4gICAgICAgICAgZW5kc2FtcGxlID0gajtcclxuICAgICAgICB9XHJcbiAgICAgIH1cclxuICAgICAgc2FtcGxlLmVuZCA9IGVuZHNhbXBsZSAvIGF1ZGlvY3R4LnNhbXBsZVJhdGU7XHJcbiAgICAgIHNhbXBsZS5sb29wID0gdHJ1ZTtcclxuICAgIH0gZWxzZSB7XHJcbiAgICAgIC8vIOODnOOCpOOCuTjjga/jg47jgqTjgrrms6LlvaLjgajjgZnjgotcclxuICAgICAgdmFyIG91dHB1dCA9IHNhbXBsZS5zYW1wbGUuZ2V0Q2hhbm5lbERhdGEoMCk7XHJcbiAgICAgIGZvciAodmFyIGogPSAwOyBqIDwgc2FtcGxlTGVuZ3RoOyArK2opIHtcclxuICAgICAgICBvdXRwdXRbal0gPSBNYXRoLnJhbmRvbSgpICogMi4wIC0gMS4wO1xyXG4gICAgICB9XHJcbiAgICAgIHNhbXBsZS5lbmQgPSBzYW1wbGVMZW5ndGggLyBhdWRpb2N0eC5zYW1wbGVSYXRlO1xyXG4gICAgICBzYW1wbGUubG9vcCA9IHRydWU7XHJcbiAgICB9XHJcbiAgfVxyXG59XHJcblxyXG4vLyDlj4LogIPvvJpodHRwOi8vd3d3LmcyMDBrZy5jb20vYXJjaGl2ZXMvMjAxNC8xMi93ZWJhdWRpb2FwaXBlcmkuaHRtbFxyXG5mdW5jdGlvbiBmb3VyaWVyKHdhdmVmb3JtLCBsZW4pIHtcclxuICB2YXIgcmVhbCA9IG5ldyBGbG9hdDMyQXJyYXkobGVuKSwgaW1hZyA9IG5ldyBGbG9hdDMyQXJyYXkobGVuKTtcclxuICB2YXIgd2F2bGVuID0gd2F2ZWZvcm0ubGVuZ3RoO1xyXG4gIGZvciAodmFyIGkgPSAwOyBpIDwgbGVuOyArK2kpIHtcclxuICAgIGZvciAodmFyIGogPSAwOyBqIDwgbGVuOyArK2opIHtcclxuICAgICAgdmFyIHdhdmogPSBqIC8gbGVuICogd2F2bGVuO1xyXG4gICAgICB2YXIgZCA9IHdhdmVmb3JtW3dhdmogfCAwXTtcclxuICAgICAgdmFyIHRoID0gaSAqIGogLyBsZW4gKiAyICogTWF0aC5QSTtcclxuICAgICAgcmVhbFtpXSArPSBNYXRoLmNvcyh0aCkgKiBkO1xyXG4gICAgICBpbWFnW2ldICs9IE1hdGguc2luKHRoKSAqIGQ7XHJcbiAgICB9XHJcbiAgfVxyXG4gIHJldHVybiBbcmVhbCwgaW1hZ107XHJcbn1cclxuXHJcbmZ1bmN0aW9uIGNyZWF0ZVBlcmlvZGljV2F2ZUZyb21XYXZlcyhhdWRpb2N0eCkge1xyXG4gIHJldHVybiB3YXZlcy5tYXAoKGQsIGkpID0+IHtcclxuICAgIGlmIChpICE9IDgpIHtcclxuICAgICAgbGV0IHdhdmVEYXRhID0gd2F2ZXNbaV07XHJcbiAgICAgIGxldCBmcmVxRGF0YSA9IGZvdXJpZXIod2F2ZURhdGEsIHdhdmVEYXRhLmxlbmd0aCk7XHJcbiAgICAgIHJldHVybiBhdWRpb2N0eC5jcmVhdGVQZXJpb2RpY1dhdmUoZnJlcURhdGFbMF0sIGZyZXFEYXRhWzFdKTtcclxuICAgIH0gZWxzZSB7XHJcbiAgICAgIGxldCB3YXZlRGF0YSA9IFtdO1xyXG4gICAgICBmb3IgKGxldCBqID0gMCwgZSA9IHdhdmVzW2ldLmxlbmd0aDsgaiA8IGU7ICsraikge1xyXG4gICAgICAgIHdhdmVEYXRhLnB1c2goTWF0aC5yYW5kb20oKSAqIDIuMCAtIDEuMCk7XHJcbiAgICAgIH1cclxuICAgICAgbGV0IGZyZXFEYXRhID0gZm91cmllcih3YXZlRGF0YSwgd2F2ZURhdGEubGVuZ3RoKTtcclxuICAgICAgcmV0dXJuIGF1ZGlvY3R4LmNyZWF0ZVBlcmlvZGljV2F2ZShmcmVxRGF0YVswXSwgZnJlcURhdGFbMV0pO1xyXG4gICAgfVxyXG4gIH0pO1xyXG59XHJcblxyXG4vLyDjg4njg6njg6DjgrXjg7Pjg5fjg6tcclxuXHJcbmNvbnN0IGRydW1TYW1wbGVzID0gW1xyXG4gIHsgbmFtZTogJ2Jhc3MxJywgcGF0aDogJ2JkMV9sei5qc29uJyB9LCAvLyBAOVxyXG4gIHsgbmFtZTogJ2Jhc3MyJywgcGF0aDogJ2JkMl9sei5qc29uJyB9LCAvLyBAMTBcclxuICB7IG5hbWU6ICdjbG9zZWQnLCBwYXRoOiAnY2xvc2VkX2x6Lmpzb24nIH0sIC8vIEAxMVxyXG4gIHsgbmFtZTogJ2Nvd2JlbGwnLCBwYXRoOiAnY293YmVsbF9sei5qc29uJyB9LC8vIEAxMlxyXG4gIHsgbmFtZTogJ2NyYXNoJywgcGF0aDogJ2NyYXNoX2x6Lmpzb24nIH0sLy8gQDEzXHJcbiAgeyBuYW1lOiAnaGFuZGNsYXAnLCBwYXRoOiAnaGFuZGNsYXBfbHouanNvbicgfSwgLy8gQDE0XHJcbiAgeyBuYW1lOiAnaGl0b20nLCBwYXRoOiAnaGl0b21fbHouanNvbicgfSwvLyBAMTVcclxuICB7IG5hbWU6ICdsb3d0b20nLCBwYXRoOiAnbG93dG9tX2x6Lmpzb24nIH0sLy8gQDE2XHJcbiAgeyBuYW1lOiAnbWlkdG9tJywgcGF0aDogJ21pZHRvbV9sei5qc29uJyB9LC8vIEAxN1xyXG4gIHsgbmFtZTogJ29wZW4nLCBwYXRoOiAnb3Blbl9sei5qc29uJyB9LC8vIEAxOFxyXG4gIHsgbmFtZTogJ3JpZGUnLCBwYXRoOiAncmlkZV9sei5qc29uJyB9LC8vIEAxOVxyXG4gIHsgbmFtZTogJ3JpbXNob3QnLCBwYXRoOiAncmltc2hvdF9sei5qc29uJyB9LC8vIEAyMFxyXG4gIHsgbmFtZTogJ3NkMScsIHBhdGg6ICdzZDFfbHouanNvbicgfSwvLyBAMjFcclxuICB7IG5hbWU6ICdzZDInLCBwYXRoOiAnc2QyX2x6Lmpzb24nIH0sLy8gQDIyXHJcbiAgeyBuYW1lOiAndGFtYicsIHBhdGg6ICd0YW1iX2x6Lmpzb24nIH0vLyBAMjNcclxuXTtcclxuXHJcbmxldCB4aHIgPSBuZXcgWE1MSHR0cFJlcXVlc3QoKTtcclxuZnVuY3Rpb24ganNvbih1cmwpIHtcclxuICByZXR1cm4gbmV3IFByb21pc2UoKHJlc29sdmUsIHJlamVjdCkgPT4ge1xyXG4gICAgeGhyLm9wZW4oXCJnZXRcIiwgdXJsLCB0cnVlKTtcclxuICAgIHhoci5vbmxvYWQgPSBmdW5jdGlvbiAoKSB7XHJcbiAgICAgIGlmICh4aHIuc3RhdHVzID09IDIwMCkge1xyXG4gICAgICAgIHJlc29sdmUoSlNPTi5wYXJzZSh0aGlzLnJlc3BvbnNlVGV4dCkpO1xyXG4gICAgICB9IGVsc2Uge1xyXG4gICAgICAgIHJlamVjdChuZXcgRXJyb3IoJ1hNTEh0dHBSZXF1ZXN0IEVycm9yOicgKyB4aHIuc3RhdHVzKSk7XHJcbiAgICAgIH1cclxuICAgIH07XHJcbiAgICB4aHIub25lcnJvciA9IGVyciA9PiB7IHJlamVjdChlcnIpOyB9O1xyXG4gICAgeGhyLnNlbmQobnVsbCk7XHJcbiAgfSk7XHJcbn1cclxuXHJcbmZ1bmN0aW9uIHJlYWREcnVtU2FtcGxlKGF1ZGlvY3R4KSB7XHJcbiAgbGV0IHByID0gUHJvbWlzZS5yZXNvbHZlKDApO1xyXG5cclxuICBkcnVtU2FtcGxlcy5mb3JFYWNoKChkKSA9PiB7XHJcbiAgICBwciA9XHJcbiAgICAgIHByLnRoZW4oanNvbi5iaW5kKG51bGwsICcuL3Jlcy8nICsgZC5wYXRoKSlcclxuICAgICAgICAudGhlbihkYXRhID0+IHtcclxuICAgICAgICAgIGxldCBzYW1wbGVTdHIgPSBsemJhc2U2Mi5kZWNvbXByZXNzKGRhdGEuc2FtcGxlcyk7XHJcbiAgICAgICAgICBsZXQgc2FtcGxlcyA9IGRlY29kZVN0cig0LCBzYW1wbGVTdHIpO1xyXG4gICAgICAgICAgbGV0IHdzID0gbmV3IFdhdmVTYW1wbGUoYXVkaW9jdHgsIDEsIHNhbXBsZXMubGVuZ3RoLCBkYXRhLnNhbXBsZVJhdGUpO1xyXG4gICAgICAgICAgbGV0IHNiID0gd3Muc2FtcGxlLmdldENoYW5uZWxEYXRhKDApO1xyXG4gICAgICAgICAgZm9yIChsZXQgaSA9IDAsIGUgPSBzYi5sZW5ndGg7IGkgPCBlOyArK2kpIHtcclxuICAgICAgICAgICAgc2JbaV0gPSBzYW1wbGVzW2ldO1xyXG4gICAgICAgICAgfVxyXG4gICAgICAgICAgd2F2ZVNhbXBsZXMucHVzaCh3cyk7XHJcbiAgICAgICAgfSk7XHJcbiAgfSk7XHJcblxyXG4gIHJldHVybiBwcjtcclxufVxyXG5cclxuLy8gZXhwb3J0IGNsYXNzIFdhdmVUZXh0dXJlIHsgXHJcbi8vICAgY29uc3RydWN0b3Iod2F2ZSkge1xyXG4vLyAgICAgdGhpcy53YXZlID0gd2F2ZSB8fCB3YXZlc1swXTtcclxuLy8gICAgIHRoaXMudGV4ID0gbmV3IENhbnZhc1RleHR1cmUoMzIwLCAxMCAqIDE2KTtcclxuLy8gICAgIHRoaXMucmVuZGVyKCk7XHJcbi8vICAgfVxyXG5cclxuLy8gICByZW5kZXIoKSB7XHJcbi8vICAgICB2YXIgY3R4ID0gdGhpcy50ZXguY3R4O1xyXG4vLyAgICAgdmFyIHdhdmUgPSB0aGlzLndhdmU7XHJcbi8vICAgICBjdHguY2xlYXJSZWN0KDAsIDAsIGN0eC5jYW52YXMud2lkdGgsIGN0eC5jYW52YXMuaGVpZ2h0KTtcclxuLy8gICAgIGN0eC5iZWdpblBhdGgoKTtcclxuLy8gICAgIGN0eC5zdHJva2VTdHlsZSA9ICd3aGl0ZSc7XHJcbi8vICAgICBmb3IgKHZhciBpID0gMDsgaSA8IDMyMDsgaSArPSAxMCkge1xyXG4vLyAgICAgICBjdHgubW92ZVRvKGksIDApO1xyXG4vLyAgICAgICBjdHgubGluZVRvKGksIDI1NSk7XHJcbi8vICAgICB9XHJcbi8vICAgICBmb3IgKHZhciBpID0gMDsgaSA8IDE2MDsgaSArPSAxMCkge1xyXG4vLyAgICAgICBjdHgubW92ZVRvKDAsIGkpO1xyXG4vLyAgICAgICBjdHgubGluZVRvKDMyMCwgaSk7XHJcbi8vICAgICB9XHJcbi8vICAgICBjdHguZmlsbFN0eWxlID0gJ3JnYmEoMjU1LDI1NSwyNTUsMC43KSc7XHJcbi8vICAgICBjdHgucmVjdCgwLCAwLCBjdHguY2FudmFzLndpZHRoLCBjdHguY2FudmFzLmhlaWdodCk7XHJcbi8vICAgICBjdHguc3Ryb2tlKCk7XHJcbi8vICAgICBmb3IgKHZhciBpID0gMCwgYyA9IDA7IGkgPCBjdHguY2FudmFzLndpZHRoOyBpICs9IDEwLCArK2MpIHtcclxuLy8gICAgICAgY3R4LmZpbGxSZWN0KGksICh3YXZlW2NdID4gMCkgPyA4MCAtIHdhdmVbY10gKiA4MCA6IDgwLCAxMCwgTWF0aC5hYnMod2F2ZVtjXSkgKiA4MCk7XHJcbi8vICAgICB9XHJcbi8vICAgICB0aGlzLnRleC50ZXh0dXJlLm5lZWRzVXBkYXRlID0gdHJ1ZTtcclxuLy8gICB9XHJcbi8vIH07XHJcblxyXG4vLy8g44Ko44Oz44OZ44Ot44O844OX44K444Kn44ON44Os44O844K/44O8XHJcbmV4cG9ydCBjbGFzcyBFbnZlbG9wZUdlbmVyYXRvciB7XHJcbiAgY29uc3RydWN0b3Iodm9pY2UsIGF0dGFjaywgZGVjYXksIHN1c3RhaW4sIHJlbGVhc2UpIHtcclxuICAgIHRoaXMudm9pY2UgPSB2b2ljZTtcclxuICAgIC8vdGhpcy5rZXlvbiA9IGZhbHNlO1xyXG4gICAgdGhpcy5hdHRhY2tUaW1lID0gYXR0YWNrIHx8IDAuMDAwNTtcclxuICAgIHRoaXMuZGVjYXlUaW1lID0gZGVjYXkgfHwgMC4wNTtcclxuICAgIHRoaXMuc3VzdGFpbkxldmVsID0gc3VzdGFpbiB8fCAwLjU7XHJcbiAgICB0aGlzLnJlbGVhc2VUaW1lID0gcmVsZWFzZSB8fCAwLjU7XHJcbiAgICB0aGlzLnYgPSAxLjA7XHJcbiAgICB0aGlzLmtleU9uVGltZSA9IDA7XHJcbiAgICB0aGlzLmtleU9mZlRpbWUgPSAwO1xyXG4gICAgdGhpcy5rZXlPbiA9IGZhbHNlO1xyXG4gIH1cclxuXHJcbiAga2V5b24odCwgdmVsKSB7XHJcbiAgICB0aGlzLnYgPSB2ZWwgfHwgMS4wO1xyXG4gICAgdmFyIHYgPSB0aGlzLnY7XHJcbiAgICB2YXIgdDAgPSB0IHx8IHRoaXMudm9pY2UuYXVkaW9jdHguY3VycmVudFRpbWU7XHJcbiAgICB2YXIgdDEgPSB0MCArIHRoaXMuYXR0YWNrVGltZTtcclxuICAgIHZhciBnYWluID0gdGhpcy52b2ljZS5nYWluLmdhaW47XHJcbiAgICBnYWluLmNhbmNlbFNjaGVkdWxlZFZhbHVlcyh0MCk7XHJcbiAgICBnYWluLnNldFZhbHVlQXRUaW1lKDAsIHQwKTtcclxuICAgIGdhaW4ubGluZWFyUmFtcFRvVmFsdWVBdFRpbWUodiwgdDEpO1xyXG4gICAgZ2Fpbi5saW5lYXJSYW1wVG9WYWx1ZUF0VGltZSh0aGlzLnN1c3RhaW5MZXZlbCAqIHYsIHQxICsgdGhpcy5kZWNheVRpbWUpO1xyXG4gICAgLy9nYWluLnNldFRhcmdldEF0VGltZSh0aGlzLnN1c3RhaW4gKiB2LCB0MSwgdDEgKyB0aGlzLmRlY2F5IC8gdik7XHJcbiAgICB0aGlzLmtleU9uVGltZSA9IHQwO1xyXG4gICAgdGhpcy5rZXlPZmZUaW1lID0gMDtcclxuICAgIHRoaXMua2V5T24gPSB0cnVlO1xyXG4gIH1cclxuXHJcbiAga2V5b2ZmKHQpIHtcclxuICAgIHZhciB2b2ljZSA9IHRoaXMudm9pY2U7XHJcbiAgICB2YXIgZ2FpbiA9IHZvaWNlLmdhaW4uZ2FpbjtcclxuICAgIHZhciB0MCA9IHQgfHwgdm9pY2UuYXVkaW9jdHguY3VycmVudFRpbWU7XHJcbiAgICAvLyAgICBnYWluLmNhbmNlbFNjaGVkdWxlZFZhbHVlcyh0aGlzLmtleU9uVGltZSk7XHJcbiAgICBnYWluLmNhbmNlbFNjaGVkdWxlZFZhbHVlcyh0MCk7XHJcbiAgICBsZXQgcmVsZWFzZV90aW1lID0gdDAgKyB0aGlzLnJlbGVhc2VUaW1lO1xyXG4gICAgZ2Fpbi5saW5lYXJSYW1wVG9WYWx1ZUF0VGltZSgwLCByZWxlYXNlX3RpbWUpO1xyXG4gICAgdGhpcy5rZXlPZmZUaW1lID0gdDA7XHJcbiAgICB0aGlzLmtleU9uVGltZSA9IDA7XHJcbiAgICB0aGlzLmtleU9uID0gZmFsc2U7XHJcbiAgICByZXR1cm4gcmVsZWFzZV90aW1lO1xyXG4gIH1cclxufTtcclxuXHJcbmV4cG9ydCBjbGFzcyBWb2ljZSB7XHJcbiAgY29uc3RydWN0b3IoYXVkaW9jdHgpIHtcclxuICAgIHRoaXMuYXVkaW9jdHggPSBhdWRpb2N0eDtcclxuICAgIHRoaXMuc2FtcGxlID0gd2F2ZVNhbXBsZXNbNl07XHJcbiAgICB0aGlzLnZvbHVtZSA9IGF1ZGlvY3R4LmNyZWF0ZUdhaW4oKTtcclxuICAgIHRoaXMuZW52ZWxvcGUgPSBuZXcgRW52ZWxvcGVHZW5lcmF0b3IodGhpcyxcclxuICAgICAgMC41LFxyXG4gICAgICAwLjI1LFxyXG4gICAgICAwLjgsXHJcbiAgICAgIDIuNVxyXG4gICAgKTtcclxuICAgIHRoaXMuaW5pdFByb2Nlc3NvcigpO1xyXG4gICAgdGhpcy5kZXR1bmUgPSAxLjA7XHJcbiAgICB0aGlzLnZvbHVtZS5nYWluLnZhbHVlID0gMS4wO1xyXG4gICAgdGhpcy5vdXRwdXQgPSB0aGlzLnZvbHVtZTtcclxuICB9XHJcblxyXG4gIGluaXRQcm9jZXNzb3IoKSB7XHJcbiAgICAvLyBpZih0aGlzLnByb2Nlc3Nvcil7XHJcbiAgICAvLyAgIHRoaXMuc3RvcCgpO1xyXG4gICAgLy8gICB0aGlzLnByb2Nlc3Nvci5kaXNjb25uZWN0KCk7XHJcbiAgICAvLyAgIHRoaXMucHJvY2Vzc29yID0gbnVsbDtcclxuICAgIC8vIH1cclxuICAgIGxldCBwcm9jZXNzb3IgPSB0aGlzLnByb2Nlc3NvciA9IHRoaXMuYXVkaW9jdHguY3JlYXRlQnVmZmVyU291cmNlKCk7XHJcbiAgICBsZXQgZ2FpbiA9IHRoaXMuZ2FpbiA9IHRoaXMuYXVkaW9jdHguY3JlYXRlR2FpbigpO1xyXG4gICAgZ2Fpbi5nYWluLnZhbHVlID0gMC4wO1xyXG5cclxuICAgIHRoaXMucHJvY2Vzc29yLmJ1ZmZlciA9IHRoaXMuc2FtcGxlLnNhbXBsZTtcclxuICAgIHRoaXMucHJvY2Vzc29yLmxvb3AgPSB0aGlzLnNhbXBsZS5sb29wO1xyXG4gICAgdGhpcy5wcm9jZXNzb3IubG9vcFN0YXJ0ID0gMDtcclxuICAgIHRoaXMucHJvY2Vzc29yLnBsYXliYWNrUmF0ZS52YWx1ZSA9IDEuMDtcclxuICAgIHRoaXMucHJvY2Vzc29yLmxvb3BFbmQgPSB0aGlzLnNhbXBsZS5lbmQ7XHJcbiAgICB0aGlzLnByb2Nlc3Nvci5jb25uZWN0KHRoaXMuZ2Fpbik7XHJcbiAgICB0aGlzLnByb2Nlc3Nvci5vbmVuZGVkID0gKCkgPT4ge1xyXG4gICAgICBwcm9jZXNzb3IuZGlzY29ubmVjdCgpO1xyXG4gICAgICBnYWluLmRpc2Nvbm5lY3QoKTtcclxuICAgIH07XHJcbiAgICBnYWluLmNvbm5lY3QodGhpcy52b2x1bWUpO1xyXG4gIH1cclxuXHJcbiAgLy8gc2V0U2FtcGxlIChzYW1wbGUpIHtcclxuICAvLyAgICAgdGhpcy5lbnZlbG9wZS5rZXlvZmYoMCk7XHJcbiAgLy8gICAgIHRoaXMucHJvY2Vzc29yLmRpc2Nvbm5lY3QodGhpcy5nYWluKTtcclxuICAvLyAgICAgdGhpcy5zYW1wbGUgPSBzYW1wbGU7XHJcbiAgLy8gICAgIHRoaXMuaW5pdFByb2Nlc3NvcigpO1xyXG4gIC8vICAgICB0aGlzLnByb2Nlc3Nvci5zdGFydCgpO1xyXG4gIC8vIH1cclxuXHJcbiAgc3RhcnQoc3RhcnRUaW1lKSB7XHJcbiAgICAvLyAgIHRoaXMucHJvY2Vzc29yLmRpc2Nvbm5lY3QodGhpcy5nYWluKTtcclxuICAgIHRoaXMuaW5pdFByb2Nlc3NvcigpO1xyXG4gICAgdGhpcy5wcm9jZXNzb3Iuc3RhcnQoc3RhcnRUaW1lKTtcclxuICB9XHJcblxyXG4gIHN0b3AodGltZSkge1xyXG4gICAgdGhpcy5wcm9jZXNzb3Iuc3RvcCh0aW1lKTtcclxuICAgIC8vdGhpcy5yZXNldCgpO1xyXG4gIH1cclxuXHJcbiAga2V5b24odCwgbm90ZSwgdmVsKSB7XHJcbiAgICB0aGlzLnN0YXJ0KHQpO1xyXG4gICAgdGhpcy5wcm9jZXNzb3IucGxheWJhY2tSYXRlLnNldFZhbHVlQXRUaW1lKG5vdGVGcmVxW25vdGVdICogdGhpcy5kZXR1bmUsIHQpO1xyXG4gICAgdGhpcy5rZXlPblRpbWUgPSB0O1xyXG4gICAgdGhpcy5lbnZlbG9wZS5rZXlvbih0LCB2ZWwpO1xyXG4gIH1cclxuXHJcbiAga2V5b2ZmKHQpIHtcclxuICAgIHRoaXMuZ2Fpbi5nYWluLmNhbmNlbFNjaGVkdWxlZFZhbHVlcyh0Lyp0aGlzLmtleU9uVGltZSovKTtcclxuICAgIHRoaXMua2V5T2ZmVGltZSA9IHRoaXMuZW52ZWxvcGUua2V5b2ZmKHQpO1xyXG4gICAgdGhpcy5wcm9jZXNzb3Iuc3RvcCh0aGlzLmtleU9mZlRpbWUpO1xyXG4gIH1cclxuXHJcbiAgaXNLZXlPbih0KSB7XHJcbiAgICByZXR1cm4gdGhpcy5lbnZlbG9wZS5rZXlPbiAmJiAodGhpcy5rZXlPblRpbWUgPD0gdCk7XHJcbiAgfVxyXG5cclxuICBpc0tleU9mZih0KSB7XHJcbiAgICByZXR1cm4gIXRoaXMuZW52ZWxvcGUua2V5T24gJiYgKHRoaXMua2V5T2ZmVGltZSA8PSB0KTtcclxuICB9XHJcblxyXG4gIHJlc2V0KCkge1xyXG4gICAgdGhpcy5wcm9jZXNzb3IucGxheWJhY2tSYXRlLmNhbmNlbFNjaGVkdWxlZFZhbHVlcygwKTtcclxuICAgIHRoaXMuZ2Fpbi5nYWluLmNhbmNlbFNjaGVkdWxlZFZhbHVlcygwKTtcclxuICAgIHRoaXMuZ2Fpbi5nYWluLnZhbHVlID0gMDtcclxuICB9XHJcbn1cclxuXHJcbi8vLyDjg5zjgqTjgrlcclxuZXhwb3J0IGNsYXNzIE9zY1ZvaWNlIHtcclxuICBjb25zdHJ1Y3RvcihhdWRpb2N0eCwgcGVyaW9kaWNXYXZlKSB7XHJcbiAgICB0aGlzLmF1ZGlvY3R4ID0gYXVkaW9jdHg7XHJcbiAgICB0aGlzLnNhbXBsZSA9IHBlcmlvZGljV2F2ZTtcclxuICAgIHRoaXMudm9sdW1lID0gYXVkaW9jdHguY3JlYXRlR2FpbigpO1xyXG4gICAgdGhpcy5lbnZlbG9wZSA9IG5ldyBFbnZlbG9wZUdlbmVyYXRvcih0aGlzLFxyXG4gICAgICAwLjUsXHJcbiAgICAgIDAuMjUsXHJcbiAgICAgIDAuOCxcclxuICAgICAgMi41XHJcbiAgICApO1xyXG4gICAgdGhpcy5pbml0UHJvY2Vzc29yKCk7XHJcbiAgICB0aGlzLmRldHVuZSA9IDEuMDtcclxuICAgIHRoaXMudm9sdW1lLmdhaW4udmFsdWUgPSAxLjA7XHJcbiAgICB0aGlzLm91dHB1dCA9IHRoaXMudm9sdW1lO1xyXG4gIH1cclxuXHJcbiAgaW5pdFByb2Nlc3NvcigpIHtcclxuICAgIGxldCBwcm9jZXNzb3IgPSB0aGlzLnByb2Nlc3NvciA9IHRoaXMuYXVkaW9jdHguY3JlYXRlT3NjaWxsYXRvcigpO1xyXG4gICAgbGV0IGdhaW4gPSB0aGlzLmdhaW4gPSB0aGlzLmF1ZGlvY3R4LmNyZWF0ZUdhaW4oKTtcclxuICAgIHRoaXMuZ2Fpbi5nYWluLnZhbHVlID0gMC4wO1xyXG4gICAgdGhpcy5wcm9jZXNzb3Iuc2V0UGVyaW9kaWNXYXZlKHRoaXMuc2FtcGxlKTtcclxuICAgIHRoaXMucHJvY2Vzc29yLmNvbm5lY3QodGhpcy5nYWluKTtcclxuICAgIHRoaXMucHJvY2Vzc29yLm9uZW5kZWQgPSAoKSA9PiB7XHJcbiAgICAgIHByb2Nlc3Nvci5kaXNjb25uZWN0KCk7XHJcbiAgICAgIGdhaW4uZGlzY29ubmVjdCgpO1xyXG4gICAgfTtcclxuICAgIHRoaXMuZ2Fpbi5jb25uZWN0KHRoaXMudm9sdW1lKTtcclxuICB9XHJcblxyXG4gIHN0YXJ0KHN0YXJ0VGltZSkge1xyXG4gICAgdGhpcy5pbml0UHJvY2Vzc29yKCk7XHJcbiAgICB0aGlzLnByb2Nlc3Nvci5zdGFydChzdGFydFRpbWUpO1xyXG4gIH1cclxuXHJcbiAgc3RvcCh0aW1lKSB7XHJcbiAgICB0aGlzLnByb2Nlc3Nvci5zdG9wKHRpbWUpO1xyXG4gIH1cclxuXHJcbiAga2V5b24odCwgbm90ZSwgdmVsKSB7XHJcbiAgICB0aGlzLnN0YXJ0KHQpO1xyXG4gICAgdGhpcy5wcm9jZXNzb3IuZnJlcXVlbmN5LnNldFZhbHVlQXRUaW1lKG1pZGlGcmVxW25vdGVdICogdGhpcy5kZXR1bmUsIHQpO1xyXG4gICAgdGhpcy5rZXlPblRpbWUgPSB0O1xyXG4gICAgdGhpcy5lbnZlbG9wZS5rZXlvbih0LCB2ZWwpO1xyXG4gIH1cclxuXHJcbiAga2V5b2ZmKHQpIHtcclxuICAgIHRoaXMuZ2Fpbi5nYWluLmNhbmNlbFNjaGVkdWxlZFZhbHVlcyh0Lyp0aGlzLmtleU9uVGltZSovKTtcclxuICAgIHRoaXMua2V5T2ZmVGltZSA9IHRoaXMuZW52ZWxvcGUua2V5b2ZmKHQpO1xyXG4gICAgdGhpcy5wcm9jZXNzb3Iuc3RvcCh0aGlzLmtleU9mZlRpbWUpO1xyXG4gIH1cclxuXHJcbiAgaXNLZXlPbih0KSB7XHJcbiAgICByZXR1cm4gdGhpcy5lbnZlbG9wZS5rZXlPbiAmJiAodGhpcy5rZXlPblRpbWUgPD0gdCk7XHJcbiAgfVxyXG5cclxuICBpc0tleU9mZih0KSB7XHJcbiAgICByZXR1cm4gIXRoaXMuZW52ZWxvcGUua2V5T24gJiYgKHRoaXMua2V5T2ZmVGltZSA8PSB0KTtcclxuICB9XHJcblxyXG4gIHJlc2V0KCkge1xyXG4gICAgdGhpcy5wcm9jZXNzb3IucGxheWJhY2tSYXRlLmNhbmNlbFNjaGVkdWxlZFZhbHVlcygwKTtcclxuICAgIHRoaXMuZ2Fpbi5nYWluLmNhbmNlbFNjaGVkdWxlZFZhbHVlcygwKTtcclxuICAgIHRoaXMuZ2Fpbi5nYWluLnZhbHVlID0gMDtcclxuICB9XHJcbn1cclxuXHJcbmV4cG9ydCBjbGFzcyBBdWRpbyB7XHJcbiAgY29uc3RydWN0b3IoKSB7XHJcbiAgICB0aGlzLlZPSUNFUyA9IDE2O1xyXG4gICAgdGhpcy5lbmFibGUgPSBmYWxzZTtcclxuICAgIHRoaXMuYXVkaW9Db250ZXh0ID0gd2luZG93LkF1ZGlvQ29udGV4dCB8fCB3aW5kb3cud2Via2l0QXVkaW9Db250ZXh0IHx8IHdpbmRvdy5tb3pBdWRpb0NvbnRleHQ7XHJcblxyXG4gICAgaWYgKHRoaXMuYXVkaW9Db250ZXh0KSB7XHJcbiAgICAgIHRoaXMuYXVkaW9jdHggPSBuZXcgdGhpcy5hdWRpb0NvbnRleHQoKTtcclxuICAgICAgdGhpcy5lbmFibGUgPSB0cnVlO1xyXG4gICAgfVxyXG5cclxuICAgIHRoaXMudm9pY2VzID0gW107XHJcbiAgICBpZiAodGhpcy5lbmFibGUpIHtcclxuICAgICAgY3JlYXRlV2F2ZVNhbXBsZUZyb21XYXZlcyh0aGlzLmF1ZGlvY3R4LCBCVUZGRVJfU0laRSk7XHJcbiAgICAgIHRoaXMucGVyaW9kaWNXYXZlcyA9IGNyZWF0ZVBlcmlvZGljV2F2ZUZyb21XYXZlcyh0aGlzLmF1ZGlvY3R4KTtcclxuICAgICAgdGhpcy5maWx0ZXIgPSB0aGlzLmF1ZGlvY3R4LmNyZWF0ZUJpcXVhZEZpbHRlcigpO1xyXG4gICAgICB0aGlzLmZpbHRlci50eXBlID0gJ2xvd3Bhc3MnO1xyXG4gICAgICB0aGlzLmZpbHRlci5mcmVxdWVuY3kudmFsdWUgPSAyMDAwMDtcclxuICAgICAgdGhpcy5maWx0ZXIuUS52YWx1ZSA9IDAuMDAwMTtcclxuICAgICAgdGhpcy5ub2lzZUZpbHRlciA9IHRoaXMuYXVkaW9jdHguY3JlYXRlQmlxdWFkRmlsdGVyKCk7XHJcbiAgICAgIHRoaXMubm9pc2VGaWx0ZXIudHlwZSA9ICdsb3dwYXNzJztcclxuICAgICAgdGhpcy5ub2lzZUZpbHRlci5mcmVxdWVuY3kudmFsdWUgPSAxMDAwO1xyXG4gICAgICB0aGlzLm5vaXNlRmlsdGVyLlEudmFsdWUgPSAxLjg7XHJcbiAgICAgIHRoaXMuY29tcCA9IHRoaXMuYXVkaW9jdHguY3JlYXRlRHluYW1pY3NDb21wcmVzc29yKCk7XHJcbiAgICAgIHRoaXMuZmlsdGVyLmNvbm5lY3QodGhpcy5jb21wKTtcclxuICAgICAgdGhpcy5ub2lzZUZpbHRlci5jb25uZWN0KHRoaXMuY29tcCk7XHJcbiAgICAgIHRoaXMuY29tcC5jb25uZWN0KHRoaXMuYXVkaW9jdHguZGVzdGluYXRpb24pO1xyXG4gICAgICAvLyB0aGlzLmZpbHRlci5jb25uZWN0KHRoaXMuYXVkaW9jdHguZGVzdGluYXRpb24pO1xyXG4gICAgICAvLyB0aGlzLm5vaXNlRmlsdGVyLmNvbm5lY3QodGhpcy5hdWRpb2N0eC5kZXN0aW5hdGlvbik7XHJcbiAgICAgIGZvciAodmFyIGkgPSAwLCBlbmQgPSB0aGlzLlZPSUNFUzsgaSA8IGVuZDsgKytpKSB7XHJcbiAgICAgICAgLy92YXIgdiA9IG5ldyBPc2NWb2ljZSh0aGlzLmF1ZGlvY3R4LHRoaXMucGVyaW9kaWNXYXZlc1swXSk7XHJcbiAgICAgICAgdmFyIHYgPSBuZXcgVm9pY2UodGhpcy5hdWRpb2N0eCk7XHJcbiAgICAgICAgdGhpcy52b2ljZXMucHVzaCh2KTtcclxuICAgICAgICBpZiAoaSA9PSAodGhpcy5WT0lDRVMgLSAxKSkge1xyXG4gICAgICAgICAgdi5vdXRwdXQuY29ubmVjdCh0aGlzLm5vaXNlRmlsdGVyKTtcclxuICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgdi5vdXRwdXQuY29ubmVjdCh0aGlzLmZpbHRlcik7XHJcbiAgICAgICAgfVxyXG4gICAgICB9XHJcbiAgICAgIHRoaXMucmVhZERydW1TYW1wbGUgPSByZWFkRHJ1bVNhbXBsZSh0aGlzLmF1ZGlvY3R4KTtcclxuICAgICAgLy8gIHRoaXMuc3RhcnRlZCA9IGZhbHNlO1xyXG4gICAgICAvL3RoaXMudm9pY2VzWzBdLm91dHB1dC5jb25uZWN0KCk7XHJcbiAgICB9XHJcbiAgfVxyXG5cclxuICBzdGFydCgpIHtcclxuICAgIC8vIHZhciB2b2ljZXMgPSB0aGlzLnZvaWNlcztcclxuICAgIC8vIGZvciAodmFyIGkgPSAwLCBlbmQgPSB2b2ljZXMubGVuZ3RoOyBpIDwgZW5kOyArK2kpXHJcbiAgICAvLyB7XHJcbiAgICAvLyAgIHZvaWNlc1tpXS5zdGFydCgwKTtcclxuICAgIC8vIH1cclxuICB9XHJcblxyXG4gIHN0b3AoKSB7XHJcbiAgICAvL2lmKHRoaXMuc3RhcnRlZClcclxuICAgIC8ve1xyXG4gICAgdmFyIHZvaWNlcyA9IHRoaXMudm9pY2VzO1xyXG4gICAgZm9yICh2YXIgaSA9IDAsIGVuZCA9IHZvaWNlcy5sZW5ndGg7IGkgPCBlbmQ7ICsraSkge1xyXG4gICAgICB2b2ljZXNbaV0uc3RvcCgwKTtcclxuICAgIH1cclxuICAgIC8vICB0aGlzLnN0YXJ0ZWQgPSBmYWxzZTtcclxuICAgIC8vfVxyXG4gIH1cclxufVxyXG5cclxuXHJcblxyXG4vKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKi9cclxuLyog44K344O844Kx44Oz44K144O844Kz44Oe44Oz44OJICAgICAgICAgICAgICAgICAgICAgICAqL1xyXG4vKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKi9cclxuXHJcbmZ1bmN0aW9uIGNhbGNTdGVwKG5vdGVMZW5ndGgpIHtcclxuICAvLyDplbfjgZXjgYvjgonjgrnjg4bjg4Pjg5fjgpLoqIjnrpfjgZnjgotcclxuICBsZXQgcHJldiA9IG51bGw7XHJcbiAgbGV0IGRvdHRlZCA9IDA7XHJcblxyXG4gIGxldCBtYXAgPSBub3RlTGVuZ3RoLm1hcCgoZWxlbSkgPT4ge1xyXG4gICAgc3dpdGNoIChlbGVtKSB7XHJcbiAgICAgIGNhc2UgbnVsbDpcclxuICAgICAgICBlbGVtID0gcHJldjtcclxuICAgICAgICBicmVhaztcclxuICAgICAgY2FzZSAwOlxyXG4gICAgICAgIGVsZW0gPSAoZG90dGVkICo9IDIpO1xyXG4gICAgICAgIGJyZWFrO1xyXG4gICAgICBkZWZhdWx0OlxyXG4gICAgICAgIHByZXYgPSBkb3R0ZWQgPSBlbGVtO1xyXG4gICAgICAgIGJyZWFrO1xyXG4gICAgfVxyXG5cclxuICAgIGxldCBsZW5ndGggPSBlbGVtICE9PSBudWxsID8gZWxlbSA6IERlZmF1bHRQYXJhbXMubGVuZ3RoO1xyXG5cclxuICAgIHJldHVybiBUSU1FX0JBU0UgKiAoNCAvIGxlbmd0aCk7XHJcbiAgfSk7XHJcbiAgcmV0dXJuIG1hcC5yZWR1Y2UoKGEsIGIpID0+IGEgKyBiLCAwKTtcclxufVxyXG5cclxuZXhwb3J0IGNsYXNzIE5vdGUge1xyXG4gIGNvbnN0cnVjdG9yKG5vdGVzLCBsZW5ndGgpIHtcclxuXHJcbiAgICB0aGlzLm5vdGVzID0gbm90ZXM7XHJcbiAgICBpZiAobGVuZ3RoWzBdKSB7XHJcbiAgICAgIHRoaXMuc3RlcCA9IGNhbGNTdGVwKGxlbmd0aCk7XHJcbiAgICB9XHJcbiAgfVxyXG5cclxuICBwcm9jZXNzKHRyYWNrKSB7XHJcbiAgICB0aGlzLm5vdGVzLmZvckVhY2goKG4sIGkpID0+IHtcclxuICAgICAgdmFyIGJhY2sgPSB0cmFjay5iYWNrO1xyXG4gICAgICB2YXIgbm90ZSA9IG47XHJcbiAgICAgIHZhciBvY3QgPSB0aGlzLm9jdCB8fCBiYWNrLm9jdDtcclxuICAgICAgdmFyIHN0ZXAgPSB0aGlzLnN0ZXAgfHwgYmFjay5zdGVwO1xyXG4gICAgICB2YXIgZ2F0ZSA9IHRoaXMuZ2F0ZSB8fCBiYWNrLmdhdGU7XHJcbiAgICAgIHZhciB2ZWwgPSB0aGlzLnZlbCB8fCBiYWNrLnZlbDtcclxuICAgICAgc2V0UXVldWUodHJhY2ssIG5vdGUsIG9jdCwgaSA9PSAwID8gc3RlcCA6IDAsIGdhdGUsIHZlbCk7XHJcbiAgICB9KTtcclxuICB9XHJcbn1cclxuXHJcbmNsYXNzIFNlcURhdGEge1xyXG4gIGNvbnN0cnVjdG9yKG5vdGUsIG9jdCwgc3RlcCwgZ2F0ZSwgdmVsKSB7XHJcbiAgICB0aGlzLm5vdGUgPSBub3RlO1xyXG4gICAgdGhpcy5vY3QgPSBvY3Q7XHJcbiAgICAvL3RoaXMubm8gPSBub3RlLm5vICsgb2N0ICogMTI7XHJcbiAgICB0aGlzLnN0ZXAgPSBzdGVwO1xyXG4gICAgdGhpcy5nYXRlID0gZ2F0ZTtcclxuICAgIHRoaXMudmVsID0gdmVsO1xyXG4gICAgdGhpcy5zYW1wbGUgPSB3YXZlXHJcbiAgfVxyXG5cclxuICBwcm9jZXNzKHRyYWNrKSB7XHJcbiAgICB2YXIgYmFjayA9IHRyYWNrLmJhY2s7XHJcbiAgICB2YXIgbm90ZSA9IHRoaXMubm90ZSB8fCBiYWNrLm5vdGU7XHJcbiAgICB2YXIgb2N0ID0gdGhpcy5vY3QgfHwgYmFjay5vY3Q7XHJcbiAgICB2YXIgc3RlcCA9IHRoaXMuc3RlcCB8fCBiYWNrLnN0ZXA7XHJcbiAgICB2YXIgZ2F0ZSA9IHRoaXMuZ2F0ZSB8fCBiYWNrLmdhdGU7XHJcbiAgICB2YXIgdmVsID0gdGhpcy52ZWwgfHwgYmFjay52ZWw7XHJcbiAgICBzZXRRdWV1ZSh0cmFjaywgbm90ZSwgb2N0LCBzdGVwLCBnYXRlLCB2ZWwpO1xyXG4gIH1cclxufVxyXG5cclxuZnVuY3Rpb24gc2V0UXVldWUodHJhY2ssIG5vdGUsIG9jdCwgc3RlcCwgZ2F0ZSwgdmVsKSB7XHJcbiAgbGV0IG5vID0gbm90ZSArIG9jdCAqIDEyO1xyXG4gIGxldCBiYWNrID0gdHJhY2suYmFjaztcclxuICB2YXIgc3RlcF90aW1lID0gKHN0ZXAgPyB0cmFjay5wbGF5aW5nVGltZSA6IGJhY2sucGxheWluZ1RpbWUpO1xyXG4gIC8vIHZhciBnYXRlX3RpbWUgPSAoKGdhdGUgPj0gMCkgPyBnYXRlICogNjAgOiBzdGVwICogZ2F0ZSAqIDYwICogLTEuMCkgLyAoVElNRV9CQVNFICogdHJhY2subG9jYWxUZW1wbykgKyB0cmFjay5wbGF5aW5nVGltZTtcclxuXHJcbiAgdmFyIGdhdGVfdGltZSA9ICgoc3RlcCA9PSAwID8gYmFjay5jb2RlU3RlcCA6IHN0ZXApICogZ2F0ZSAqIDYwKSAvIChUSU1FX0JBU0UgKiB0cmFjay5sb2NhbFRlbXBvKSArIChzdGVwID8gdHJhY2sucGxheWluZ1RpbWUgOiBiYWNrLnBsYXlpbmdUaW1lKTtcclxuICAvL2xldCB2b2ljZSA9IHRyYWNrLmF1ZGlvLnZvaWNlc1t0cmFjay5jaGFubmVsXTtcclxuICBsZXQgdm9pY2UgPSB0cmFjay5hc3NpZ25Wb2ljZShzdGVwX3RpbWUpO1xyXG4gIC8vdm9pY2UucmVzZXQoKTtcclxuICB2b2ljZS5zYW1wbGUgPSBiYWNrLnNhbXBsZTtcclxuICB2b2ljZS5lbnZlbG9wZS5hdHRhY2tUaW1lID0gYmFjay5hdHRhY2s7XHJcbiAgdm9pY2UuZW52ZWxvcGUuZGVjYXlUaW1lID0gYmFjay5kZWNheTtcclxuICB2b2ljZS5lbnZlbG9wZS5zdXN0YWluTGV2ZWwgPSBiYWNrLnN1c3RhaW47XHJcbiAgdm9pY2UuZW52ZWxvcGUucmVsZWFzZVRpbWUgPSBiYWNrLnJlbGVhc2U7XHJcbiAgdm9pY2UuZGV0dW5lID0gYmFjay5kZXR1bmU7XHJcbiAgdm9pY2Uudm9sdW1lLmdhaW4uc2V0VmFsdWVBdFRpbWUoYmFjay52b2x1bWUsIHN0ZXBfdGltZSk7XHJcblxyXG4gIC8vdm9pY2UuaW5pdFByb2Nlc3NvcigpO1xyXG5cclxuICAvL2NvbnNvbGUubG9nKHRyYWNrLnNlcXVlbmNlci50ZW1wbyk7XHJcbiAgdm9pY2Uua2V5b24oc3RlcF90aW1lLCBubywgdmVsKTtcclxuICB2b2ljZS5rZXlvZmYoZ2F0ZV90aW1lKTtcclxuICBpZiAoc3RlcCkge1xyXG4gICAgYmFjay5jb2RlU3RlcCA9IHN0ZXA7XHJcbiAgICBiYWNrLnBsYXlpbmdUaW1lID0gdHJhY2sucGxheWluZ1RpbWU7XHJcbiAgfVxyXG5cclxuICB0cmFjay5wbGF5aW5nVGltZSA9IChzdGVwICogNjApIC8gKFRJTUVfQkFTRSAqIHRyYWNrLmxvY2FsVGVtcG8pICsgdHJhY2sucGxheWluZ1RpbWU7XHJcbiAgLy8gYmFjay52b2ljZSA9IHZvaWNlO1xyXG4gIC8vIGJhY2subm90ZSA9IG5vdGU7XHJcbiAgLy8gYmFjay5vY3QgPSBvY3Q7XHJcbiAgLy8gYmFjay5nYXRlID0gZ2F0ZTtcclxuICAvLyBiYWNrLnZlbCA9IHZlbDtcclxufVxyXG5cclxuXHJcbmZ1bmN0aW9uIFMobm90ZSwgb2N0LCBzdGVwLCBnYXRlLCB2ZWwpIHtcclxuICB2YXIgYXJncyA9IEFycmF5LnByb3RvdHlwZS5zbGljZS5jYWxsKGFyZ3VtZW50cyk7XHJcbiAgaWYgKFMubGVuZ3RoICE9IGFyZ3MubGVuZ3RoKSB7XHJcbiAgICBpZiAodHlwZW9mIChhcmdzW2FyZ3MubGVuZ3RoIC0gMV0pID09ICdvYmplY3QnICYmICEoYXJnc1thcmdzLmxlbmd0aCAtIDFdIGluc3RhbmNlb2YgTm90ZSkpIHtcclxuICAgICAgdmFyIGFyZ3MxID0gYXJnc1thcmdzLmxlbmd0aCAtIDFdO1xyXG4gICAgICB2YXIgbCA9IGFyZ3MubGVuZ3RoIC0gMTtcclxuICAgICAgcmV0dXJuIG5ldyBTZXFEYXRhKFxyXG4gICAgICAgICgobCAhPSAwKSA/IG5vdGUgOiBmYWxzZSkgfHwgYXJnczEubm90ZSB8fCBhcmdzMS5uIHx8IG51bGwsXHJcbiAgICAgICAgKChsICE9IDEpID8gb2N0IDogZmFsc2UpIHx8IGFyZ3MxLm9jdCB8fCBhcmdzMS5vIHx8IG51bGwsXHJcbiAgICAgICAgKChsICE9IDIpID8gc3RlcCA6IGZhbHNlKSB8fCBhcmdzMS5zdGVwIHx8IGFyZ3MxLnMgfHwgbnVsbCxcclxuICAgICAgICAoKGwgIT0gMykgPyBnYXRlIDogZmFsc2UpIHx8IGFyZ3MxLmdhdGUgfHwgYXJnczEuZyB8fCBudWxsLFxyXG4gICAgICAgICgobCAhPSA0KSA/IHZlbCA6IGZhbHNlKSB8fCBhcmdzMS52ZWwgfHwgYXJnczEudiB8fCBudWxsXHJcbiAgICAgICk7XHJcbiAgICB9XHJcbiAgfVxyXG4gIHJldHVybiBuZXcgU2VxRGF0YShub3RlIHx8IG51bGwsIG9jdCB8fCBudWxsLCBzdGVwIHx8IG51bGwsIGdhdGUgfHwgbnVsbCwgdmVsIHx8IG51bGwpO1xyXG59XHJcblxyXG5mdW5jdGlvbiBTMShub3RlLCBvY3QsIHN0ZXAsIGdhdGUsIHZlbCkge1xyXG4gIHJldHVybiBTKG5vdGUsIG9jdCwgbChzdGVwKSwgZ2F0ZSwgdmVsKTtcclxufVxyXG5cclxuZnVuY3Rpb24gUzIobm90ZSwgbGVuLCBkb3QsIG9jdCwgZ2F0ZSwgdmVsKSB7XHJcbiAgcmV0dXJuIFMobm90ZSwgb2N0LCBsKGxlbiwgZG90KSwgZ2F0ZSwgdmVsKTtcclxufVxyXG5cclxuZnVuY3Rpb24gUzMobm90ZSwgc3RlcCwgZ2F0ZSwgdmVsLCBvY3QpIHtcclxuICByZXR1cm4gUyhub3RlLCBvY3QsIHN0ZXAsIGdhdGUsIHZlbCk7XHJcbn1cclxuXHJcblxyXG4vLy8g6Z+z56ym44Gu6ZW344GV5oyH5a6aXHJcblxyXG5jbGFzcyBMZW5ndGgge1xyXG4gIGNvbnN0cnVjdG9yKGxlbikge1xyXG4gICAgdGhpcy5zdGVwID0gY2FsY1N0ZXAobGVuKTtcclxuICB9XHJcbiAgcHJvY2Vzcyh0cmFjaykge1xyXG4gICAgdHJhY2suYmFjay5zdGVwID0gdGhpcy5zdGVwO1xyXG4gIH1cclxufVxyXG5cclxuY2xhc3MgU3RlcCB7XHJcbiAgY29uc3RydWN0b3Ioc3RlcCkge1xyXG4gICAgdGhpcy5zdGVwID0gc3RlcDtcclxuICB9XHJcbiAgcHJvY2Vzcyh0cmFjaykge1xyXG4gICAgdHJhY2suYmFjay5zdGVwID0gdGhpcy5zdGVwO1xyXG4gIH1cclxufVxyXG5cclxuLy8vIOOCsuODvOODiOOCv+OCpOODoOaMh+WumlxyXG5cclxuY2xhc3MgR2F0ZVRpbWUge1xyXG4gIGNvbnN0cnVjdG9yKGdhdGUpIHtcclxuICAgIHRoaXMuZ2F0ZSA9IGdhdGUgLyAxMDA7XHJcbiAgfVxyXG5cclxuICBwcm9jZXNzKHRyYWNrKSB7XHJcbiAgICB0cmFjay5iYWNrLmdhdGUgPSB0aGlzLmdhdGU7XHJcbiAgfVxyXG59XHJcblxyXG4vLy8g44OZ44Ot44K344OG44Kj5oyH5a6aXHJcblxyXG5jbGFzcyBWZWxvY2l0eSB7XHJcbiAgY29uc3RydWN0b3IodmVsKSB7XHJcbiAgICB0aGlzLnZlbCA9IHZlbCAvIDEwMDtcclxuICB9XHJcbiAgcHJvY2Vzcyh0cmFjaykge1xyXG4gICAgdHJhY2suYmFjay52ZWwgPSB0aGlzLnZlbDtcclxuICB9XHJcbn1cclxuXHJcbi8vLyDpn7PoibLoqK3lrppcclxuY2xhc3MgVG9uZSB7XHJcbiAgY29uc3RydWN0b3Iobm8pIHtcclxuICAgIHRoaXMubm8gPSBubztcclxuICAgIC8vdGhpcy5zYW1wbGUgPSB3YXZlU2FtcGxlc1t0aGlzLm5vXTtcclxuICB9XHJcblxyXG4gIHByb2Nlc3ModHJhY2spIHtcclxuICAgIC8vICAgIHRyYWNrLmJhY2suc2FtcGxlID0gdHJhY2suYXVkaW8ucGVyaW9kaWNXYXZlc1t0aGlzLm5vXTtcclxuICAgIHRyYWNrLmJhY2suc2FtcGxlID0gd2F2ZVNhbXBsZXNbdGhpcy5ub107XHJcbiAgICAvLyAgICB0cmFjay5hdWRpby52b2ljZXNbdHJhY2suY2hhbm5lbF0uc2V0U2FtcGxlKHdhdmVTYW1wbGVzW3RoaXMubm9dKTtcclxuICB9XHJcbn1cclxuXHJcbmNsYXNzIFJlc3Qge1xyXG4gIGNvbnN0cnVjdG9yKGxlbmd0aCkge1xyXG4gICAgdGhpcy5zdGVwID0gY2FsY1N0ZXAobGVuZ3RoKTtcclxuICB9XHJcbiAgcHJvY2Vzcyh0cmFjaykge1xyXG4gICAgdmFyIHN0ZXAgPSB0aGlzLnN0ZXAgfHwgdHJhY2suYmFjay5zdGVwO1xyXG4gICAgdHJhY2sucGxheWluZ1RpbWUgPSB0cmFjay5wbGF5aW5nVGltZSArICh0aGlzLnN0ZXAgKiA2MCkgLyAoVElNRV9CQVNFICogdHJhY2subG9jYWxUZW1wbyk7XHJcbiAgICAvL3RyYWNrLmJhY2suc3RlcCA9IHRoaXMuc3RlcDtcclxuICB9XHJcbn1cclxuXHJcbmNsYXNzIE9jdGF2ZSB7XHJcbiAgY29uc3RydWN0b3Iob2N0KSB7XHJcbiAgICB0aGlzLm9jdCA9IG9jdDtcclxuICB9XHJcbiAgcHJvY2Vzcyh0cmFjaykge1xyXG4gICAgdHJhY2suYmFjay5vY3QgPSB0aGlzLm9jdDtcclxuICB9XHJcbn1cclxuXHJcblxyXG5jbGFzcyBPY3RhdmVVcCB7XHJcbiAgY29uc3RydWN0b3IodikgeyB0aGlzLnYgPSB2OyB9XHJcbiAgcHJvY2Vzcyh0cmFjaykge1xyXG4gICAgdHJhY2suYmFjay5vY3QgKz0gdGhpcy52O1xyXG4gIH1cclxufVxyXG5cclxuY2xhc3MgT2N0YXZlRG93biB7XHJcbiAgY29uc3RydWN0b3IodikgeyB0aGlzLnYgPSB2OyB9XHJcbiAgcHJvY2Vzcyh0cmFjaykge1xyXG4gICAgdHJhY2suYmFjay5vY3QgLT0gdGhpcy52O1xyXG4gIH1cclxufVxyXG5jbGFzcyBUZW1wbyB7XHJcbiAgY29uc3RydWN0b3IodGVtcG8pIHtcclxuICAgIHRoaXMudGVtcG8gPSB0ZW1wbztcclxuICB9XHJcblxyXG4gIHByb2Nlc3ModHJhY2spIHtcclxuICAgIHRyYWNrLmxvY2FsVGVtcG8gPSB0aGlzLnRlbXBvO1xyXG4gICAgLy90cmFjay5zZXF1ZW5jZXIudGVtcG8gPSB0aGlzLnRlbXBvO1xyXG4gIH1cclxufVxyXG5cclxuY2xhc3MgRW52ZWxvcGUge1xyXG4gIGNvbnN0cnVjdG9yKGF0dGFjaywgZGVjYXksIHN1c3RhaW4sIHJlbGVhc2UpIHtcclxuICAgIHRoaXMuYXR0YWNrID0gYXR0YWNrO1xyXG4gICAgdGhpcy5kZWNheSA9IGRlY2F5O1xyXG4gICAgdGhpcy5zdXN0YWluID0gc3VzdGFpbjtcclxuICAgIHRoaXMucmVsZWFzZSA9IHJlbGVhc2U7XHJcbiAgfVxyXG5cclxuICBwcm9jZXNzKHRyYWNrKSB7XHJcbiAgICAvL3ZhciBlbnZlbG9wZSA9IHRyYWNrLmF1ZGlvLnZvaWNlc1t0cmFjay5jaGFubmVsXS5lbnZlbG9wZTtcclxuICAgIHRyYWNrLmJhY2suYXR0YWNrID0gdGhpcy5hdHRhY2s7XHJcbiAgICB0cmFjay5iYWNrLmRlY2F5ID0gdGhpcy5kZWNheTtcclxuICAgIHRyYWNrLmJhY2suc3VzdGFpbiA9IHRoaXMuc3VzdGFpbjtcclxuICAgIHRyYWNrLmJhY2sucmVsZWFzZSA9IHRoaXMucmVsZWFzZTtcclxuICB9XHJcbn1cclxuXHJcbi8vLyDjg4fjg4Hjg6Xjg7zjg7NcclxuY2xhc3MgRGV0dW5lIHtcclxuICBjb25zdHJ1Y3RvcihkZXR1bmUpIHtcclxuICAgIHRoaXMuZGV0dW5lID0gZGV0dW5lO1xyXG4gIH1cclxuXHJcbiAgcHJvY2Vzcyh0cmFjaykge1xyXG4gICAgLy92YXIgdm9pY2UgPSB0cmFjay5hdWRpby52b2ljZXNbdHJhY2suY2hhbm5lbF07XHJcbiAgICB0cmFjay5iYWNrLmRldHVuZSA9IHRoaXMuZGV0dW5lO1xyXG4gIH1cclxufVxyXG5cclxuY2xhc3MgVm9sdW1lIHtcclxuICBjb25zdHJ1Y3Rvcih2b2x1bWUpIHtcclxuICAgIHRoaXMudm9sdW1lID0gdm9sdW1lIC8gMTAwLjA7XHJcbiAgfVxyXG5cclxuICBwcm9jZXNzKHRyYWNrKSB7XHJcbiAgICAvLyBcclxuICAgIHRyYWNrLmJhY2sudm9sdW1lID0gdGhpcy52b2x1bWU7XHJcbiAgICAvLyB0cmFjay5hdWRpby52b2ljZXNbdHJhY2suY2hhbm5lbF0udm9sdW1lLmdhaW4uc2V0VmFsdWVBdFRpbWUodGhpcy52b2x1bWUsIHRyYWNrLnBsYXlpbmdUaW1lKTtcclxuICB9XHJcbn1cclxuXHJcbmNsYXNzIExvb3BEYXRhIHtcclxuICBjb25zdHJ1Y3RvcihvYmosIHZhcm5hbWUsIGNvdW50LCBzZXFQb3MpIHtcclxuICAgIHRoaXMudmFybmFtZSA9IHZhcm5hbWU7XHJcbiAgICB0aGlzLmNvdW50ID0gY291bnQgfHwgRGVmYXVsdFBhcmFtcy5sb29wQ291bnQ7XHJcbiAgICB0aGlzLm9iaiA9IG9iajtcclxuICAgIHRoaXMuc2VxUG9zID0gc2VxUG9zO1xyXG4gICAgdGhpcy5vdXRTZXFQb3MgPSAtMTtcclxuICB9XHJcblxyXG4gIHByb2Nlc3ModHJhY2spIHtcclxuICAgIHZhciBzdGFjayA9IHRyYWNrLnN0YWNrO1xyXG4gICAgaWYgKHN0YWNrLmxlbmd0aCA9PSAwIHx8IHN0YWNrW3N0YWNrLmxlbmd0aCAtIDFdLm9iaiAhPT0gdGhpcykge1xyXG4gICAgICB2YXIgbGQgPSB0aGlzO1xyXG4gICAgICBzdGFjay5wdXNoKG5ldyBMb29wRGF0YSh0aGlzLCBsZC52YXJuYW1lLCBsZC5jb3VudCwgdHJhY2suc2VxUG9zKSk7XHJcbiAgICB9XHJcbiAgfVxyXG59XHJcblxyXG5jbGFzcyBMb29wRW5kIHtcclxuICBjb25zdHJ1Y3RvcihzZXFQb3MpIHtcclxuICAgIHRoaXMuc2VxUG9zID0gc2VxUG9zO1xyXG4gIH1cclxuICBwcm9jZXNzKHRyYWNrKSB7XHJcbiAgICB2YXIgbGQgPSB0cmFjay5zdGFja1t0cmFjay5zdGFjay5sZW5ndGggLSAxXTtcclxuICAgIGlmIChsZC5vdXRTZXFQb3MgPT0gLTEpIGxkLm91dFNlcVBvcyA9IHRoaXMuc2VxUG9zO1xyXG4gICAgbGQuY291bnQtLTtcclxuICAgIGlmIChsZC5jb3VudCA+IDApIHtcclxuICAgICAgdHJhY2suc2VxUG9zID0gbGQuc2VxUG9zO1xyXG4gICAgfSBlbHNlIHtcclxuICAgICAgdHJhY2suc3RhY2sucG9wKCk7XHJcbiAgICB9XHJcbiAgfVxyXG59XHJcblxyXG5jbGFzcyBMb29wRXhpdCB7XHJcbiAgcHJvY2Vzcyh0cmFjaykge1xyXG4gICAgdmFyIGxkID0gdHJhY2suc3RhY2tbdHJhY2suc3RhY2subGVuZ3RoIC0gMV07XHJcbiAgICBpZiAobGQuY291bnQgPD0gMSAmJiBsZC5vdXRTZXFQb3MgIT0gLTEpIHtcclxuICAgICAgdHJhY2suc2VxUG9zID0gbGQub3V0U2VxUG9zO1xyXG4gICAgICB0cmFjay5zdGFjay5wb3AoKTtcclxuICAgIH1cclxuICB9XHJcbn1cclxuXHJcbmNsYXNzIEluZmluaXRlTG9vcCB7XHJcbiAgcHJvY2Vzcyh0cmFjaykge1xyXG4gICAgdHJhY2suaW5maW5pdExvb3BJbmRleCA9IHRyYWNrLnNlcVBvcztcclxuICB9XHJcbn1cclxuLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vXHJcbi8vLyDjgrfjg7zjgrHjg7PjgrXjg7zjg4jjg6njg4Pjgq9cclxuY2xhc3MgVHJhY2sge1xyXG4gIGNvbnN0cnVjdG9yKHNlcXVlbmNlciwgc2VxZGF0YSwgYXVkaW8pIHtcclxuICAgIHRoaXMubmFtZSA9ICcnO1xyXG4gICAgdGhpcy5lbmQgPSBmYWxzZTtcclxuICAgIHRoaXMub25lc2hvdCA9IGZhbHNlO1xyXG4gICAgdGhpcy5zZXF1ZW5jZXIgPSBzZXF1ZW5jZXI7XHJcbiAgICB0aGlzLnNlcURhdGEgPSBzZXFkYXRhO1xyXG4gICAgdGhpcy5zZXFQb3MgPSAwO1xyXG4gICAgdGhpcy5tdXRlID0gZmFsc2U7XHJcbiAgICB0aGlzLnBsYXlpbmdUaW1lID0gLTE7XHJcbiAgICB0aGlzLmxvY2FsVGVtcG8gPSBzZXF1ZW5jZXIudGVtcG87XHJcbiAgICB0aGlzLnRyYWNrVm9sdW1lID0gMS4wO1xyXG4gICAgdGhpcy50cmFuc3Bvc2UgPSAwO1xyXG4gICAgdGhpcy5zb2xvID0gZmFsc2U7XHJcbiAgICB0aGlzLmNoYW5uZWwgPSAtMTtcclxuICAgIHRoaXMudHJhY2sgPSAtMTtcclxuICAgIHRoaXMuYXVkaW8gPSBhdWRpbztcclxuICAgIHRoaXMuaW5maW5pdExvb3BJbmRleCA9IC0xO1xyXG4gICAgdGhpcy5iYWNrID0ge1xyXG4gICAgICBub3RlOiA3MixcclxuICAgICAgb2N0OiA1LFxyXG4gICAgICBzdGVwOiA5NixcclxuICAgICAgZ2F0ZTogMC41LFxyXG4gICAgICB2ZWw6IDEuMCxcclxuICAgICAgYXR0YWNrOiAwLjAxLFxyXG4gICAgICBkZWNheTogMC4wNSxcclxuICAgICAgc3VzdGFpbjogMC42LFxyXG4gICAgICByZWxlYXNlOiAwLjA3LFxyXG4gICAgICBkZXR1bmU6IDEuMCxcclxuICAgICAgdm9sdW1lOiAwLjUsXHJcbiAgICAgIC8vICAgICAgc2FtcGxlOmF1ZGlvLnBlcmlvZGljV2F2ZXNbMF1cclxuICAgICAgc2FtcGxlOiB3YXZlU2FtcGxlc1swXVxyXG4gICAgfVxyXG4gICAgdGhpcy5zdGFjayA9IFtdO1xyXG4gIH1cclxuXHJcbiAgcHJvY2VzcyhjdXJyZW50VGltZSkge1xyXG5cclxuICAgIGlmICh0aGlzLmVuZCkgcmV0dXJuO1xyXG5cclxuICAgIGlmICh0aGlzLm9uZXNob3QpIHtcclxuICAgICAgdGhpcy5yZXNldCgpO1xyXG4gICAgfVxyXG5cclxuICAgIHZhciBzZXFTaXplID0gdGhpcy5zZXFEYXRhLmxlbmd0aDtcclxuICAgIGlmICh0aGlzLnNlcVBvcyA+PSBzZXFTaXplKSB7XHJcbiAgICAgIGlmICh0aGlzLnNlcXVlbmNlci5yZXBlYXQpIHtcclxuICAgICAgICB0aGlzLnNlcVBvcyA9IDA7XHJcbiAgICAgIH0gZWxzZSBpZiAodGhpcy5pbmZpbml0TG9vcEluZGV4ID49IDApIHtcclxuICAgICAgICB0aGlzLnNlcVBvcyA9IHRoaXMuaW5maW5pdExvb3BJbmRleDtcclxuICAgICAgfSBlbHNlIHtcclxuICAgICAgICB0aGlzLmVuZCA9IHRydWU7XHJcbiAgICAgICAgcmV0dXJuO1xyXG4gICAgICB9XHJcbiAgICB9XHJcblxyXG4gICAgdmFyIHNlcSA9IHRoaXMuc2VxRGF0YTtcclxuICAgIHRoaXMucGxheWluZ1RpbWUgPSAodGhpcy5wbGF5aW5nVGltZSA+IC0xKSA/IHRoaXMucGxheWluZ1RpbWUgOiBjdXJyZW50VGltZTtcclxuICAgIHZhciBlbmRUaW1lID0gY3VycmVudFRpbWUgKyAwLjIvKnNlYyovO1xyXG5cclxuICAgIHdoaWxlICh0aGlzLnNlcVBvcyA8IHNlcVNpemUpIHtcclxuICAgICAgaWYgKHRoaXMucGxheWluZ1RpbWUgPj0gZW5kVGltZSAmJiAhdGhpcy5vbmVzaG90KSB7XHJcbiAgICAgICAgYnJlYWs7XHJcbiAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgdmFyIGQgPSBzZXFbdGhpcy5zZXFQb3NdO1xyXG4gICAgICAgIGQucHJvY2Vzcyh0aGlzKTtcclxuICAgICAgICB0aGlzLnNlcVBvcysrO1xyXG4gICAgICB9XHJcbiAgICB9XHJcbiAgfVxyXG5cclxuICByZXNldCgpIHtcclxuICAgIC8vIHZhciBjdXJWb2ljZSA9IHRoaXMuYXVkaW8udm9pY2VzW3RoaXMuY2hhbm5lbF07XHJcbiAgICAvLyBjdXJWb2ljZS5nYWluLmdhaW4uY2FuY2VsU2NoZWR1bGVkVmFsdWVzKDApO1xyXG4gICAgLy8gY3VyVm9pY2UucHJvY2Vzc29yLnBsYXliYWNrUmF0ZS5jYW5jZWxTY2hlZHVsZWRWYWx1ZXMoMCk7XHJcbiAgICAvLyBjdXJWb2ljZS5nYWluLmdhaW4udmFsdWUgPSAwO1xyXG4gICAgdGhpcy5wbGF5aW5nVGltZSA9IC0xO1xyXG4gICAgdGhpcy5zZXFQb3MgPSAwO1xyXG4gICAgdGhpcy5pbmZpbml0TG9vcEluZGV4ID0gLTE7XHJcbiAgICB0aGlzLmVuZCA9IGZhbHNlO1xyXG4gICAgdGhpcy5zdGFjay5sZW5ndGggPSAwO1xyXG4gIH1cclxuXHJcbiAgYXNzaWduVm9pY2UodCkge1xyXG4gICAgbGV0IHJldCA9IG51bGw7XHJcbiAgICB0aGlzLmF1ZGlvLnZvaWNlcy5zb21lKChkLCBpKSA9PiB7XHJcbiAgICAgIGlmIChkLmlzS2V5T2ZmKHQpKSB7XHJcbiAgICAgICAgcmV0ID0gZDtcclxuICAgICAgICByZXR1cm4gdHJ1ZTtcclxuICAgICAgfVxyXG4gICAgICByZXR1cm4gZmFsc2U7XHJcbiAgICB9KTtcclxuICAgIGlmICghcmV0KSB7XHJcbiAgICAgIGxldCBvbGRlc3RLZXlPbkRhdGEgPSAodGhpcy5hdWRpby52b2ljZXMubWFwKChkLCBpKSA9PiB7XHJcbiAgICAgICAgcmV0dXJuIHsgdGltZTogZC5lbnZlbG9wZS5rZXlPblRpbWUsIGQsIGkgfTtcclxuICAgICAgfSkuc29ydCgoYSwgYikgPT4gYS50aW1lIC0gYi50aW1lKSlbMF07XHJcbiAgICAgIHJldCA9IG9sZGVzdEtleU9uRGF0YS5kO1xyXG4gICAgfVxyXG4gICAgcmV0dXJuIHJldDtcclxuICB9XHJcblxyXG59XHJcblxyXG5mdW5jdGlvbiBsb2FkVHJhY2tzKHNlbGYsIHRyYWNrcywgdHJhY2tkYXRhKSB7XHJcbiAgZm9yICh2YXIgaSA9IDA7IGkgPCB0cmFja2RhdGEubGVuZ3RoOyArK2kpIHtcclxuICAgIHZhciB0cmFjayA9IG5ldyBUcmFjayhzZWxmLCB0cmFja2RhdGFbaV0uZGF0YSwgc2VsZi5hdWRpbyk7XHJcbiAgICB0cmFjay5jaGFubmVsID0gdHJhY2tkYXRhW2ldLmNoYW5uZWw7XHJcbiAgICB0cmFjay5vbmVzaG90ID0gKCF0cmFja2RhdGFbaV0ub25lc2hvdCkgPyBmYWxzZSA6IHRydWU7XHJcbiAgICB0cmFjay50cmFjayA9IGk7XHJcbiAgICB0cmFja3MucHVzaCh0cmFjayk7XHJcbiAgfVxyXG59XHJcblxyXG5mdW5jdGlvbiBjcmVhdGVUcmFja3ModHJhY2tkYXRhKSB7XHJcbiAgdmFyIHRyYWNrcyA9IFtdO1xyXG4gIGxvYWRUcmFja3ModGhpcywgdHJhY2tzLCB0cmFja2RhdGEpO1xyXG4gIHJldHVybiB0cmFja3M7XHJcbn1cclxuXHJcbi8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy9cclxuLy8vIOOCt+ODvOOCseODs+OCteODvOacrOS9kyBcclxuZXhwb3J0IGNsYXNzIFNlcXVlbmNlciB7XHJcbiAgY29uc3RydWN0b3IoYXVkaW8pIHtcclxuICAgIHRoaXMuU1RPUCA9IDAgfCAwO1xyXG4gICAgdGhpcy5QTEFZID0gMSB8IDA7XHJcbiAgICB0aGlzLlBBVVNFID0gMiB8IDA7XHJcblxyXG4gICAgdGhpcy5hdWRpbyA9IGF1ZGlvO1xyXG4gICAgdGhpcy50ZW1wbyA9IDEwMC4wO1xyXG4gICAgdGhpcy5yZXBlYXQgPSBmYWxzZTtcclxuICAgIHRoaXMucGxheSA9IGZhbHNlO1xyXG4gICAgdGhpcy50cmFja3MgPSBbXTtcclxuICAgIHRoaXMucGF1c2VUaW1lID0gMDtcclxuICAgIHRoaXMuc3RhdHVzID0gdGhpcy5TVE9QO1xyXG4gIH1cclxuICBsb2FkKGRhdGEpIHtcclxuICAgIHBhcnNlTU1MKGRhdGEpO1xyXG4gICAgaWYgKHRoaXMucGxheSkge1xyXG4gICAgICB0aGlzLnN0b3AoKTtcclxuICAgIH1cclxuICAgIHRoaXMudHJhY2tzLmxlbmd0aCA9IDA7XHJcbiAgICBsb2FkVHJhY2tzKHRoaXMsIHRoaXMudHJhY2tzLCBkYXRhLnRyYWNrcywgdGhpcy5hdWRpbyk7XHJcbiAgfVxyXG4gIHN0YXJ0KCkge1xyXG4gICAgLy8gICAgdGhpcy5oYW5kbGUgPSB3aW5kb3cuc2V0VGltZW91dChmdW5jdGlvbiAoKSB7IHNlbGYucHJvY2VzcygpIH0sIDUwKTtcclxuICAgIHRoaXMuYXVkaW8ucmVhZERydW1TYW1wbGVcclxuICAgICAgLnRoZW4oKCkgPT4ge1xyXG4gICAgICAgIHRoaXMuc3RhdHVzID0gdGhpcy5QTEFZO1xyXG4gICAgICAgIHRoaXMucHJvY2VzcygpO1xyXG4gICAgICB9KTtcclxuICB9XHJcbiAgcHJvY2VzcygpIHtcclxuICAgIGlmICh0aGlzLnN0YXR1cyA9PSB0aGlzLlBMQVkpIHtcclxuICAgICAgdGhpcy5wbGF5VHJhY2tzKHRoaXMudHJhY2tzKTtcclxuICAgICAgdGhpcy5oYW5kbGUgPSB3aW5kb3cuc2V0VGltZW91dCh0aGlzLnByb2Nlc3MuYmluZCh0aGlzKSwgMTAwKTtcclxuICAgIH1cclxuICB9XHJcbiAgcGxheVRyYWNrcyh0cmFja3MpIHtcclxuICAgIHZhciBjdXJyZW50VGltZSA9IHRoaXMuYXVkaW8uYXVkaW9jdHguY3VycmVudFRpbWU7XHJcbiAgICAvLyAgIGNvbnNvbGUubG9nKHRoaXMuYXVkaW8uYXVkaW9jdHguY3VycmVudFRpbWUpO1xyXG4gICAgZm9yICh2YXIgaSA9IDAsIGVuZCA9IHRyYWNrcy5sZW5ndGg7IGkgPCBlbmQ7ICsraSkge1xyXG4gICAgICB0cmFja3NbaV0ucHJvY2VzcyhjdXJyZW50VGltZSk7XHJcbiAgICB9XHJcbiAgfVxyXG4gIHBhdXNlKCkge1xyXG4gICAgdGhpcy5zdGF0dXMgPSB0aGlzLlBBVVNFO1xyXG4gICAgdGhpcy5wYXVzZVRpbWUgPSB0aGlzLmF1ZGlvLmF1ZGlvY3R4LmN1cnJlbnRUaW1lO1xyXG4gIH1cclxuICByZXN1bWUoKSB7XHJcbiAgICBpZiAodGhpcy5zdGF0dXMgPT0gdGhpcy5QQVVTRSkge1xyXG4gICAgICB0aGlzLnN0YXR1cyA9IHRoaXMuUExBWTtcclxuICAgICAgdmFyIHRyYWNrcyA9IHRoaXMudHJhY2tzO1xyXG4gICAgICB2YXIgYWRqdXN0ID0gdGhpcy5hdWRpby5hdWRpb2N0eC5jdXJyZW50VGltZSAtIHRoaXMucGF1c2VUaW1lO1xyXG4gICAgICBmb3IgKHZhciBpID0gMCwgZW5kID0gdHJhY2tzLmxlbmd0aDsgaSA8IGVuZDsgKytpKSB7XHJcbiAgICAgICAgdHJhY2tzW2ldLnBsYXlpbmdUaW1lICs9IGFkanVzdDtcclxuICAgICAgfVxyXG4gICAgICB0aGlzLnByb2Nlc3MoKTtcclxuICAgIH1cclxuICB9XHJcbiAgc3RvcCgpIHtcclxuICAgIGlmICh0aGlzLnN0YXR1cyAhPSB0aGlzLlNUT1ApIHtcclxuICAgICAgY2xlYXJUaW1lb3V0KHRoaXMuaGFuZGxlKTtcclxuICAgICAgLy8gICAgY2xlYXJJbnRlcnZhbCh0aGlzLmhhbmRsZSk7XHJcbiAgICAgIHRoaXMuc3RhdHVzID0gdGhpcy5TVE9QO1xyXG4gICAgICB0aGlzLnJlc2V0KCk7XHJcbiAgICB9XHJcbiAgfVxyXG4gIHJlc2V0KCkge1xyXG4gICAgZm9yICh2YXIgaSA9IDAsIGVuZCA9IHRoaXMudHJhY2tzLmxlbmd0aDsgaSA8IGVuZDsgKytpKSB7XHJcbiAgICAgIHRoaXMudHJhY2tzW2ldLnJlc2V0KCk7XHJcbiAgICB9XHJcbiAgfVxyXG59XHJcblxyXG5mdW5jdGlvbiBwYXJzZU1NTChkYXRhKSB7XHJcbiAgZGF0YS50cmFja3MuZm9yRWFjaCgoZCkgPT4ge1xyXG4gICAgZC5kYXRhID0gcGFyc2VNTUxfKGQubW1sKTtcclxuICB9KTtcclxufVxyXG5cclxuZnVuY3Rpb24gcGFyc2VNTUxfKG1tbCkge1xyXG4gIGxldCBwYXJzZXIgPSBuZXcgTU1MUGFyc2VyKG1tbCk7XHJcbiAgbGV0IGNvbW1hbmRzID0gcGFyc2VyLnBhcnNlKCk7XHJcbiAgbGV0IHNlcUFycmF5ID0gW107XHJcbiAgY29tbWFuZHMuZm9yRWFjaCgoY29tbWFuZCkgPT4ge1xyXG4gICAgc3dpdGNoIChjb21tYW5kLnR5cGUpIHtcclxuICAgICAgY2FzZSBTeW50YXguTm90ZTpcclxuICAgICAgICBzZXFBcnJheS5wdXNoKG5ldyBOb3RlKGNvbW1hbmQubm90ZU51bWJlcnMsIGNvbW1hbmQubm90ZUxlbmd0aCkpO1xyXG4gICAgICAgIGJyZWFrO1xyXG4gICAgICBjYXNlIFN5bnRheC5SZXN0OlxyXG4gICAgICAgIHNlcUFycmF5LnB1c2gobmV3IFJlc3QoY29tbWFuZC5ub3RlTGVuZ3RoKSk7XHJcbiAgICAgICAgYnJlYWs7XHJcbiAgICAgIGNhc2UgU3ludGF4Lk9jdGF2ZTpcclxuICAgICAgICBzZXFBcnJheS5wdXNoKG5ldyBPY3RhdmUoY29tbWFuZC52YWx1ZSkpO1xyXG4gICAgICAgIGJyZWFrO1xyXG4gICAgICBjYXNlIFN5bnRheC5PY3RhdmVTaGlmdDpcclxuICAgICAgICBpZiAoY29tbWFuZC5kaXJlY3Rpb24gPj0gMCkge1xyXG4gICAgICAgICAgc2VxQXJyYXkucHVzaChuZXcgT2N0YXZlVXAoMSkpO1xyXG4gICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICBzZXFBcnJheS5wdXNoKG5ldyBPY3RhdmVEb3duKDEpKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgYnJlYWs7XHJcbiAgICAgIGNhc2UgU3ludGF4Lk5vdGVMZW5ndGg6XHJcbiAgICAgICAgc2VxQXJyYXkucHVzaChuZXcgTGVuZ3RoKGNvbW1hbmQubm90ZUxlbmd0aCkpO1xyXG4gICAgICAgIGJyZWFrO1xyXG4gICAgICBjYXNlIFN5bnRheC5Ob3RlVmVsb2NpdHk6XHJcbiAgICAgICAgc2VxQXJyYXkucHVzaChuZXcgVmVsb2NpdHkoY29tbWFuZC52YWx1ZSkpO1xyXG4gICAgICAgIGJyZWFrO1xyXG4gICAgICBjYXNlIFN5bnRheC5UZW1wbzpcclxuICAgICAgICBzZXFBcnJheS5wdXNoKG5ldyBUZW1wbyhjb21tYW5kLnZhbHVlKSk7XHJcbiAgICAgICAgYnJlYWs7XHJcbiAgICAgIGNhc2UgU3ludGF4Lk5vdGVRdWFudGl6ZTpcclxuICAgICAgICBzZXFBcnJheS5wdXNoKG5ldyBHYXRlVGltZShjb21tYW5kLnZhbHVlKSk7XHJcbiAgICAgICAgYnJlYWs7XHJcbiAgICAgIGNhc2UgU3ludGF4LkluZmluaXRlTG9vcDpcclxuICAgICAgICBzZXFBcnJheS5wdXNoKG5ldyBJbmZpbml0ZUxvb3AoKSk7XHJcbiAgICAgICAgYnJlYWs7XHJcbiAgICAgIGNhc2UgU3ludGF4Lkxvb3BCZWdpbjpcclxuICAgICAgICBzZXFBcnJheS5wdXNoKG5ldyBMb29wRGF0YShudWxsLCAnJywgY29tbWFuZC52YWx1ZSwgbnVsbCkpO1xyXG4gICAgICAgIGJyZWFrO1xyXG4gICAgICBjYXNlIFN5bnRheC5Mb29wRXhpdDpcclxuICAgICAgICBzZXFBcnJheS5wdXNoKG5ldyBMb29wRXhpdCgpKTtcclxuICAgICAgICBicmVhaztcclxuICAgICAgY2FzZSBTeW50YXguTG9vcEVuZDpcclxuICAgICAgICBzZXFBcnJheS5wdXNoKG5ldyBMb29wRW5kKCkpO1xyXG4gICAgICAgIGJyZWFrO1xyXG4gICAgICBjYXNlIFN5bnRheC5Ub25lOlxyXG4gICAgICAgIHNlcUFycmF5LnB1c2gobmV3IFRvbmUoY29tbWFuZC52YWx1ZSkpO1xyXG4gICAgICBjYXNlIFN5bnRheC5XYXZlRm9ybTpcclxuICAgICAgICBicmVhaztcclxuICAgICAgY2FzZSBTeW50YXguRW52ZWxvcGU6XHJcbiAgICAgICAgc2VxQXJyYXkucHVzaChuZXcgRW52ZWxvcGUoY29tbWFuZC5hLCBjb21tYW5kLmQsIGNvbW1hbmQucywgY29tbWFuZC5yKSk7XHJcbiAgICAgICAgYnJlYWs7XHJcbiAgICB9XHJcbiAgfSk7XHJcbiAgcmV0dXJuIHNlcUFycmF5O1xyXG59XHJcblxyXG4vLyBleHBvcnQgdmFyIHNlcURhdGEgPSB7XHJcbi8vICAgbmFtZTogJ1Rlc3QnLFxyXG4vLyAgIHRyYWNrczogW1xyXG4vLyAgICAge1xyXG4vLyAgICAgICBuYW1lOiAncGFydDEnLFxyXG4vLyAgICAgICBjaGFubmVsOiAwLFxyXG4vLyAgICAgICBkYXRhOlxyXG4vLyAgICAgICBbXHJcbi8vICAgICAgICAgRU5WKDAuMDEsIDAuMDIsIDAuNSwgMC4wNyksXHJcbi8vICAgICAgICAgVEVNUE8oMTgwKSwgVE9ORSgwKSwgVk9MVU1FKDAuNSksIEwoOCksIEdUKC0wLjUpLE8oNCksXHJcbi8vICAgICAgICAgTE9PUCgnaScsNCksXHJcbi8vICAgICAgICAgQywgQywgQywgQywgQywgQywgQywgQyxcclxuLy8gICAgICAgICBMT09QX0VORCxcclxuLy8gICAgICAgICBKVU1QKDUpXHJcbi8vICAgICAgIF1cclxuLy8gICAgIH0sXHJcbi8vICAgICB7XHJcbi8vICAgICAgIG5hbWU6ICdwYXJ0MicsXHJcbi8vICAgICAgIGNoYW5uZWw6IDEsXHJcbi8vICAgICAgIGRhdGE6XHJcbi8vICAgICAgICAgW1xyXG4vLyAgICAgICAgIEVOVigwLjAxLCAwLjA1LCAwLjYsIDAuMDcpLFxyXG4vLyAgICAgICAgIFRFTVBPKDE4MCksVE9ORSg2KSwgVk9MVU1FKDAuMiksIEwoOCksIEdUKC0wLjgpLFxyXG4vLyAgICAgICAgIFIoMSksIFIoMSksXHJcbi8vICAgICAgICAgTyg2KSxMKDEpLCBGLFxyXG4vLyAgICAgICAgIEUsXHJcbi8vICAgICAgICAgT0QsIEwoOCwgdHJ1ZSksIEJiLCBHLCBMKDQpLCBCYiwgT1UsIEwoNCksIEYsIEwoOCksIEQsXHJcbi8vICAgICAgICAgTCg0LCB0cnVlKSwgRSwgTCgyKSwgQyxSKDgpLFxyXG4vLyAgICAgICAgIEpVTVAoOClcclxuLy8gICAgICAgICBdXHJcbi8vICAgICB9LFxyXG4vLyAgICAge1xyXG4vLyAgICAgICBuYW1lOiAncGFydDMnLFxyXG4vLyAgICAgICBjaGFubmVsOiAyLFxyXG4vLyAgICAgICBkYXRhOlxyXG4vLyAgICAgICAgIFtcclxuLy8gICAgICAgICBFTlYoMC4wMSwgMC4wNSwgMC42LCAwLjA3KSxcclxuLy8gICAgICAgICBURU1QTygxODApLFRPTkUoNiksIFZPTFVNRSgwLjEpLCBMKDgpLCBHVCgtMC41KSwgXHJcbi8vICAgICAgICAgUigxKSwgUigxKSxcclxuLy8gICAgICAgICBPKDYpLEwoMSksIEMsQyxcclxuLy8gICAgICAgICBPRCwgTCg4LCB0cnVlKSwgRywgRCwgTCg0KSwgRywgT1UsIEwoNCksIEQsIEwoOCksT0QsIEcsXHJcbi8vICAgICAgICAgTCg0LCB0cnVlKSwgT1UsQywgTCgyKSxPRCwgRywgUig4KSxcclxuLy8gICAgICAgICBKVU1QKDcpXHJcbi8vICAgICAgICAgXVxyXG4vLyAgICAgfVxyXG4vLyAgIF1cclxuLy8gfVxyXG5cclxuLy8gZXhwb3J0IGZ1bmN0aW9uIFNvdW5kRWZmZWN0cyhzZXF1ZW5jZXIpIHtcclxuLy8gICAgdGhpcy5zb3VuZEVmZmVjdHMgPVxyXG4vLyAgICAgW1xyXG4vLyAgICAgLy8gRWZmZWN0IDAgLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vXHJcbi8vICAgICBjcmVhdGVUcmFja3MuY2FsbChzZXF1ZW5jZXIsW1xyXG4vLyAgICAge1xyXG4vLyAgICAgICBjaGFubmVsOiA4LFxyXG4vLyAgICAgICBvbmVzaG90OnRydWUsXHJcbi8vICAgICAgIGRhdGE6IFtWT0xVTUUoMC41KSxcclxuLy8gICAgICAgICBFTlYoMC4wMDAxLCAwLjAxLCAxLjAsIDAuMDAwMSksR1QoLTAuOTk5KSxUT05FKDApLCBURU1QTygyMDApLCBPKDgpLFNUKDMpLCBDLCBELCBFLCBGLCBHLCBBLCBCLCBPVSwgQywgRCwgRSwgRywgQSwgQixCLEIsQlxyXG4vLyAgICAgICBdXHJcbi8vICAgICB9LFxyXG4vLyAgICAge1xyXG4vLyAgICAgICBjaGFubmVsOiA5LFxyXG4vLyAgICAgICBvbmVzaG90OiB0cnVlLFxyXG4vLyAgICAgICBkYXRhOiBbVk9MVU1FKDAuNSksXHJcbi8vICAgICAgICAgRU5WKDAuMDAwMSwgMC4wMSwgMS4wLCAwLjAwMDEpLCBERVRVTkUoMC45KSwgR1QoLTAuOTk5KSwgVE9ORSgwKSwgVEVNUE8oMjAwKSwgTyg1KSwgU1QoMyksIEMsIEQsIEUsIEYsIEcsIEEsIEIsIE9VLCBDLCBELCBFLCBHLCBBLCBCLEIsQixCXHJcbi8vICAgICAgIF1cclxuLy8gICAgIH1cclxuLy8gICAgIF0pLFxyXG4vLyAgICAgLy8gRWZmZWN0IDEgLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vL1xyXG4vLyAgICAgY3JlYXRlVHJhY2tzLmNhbGwoc2VxdWVuY2VyLFxyXG4vLyAgICAgICBbXHJcbi8vICAgICAgICAge1xyXG4vLyAgICAgICAgICAgY2hhbm5lbDogMTAsXHJcbi8vICAgICAgICAgICBvbmVzaG90OiB0cnVlLFxyXG4vLyAgICAgICAgICAgZGF0YTogW1xyXG4vLyAgICAgICAgICAgIFRPTkUoNCksIFRFTVBPKDE1MCksIFNUKDQpLCBHVCgtMC45OTk5KSwgRU5WKDAuMDAwMSwgMC4wMDAxLCAxLjAsIDAuMDAwMSksXHJcbi8vICAgICAgICAgICAgTyg2KSwgRywgQSwgQiwgTyg3KSwgQiwgQSwgRywgRiwgRSwgRCwgQywgRSwgRywgQSwgQiwgT0QsIEIsIEEsIEcsIEYsIEUsIEQsIEMsIE9ELCBCLCBBLCBHLCBGLCBFLCBELCBDXHJcbi8vICAgICAgICAgICBdXHJcbi8vICAgICAgICAgfVxyXG4vLyAgICAgICBdKSxcclxuLy8gICAgIC8vIEVmZmVjdCAyLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy9cclxuLy8gICAgIGNyZWF0ZVRyYWNrcy5jYWxsKHNlcXVlbmNlcixcclxuLy8gICAgICAgW1xyXG4vLyAgICAgICAgIHtcclxuLy8gICAgICAgICAgIGNoYW5uZWw6IDEwLFxyXG4vLyAgICAgICAgICAgb25lc2hvdDogdHJ1ZSxcclxuLy8gICAgICAgICAgIGRhdGE6IFtcclxuLy8gICAgICAgICAgICBUT05FKDApLCBURU1QTygxNTApLCBTVCgyKSwgR1QoLTAuOTk5OSksIEVOVigwLjAwMDEsIDAuMDAwMSwgMS4wLCAwLjAwMDEpLFxyXG4vLyAgICAgICAgICAgIE8oOCksIEMsRCxFLEYsRyxBLEIsT1UsQyxELEUsRixPRCxHLE9VLEEsT0QsQixPVSxBLE9ELEcsT1UsRixPRCxFLE9VLEVcclxuLy8gICAgICAgICAgIF1cclxuLy8gICAgICAgICB9XHJcbi8vICAgICAgIF0pLFxyXG4vLyAgICAgICAvLyBFZmZlY3QgMyAvLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy9cclxuLy8gICAgICAgY3JlYXRlVHJhY2tzLmNhbGwoc2VxdWVuY2VyLFxyXG4vLyAgICAgICAgIFtcclxuLy8gICAgICAgICAgIHtcclxuLy8gICAgICAgICAgICAgY2hhbm5lbDogMTAsXHJcbi8vICAgICAgICAgICAgIG9uZXNob3Q6IHRydWUsXHJcbi8vICAgICAgICAgICAgIGRhdGE6IFtcclxuLy8gICAgICAgICAgICAgIFRPTkUoNSksIFRFTVBPKDE1MCksIEwoNjQpLCBHVCgtMC45OTk5KSwgRU5WKDAuMDAwMSwgMC4wMDAxLCAxLjAsIDAuMDAwMSksXHJcbi8vICAgICAgICAgICAgICBPKDYpLEMsT0QsQyxPVSxDLE9ELEMsT1UsQyxPRCxDLE9VLEMsT0RcclxuLy8gICAgICAgICAgICAgXVxyXG4vLyAgICAgICAgICAgfVxyXG4vLyAgICAgICAgIF0pLFxyXG4vLyAgICAgICAvLyBFZmZlY3QgNCAvLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vXHJcbi8vICAgICAgIGNyZWF0ZVRyYWNrcy5jYWxsKHNlcXVlbmNlcixcclxuLy8gICAgICAgICBbXHJcbi8vICAgICAgICAgICB7XHJcbi8vICAgICAgICAgICAgIGNoYW5uZWw6IDExLFxyXG4vLyAgICAgICAgICAgICBvbmVzaG90OiB0cnVlLFxyXG4vLyAgICAgICAgICAgICBkYXRhOiBbXHJcbi8vICAgICAgICAgICAgICBUT05FKDgpLCBWT0xVTUUoMi4wKSxURU1QTygxMjApLCBMKDIpLCBHVCgtMC45OTk5KSwgRU5WKDAuMDAwMSwgMC4wMDAxLCAxLjAsIDAuMjUpLFxyXG4vLyAgICAgICAgICAgICAgTygxKSwgQ1xyXG4vLyAgICAgICAgICAgICBdXHJcbi8vICAgICAgICAgICB9XHJcbi8vICAgICAgICAgXSlcclxuLy8gICAgXTtcclxuLy8gIH1cclxuXHJcblxyXG5cclxuIiwiXCJ1c2Ugc3RyaWN0XCI7XHJcbmV4cG9ydCB2YXIgY2hhckNvZGVzID0gXHJcbltcclxuICAvLyAweDAwXHJcbiAgWzB4MDAsMHgwMF0sXHJcbiAgWzB4MDAsMHgwMF0sXHJcbiAgWzB4MDAsMHgwMF0sXHJcbiAgWzB4MDAsMHgwMF0sXHJcbiAgWzB4MDAsMHgwMF0sXHJcbiAgWzB4MDAsMHgwMF0sXHJcbiAgWzB4MDAsMHgwMF0sXHJcbiAgWzB4MDAsMHgwMF0sICBcclxuICBbMHgwMCwweDAwXSxcclxuICBbMHgwMCwweDAwXSxcclxuICBbMHgwMCwweDAwXSxcclxuICBbMHgwMCwweDAwXSxcclxuICBbMHgwMCwweDAwXSxcclxuICBbMHgwMCwweDAwXSxcclxuICBbMHgwMCwweDAwXSxcclxuICBbMHgwMCwweDAwXSxcclxuICAvLyAweDEwXHJcbiAgWzB4MDAsMHgwMF0sXHJcbiAgWzB4MDAsMHgwMF0sXHJcbiAgWzB4MDAsMHgwMF0sXHJcbiAgWzB4MDAsMHgwMF0sXHJcbiAgWzB4MDAsMHgwMF0sXHJcbiAgWzB4MDAsMHgwMF0sXHJcbiAgWzB4MDAsMHgwMF0sXHJcbiAgWzB4MDAsMHgwMF0sICBcclxuICBbMHgwMCwweDAwXSxcclxuICBbMHgwMCwweDAwXSxcclxuICBbMHgwMCwweDAwXSxcclxuICBbMHgwMCwweDAwXSxcclxuICBbMHgwMCwweDAwXSxcclxuICBbMHgwMCwweDAwXSxcclxuICBbMHgwMCwweDAwXSxcclxuICBbMHgwMCwweDAwXSxcclxuICAvLyAweDIwXHJcbiAgWzB4MDAsMHgwMF0sXHJcbiAgWzB4NjEsMHgwMF0sXHJcbiAgWzB4NjIsMHgwMF0sXHJcbiAgWzB4NjMsMHgwMF0sXHJcbiAgWzB4NjQsMHgwMF0sXHJcbiAgWzB4NjUsMHgwMF0sXHJcbiAgWzB4NjYsMHgwMF0sXHJcbiAgWzB4NjcsMHgwMF0sICBcclxuICBbMHg2OCwweDAwXSxcclxuICBbMHg2OSwweDAwXSxcclxuICBbMHg2YiwweDAwXSxcclxuICBbMHg2YSwweDAwXSxcclxuICBbMHgyZiwweDAwXSxcclxuICBbMHgyYSwweDAwXSxcclxuICBbMHgyZSwweDAwXSxcclxuICBbMHgyZCwweDAwXSxcclxuICAvLyAweDMwXHJcbiAgWzB4MjAsMHgwMF0sXHJcbiAgWzB4MjEsMHgwMF0sXHJcbiAgWzB4MjIsMHgwMF0sXHJcbiAgWzB4MjMsMHgwMF0sXHJcbiAgWzB4MjQsMHgwMF0sXHJcbiAgWzB4MjUsMHgwMF0sXHJcbiAgWzB4MjYsMHgwMF0sXHJcbiAgWzB4MjcsMHgwMF0sICBcclxuICBbMHgyOCwweDAwXSxcclxuICBbMHgyOSwweDAwXSxcclxuICBbMHg0ZiwweDAwXSxcclxuICBbMHgyYywweDAwXSxcclxuICBbMHg1MSwweDAwXSxcclxuICBbMHgyYiwweDAwXSxcclxuICBbMHg1NywweDAwXSxcclxuICBbMHg0OSwweDAwXSxcclxuICAvLyAweDQwXHJcbiAgWzB4NTUsMHgwMF0sXHJcbiAgWzB4MDEsMHgwMF0sXHJcbiAgWzB4MDIsMHgwMF0sXHJcbiAgWzB4MDMsMHgwMF0sXHJcbiAgWzB4MDQsMHgwMF0sXHJcbiAgWzB4MDUsMHgwMF0sXHJcbiAgWzB4MDYsMHgwMF0sXHJcbiAgWzB4MDcsMHgwMF0sICBcclxuICBbMHgwOCwweDAwXSxcclxuICBbMHgwOSwweDAwXSxcclxuICBbMHgwYSwweDAwXSxcclxuICBbMHgwYiwweDAwXSxcclxuICBbMHgwYywweDAwXSxcclxuICBbMHgwZCwweDAwXSxcclxuICBbMHgwZSwweDAwXSxcclxuICBbMHgwZiwweDAwXSxcclxuICAvLyAweDUwXHJcbiAgWzB4MTAsMHgwMF0sXHJcbiAgWzB4MTEsMHgwMF0sXHJcbiAgWzB4MTIsMHgwMF0sXHJcbiAgWzB4MTMsMHgwMF0sXHJcbiAgWzB4MTQsMHgwMF0sXHJcbiAgWzB4MTUsMHgwMF0sXHJcbiAgWzB4MTYsMHgwMF0sXHJcbiAgWzB4MTcsMHgwMF0sICBcclxuICBbMHgxOCwweDAwXSxcclxuICBbMHgxOSwweDAwXSxcclxuICBbMHgxYSwweDAwXSxcclxuICBbMHg1MiwweDAwXSxcclxuICBbMHhkZCwweDAwXSxcclxuICBbMHg1NCwweDAwXSxcclxuICBbMHgwMCwweDAwXSxcclxuICBbMHgzYywweDAwXSxcclxuICAvLyAweDYwXHJcbiAgWzB4MDAsMHgwMF0sXHJcbiAgWzB4MDEsMHg4MF0sXHJcbiAgWzB4MDIsMHg4MF0sXHJcbiAgWzB4MDMsMHg4MF0sXHJcbiAgWzB4MDQsMHg4MF0sXHJcbiAgWzB4MDUsMHg4MF0sXHJcbiAgWzB4MDYsMHg4MF0sXHJcbiAgWzB4MDcsMHg4MF0sICBcclxuICBbMHgwOCwweDgwXSxcclxuICBbMHgwOSwweDgwXSxcclxuICBbMHgwYSwweDgwXSxcclxuICBbMHgwYiwweDgwXSxcclxuICBbMHgwYywweDgwXSxcclxuICBbMHgwZCwweDgwXSxcclxuICBbMHgwZSwweDgwXSxcclxuICBbMHgwZiwweDgwXSxcclxuICAvLyAweDdmXHJcbiAgWzB4MTAsMHg4MF0sXHJcbiAgWzB4MTEsMHg4MF0sXHJcbiAgWzB4MTIsMHg4MF0sXHJcbiAgWzB4MTMsMHg4MF0sXHJcbiAgWzB4MTQsMHg4MF0sXHJcbiAgWzB4MTUsMHg4MF0sXHJcbiAgWzB4MTYsMHg4MF0sXHJcbiAgWzB4MTcsMHg4MF0sICBcclxuICBbMHgxOCwweDgwXSxcclxuICBbMHgxOSwweDgwXSxcclxuICBbMHgxYSwweDgwXSxcclxuICBbMHgwMCwweDAwXSxcclxuICBbMHgwMCwweDAwXSxcclxuICBbMHgwMCwweDAwXSxcclxuICBbMHgwMCwweDAwXSxcclxuICBbMHgwMCwweDAwXVxyXG5dO1xyXG5cclxuZXhwb3J0IHZhciBjYW5hQ29kZXMgPVxyXG5bIFxyXG4gIC8vIDB4ZmY2MFxyXG4gIFsweDAwLDB4MDBdLCAvL1xyXG4gIFsweGJkLDB4MDBdLCAvLyDvvaFcclxuICBbMHg5ZCwweDAwXSwgLy8g772iXHJcbiAgWzB4YjEsMHgwMF0sIC8vIO+9o1xyXG4gIFsweGI1LDB4MDBdLCAvLyDvvaRcclxuICBbMHhiOSwweDAwXSwgLy8g772lXHJcbiAgWzB4YjQsMHgwMF0sIC8vIO+9plxyXG4gIFsweDllLDB4MDBdLCAvLyDvvadcclxuICBbMHhiMiwweDAwXSwgLy8g772oXHJcbiAgWzB4YjYsMHgwMF0sIC8vIO+9qVxyXG4gIFsweGJhLDB4MDBdLCAvLyDvvapcclxuICBbMHhiZSwweDAwXSwgLy8g772rXHJcbiAgWzB4OWYsMHgwMF0sIC8vIO+9rFxyXG4gIFsweGIzLDB4MDBdLCAvLyDvva1cclxuICBbMHhiNywweDAwXSwgLy8g772uXHJcbiAgWzB4YmIsMHgwMF0sIC8vIO+9r1xyXG4gIFxyXG4gIFsweGJmLDB4MDBdLCAvLyAtXHJcbiAgWzB4YTMsMHgwMF0sIC8vIO+9sVxyXG4gIFsweDg1LDB4MDBdLCAvLyDvvbJcclxuICBbMHhhNCwweDAwXSwgLy8g772zXHJcbiAgWzB4YTUsMHgwMF0sIC8vIO+9tFxyXG4gIFsweGE2LDB4MDBdLCAvLyDvvbVcclxuICBbMHg5NCwweDAwXSwgLy8g7722XHJcbiAgWzB4ODcsMHgwMF0sIC8vIO+9t1xyXG4gIFsweDg4LDB4MDBdLCAvLyDvvbhcclxuICBbMHg5YywweDAwXSwgLy8g7725XHJcbiAgWzB4ODIsMHgwMF0sIC8vIO+9ulxyXG4gIFsweDk4LDB4MDBdLCAvLyDvvbtcclxuICBbMHg4NCwweDAwXSwgLy8g7728XHJcbiAgWzB4OTIsMHgwMF0sIC8vIO+9vVxyXG4gIFsweDkwLDB4MDBdLCAvLyDvvb5cclxuICBbMHg4MywweDAwXSwgLy8g772/XHJcblxyXG4gIFsweDkxLDB4MDBdLCAvLyDvvoBcclxuICBbMHg4MSwweDAwXSwgLy8g776BXHJcbiAgWzB4OWEsMHgwMF0sIC8vIO++glxyXG4gIFsweDk3LDB4MDBdLCAvLyDvvoNcclxuICBbMHg5MywweDAwXSwgLy8g776EXHJcbiAgWzB4OTUsMHgwMF0sIC8vIO++hVxyXG4gIFsweDg5LDB4MDBdLCAvLyDvvoZcclxuICBbMHhhMSwweDAwXSwgLy8g776HXHJcbiAgWzB4YWYsMHgwMF0sIC8vIO++iFxyXG4gIFsweDhiLDB4MDBdLCAvLyDvvolcclxuICBbMHg4NiwweDAwXSwgLy8g776KXHJcbiAgWzB4OTYsMHgwMF0sIC8vIO++i1xyXG4gIFsweGEyLDB4MDBdLCAvLyDvvoxcclxuICBbMHhhYiwweDAwXSwgLy8g776NXHJcbiAgWzB4YWEsMHgwMF0sIC8vIO++jlxyXG4gIFsweDhhLDB4MDBdLCAvLyDvvo9cclxuICBcclxuICBbMHg4ZSwweDAwXSwgLy8g776QXHJcbiAgWzB4YjAsMHgwMF0sIC8vIO++kVxyXG4gIFsweGFkLDB4MDBdLCAvLyDvvpJcclxuICBbMHg4ZCwweDAwXSwgLy8g776TXHJcbiAgWzB4YTcsMHgwMF0sIC8vIO++lFxyXG4gIFsweGE4LDB4MDBdLCAvLyDvvpVcclxuICBbMHhhOSwweDAwXSwgLy8g776WXHJcbiAgWzB4OGYsMHgwMF0sIC8vIO++l1xyXG4gIFsweDhjLDB4MDBdLCAvLyDvvphcclxuICBbMHhhZSwweDAwXSwgLy8g776ZXHJcbiAgWzB4YWMsMHgwMF0sIC8vIO++mlxyXG4gIFsweDliLDB4MDBdLCAvLyDvvptcclxuICBbMHhhMCwweDAwXSwgLy8g776cXHJcbiAgWzB4OTksMHgwMF0sIC8vIO++nVxyXG4gIFsweGJjLDB4MDBdLCAvLyDvvp5cclxuICBbMHhiOCwweDAwXSwgLy8g776fXHJcblxyXG5dO1xyXG4iLCIvKiFcclxuICogbHpiYXNlNjIgdjEuNC42IC0gTFo3NyhMWlNTKSBiYXNlZCBjb21wcmVzc2lvbiBhbGdvcml0aG0gaW4gYmFzZTYyIGZvciBKYXZhU2NyaXB0LlxyXG4gKiBDb3B5cmlnaHQgKGMpIDIwMTQtMjAxNSBwb2x5Z29uIHBsYW5ldCA8cG9seWdvbi5wbGFuZXQuYXF1YUBnbWFpbC5jb20+XHJcbiAqIEBsaWNlbnNlIE1JVFxyXG4gKi9cclxuIWZ1bmN0aW9uKGEsYixjKXtcInVuZGVmaW5lZFwiIT10eXBlb2YgZXhwb3J0cz9cInVuZGVmaW5lZFwiIT10eXBlb2YgbW9kdWxlJiZtb2R1bGUuZXhwb3J0cz9tb2R1bGUuZXhwb3J0cz1jKCk6ZXhwb3J0c1thXT1jKCk6XCJmdW5jdGlvblwiPT10eXBlb2YgZGVmaW5lJiZkZWZpbmUuYW1kP2RlZmluZShjKTpiW2FdPWMoKX0oXCJsemJhc2U2MlwiLHRoaXMsZnVuY3Rpb24oKXtcInVzZSBzdHJpY3RcIjtmdW5jdGlvbiBhKGEpe3RoaXMuX2luaXQoYSl9ZnVuY3Rpb24gYihhKXt0aGlzLl9pbml0KGEpfWZ1bmN0aW9uIGMoKXt2YXIgYSxiLGMsZCxlPVwiYWJjZGVmZ2hpamtsbW5vcHFyc3R1dnd4eXpcIixmPVwiXCIsZz1lLmxlbmd0aDtmb3IoYT0wO2c+YTthKyspZm9yKGM9ZS5jaGFyQXQoYSksYj1nLTE7Yj4xNSYmZi5sZW5ndGg8djtiLS0pZD1lLmNoYXJBdChiKSxmKz1cIiBcIitjK1wiIFwiK2Q7Zm9yKDtmLmxlbmd0aDx2OylmPVwiIFwiK2Y7cmV0dXJuIGY9Zi5zbGljZSgwLHYpfWZ1bmN0aW9uIGQoYSxiKXtyZXR1cm4gYS5sZW5ndGg9PT1iP2E6YS5zdWJhcnJheT9hLnN1YmFycmF5KDAsYik6KGEubGVuZ3RoPWIsYSl9ZnVuY3Rpb24gZShhLGIpe2lmKG51bGw9PWI/Yj1hLmxlbmd0aDphPWQoYSxiKSxsJiZtJiZvPmIpe2lmKHApcmV0dXJuIGouYXBwbHkobnVsbCxhKTtpZihudWxsPT09cCl0cnl7dmFyIGM9ai5hcHBseShudWxsLGEpO3JldHVybiBiPm8mJihwPSEwKSxjfWNhdGNoKGUpe3A9ITF9fXJldHVybiBmKGEpfWZ1bmN0aW9uIGYoYSl7Zm9yKHZhciBiLGM9XCJcIixkPWEubGVuZ3RoLGU9MDtkPmU7KXtpZihiPWEuc3ViYXJyYXk/YS5zdWJhcnJheShlLGUrbyk6YS5zbGljZShlLGUrbyksZSs9bywhcCl7aWYobnVsbD09PXApdHJ5e2MrPWouYXBwbHkobnVsbCxiKSxiLmxlbmd0aD5vJiYocD0hMCk7Y29udGludWV9Y2F0Y2goZil7cD0hMX1yZXR1cm4gZyhhKX1jKz1qLmFwcGx5KG51bGwsYil9cmV0dXJuIGN9ZnVuY3Rpb24gZyhhKXtmb3IodmFyIGI9XCJcIixjPWEubGVuZ3RoLGQ9MDtjPmQ7ZCsrKWIrPWooYVtkXSk7cmV0dXJuIGJ9ZnVuY3Rpb24gaChhLGIpe2lmKCFrKXJldHVybiBuZXcgQXJyYXkoYik7c3dpdGNoKGEpe2Nhc2UgODpyZXR1cm4gbmV3IFVpbnQ4QXJyYXkoYik7Y2FzZSAxNjpyZXR1cm4gbmV3IFVpbnQxNkFycmF5KGIpfX1mdW5jdGlvbiBpKGEpe2Zvcih2YXIgYj1bXSxjPWEmJmEubGVuZ3RoLGQ9MDtjPmQ7ZCsrKWJbZF09YS5jaGFyQ29kZUF0KGQpO3JldHVybiBifXZhciBqPVN0cmluZy5mcm9tQ2hhckNvZGUsaz1cInVuZGVmaW5lZFwiIT10eXBlb2YgVWludDhBcnJheSYmXCJ1bmRlZmluZWRcIiE9dHlwZW9mIFVpbnQxNkFycmF5LGw9ITEsbT0hMTt0cnl7XCJhXCI9PT1qLmFwcGx5KG51bGwsWzk3XSkmJihsPSEwKX1jYXRjaChuKXt9aWYoayl0cnl7XCJhXCI9PT1qLmFwcGx5KG51bGwsbmV3IFVpbnQ4QXJyYXkoWzk3XSkpJiYobT0hMCl9Y2F0Y2gobil7fXZhciBvPTY1NTMzLHA9bnVsbCxxPSExOy0xIT09XCJhYmNcXHUzMDdiXFx1MzA1MlwiLmxhc3RJbmRleE9mKFwiXFx1MzA3YlxcdTMwNTJcIiwxKSYmKHE9ITApO3ZhciByPVwiQUJDREVGR0hJSktMTU5PUFFSU1RVVldYWVphYmNkZWZnaGlqa2xtbm9wcXJzdHV2d3h5ejAxMjM0NTY3ODlcIixzPXIubGVuZ3RoLHQ9TWF0aC5tYXgocyw2MiktTWF0aC5taW4ocyw2MiksdT1zLTEsdj0xMDI0LHc9MzA0LHg9byx5PXgtcyx6PW8sQT16KzIqdixCPTExLEM9QiooQisxKSxEPTQwLEU9RCooRCsxKSxGPXMrMSxHPXQrMjAsSD1zKzUsST1zLXQtMTksSj1EKzcsSz1KKzEsTD1LKzEsTT1MKzUsTj1NKzU7YS5wcm90b3R5cGU9e19pbml0OmZ1bmN0aW9uKGEpe2E9YXx8e30sdGhpcy5fZGF0YT1udWxsLHRoaXMuX3RhYmxlPW51bGwsdGhpcy5fcmVzdWx0PW51bGwsdGhpcy5fb25EYXRhQ2FsbGJhY2s9YS5vbkRhdGEsdGhpcy5fb25FbmRDYWxsYmFjaz1hLm9uRW5kfSxfY3JlYXRlVGFibGU6ZnVuY3Rpb24oKXtmb3IodmFyIGE9aCg4LHMpLGI9MDtzPmI7YisrKWFbYl09ci5jaGFyQ29kZUF0KGIpO3JldHVybiBhfSxfb25EYXRhOmZ1bmN0aW9uKGEsYil7dmFyIGM9ZShhLGIpO3RoaXMuX29uRGF0YUNhbGxiYWNrP3RoaXMuX29uRGF0YUNhbGxiYWNrKGMpOnRoaXMuX3Jlc3VsdCs9Y30sX29uRW5kOmZ1bmN0aW9uKCl7dGhpcy5fb25FbmRDYWxsYmFjayYmdGhpcy5fb25FbmRDYWxsYmFjaygpLHRoaXMuX2RhdGE9dGhpcy5fdGFibGU9bnVsbH0sX3NlYXJjaDpmdW5jdGlvbigpe3ZhciBhPTIsYj10aGlzLl9kYXRhLGM9dGhpcy5fb2Zmc2V0LGQ9dTtpZih0aGlzLl9kYXRhTGVuLWM8ZCYmKGQ9dGhpcy5fZGF0YUxlbi1jKSxhPmQpcmV0dXJuITE7dmFyIGUsZixnLGgsaSxqLGs9Yy13LGw9Yi5zdWJzdHJpbmcoayxjK2QpLG09YythLTMtaztkb3tpZigyPT09YSl7aWYoZj1iLmNoYXJBdChjKStiLmNoYXJBdChjKzEpLGc9bC5pbmRleE9mKGYpLCF+Z3x8Zz5tKWJyZWFrfWVsc2UgMz09PWE/Zis9Yi5jaGFyQXQoYysyKTpmPWIuc3Vic3RyKGMsYSk7aWYocT8oaj1iLnN1YnN0cmluZyhrLGMrYS0xKSxoPWoubGFzdEluZGV4T2YoZikpOmg9bC5sYXN0SW5kZXhPZihmLG0pLCF+aClicmVhaztpPWgsZT1rK2g7ZG8gaWYoYi5jaGFyQ29kZUF0KGMrYSkhPT1iLmNoYXJDb2RlQXQoZSthKSlicmVhazt3aGlsZSgrK2E8ZCk7aWYoZz09PWgpe2ErKzticmVha319d2hpbGUoKythPGQpO3JldHVybiAyPT09YT8hMToodGhpcy5faW5kZXg9dy1pLHRoaXMuX2xlbmd0aD1hLTEsITApfSxjb21wcmVzczpmdW5jdGlvbihhKXtpZihudWxsPT1hfHwwPT09YS5sZW5ndGgpcmV0dXJuXCJcIjt2YXIgYj1cIlwiLGQ9dGhpcy5fY3JlYXRlVGFibGUoKSxlPWMoKSxmPWgoOCx4KSxnPTA7dGhpcy5fcmVzdWx0PVwiXCIsdGhpcy5fb2Zmc2V0PWUubGVuZ3RoLHRoaXMuX2RhdGE9ZSthLHRoaXMuX2RhdGFMZW49dGhpcy5fZGF0YS5sZW5ndGgsZT1hPW51bGw7Zm9yKHZhciBpLGosayxsLG0sbj0tMSxvPS0xO3RoaXMuX29mZnNldDx0aGlzLl9kYXRhTGVuOyl0aGlzLl9zZWFyY2goKT8odGhpcy5faW5kZXg8dT8oaj10aGlzLl9pbmRleCxrPTApOihqPXRoaXMuX2luZGV4JXUsaz0odGhpcy5faW5kZXgtaikvdSksMj09PXRoaXMuX2xlbmd0aD8oZltnKytdPWRbaytNXSxmW2crK109ZFtqXSk6KGZbZysrXT1kW2srTF0sZltnKytdPWRbal0sZltnKytdPWRbdGhpcy5fbGVuZ3RoXSksdGhpcy5fb2Zmc2V0Kz10aGlzLl9sZW5ndGgsfm8mJihvPS0xKSk6KGk9dGhpcy5fZGF0YS5jaGFyQ29kZUF0KHRoaXMuX29mZnNldCsrKSxDPmk/KEQ+aT8oaj1pLGs9MCxuPUYpOihqPWklRCxrPShpLWopL0Qsbj1rK0YpLG89PT1uP2ZbZysrXT1kW2pdOihmW2crK109ZFtuLUddLGZbZysrXT1kW2pdLG89bikpOihFPmk/KGo9aSxrPTAsbj1IKTooaj1pJUUsaz0oaS1qKS9FLG49aytIKSxEPmo/KGw9aixtPTApOihsPWolRCxtPShqLWwpL0QpLG89PT1uPyhmW2crK109ZFtsXSxmW2crK109ZFttXSk6KGZbZysrXT1kW0tdLGZbZysrXT1kW24tc10sZltnKytdPWRbbF0sZltnKytdPWRbbV0sbz1uKSkpLGc+PXkmJih0aGlzLl9vbkRhdGEoZixnKSxnPTApO3JldHVybiBnPjAmJnRoaXMuX29uRGF0YShmLGcpLHRoaXMuX29uRW5kKCksYj10aGlzLl9yZXN1bHQsdGhpcy5fcmVzdWx0PW51bGwsbnVsbD09PWI/XCJcIjpifX0sYi5wcm90b3R5cGU9e19pbml0OmZ1bmN0aW9uKGEpe2E9YXx8e30sdGhpcy5fcmVzdWx0PW51bGwsdGhpcy5fb25EYXRhQ2FsbGJhY2s9YS5vbkRhdGEsdGhpcy5fb25FbmRDYWxsYmFjaz1hLm9uRW5kfSxfY3JlYXRlVGFibGU6ZnVuY3Rpb24oKXtmb3IodmFyIGE9e30sYj0wO3M+YjtiKyspYVtyLmNoYXJBdChiKV09YjtyZXR1cm4gYX0sX29uRGF0YTpmdW5jdGlvbihhKXt2YXIgYjtpZih0aGlzLl9vbkRhdGFDYWxsYmFjayl7aWYoYSliPXRoaXMuX3Jlc3VsdCx0aGlzLl9yZXN1bHQ9W107ZWxzZXt2YXIgYz16LXY7Yj10aGlzLl9yZXN1bHQuc2xpY2Uodix2K2MpLHRoaXMuX3Jlc3VsdD10aGlzLl9yZXN1bHQuc2xpY2UoMCx2KS5jb25jYXQodGhpcy5fcmVzdWx0LnNsaWNlKHYrYykpfWIubGVuZ3RoPjAmJnRoaXMuX29uRGF0YUNhbGxiYWNrKGUoYikpfX0sX29uRW5kOmZ1bmN0aW9uKCl7dGhpcy5fb25FbmRDYWxsYmFjayYmdGhpcy5fb25FbmRDYWxsYmFjaygpfSxkZWNvbXByZXNzOmZ1bmN0aW9uKGEpe2lmKG51bGw9PWF8fDA9PT1hLmxlbmd0aClyZXR1cm5cIlwiO3RoaXMuX3Jlc3VsdD1pKGMoKSk7Zm9yKHZhciBiLGQsZixnLGgsaixrLGwsbSxuLG89XCJcIixwPXRoaXMuX2NyZWF0ZVRhYmxlKCkscT0hMSxyPW51bGwscz1hLmxlbmd0aCx0PTA7cz50O3QrKylpZihkPXBbYS5jaGFyQXQodCldLHZvaWQgMCE9PWQpe2lmKEk+ZClxPyhnPXBbYS5jaGFyQXQoKyt0KV0saD1nKkQrZCtFKnIpOmg9cipEK2QsdGhpcy5fcmVzdWx0W3RoaXMuX3Jlc3VsdC5sZW5ndGhdPWg7ZWxzZSBpZihKPmQpcj1kLUkscT0hMTtlbHNlIGlmKGQ9PT1LKWY9cFthLmNoYXJBdCgrK3QpXSxyPWYtNSxxPSEwO2Vsc2UgaWYoTj5kKXtpZihmPXBbYS5jaGFyQXQoKyt0KV0sTT5kPyhqPShkLUwpKnUrZixrPXBbYS5jaGFyQXQoKyt0KV0pOihqPShkLU0pKnUrZixrPTIpLGw9dGhpcy5fcmVzdWx0LnNsaWNlKC1qKSxsLmxlbmd0aD5rJiYobC5sZW5ndGg9ayksbT1sLmxlbmd0aCxsLmxlbmd0aD4wKWZvcihuPTA7az5uOylmb3IoYj0wO20+YiYmKHRoaXMuX3Jlc3VsdFt0aGlzLl9yZXN1bHQubGVuZ3RoXT1sW2JdLCEoKytuPj1rKSk7YisrKTtyPW51bGx9dGhpcy5fcmVzdWx0Lmxlbmd0aD49QSYmdGhpcy5fb25EYXRhKCl9cmV0dXJuIHRoaXMuX3Jlc3VsdD10aGlzLl9yZXN1bHQuc2xpY2UodiksdGhpcy5fb25EYXRhKCEwKSx0aGlzLl9vbkVuZCgpLG89ZSh0aGlzLl9yZXN1bHQpLHRoaXMuX3Jlc3VsdD1udWxsLG99fTt2YXIgTz17Y29tcHJlc3M6ZnVuY3Rpb24oYixjKXtyZXR1cm4gbmV3IGEoYykuY29tcHJlc3MoYil9LGRlY29tcHJlc3M6ZnVuY3Rpb24oYSxjKXtyZXR1cm4gbmV3IGIoYykuZGVjb21wcmVzcyhhKX19O3JldHVybiBPfSk7IiwiXCJ1c2Ugc3RyaWN0XCI7XHJcbmV4cG9ydCB2YXIgZm9udERhdGEgPSBbXHJcbi8vICMweDAwMCBcclxuWyBcclxuXCIwMDAwMDAwMFwiLFxyXG5cIjAwMDAwMDAwXCIsXHJcblwiMDAwMDAwMDBcIixcclxuXCIwMDAwMDAwMFwiLFxyXG5cIjAwMDAwMDAwXCIsXHJcblwiMDAwMDAwMDBcIixcclxuXCIwMDAwMDAwMFwiLFxyXG5cIjAwMDAwMDAwXCJcclxuXSxcclxuLy8gIzB4MDAxIFxyXG5bIFxyXG5cIjAwMDExMDAwXCIsXHJcblwiMDAxMDAxMDBcIixcclxuXCIwMTAwMDAxMFwiLFxyXG5cIjAxMTExMTEwXCIsXHJcblwiMDEwMDAwMTBcIixcclxuXCIwMTAwMDAxMFwiLFxyXG5cIjAxMDAwMDEwXCIsXHJcblwiMDAwMDAwMDBcIlxyXG5dLFxyXG4vLyAjMHgwMDIgXHJcblsgXHJcblwiMDExMTExMDBcIixcclxuXCIwMDEwMDAxMFwiLFxyXG5cIjAwMTAwMDEwXCIsXHJcblwiMDAxMTExMDBcIixcclxuXCIwMDEwMDAxMFwiLFxyXG5cIjAwMTAwMDEwXCIsXHJcblwiMDExMTExMDBcIixcclxuXCIwMDAwMDAwMFwiXHJcbl0sXHJcbi8vICMweDAwMyBcclxuWyBcclxuXCIwMDAxMTEwMFwiLFxyXG5cIjAwMTAwMDEwXCIsXHJcblwiMDEwMDAwMDBcIixcclxuXCIwMTAwMDAwMFwiLFxyXG5cIjAxMDAwMDAwXCIsXHJcblwiMDAxMDAwMTBcIixcclxuXCIwMDAxMTEwMFwiLFxyXG5cIjAwMDAwMDAwXCJcclxuXSxcclxuLy8gIzB4MDA0IFxyXG5bIFxyXG5cIjAxMTExMDAwXCIsXHJcblwiMDAxMDAxMDBcIixcclxuXCIwMDEwMDAxMFwiLFxyXG5cIjAwMTAwMDEwXCIsXHJcblwiMDAxMDAwMTBcIixcclxuXCIwMDEwMDEwMFwiLFxyXG5cIjAxMTExMDAwXCIsXHJcblwiMDAwMDAwMDBcIlxyXG5dLFxyXG4vLyAjMHgwMDUgXHJcblsgXHJcblwiMDExMTExMTBcIixcclxuXCIwMTAwMDAwMFwiLFxyXG5cIjAxMDAwMDAwXCIsXHJcblwiMDExMTEwMDBcIixcclxuXCIwMTAwMDAwMFwiLFxyXG5cIjAxMDAwMDAwXCIsXHJcblwiMDExMTExMTBcIixcclxuXCIwMDAwMDAwMFwiXHJcbl0sXHJcbi8vICMweDAwNiBcclxuWyBcclxuXCIwMTExMTExMFwiLFxyXG5cIjAxMDAwMDAwXCIsXHJcblwiMDEwMDAwMDBcIixcclxuXCIwMTExMTAwMFwiLFxyXG5cIjAxMDAwMDAwXCIsXHJcblwiMDEwMDAwMDBcIixcclxuXCIwMTAwMDAwMFwiLFxyXG5cIjAwMDAwMDAwXCJcclxuXSxcclxuLy8gIzB4MDA3IFxyXG5bIFxyXG5cIjAwMDExMTAwXCIsXHJcblwiMDAxMDAwMTBcIixcclxuXCIwMTAwMDAwMFwiLFxyXG5cIjAxMDAxMTEwXCIsXHJcblwiMDEwMDAwMTBcIixcclxuXCIwMDEwMDAxMFwiLFxyXG5cIjAwMDExMTAwXCIsXHJcblwiMDAwMDAwMDBcIlxyXG5dLFxyXG4vLyAjMHgwMDggXHJcblsgXHJcblwiMDEwMDAwMTBcIixcclxuXCIwMTAwMDAxMFwiLFxyXG5cIjAxMDAwMDEwXCIsXHJcblwiMDExMTExMTBcIixcclxuXCIwMTAwMDAxMFwiLFxyXG5cIjAxMDAwMDEwXCIsXHJcblwiMDEwMDAwMTBcIixcclxuXCIwMDAwMDAwMFwiXHJcbl0sXHJcbi8vICMweDAwOSBcclxuWyBcclxuXCIwMDAxMTEwMFwiLFxyXG5cIjAwMDAxMDAwXCIsXHJcblwiMDAwMDEwMDBcIixcclxuXCIwMDAwMTAwMFwiLFxyXG5cIjAwMDAxMDAwXCIsXHJcblwiMDAwMDEwMDBcIixcclxuXCIwMDAxMTEwMFwiLFxyXG5cIjAwMDAwMDAwXCJcclxuXSxcclxuLy8gIzB4MDBhIFxyXG5bIFxyXG5cIjAwMDAxMTEwXCIsXHJcblwiMDAwMDAxMDBcIixcclxuXCIwMDAwMDEwMFwiLFxyXG5cIjAwMDAwMTAwXCIsXHJcblwiMDAwMDAxMDBcIixcclxuXCIwMTAwMDEwMFwiLFxyXG5cIjAwMTExMDAwXCIsXHJcblwiMDAwMDAwMDBcIlxyXG5dLFxyXG4vLyAjMHgwMGIgXHJcblsgXHJcblwiMDEwMDAwMTBcIixcclxuXCIwMTAwMDEwMFwiLFxyXG5cIjAxMDAxMDAwXCIsXHJcblwiMDExMTAwMDBcIixcclxuXCIwMTAwMTAwMFwiLFxyXG5cIjAxMDAwMTAwXCIsXHJcblwiMDEwMDAwMTBcIixcclxuXCIwMDAwMDAwMFwiXHJcbl0sXHJcbi8vICMweDAwYyBcclxuWyBcclxuXCIwMTAwMDAwMFwiLFxyXG5cIjAxMDAwMDAwXCIsXHJcblwiMDEwMDAwMDBcIixcclxuXCIwMTAwMDAwMFwiLFxyXG5cIjAxMDAwMDAwXCIsXHJcblwiMDEwMDAwMDBcIixcclxuXCIwMTExMTExMFwiLFxyXG5cIjAwMDAwMDAwXCJcclxuXSxcclxuLy8gIzB4MDBkIFxyXG5bIFxyXG5cIjAxMDAwMDEwXCIsXHJcblwiMDExMDAxMTBcIixcclxuXCIwMTAxMTAxMFwiLFxyXG5cIjAxMDExMDEwXCIsXHJcblwiMDEwMDAwMTBcIixcclxuXCIwMTAwMDAxMFwiLFxyXG5cIjAxMDAwMDEwXCIsXHJcblwiMDAwMDAwMDBcIlxyXG5dLFxyXG4vLyAjMHgwMGUgXHJcblsgXHJcblwiMDEwMDAwMTBcIixcclxuXCIwMTEwMDAxMFwiLFxyXG5cIjAxMDEwMDEwXCIsXHJcblwiMDEwMDEwMTBcIixcclxuXCIwMTAwMDExMFwiLFxyXG5cIjAxMDAwMDEwXCIsXHJcblwiMDEwMDAwMTBcIixcclxuXCIwMDAwMDAwMFwiXHJcbl0sXHJcbi8vICMweDAwZiBcclxuWyBcclxuXCIwMDAxMTAwMFwiLFxyXG5cIjAwMTAwMTAwXCIsXHJcblwiMDEwMDAwMTBcIixcclxuXCIwMTAwMDAxMFwiLFxyXG5cIjAxMDAwMDEwXCIsXHJcblwiMDAxMDAxMDBcIixcclxuXCIwMDAxMTAwMFwiLFxyXG5cIjAwMDAwMDAwXCJcclxuXSxcclxuLy8gIzB4MDEwIFxyXG5bIFxyXG5cIjAxMTExMTAwXCIsXHJcblwiMDEwMDAwMTBcIixcclxuXCIwMTAwMDAxMFwiLFxyXG5cIjAxMTExMTAwXCIsXHJcblwiMDEwMDAwMDBcIixcclxuXCIwMTAwMDAwMFwiLFxyXG5cIjAxMDAwMDAwXCIsXHJcblwiMDAwMDAwMDBcIlxyXG5dLFxyXG4vLyAjMHgwMTEgXHJcblsgXHJcblwiMDAwMTEwMDBcIixcclxuXCIwMDEwMDEwMFwiLFxyXG5cIjAxMDAwMDEwXCIsXHJcblwiMDEwMDAwMTBcIixcclxuXCIwMTAwMTAxMFwiLFxyXG5cIjAwMTAwMTAwXCIsXHJcblwiMDAwMTEwMTBcIixcclxuXCIwMDAwMDAwMFwiXHJcbl0sXHJcbi8vICMweDAxMiBcclxuWyBcclxuXCIwMTExMTEwMFwiLFxyXG5cIjAxMDAwMDEwXCIsXHJcblwiMDEwMDAwMTBcIixcclxuXCIwMTExMTEwMFwiLFxyXG5cIjAxMDAxMDAwXCIsXHJcblwiMDEwMDAxMDBcIixcclxuXCIwMTAwMDAxMFwiLFxyXG5cIjAwMDAwMDAwXCJcclxuXSxcclxuLy8gIzB4MDEzIFxyXG5bIFxyXG5cIjAwMTExMTAwXCIsXHJcblwiMDEwMDAwMTBcIixcclxuXCIwMTAwMDAwMFwiLFxyXG5cIjAwMTExMTAwXCIsXHJcblwiMDAwMDAwMTBcIixcclxuXCIwMTAwMDAxMFwiLFxyXG5cIjAwMTExMTAwXCIsXHJcblwiMDAwMDAwMDBcIlxyXG5dLFxyXG4vLyAjMHgwMTQgXHJcblsgXHJcblwiMDAxMTExMTBcIixcclxuXCIwMDAwMTAwMFwiLFxyXG5cIjAwMDAxMDAwXCIsXHJcblwiMDAwMDEwMDBcIixcclxuXCIwMDAwMTAwMFwiLFxyXG5cIjAwMDAxMDAwXCIsXHJcblwiMDAwMDEwMDBcIixcclxuXCIwMDAwMDAwMFwiXHJcbl0sXHJcbi8vICMweDAxNSBcclxuWyBcclxuXCIwMTAwMDAxMFwiLFxyXG5cIjAxMDAwMDEwXCIsXHJcblwiMDEwMDAwMTBcIixcclxuXCIwMTAwMDAxMFwiLFxyXG5cIjAxMDAwMDEwXCIsXHJcblwiMDEwMDAwMTBcIixcclxuXCIwMDExMTEwMFwiLFxyXG5cIjAwMDAwMDAwXCJcclxuXSxcclxuLy8gIzB4MDE2IFxyXG5bIFxyXG5cIjAxMDAwMDEwXCIsXHJcblwiMDEwMDAwMTBcIixcclxuXCIwMTAwMDAxMFwiLFxyXG5cIjAwMTAwMTAwXCIsXHJcblwiMDAxMDAxMDBcIixcclxuXCIwMDAxMTAwMFwiLFxyXG5cIjAwMDExMDAwXCIsXHJcblwiMDAwMDAwMDBcIlxyXG5dLFxyXG4vLyAjMHgwMTcgXHJcblsgXHJcblwiMDEwMDAwMTBcIixcclxuXCIwMTAwMDAxMFwiLFxyXG5cIjAxMDAwMDEwXCIsXHJcblwiMDEwMTEwMTBcIixcclxuXCIwMTAxMTAxMFwiLFxyXG5cIjAxMTAwMTEwXCIsXHJcblwiMDEwMDAwMTBcIixcclxuXCIwMDAwMDAwMFwiXHJcbl0sXHJcbi8vICMweDAxOCBcclxuWyBcclxuXCIwMTAwMDAxMFwiLFxyXG5cIjAxMDAwMDEwXCIsXHJcblwiMDAxMDAxMDBcIixcclxuXCIwMDAxMTAwMFwiLFxyXG5cIjAwMTAwMTAwXCIsXHJcblwiMDEwMDAwMTBcIixcclxuXCIwMTAwMDAxMFwiLFxyXG5cIjAwMDAwMDAwXCJcclxuXSxcclxuLy8gIzB4MDE5IFxyXG5bIFxyXG5cIjAwMTAwMDEwXCIsXHJcblwiMDAxMDAwMTBcIixcclxuXCIwMDEwMDAxMFwiLFxyXG5cIjAwMDExMTAwXCIsXHJcblwiMDAwMDEwMDBcIixcclxuXCIwMDAwMTAwMFwiLFxyXG5cIjAwMDAxMDAwXCIsXHJcblwiMDAwMDAwMDBcIlxyXG5dLFxyXG4vLyAjMHgwMWEgXHJcblsgXHJcblwiMDExMTExMTBcIixcclxuXCIwMDAwMDAxMFwiLFxyXG5cIjAwMDAwMTAwXCIsXHJcblwiMDAwMTEwMDBcIixcclxuXCIwMDEwMDAwMFwiLFxyXG5cIjAxMDAwMDAwXCIsXHJcblwiMDExMTExMTBcIixcclxuXCIwMDAwMDAwMFwiXHJcbl0sXHJcbi8vICMweDAxYiBcclxuWyBcclxuXCIwMDAwMTAwMFwiLFxyXG5cIjAwMDAxMDAwXCIsXHJcblwiMDAwMDEwMDBcIixcclxuXCIwMDAwMTAwMFwiLFxyXG5cIjExMTExMTExXCIsXHJcblwiMDAwMDEwMDBcIixcclxuXCIwMDAwMTAwMFwiLFxyXG5cIjAwMDAxMDAwXCJcclxuXSxcclxuLy8gIzB4MDFjIFxyXG5bIFxyXG5cIjAwMDAxMDAwXCIsXHJcblwiMDAwMDEwMDBcIixcclxuXCIwMDAwMTAwMFwiLFxyXG5cIjAwMDAxMDAwXCIsXHJcblwiMDAwMDExMTFcIixcclxuXCIwMDAwMDAwMFwiLFxyXG5cIjAwMDAwMDAwXCIsXHJcblwiMDAwMDAwMDBcIlxyXG5dLFxyXG4vLyAjMHgwMWQgXHJcblsgXHJcblwiMDAwMDEwMDBcIixcclxuXCIwMDAwMTAwMFwiLFxyXG5cIjAwMDAxMDAwXCIsXHJcblwiMDAwMDEwMDBcIixcclxuXCIxMTExMTAwMFwiLFxyXG5cIjAwMDAwMDAwXCIsXHJcblwiMDAwMDAwMDBcIixcclxuXCIwMDAwMDAwMFwiXHJcbl0sXHJcbi8vICMweDAxZSBcclxuWyBcclxuXCIwMDAwMTAwMFwiLFxyXG5cIjAwMDAxMDAwXCIsXHJcblwiMDAwMDEwMDBcIixcclxuXCIwMDAwMTAwMFwiLFxyXG5cIjAwMDAxMTExXCIsXHJcblwiMDAwMDEwMDBcIixcclxuXCIwMDAwMTAwMFwiLFxyXG5cIjAwMDAxMDAwXCJcclxuXSxcclxuLy8gIzB4MDFmIFxyXG5bIFxyXG5cIjAwMDAxMDAwXCIsXHJcblwiMDAwMDEwMDBcIixcclxuXCIwMDAwMTAwMFwiLFxyXG5cIjAwMDAxMDAwXCIsXHJcblwiMTExMTExMTFcIixcclxuXCIwMDAwMDAwMFwiLFxyXG5cIjAwMDAwMDAwXCIsXHJcblwiMDAwMDAwMDBcIlxyXG5dLFxyXG4vLyAjMHgwMjAgXHJcblsgXHJcblwiMDAxMTExMDBcIixcclxuXCIwMTAwMDAxMFwiLFxyXG5cIjAxMDAwMTEwXCIsXHJcblwiMDEwMTEwMTBcIixcclxuXCIwMTEwMDAxMFwiLFxyXG5cIjAxMDAwMDEwXCIsXHJcblwiMDAxMTExMDBcIixcclxuXCIwMDAwMDAwMFwiXHJcbl0sXHJcbi8vICMweDAyMSBcclxuWyBcclxuXCIwMDAwMTAwMFwiLFxyXG5cIjAwMDExMDAwXCIsXHJcblwiMDAxMDEwMDBcIixcclxuXCIwMDAwMTAwMFwiLFxyXG5cIjAwMDAxMDAwXCIsXHJcblwiMDAwMDEwMDBcIixcclxuXCIwMDExMTExMFwiLFxyXG5cIjAwMDAwMDAwXCJcclxuXSxcclxuLy8gIzB4MDIyIFxyXG5bIFxyXG5cIjAwMTExMTAwXCIsXHJcblwiMDEwMDAwMTBcIixcclxuXCIwMDAwMDAxMFwiLFxyXG5cIjAwMDAxMTAwXCIsXHJcblwiMDAxMTAwMDBcIixcclxuXCIwMTAwMDAwMFwiLFxyXG5cIjAxMTExMTEwXCIsXHJcblwiMDAwMDAwMDBcIlxyXG5dLFxyXG4vLyAjMHgwMjMgXHJcblsgXHJcblwiMDAxMTExMDBcIixcclxuXCIwMTAwMDAxMFwiLFxyXG5cIjAwMDAwMDEwXCIsXHJcblwiMDAxMTExMDBcIixcclxuXCIwMDAwMDAxMFwiLFxyXG5cIjAxMDAwMDEwXCIsXHJcblwiMDAxMTExMDBcIixcclxuXCIwMDAwMDAwMFwiXHJcbl0sXHJcbi8vICMweDAyNCBcclxuWyBcclxuXCIwMDAwMDEwMFwiLFxyXG5cIjAwMDAxMTAwXCIsXHJcblwiMDAwMTAxMDBcIixcclxuXCIwMDEwMDEwMFwiLFxyXG5cIjAxMTExMTEwXCIsXHJcblwiMDAwMDAxMDBcIixcclxuXCIwMDAwMDEwMFwiLFxyXG5cIjAwMDAwMDAwXCJcclxuXSxcclxuLy8gIzB4MDI1IFxyXG5bIFxyXG5cIjAxMTExMTEwXCIsXHJcblwiMDEwMDAwMDBcIixcclxuXCIwMTExMTAwMFwiLFxyXG5cIjAwMDAwMTAwXCIsXHJcblwiMDAwMDAwMTBcIixcclxuXCIwMTAwMDEwMFwiLFxyXG5cIjAwMTExMDAwXCIsXHJcblwiMDAwMDAwMDBcIlxyXG5dLFxyXG4vLyAjMHgwMjYgXHJcblsgXHJcblwiMDAwMTExMDBcIixcclxuXCIwMDEwMDAwMFwiLFxyXG5cIjAxMDAwMDAwXCIsXHJcblwiMDExMTExMDBcIixcclxuXCIwMTAwMDAxMFwiLFxyXG5cIjAxMDAwMDEwXCIsXHJcblwiMDAxMTExMDBcIixcclxuXCIwMDAwMDAwMFwiXHJcbl0sXHJcbi8vICMweDAyNyBcclxuWyBcclxuXCIwMTExMTExMFwiLFxyXG5cIjAxMDAwMDEwXCIsXHJcblwiMDAwMDAxMDBcIixcclxuXCIwMDAwMTAwMFwiLFxyXG5cIjAwMDEwMDAwXCIsXHJcblwiMDAwMTAwMDBcIixcclxuXCIwMDAxMDAwMFwiLFxyXG5cIjAwMDAwMDAwXCJcclxuXSxcclxuLy8gIzB4MDI4IFxyXG5bIFxyXG5cIjAwMTExMTAwXCIsXHJcblwiMDEwMDAwMTBcIixcclxuXCIwMTAwMDAxMFwiLFxyXG5cIjAwMTExMTAwXCIsXHJcblwiMDEwMDAwMTBcIixcclxuXCIwMTAwMDAxMFwiLFxyXG5cIjAwMTExMTAwXCIsXHJcblwiMDAwMDAwMDBcIlxyXG5dLFxyXG4vLyAjMHgwMjkgXHJcblsgXHJcblwiMDAxMTExMDBcIixcclxuXCIwMTAwMDAxMFwiLFxyXG5cIjAxMDAwMDEwXCIsXHJcblwiMDAxMTExMTBcIixcclxuXCIwMDAwMDAxMFwiLFxyXG5cIjAwMDAwMTAwXCIsXHJcblwiMDAxMTEwMDBcIixcclxuXCIwMDAwMDAwMFwiXHJcbl0sXHJcbi8vICMweDAyYSBcclxuWyBcclxuXCIwMDAwMDAwMFwiLFxyXG5cIjAwMDAwMDAwXCIsXHJcblwiMDAwMDAwMDBcIixcclxuXCIwMTExMTExMFwiLFxyXG5cIjAwMDAwMDAwXCIsXHJcblwiMDAwMDAwMDBcIixcclxuXCIwMDAwMDAwMFwiLFxyXG5cIjAwMDAwMDAwXCJcclxuXSxcclxuLy8gIzB4MDJiIFxyXG5bIFxyXG5cIjAwMDAwMDAwXCIsXHJcblwiMDAwMDAwMDBcIixcclxuXCIwMTExMTExMFwiLFxyXG5cIjAwMDAwMDAwXCIsXHJcblwiMDExMTExMTBcIixcclxuXCIwMDAwMDAwMFwiLFxyXG5cIjAwMDAwMDAwXCIsXHJcblwiMDAwMDAwMDBcIlxyXG5dLFxyXG4vLyAjMHgwMmMgXHJcblsgXHJcblwiMDAwMDAwMDBcIixcclxuXCIwMDAwMDAwMFwiLFxyXG5cIjAwMDAxMDAwXCIsXHJcblwiMDAwMDAwMDBcIixcclxuXCIwMDAwMDAwMFwiLFxyXG5cIjAwMDAxMDAwXCIsXHJcblwiMDAwMDEwMDBcIixcclxuXCIwMDAxMDAwMFwiXHJcbl0sXHJcbi8vICMweDAyZCBcclxuWyBcclxuXCIwMDAwMDAwMFwiLFxyXG5cIjAwMDAwMDEwXCIsXHJcblwiMDAwMDAxMDBcIixcclxuXCIwMDAwMTAwMFwiLFxyXG5cIjAwMDEwMDAwXCIsXHJcblwiMDAxMDAwMDBcIixcclxuXCIwMTAwMDAwMFwiLFxyXG5cIjAwMDAwMDAwXCJcclxuXSxcclxuLy8gIzB4MDJlIFxyXG5bIFxyXG5cIjAwMDAwMDAwXCIsXHJcblwiMDAwMDAwMDBcIixcclxuXCIwMDAwMDAwMFwiLFxyXG5cIjAwMDAwMDAwXCIsXHJcblwiMDAwMDAwMDBcIixcclxuXCIwMDAxMTAwMFwiLFxyXG5cIjAwMDExMDAwXCIsXHJcblwiMDAwMDAwMDBcIlxyXG5dLFxyXG4vLyAjMHgwMmYgXHJcblsgXHJcblwiMDAwMDAwMDBcIixcclxuXCIwMDAwMDAwMFwiLFxyXG5cIjAwMDAwMDAwXCIsXHJcblwiMDAwMDAwMDBcIixcclxuXCIwMDAwMDAwMFwiLFxyXG5cIjAwMDAxMDAwXCIsXHJcblwiMDAwMDEwMDBcIixcclxuXCIwMDAxMDAwMFwiXHJcbl0sXHJcbi8vICMweDAzMCBcclxuWyBcclxuXCIwMDAwMDAwMFwiLFxyXG5cIjExMTExMTExXCIsXHJcblwiMDAwMDAwMDBcIixcclxuXCIwMDAwMDAwMFwiLFxyXG5cIjAwMDAwMDAwXCIsXHJcblwiMDAwMDAwMDBcIixcclxuXCIwMDAwMDAwMFwiLFxyXG5cIjAwMDAwMDAwXCJcclxuXSxcclxuLy8gIzB4MDMxIFxyXG5bIFxyXG5cIjAxMDAwMDAwXCIsXHJcblwiMDEwMDAwMDBcIixcclxuXCIwMTAwMDAwMFwiLFxyXG5cIjAxMDAwMDAwXCIsXHJcblwiMDEwMDAwMDBcIixcclxuXCIwMTAwMDAwMFwiLFxyXG5cIjAxMDAwMDAwXCIsXHJcblwiMDEwMDAwMDBcIlxyXG5dLFxyXG4vLyAjMHgwMzIgXHJcblsgXHJcblwiMTAwMDAwMDBcIixcclxuXCIxMDAwMDAwMFwiLFxyXG5cIjEwMDAwMDAwXCIsXHJcblwiMTAwMDAwMDBcIixcclxuXCIxMDAwMDAwMFwiLFxyXG5cIjEwMDAwMDAwXCIsXHJcblwiMTAwMDAwMDBcIixcclxuXCIxMTExMTExMVwiXHJcbl0sXHJcbi8vICMweDAzMyBcclxuWyBcclxuXCIwMDAwMDAwMVwiLFxyXG5cIjAwMDAwMDAxXCIsXHJcblwiMDAwMDAwMDFcIixcclxuXCIwMDAwMDAwMVwiLFxyXG5cIjAwMDAwMDAxXCIsXHJcblwiMDAwMDAwMDFcIixcclxuXCIwMDAwMDAwMVwiLFxyXG5cIjExMTExMTExXCJcclxuXSxcclxuLy8gIzB4MDM0IFxyXG5bIFxyXG5cIjAwMDAwMDAwXCIsXHJcblwiMDAwMDAwMDBcIixcclxuXCIwMDAwMDAwMFwiLFxyXG5cIjExMTExMTExXCIsXHJcblwiMDAwMDAwMDBcIixcclxuXCIwMDAwMDAwMFwiLFxyXG5cIjAwMDAwMDAwXCIsXHJcblwiMDAwMDAwMDBcIlxyXG5dLFxyXG4vLyAjMHgwMzUgXHJcblsgXHJcblwiMDAwMTAwMDBcIixcclxuXCIwMDAxMDAwMFwiLFxyXG5cIjAwMDEwMDAwXCIsXHJcblwiMDAwMTAwMDBcIixcclxuXCIwMDAxMDAwMFwiLFxyXG5cIjAwMDEwMDAwXCIsXHJcblwiMDAwMTAwMDBcIixcclxuXCIwMDAxMDAwMFwiXHJcbl0sXHJcbi8vICMweDAzNiBcclxuWyBcclxuXCIxMTExMTExMVwiLFxyXG5cIjExMTExMTExXCIsXHJcblwiMDAwMDAwMDBcIixcclxuXCIwMDAwMDAwMFwiLFxyXG5cIjAwMDAwMDAwXCIsXHJcblwiMDAwMDAwMDBcIixcclxuXCIwMDAwMDAwMFwiLFxyXG5cIjAwMDAwMDAwXCJcclxuXSxcclxuLy8gIzB4MDM3IFxyXG5bIFxyXG5cIjExMDAwMDAwXCIsXHJcblwiMTEwMDAwMDBcIixcclxuXCIxMTAwMDAwMFwiLFxyXG5cIjExMDAwMDAwXCIsXHJcblwiMTEwMDAwMDBcIixcclxuXCIxMTAwMDAwMFwiLFxyXG5cIjExMDAwMDAwXCIsXHJcblwiMTEwMDAwMDBcIlxyXG5dLFxyXG4vLyAjMHgwMzggXHJcblsgXHJcblwiMDAwMDAwMDBcIixcclxuXCIwMDAwMDAwMFwiLFxyXG5cIjAwMDAwMDAwXCIsXHJcblwiMDAwMDAwMDBcIixcclxuXCIwMDAwMDAwMFwiLFxyXG5cIjExMTExMTExXCIsXHJcblwiMDAwMDAwMDBcIixcclxuXCIwMDAwMDAwMFwiXHJcbl0sXHJcbi8vICMweDAzOSBcclxuWyBcclxuXCIwMDAwMDEwMFwiLFxyXG5cIjAwMDAwMTAwXCIsXHJcblwiMDAwMDAxMDBcIixcclxuXCIwMDAwMDEwMFwiLFxyXG5cIjAwMDAwMTAwXCIsXHJcblwiMDAwMDAxMDBcIixcclxuXCIwMDAwMDEwMFwiLFxyXG5cIjAwMDAwMTAwXCJcclxuXSxcclxuLy8gIzB4MDNhIFxyXG5bIFxyXG5cIjAwMDAwMDAwXCIsXHJcblwiMDAwMDAwMDBcIixcclxuXCIwMDAwMDAwMFwiLFxyXG5cIjAwMDAwMDAwXCIsXHJcblwiMTExMTExMTFcIixcclxuXCIxMTExMTExMVwiLFxyXG5cIjExMTExMTExXCIsXHJcblwiMTExMTExMTFcIlxyXG5dLFxyXG4vLyAjMHgwM2IgXHJcblsgXHJcblwiMDAwMDExMTFcIixcclxuXCIwMDAwMTExMVwiLFxyXG5cIjAwMDAxMTExXCIsXHJcblwiMDAwMDExMTFcIixcclxuXCIwMDAwMTExMVwiLFxyXG5cIjAwMDAxMTExXCIsXHJcblwiMDAwMDExMTFcIixcclxuXCIwMDAwMTExMVwiXHJcbl0sXHJcbi8vICMweDAzYyBcclxuWyBcclxuXCIwMDAwMDAwMFwiLFxyXG5cIjAwMDAwMDAwXCIsXHJcblwiMDAwMDAwMDBcIixcclxuXCIwMDAwMDAwMFwiLFxyXG5cIjAwMDAwMDAwXCIsXHJcblwiMDAwMDAwMDBcIixcclxuXCIwMDAwMDAwMFwiLFxyXG5cIjExMTExMTExXCJcclxuXSxcclxuLy8gIzB4MDNkIFxyXG5bIFxyXG5cIjAwMDAwMDAxXCIsXHJcblwiMDAwMDAwMDFcIixcclxuXCIwMDAwMDAwMVwiLFxyXG5cIjAwMDAwMDAxXCIsXHJcblwiMDAwMDAwMDFcIixcclxuXCIwMDAwMDAwMVwiLFxyXG5cIjAwMDAwMDAxXCIsXHJcblwiMDAwMDAwMDFcIlxyXG5dLFxyXG4vLyAjMHgwM2UgXHJcblsgXHJcblwiMDAwMDAwMDBcIixcclxuXCIwMDAwMDAwMFwiLFxyXG5cIjAwMDAwMDAwXCIsXHJcblwiMDAwMDAwMDBcIixcclxuXCIwMDAwMDAwMFwiLFxyXG5cIjAwMDAwMDAwXCIsXHJcblwiMTExMTExMTFcIixcclxuXCIxMTExMTExMVwiXHJcbl0sXHJcbi8vICMweDAzZiBcclxuWyBcclxuXCIwMDAwMDAxMVwiLFxyXG5cIjAwMDAwMDExXCIsXHJcblwiMDAwMDAwMTFcIixcclxuXCIwMDAwMDAxMVwiLFxyXG5cIjAwMDAwMDExXCIsXHJcblwiMDAwMDAwMTFcIixcclxuXCIwMDAwMDAxMVwiLFxyXG5cIjAwMDAwMDExXCJcclxuXSxcclxuLy8gIzB4MDQwIFxyXG5bIFxyXG5cIjAwMDAwMDAwXCIsXHJcblwiMDAwMDAwMDBcIixcclxuXCIwMDAwMTAwMFwiLFxyXG5cIjAwMDAwMTAwXCIsXHJcblwiMTExMTExMTBcIixcclxuXCIwMDAwMDEwMFwiLFxyXG5cIjAwMDAxMDAwXCIsXHJcblwiMDAwMDAwMDBcIlxyXG5dLFxyXG4vLyAjMHgwNDEgXHJcblsgXHJcblwiMDAwMDEwMDBcIixcclxuXCIwMDAxMTEwMFwiLFxyXG5cIjAwMTExMTEwXCIsXHJcblwiMDExMTExMTFcIixcclxuXCIwMTExMTExMVwiLFxyXG5cIjAwMDExMTAwXCIsXHJcblwiMDAxMTExMTBcIixcclxuXCIwMDAwMDAwMFwiXHJcbl0sXHJcbi8vICMweDA0MiBcclxuWyBcclxuXCIxMTExMTExMVwiLFxyXG5cIjAxMTExMTExXCIsXHJcblwiMDAxMTExMTFcIixcclxuXCIwMDAxMTExMVwiLFxyXG5cIjAwMDAxMTExXCIsXHJcblwiMDAwMDAxMTFcIixcclxuXCIwMDAwMDAxMVwiLFxyXG5cIjAwMDAwMDAxXCJcclxuXSxcclxuLy8gIzB4MDQzIFxyXG5bIFxyXG5cIjExMTExMTExXCIsXHJcblwiMTExMTExMTFcIixcclxuXCIxMTExMTExMVwiLFxyXG5cIjExMTExMTExXCIsXHJcblwiMTExMTExMTFcIixcclxuXCIxMTExMTExMVwiLFxyXG5cIjExMTExMTExXCIsXHJcblwiMTExMTExMTFcIlxyXG5dLFxyXG4vLyAjMHgwNDQgXHJcblsgXHJcblwiMDAwMDEwMDBcIixcclxuXCIwMDAxMTEwMFwiLFxyXG5cIjAwMTExMTEwXCIsXHJcblwiMDExMTExMTFcIixcclxuXCIwMDExMTExMFwiLFxyXG5cIjAwMDExMTAwXCIsXHJcblwiMDAwMDEwMDBcIixcclxuXCIwMDAwMDAwMFwiXHJcbl0sXHJcbi8vICMweDA0NSBcclxuWyBcclxuXCIwMDAwMDAwMFwiLFxyXG5cIjAwMDAwMDAwXCIsXHJcblwiMDAwMTAwMDBcIixcclxuXCIwMDEwMDAwMFwiLFxyXG5cIjAxMTExMTExXCIsXHJcblwiMDAxMDAwMDBcIixcclxuXCIwMDAxMDAwMFwiLFxyXG5cIjAwMDAwMDAwXCJcclxuXSxcclxuLy8gIzB4MDQ2IFxyXG5bIFxyXG5cIjAwMDAxMDAwXCIsXHJcblwiMDAwMTExMDBcIixcclxuXCIwMDEwMTAxMFwiLFxyXG5cIjAxMTExMTExXCIsXHJcblwiMDAxMDEwMTBcIixcclxuXCIwMDAwMTAwMFwiLFxyXG5cIjAwMDAxMDAwXCIsXHJcblwiMDAwMDAwMDBcIlxyXG5dLFxyXG4vLyAjMHgwNDcgXHJcblsgXHJcblwiMDAwMDAwMDBcIixcclxuXCIwMDExMTEwMFwiLFxyXG5cIjAxMTExMTEwXCIsXHJcblwiMDExMTExMTBcIixcclxuXCIwMTExMTExMFwiLFxyXG5cIjAxMTExMTEwXCIsXHJcblwiMDAxMTExMDBcIixcclxuXCIwMDAwMDAwMFwiXHJcbl0sXHJcbi8vICMweDA0OCBcclxuWyBcclxuXCIwMDAwMDAwMFwiLFxyXG5cIjAwMTExMTAwXCIsXHJcblwiMDEwMDAwMTBcIixcclxuXCIwMTAwMDAxMFwiLFxyXG5cIjAxMDAwMDEwXCIsXHJcblwiMDEwMDAwMTBcIixcclxuXCIwMDExMTEwMFwiLFxyXG5cIjAwMDAwMDAwXCJcclxuXSxcclxuLy8gIzB4MDQ5IFxyXG5bIFxyXG5cIjAwMTExMTAwXCIsXHJcblwiMDEwMDAwMTBcIixcclxuXCIwMDAwMDAxMFwiLFxyXG5cIjAwMDAxMTAwXCIsXHJcblwiMDAwMTAwMDBcIixcclxuXCIwMDAwMDAwMFwiLFxyXG5cIjAwMDEwMDAwXCIsXHJcblwiMDAwMDAwMDBcIlxyXG5dLFxyXG4vLyAjMHgwNGEgXHJcblsgXHJcblwiMTExMTExMTFcIixcclxuXCIxMTAwMDAxMVwiLFxyXG5cIjEwMDAwMDAxXCIsXHJcblwiMTAwMDAwMDFcIixcclxuXCIxMDAwMDAwMVwiLFxyXG5cIjEwMDAwMDAxXCIsXHJcblwiMTEwMDAwMTFcIixcclxuXCIxMTExMTExMVwiXHJcbl0sXHJcbi8vICMweDA0YiBcclxuWyBcclxuXCIwMDAwMDAwMFwiLFxyXG5cIjAwMDAwMDAwXCIsXHJcblwiMDAwMDAwMDBcIixcclxuXCIwMDAwMDAwMFwiLFxyXG5cIjAwMDAwMDExXCIsXHJcblwiMDAwMDAxMDBcIixcclxuXCIwMDAwMTAwMFwiLFxyXG5cIjAwMDAxMDAwXCJcclxuXSxcclxuLy8gIzB4MDRjIFxyXG5bIFxyXG5cIjAwMDAwMDAwXCIsXHJcblwiMDAwMDAwMDBcIixcclxuXCIwMDAwMDAwMFwiLFxyXG5cIjAwMDAwMDAwXCIsXHJcblwiMTEwMDAwMDBcIixcclxuXCIwMDEwMDAwMFwiLFxyXG5cIjAwMDEwMDAwXCIsXHJcblwiMDAwMTAwMDBcIlxyXG5dLFxyXG4vLyAjMHgwNGQgXHJcblsgXHJcblwiMTAwMDAwMDBcIixcclxuXCIxMTAwMDAwMFwiLFxyXG5cIjExMTAwMDAwXCIsXHJcblwiMTExMTAwMDBcIixcclxuXCIxMTExMTAwMFwiLFxyXG5cIjExMTExMTAwXCIsXHJcblwiMTExMTExMTBcIixcclxuXCIxMTExMTExMVwiXHJcbl0sXHJcbi8vICMweDA0ZSBcclxuWyBcclxuXCIwMDAwMDAwMVwiLFxyXG5cIjAwMDAwMDExXCIsXHJcblwiMDAwMDAxMTFcIixcclxuXCIwMDAwMTExMVwiLFxyXG5cIjAwMDExMTExXCIsXHJcblwiMDAxMTExMTFcIixcclxuXCIwMTExMTExMVwiLFxyXG5cIjExMTExMTExXCJcclxuXSxcclxuLy8gIzB4MDRmIFxyXG5bIFxyXG5cIjAwMDAwMDAwXCIsXHJcblwiMDAwMDAwMDBcIixcclxuXCIwMDAwMTAwMFwiLFxyXG5cIjAwMDAwMDAwXCIsXHJcblwiMDAwMDAwMDBcIixcclxuXCIwMDAwMTAwMFwiLFxyXG5cIjAwMDAwMDAwXCIsXHJcblwiMDAwMDAwMDBcIlxyXG5dLFxyXG4vLyAjMHgwNTAgXHJcblsgXHJcblwiMDAwMDAwMDBcIixcclxuXCIwMDAwMTAwMFwiLFxyXG5cIjAwMDExMTAwXCIsXHJcblwiMDAxMDEwMTBcIixcclxuXCIwMDAwMTAwMFwiLFxyXG5cIjAwMDAxMDAwXCIsXHJcblwiMDAwMDEwMDBcIixcclxuXCIwMDAwMDAwMFwiXHJcbl0sXHJcbi8vICMweDA1MSBcclxuWyBcclxuXCIwMDAwMTExMFwiLFxyXG5cIjAwMDExMDAwXCIsXHJcblwiMDAxMTAwMDBcIixcclxuXCIwMTEwMDAwMFwiLFxyXG5cIjAwMTEwMDAwXCIsXHJcblwiMDAwMTEwMDBcIixcclxuXCIwMDAwMTExMFwiLFxyXG5cIjAwMDAwMDAwXCJcclxuXSxcclxuLy8gIzB4MDUyIFxyXG5bIFxyXG5cIjAwMTExMTAwXCIsXHJcblwiMDAxMDAwMDBcIixcclxuXCIwMDEwMDAwMFwiLFxyXG5cIjAwMTAwMDAwXCIsXHJcblwiMDAxMDAwMDBcIixcclxuXCIwMDEwMDAwMFwiLFxyXG5cIjAwMTExMTAwXCIsXHJcblwiMDAwMDAwMDBcIlxyXG5dLFxyXG4vLyAjMHgwNTMgXHJcblsgXHJcblwiMDAxMTAxMTBcIixcclxuXCIwMTExMTExMVwiLFxyXG5cIjAxMTExMTExXCIsXHJcblwiMDExMTExMTFcIixcclxuXCIwMDExMTExMFwiLFxyXG5cIjAwMDExMTAwXCIsXHJcblwiMDAwMDEwMDBcIixcclxuXCIwMDAwMDAwMFwiXHJcbl0sXHJcbi8vICMweDA1NCBcclxuWyBcclxuXCIwMDExMTEwMFwiLFxyXG5cIjAwMDAwMTAwXCIsXHJcblwiMDAwMDAxMDBcIixcclxuXCIwMDAwMDEwMFwiLFxyXG5cIjAwMDAwMTAwXCIsXHJcblwiMDAwMDAxMDBcIixcclxuXCIwMDExMTEwMFwiLFxyXG5cIjAwMDAwMDAwXCJcclxuXSxcclxuLy8gIzB4MDU1IFxyXG5bIFxyXG5cIjAwMDExMTAwXCIsXHJcblwiMDAxMDAwMTBcIixcclxuXCIwMTAwMTAxMFwiLFxyXG5cIjAxMDEwMTEwXCIsXHJcblwiMDEwMDExMDBcIixcclxuXCIwMDEwMDAwMFwiLFxyXG5cIjAwMDExMTEwXCIsXHJcblwiMDAwMDAwMDBcIlxyXG5dLFxyXG4vLyAjMHgwNTYgXHJcblsgXHJcblwiMTExMTExMTFcIixcclxuXCIxMTExMTExMFwiLFxyXG5cIjExMTExMTAwXCIsXHJcblwiMTExMTEwMDBcIixcclxuXCIxMTExMDAwMFwiLFxyXG5cIjExMTAwMDAwXCIsXHJcblwiMTEwMDAwMDBcIixcclxuXCIxMDAwMDAwMFwiXHJcbl0sXHJcbi8vICMweDA1NyBcclxuWyBcclxuXCIwMTExMDAwMFwiLFxyXG5cIjAwMDExMDAwXCIsXHJcblwiMDAwMDExMDBcIixcclxuXCIwMDAwMDExMFwiLFxyXG5cIjAwMDAxMTAwXCIsXHJcblwiMDAwMTEwMDBcIixcclxuXCIwMTExMDAwMFwiLFxyXG5cIjAwMDAwMDAwXCJcclxuXSxcclxuLy8gIzB4MDU4IFxyXG5bIFxyXG5cIjEwMTAwMDAwXCIsXHJcblwiMDEwMTAwMDBcIixcclxuXCIxMDEwMDAwMFwiLFxyXG5cIjAxMDEwMDAwXCIsXHJcblwiMTAxMDAwMDBcIixcclxuXCIwMTAxMDAwMFwiLFxyXG5cIjEwMTAwMDAwXCIsXHJcblwiMDEwMTAwMDBcIlxyXG5dLFxyXG4vLyAjMHgwNTkgXHJcblsgXHJcblwiMDAwMDAwMDBcIixcclxuXCIwMTAwMDAwMFwiLFxyXG5cIjAwMTAwMDAwXCIsXHJcblwiMDAwMTAwMDBcIixcclxuXCIwMDAwMTAwMFwiLFxyXG5cIjAwMDAwMTAwXCIsXHJcblwiMDAwMDAwMTBcIixcclxuXCIwMDAwMDAwMFwiXHJcbl0sXHJcbi8vICMweDA1YSBcclxuWyBcclxuXCIxMDEwMTAxMFwiLFxyXG5cIjAxMDEwMTAxXCIsXHJcblwiMTAxMDEwMTBcIixcclxuXCIwMTAxMDEwMVwiLFxyXG5cIjEwMTAxMDEwXCIsXHJcblwiMDEwMTAxMDFcIixcclxuXCIxMDEwMTAxMFwiLFxyXG5cIjAxMDEwMTAxXCJcclxuXSxcclxuLy8gIzB4MDViIFxyXG5bIFxyXG5cIjExMTEwMDAwXCIsXHJcblwiMTExMTAwMDBcIixcclxuXCIxMTExMDAwMFwiLFxyXG5cIjExMTEwMDAwXCIsXHJcblwiMDAwMDExMTFcIixcclxuXCIwMDAwMTExMVwiLFxyXG5cIjAwMDAxMTExXCIsXHJcblwiMDAwMDExMTFcIlxyXG5dLFxyXG4vLyAjMHgwNWMgXHJcblsgXHJcblwiMDAwMDAwMDBcIixcclxuXCIwMDAwMDAwMFwiLFxyXG5cIjAwMDAwMDAwXCIsXHJcblwiMDAwMDAwMDBcIixcclxuXCIwMDAwMTExMVwiLFxyXG5cIjAwMDAxMDAwXCIsXHJcblwiMDAwMDEwMDBcIixcclxuXCIwMDAwMTAwMFwiXHJcbl0sXHJcbi8vICMweDA1ZCBcclxuWyBcclxuXCIwMDAwMDAwMFwiLFxyXG5cIjAwMDAwMDAwXCIsXHJcblwiMDAwMDAwMDBcIixcclxuXCIwMDAwMDAwMFwiLFxyXG5cIjExMTExMDAwXCIsXHJcblwiMDAwMDEwMDBcIixcclxuXCIwMDAwMTAwMFwiLFxyXG5cIjAwMDAxMDAwXCJcclxuXSxcclxuLy8gIzB4MDVlIFxyXG5bIFxyXG5cIjAwMDAxMDAwXCIsXHJcblwiMDAwMDEwMDBcIixcclxuXCIwMDAwMTAwMFwiLFxyXG5cIjAwMDAxMDAwXCIsXHJcblwiMTExMTEwMDBcIixcclxuXCIwMDAwMTAwMFwiLFxyXG5cIjAwMDAxMDAwXCIsXHJcblwiMDAwMDEwMDBcIlxyXG5dLFxyXG4vLyAjMHgwNWYgXHJcblsgXHJcblwiMDAwMDAwMDBcIixcclxuXCIwMDAwMDAwMFwiLFxyXG5cIjAwMDAwMDAwXCIsXHJcblwiMDAwMDAwMDBcIixcclxuXCIxMTExMTExMVwiLFxyXG5cIjAwMDAxMDAwXCIsXHJcblwiMDAwMDEwMDBcIixcclxuXCIwMDAwMTAwMFwiXHJcbl0sXHJcbi8vICMweDA2MCBcclxuWyBcclxuXCIwMDAwMDAwMFwiLFxyXG5cIjAwMDAwMDAwXCIsXHJcblwiMDAwMDAwMDFcIixcclxuXCIwMDExMTExMFwiLFxyXG5cIjAxMDEwMTAwXCIsXHJcblwiMDAwMTAxMDBcIixcclxuXCIwMDAxMDEwMFwiLFxyXG5cIjAwMDAwMDAwXCJcclxuXSxcclxuLy8gIzB4MDYxIFxyXG5bIFxyXG5cIjAwMDAxMDAwXCIsXHJcblwiMDAwMDEwMDBcIixcclxuXCIwMDAwMTAwMFwiLFxyXG5cIjAwMDAxMDAwXCIsXHJcblwiMDAwMDAwMDBcIixcclxuXCIwMDAwMDAwMFwiLFxyXG5cIjAwMDAxMDAwXCIsXHJcblwiMDAwMDAwMDBcIlxyXG5dLFxyXG4vLyAjMHgwNjIgXHJcblsgXHJcblwiMDAxMDAxMDBcIixcclxuXCIwMDEwMDEwMFwiLFxyXG5cIjAwMTAwMTAwXCIsXHJcblwiMDAwMDAwMDBcIixcclxuXCIwMDAwMDAwMFwiLFxyXG5cIjAwMDAwMDAwXCIsXHJcblwiMDAwMDAwMDBcIixcclxuXCIwMDAwMDAwMFwiXHJcbl0sXHJcbi8vICMweDA2MyBcclxuWyBcclxuXCIwMDEwMDEwMFwiLFxyXG5cIjAwMTAwMTAwXCIsXHJcblwiMDExMTExMTBcIixcclxuXCIwMDEwMDEwMFwiLFxyXG5cIjAxMTExMTEwXCIsXHJcblwiMDAxMDAxMDBcIixcclxuXCIwMDEwMDEwMFwiLFxyXG5cIjAwMDAwMDAwXCJcclxuXSxcclxuLy8gIzB4MDY0IFxyXG5bIFxyXG5cIjAwMDAxMDAwXCIsXHJcblwiMDAwMTExMTBcIixcclxuXCIwMDEwMTAwMFwiLFxyXG5cIjAwMDExMTAwXCIsXHJcblwiMDAwMDEwMTBcIixcclxuXCIwMDExMTEwMFwiLFxyXG5cIjAwMDAxMDAwXCIsXHJcblwiMDAwMDAwMDBcIlxyXG5dLFxyXG4vLyAjMHgwNjUgXHJcblsgXHJcblwiMDAwMDAwMDBcIixcclxuXCIwMTEwMDAxMFwiLFxyXG5cIjAxMTAwMTAwXCIsXHJcblwiMDAwMDEwMDBcIixcclxuXCIwMDAxMDAwMFwiLFxyXG5cIjAwMTAwMTEwXCIsXHJcblwiMDEwMDAxMTBcIixcclxuXCIwMDAwMDAwMFwiXHJcbl0sXHJcbi8vICMweDA2NiBcclxuWyBcclxuXCIwMDExMDAwMFwiLFxyXG5cIjAxMDAxMDAwXCIsXHJcblwiMDEwMDEwMDBcIixcclxuXCIwMDExMDAwMFwiLFxyXG5cIjAxMDAxMDEwXCIsXHJcblwiMDEwMDAxMDBcIixcclxuXCIwMDExMTAxMFwiLFxyXG5cIjAwMDAwMDAwXCJcclxuXSxcclxuLy8gIzB4MDY3IFxyXG5bIFxyXG5cIjAwMDAwMTAwXCIsXHJcblwiMDAwMDEwMDBcIixcclxuXCIwMDAxMDAwMFwiLFxyXG5cIjAwMDAwMDAwXCIsXHJcblwiMDAwMDAwMDBcIixcclxuXCIwMDAwMDAwMFwiLFxyXG5cIjAwMDAwMDAwXCIsXHJcblwiMDAwMDAwMDBcIlxyXG5dLFxyXG4vLyAjMHgwNjggXHJcblsgXHJcblwiMDAwMDAxMDBcIixcclxuXCIwMDAwMTAwMFwiLFxyXG5cIjAwMDEwMDAwXCIsXHJcblwiMDAwMTAwMDBcIixcclxuXCIwMDAxMDAwMFwiLFxyXG5cIjAwMDAxMDAwXCIsXHJcblwiMDAwMDAxMDBcIixcclxuXCIwMDAwMDAwMFwiXHJcbl0sXHJcbi8vICMweDA2OSBcclxuWyBcclxuXCIwMDEwMDAwMFwiLFxyXG5cIjAwMDEwMDAwXCIsXHJcblwiMDAwMDEwMDBcIixcclxuXCIwMDAwMTAwMFwiLFxyXG5cIjAwMDAxMDAwXCIsXHJcblwiMDAwMTAwMDBcIixcclxuXCIwMDEwMDAwMFwiLFxyXG5cIjAwMDAwMDAwXCJcclxuXSxcclxuLy8gIzB4MDZhIFxyXG5bIFxyXG5cIjAwMDAwMDAwXCIsXHJcblwiMDAwMDEwMDBcIixcclxuXCIwMDAwMTAwMFwiLFxyXG5cIjAwMTExMTEwXCIsXHJcblwiMDAwMDEwMDBcIixcclxuXCIwMDAwMTAwMFwiLFxyXG5cIjAwMDAwMDAwXCIsXHJcblwiMDAwMDAwMDBcIlxyXG5dLFxyXG4vLyAjMHgwNmIgXHJcblsgXHJcblwiMDAwMDEwMDBcIixcclxuXCIwMDEwMTAxMFwiLFxyXG5cIjAwMDExMTAwXCIsXHJcblwiMDAxMTExMTBcIixcclxuXCIwMDAxMTEwMFwiLFxyXG5cIjAwMTAxMDEwXCIsXHJcblwiMDAwMDEwMDBcIixcclxuXCIwMDAwMDAwMFwiXHJcbl0sXHJcbi8vICMweDA2YyBcclxuWyBcclxuXCIwMDAwMTExMVwiLFxyXG5cIjAwMDAxMTExXCIsXHJcblwiMDAwMDExMTFcIixcclxuXCIwMDAwMTExMVwiLFxyXG5cIjExMTEwMDAwXCIsXHJcblwiMTExMTAwMDBcIixcclxuXCIxMTExMDAwMFwiLFxyXG5cIjExMTEwMDAwXCJcclxuXSxcclxuLy8gIzB4MDZkIFxyXG5bIFxyXG5cIjEwMDAwMDAxXCIsXHJcblwiMDEwMDAwMTBcIixcclxuXCIwMDEwMDEwMFwiLFxyXG5cIjAwMDExMDAwXCIsXHJcblwiMDAwMTEwMDBcIixcclxuXCIwMDEwMDEwMFwiLFxyXG5cIjAxMDAwMDEwXCIsXHJcblwiMTAwMDAwMDFcIlxyXG5dLFxyXG4vLyAjMHgwNmUgXHJcblsgXHJcblwiMDAwMTAwMDBcIixcclxuXCIwMDAxMDAwMFwiLFxyXG5cIjAwMTAwMDAwXCIsXHJcblwiMTEwMDAwMDBcIixcclxuXCIwMDAwMDAwMFwiLFxyXG5cIjAwMDAwMDAwXCIsXHJcblwiMDAwMDAwMDBcIixcclxuXCIwMDAwMDAwMFwiXHJcbl0sXHJcbi8vICMweDA2ZiBcclxuWyBcclxuXCIwMDAwMTAwMFwiLFxyXG5cIjAwMDAxMDAwXCIsXHJcblwiMDAwMDAxMDBcIixcclxuXCIwMDAwMDAxMVwiLFxyXG5cIjAwMDAwMDAwXCIsXHJcblwiMDAwMDAwMDBcIixcclxuXCIwMDAwMDAwMFwiLFxyXG5cIjAwMDAwMDAwXCJcclxuXSxcclxuLy8gIzB4MDcwIFxyXG5bIFxyXG5cIjExMTExMTExXCIsXHJcblwiMDAwMDAwMDBcIixcclxuXCIwMDAwMDAwMFwiLFxyXG5cIjAwMDAwMDAwXCIsXHJcblwiMDAwMDAwMDBcIixcclxuXCIwMDAwMDAwMFwiLFxyXG5cIjAwMDAwMDAwXCIsXHJcblwiMDAwMDAwMDBcIlxyXG5dLFxyXG4vLyAjMHgwNzEgXHJcblsgXHJcblwiMTAwMDAwMDBcIixcclxuXCIxMDAwMDAwMFwiLFxyXG5cIjEwMDAwMDAwXCIsXHJcblwiMTAwMDAwMDBcIixcclxuXCIxMDAwMDAwMFwiLFxyXG5cIjEwMDAwMDAwXCIsXHJcblwiMTAwMDAwMDBcIixcclxuXCIxMDAwMDAwMFwiXHJcbl0sXHJcbi8vICMweDA3MiBcclxuWyBcclxuXCIxMTExMTExMVwiLFxyXG5cIjEwMDAwMDAwXCIsXHJcblwiMTAwMDAwMDBcIixcclxuXCIxMDAwMDAwMFwiLFxyXG5cIjEwMDAwMDAwXCIsXHJcblwiMTAwMDAwMDBcIixcclxuXCIxMDAwMDAwMFwiLFxyXG5cIjEwMDAwMDAwXCJcclxuXSxcclxuLy8gIzB4MDczIFxyXG5bIFxyXG5cIjExMTExMTExXCIsXHJcblwiMDAwMDAwMDFcIixcclxuXCIwMDAwMDAwMVwiLFxyXG5cIjAwMDAwMDAxXCIsXHJcblwiMDAwMDAwMDFcIixcclxuXCIwMDAwMDAwMVwiLFxyXG5cIjAwMDAwMDAxXCIsXHJcblwiMDAwMDAwMDFcIlxyXG5dLFxyXG4vLyAjMHgwNzQgXHJcblsgXHJcblwiMDAwMDAwMDBcIixcclxuXCIwMDAwMDAwMFwiLFxyXG5cIjExMTExMTExXCIsXHJcblwiMDAwMDAwMDBcIixcclxuXCIwMDAwMDAwMFwiLFxyXG5cIjAwMDAwMDAwXCIsXHJcblwiMDAwMDAwMDBcIixcclxuXCIwMDAwMDAwMFwiXHJcbl0sXHJcbi8vICMweDA3NSBcclxuWyBcclxuXCIwMDEwMDAwMFwiLFxyXG5cIjAwMTAwMDAwXCIsXHJcblwiMDAxMDAwMDBcIixcclxuXCIwMDEwMDAwMFwiLFxyXG5cIjAwMTAwMDAwXCIsXHJcblwiMDAxMDAwMDBcIixcclxuXCIwMDEwMDAwMFwiLFxyXG5cIjAwMTAwMDAwXCJcclxuXSxcclxuLy8gIzB4MDc2IFxyXG5bIFxyXG5cIjAwMDAwMDAxXCIsXHJcblwiMDAwMDAwMTBcIixcclxuXCIwMDAwMDEwMFwiLFxyXG5cIjAwMDAxMDAwXCIsXHJcblwiMDAwMTAwMDBcIixcclxuXCIwMDEwMDAwMFwiLFxyXG5cIjAxMDAwMDAwXCIsXHJcblwiMTAwMDAwMDBcIlxyXG5dLFxyXG4vLyAjMHgwNzcgXHJcblsgXHJcblwiMTAwMDAwMDBcIixcclxuXCIwMTAwMDAwMFwiLFxyXG5cIjAwMTAwMDAwXCIsXHJcblwiMDAwMTAwMDBcIixcclxuXCIwMDAwMTAwMFwiLFxyXG5cIjAwMDAwMTAwXCIsXHJcblwiMDAwMDAwMTBcIixcclxuXCIwMDAwMDAwMVwiXHJcbl0sXHJcbi8vICMweDA3OCBcclxuWyBcclxuXCIwMDAwMDAwMFwiLFxyXG5cIjAwMDAwMDAwXCIsXHJcblwiMDAwMDAwMDBcIixcclxuXCIwMDAwMDAwMFwiLFxyXG5cIjExMTExMTExXCIsXHJcblwiMDAwMDAwMDBcIixcclxuXCIwMDAwMDAwMFwiLFxyXG5cIjAwMDAwMDAwXCJcclxuXSxcclxuLy8gIzB4MDc5IFxyXG5bIFxyXG5cIjAwMDAxMDAwXCIsXHJcblwiMDAwMDEwMDBcIixcclxuXCIwMDAwMTAwMFwiLFxyXG5cIjAwMDAxMDAwXCIsXHJcblwiMDAwMDEwMDBcIixcclxuXCIwMDAwMTAwMFwiLFxyXG5cIjAwMDAxMDAwXCIsXHJcblwiMDAwMDEwMDBcIlxyXG5dLFxyXG4vLyAjMHgwN2EgXHJcblsgXHJcblwiMTExMTExMTFcIixcclxuXCIxMTExMTExMVwiLFxyXG5cIjExMTExMTExXCIsXHJcblwiMTExMTExMTFcIixcclxuXCIwMDAwMDAwMFwiLFxyXG5cIjAwMDAwMDAwXCIsXHJcblwiMDAwMDAwMDBcIixcclxuXCIwMDAwMDAwMFwiXHJcbl0sXHJcbi8vICMweDA3YiBcclxuWyBcclxuXCIxMTExMDAwMFwiLFxyXG5cIjExMTEwMDAwXCIsXHJcblwiMTExMTAwMDBcIixcclxuXCIxMTExMDAwMFwiLFxyXG5cIjExMTEwMDAwXCIsXHJcblwiMTExMTAwMDBcIixcclxuXCIxMTExMDAwMFwiLFxyXG5cIjExMTEwMDAwXCJcclxuXSxcclxuLy8gIzB4MDdjIFxyXG5bIFxyXG5cIjAwMDAwMDAwXCIsXHJcblwiMDAwMDAwMDBcIixcclxuXCIwMDAwMDAwMFwiLFxyXG5cIjAwMDAwMDAwXCIsXHJcblwiMDAwMDAwMDBcIixcclxuXCIwMDAwMDAwMFwiLFxyXG5cIjExMTExMTExXCIsXHJcblwiMDAwMDAwMDBcIlxyXG5dLFxyXG4vLyAjMHgwN2QgXHJcblsgXHJcblwiMDAwMDAwMTBcIixcclxuXCIwMDAwMDAxMFwiLFxyXG5cIjAwMDAwMDEwXCIsXHJcblwiMDAwMDAwMTBcIixcclxuXCIwMDAwMDAxMFwiLFxyXG5cIjAwMDAwMDEwXCIsXHJcblwiMDAwMDAwMTBcIixcclxuXCIwMDAwMDAxMFwiXHJcbl0sXHJcbi8vICMweDA3ZSBcclxuWyBcclxuXCIwMDAwMDAwMFwiLFxyXG5cIjAwMDAwMDAwXCIsXHJcblwiMDAwMDAwMDBcIixcclxuXCIwMDAwMDAwMFwiLFxyXG5cIjAwMDAwMDAwXCIsXHJcblwiMTExMTExMTFcIixcclxuXCIxMTExMTExMVwiLFxyXG5cIjExMTExMTExXCJcclxuXSxcclxuLy8gIzB4MDdmIFxyXG5bIFxyXG5cIjAwMDAwMTExXCIsXHJcblwiMDAwMDAxMTFcIixcclxuXCIwMDAwMDExMVwiLFxyXG5cIjAwMDAwMTExXCIsXHJcblwiMDAwMDAxMTFcIixcclxuXCIwMDAwMDExMVwiLFxyXG5cIjAwMDAwMTExXCIsXHJcblwiMDAwMDAxMTFcIlxyXG5dLFxyXG4vLyAjMHgwODAgXHJcblsgXHJcblwiMDAwMDAwMDBcIixcclxuXCIwMDAwMTAwMFwiLFxyXG5cIjAwMDAxMDAwXCIsXHJcblwiMDAwMDEwMDBcIixcclxuXCIwMDEwMTAxMFwiLFxyXG5cIjAwMDExMTAwXCIsXHJcblwiMDAwMDEwMDBcIixcclxuXCIwMDAwMDAwMFwiXHJcbl0sXHJcbi8vICMweDA4MSBcclxuWyBcclxuXCIwMDAwMDEwMFwiLFxyXG5cIjAwMTExMDAwXCIsXHJcblwiMDAwMDEwMDBcIixcclxuXCIwMDExMTExMFwiLFxyXG5cIjAwMDAxMDAwXCIsXHJcblwiMDAwMDEwMDBcIixcclxuXCIwMDAxMDAwMFwiLFxyXG5cIjAwMDAwMDAwXCJcclxuXSxcclxuLy8gIzB4MDgyIFxyXG5bIFxyXG5cIjAwMDAwMDAwXCIsXHJcblwiMDAxMTExMTBcIixcclxuXCIwMDAwMDAxMFwiLFxyXG5cIjAwMDAwMDEwXCIsXHJcblwiMDAwMDAwMTBcIixcclxuXCIwMDAwMDAxMFwiLFxyXG5cIjAwMTExMTEwXCIsXHJcblwiMDAwMDAwMDBcIlxyXG5dLFxyXG4vLyAjMHgwODMgXHJcblsgXHJcblwiMDAwMDAwMDBcIixcclxuXCIwMDEwMDAxMFwiLFxyXG5cIjAwMTAwMDEwXCIsXHJcblwiMDAwMTAwMTBcIixcclxuXCIwMDAwMDAxMFwiLFxyXG5cIjAwMDAwMTAwXCIsXHJcblwiMDAwMTEwMDBcIixcclxuXCIwMDAwMDAwMFwiXHJcbl0sXHJcbi8vICMweDA4NCBcclxuWyBcclxuXCIwMDAwMDAwMFwiLFxyXG5cIjAwMTEwMDAwXCIsXHJcblwiMDAwMDAwMTBcIixcclxuXCIwMDExMDAxMFwiLFxyXG5cIjAwMDAwMDEwXCIsXHJcblwiMDAwMDAxMDBcIixcclxuXCIwMDExMTAwMFwiLFxyXG5cIjAwMDAwMDAwXCJcclxuXSxcclxuLy8gIzB4MDg1IFxyXG5bIFxyXG5cIjAwMDAwMDEwXCIsXHJcblwiMDAwMDAxMDBcIixcclxuXCIwMDAwMTAwMFwiLFxyXG5cIjAwMDExMDAwXCIsXHJcblwiMDAxMDEwMDBcIixcclxuXCIwMDAwMTAwMFwiLFxyXG5cIjAwMDAxMDAwXCIsXHJcblwiMDAwMDAwMDBcIlxyXG5dLFxyXG4vLyAjMHgwODYgXHJcblsgXHJcblwiMDAwMDAwMDBcIixcclxuXCIwMDAwMTAwMFwiLFxyXG5cIjAwMDAwMTAwXCIsXHJcblwiMDAxMDAwMTBcIixcclxuXCIwMDEwMDAxMFwiLFxyXG5cIjAwMTAwMDEwXCIsXHJcblwiMDAxMDAwMTBcIixcclxuXCIwMDAwMDAwMFwiXHJcbl0sXHJcbi8vICMweDA4NyBcclxuWyBcclxuXCIwMDAwMTAwMFwiLFxyXG5cIjAwMTExMTEwXCIsXHJcblwiMDAwMDEwMDBcIixcclxuXCIwMDExMTExMFwiLFxyXG5cIjAwMDAxMDAwXCIsXHJcblwiMDAwMDEwMDBcIixcclxuXCIwMDAwMTAwMFwiLFxyXG5cIjAwMDAwMDAwXCJcclxuXSxcclxuLy8gIzB4MDg4IFxyXG5bIFxyXG5cIjAwMDAwMDAwXCIsXHJcblwiMDAwMTExMTBcIixcclxuXCIwMDAxMDAxMFwiLFxyXG5cIjAwMTAwMDEwXCIsXHJcblwiMDAwMDAwMTBcIixcclxuXCIwMDAwMDEwMFwiLFxyXG5cIjAwMDExMDAwXCIsXHJcblwiMDAwMDAwMDBcIlxyXG5dLFxyXG4vLyAjMHgwODkgXHJcblsgXHJcblwiMDAwMDAwMDBcIixcclxuXCIwMDAxMTEwMFwiLFxyXG5cIjAwMDAwMDAwXCIsXHJcblwiMDAwMDAwMDBcIixcclxuXCIwMDAwMDAwMFwiLFxyXG5cIjAwMDAwMDAwXCIsXHJcblwiMDAxMTExMTBcIixcclxuXCIwMDAwMDAwMFwiXHJcbl0sXHJcbi8vICMweDA4YSBcclxuWyBcclxuXCIwMDAwMDAwMFwiLFxyXG5cIjAwMTExMTEwXCIsXHJcblwiMDAwMDAwMTBcIixcclxuXCIwMDAwMDAxMFwiLFxyXG5cIjAwMDEwMTAwXCIsXHJcblwiMDAwMDEwMDBcIixcclxuXCIwMDAwMDEwMFwiLFxyXG5cIjAwMDAwMDAwXCJcclxuXSxcclxuLy8gIzB4MDhiIFxyXG5bIFxyXG5cIjAwMDAwMTAwXCIsXHJcblwiMDAwMDAxMDBcIixcclxuXCIwMDAwMDEwMFwiLFxyXG5cIjAwMDAwMTAwXCIsXHJcblwiMDAwMDAxMDBcIixcclxuXCIwMDAwMTAwMFwiLFxyXG5cIjAwMDEwMDAwXCIsXHJcblwiMDAwMDAwMDBcIlxyXG5dLFxyXG4vLyAjMHgwOGMgXHJcblsgXHJcblwiMDAxMDAxMDBcIixcclxuXCIwMDEwMDEwMFwiLFxyXG5cIjAwMTAwMTAwXCIsXHJcblwiMDAxMDAxMDBcIixcclxuXCIwMDAwMDEwMFwiLFxyXG5cIjAwMDAxMDAwXCIsXHJcblwiMDAwMTAwMDBcIixcclxuXCIwMDAwMDAwMFwiXHJcbl0sXHJcbi8vICMweDA4ZCBcclxuWyBcclxuXCIwMDAwMDAwMFwiLFxyXG5cIjAwMTExMTEwXCIsXHJcblwiMDAwMTAwMDBcIixcclxuXCIwMDExMTExMFwiLFxyXG5cIjAwMDEwMDAwXCIsXHJcblwiMDAwMTAwMDBcIixcclxuXCIwMDAwMTExMFwiLFxyXG5cIjAwMDAwMDAwXCJcclxuXSxcclxuLy8gIzB4MDhlIFxyXG5bIFxyXG5cIjAwMDAwMDAwXCIsXHJcblwiMDAwMTExMDBcIixcclxuXCIwMDAwMDAwMFwiLFxyXG5cIjAwMDExMTAwXCIsXHJcblwiMDAwMDAwMDBcIixcclxuXCIwMDExMTEwMFwiLFxyXG5cIjAwMDAwMDEwXCIsXHJcblwiMDAwMDAwMDBcIlxyXG5dLFxyXG4vLyAjMHgwOGYgXHJcblsgXHJcblwiMDAwMTExMDBcIixcclxuXCIwMDAwMDAwMFwiLFxyXG5cIjAwMTExMTEwXCIsXHJcblwiMDAwMDAwMTBcIixcclxuXCIwMDAwMDAxMFwiLFxyXG5cIjAwMDAwMTAwXCIsXHJcblwiMDAwMDEwMDBcIixcclxuXCIwMDAwMDAwMFwiXHJcbl0sXHJcbi8vICMweDA5MCBcclxuWyBcclxuXCIwMDAxMDAwMFwiLFxyXG5cIjAwMTExMTEwXCIsXHJcblwiMDAwMTAwMTBcIixcclxuXCIwMDAxMDEwMFwiLFxyXG5cIjAwMDEwMDAwXCIsXHJcblwiMDAwMTAwMDBcIixcclxuXCIwMDAwMTExMFwiLFxyXG5cIjAwMDAwMDAwXCJcclxuXSxcclxuLy8gIzB4MDkxIFxyXG5bIFxyXG5cIjAwMDAwMDAwXCIsXHJcblwiMDAwMTExMTBcIixcclxuXCIwMDAxMDAxMFwiLFxyXG5cIjAwMTAxMDEwXCIsXHJcblwiMDAwMDAxMTBcIixcclxuXCIwMDAwMDEwMFwiLFxyXG5cIjAwMDExMDAwXCIsXHJcblwiMDAwMDAwMDBcIlxyXG5dLFxyXG4vLyAjMHgwOTIgXHJcblsgXHJcblwiMDAwMDAwMDBcIixcclxuXCIwMDExMTExMFwiLFxyXG5cIjAwMDAwMDEwXCIsXHJcblwiMDAwMDAxMDBcIixcclxuXCIwMDAwMTAwMFwiLFxyXG5cIjAwMDEwMTAwXCIsXHJcblwiMDAxMDAwMTBcIixcclxuXCIwMDAwMDAwMFwiXHJcbl0sXHJcbi8vICMweDA5MyBcclxuWyBcclxuXCIwMDAxMDAwMFwiLFxyXG5cIjAwMDEwMDAwXCIsXHJcblwiMDAwMTAwMDBcIixcclxuXCIwMDAxMTAwMFwiLFxyXG5cIjAwMDEwMTAwXCIsXHJcblwiMDAwMTAwMDBcIixcclxuXCIwMDAxMDAwMFwiLFxyXG5cIjAwMDAwMDAwXCJcclxuXSxcclxuLy8gIzB4MDk0IFxyXG5bIFxyXG5cIjAwMDEwMDAwXCIsXHJcblwiMDAxMTExMTBcIixcclxuXCIwMDAxMDAxMFwiLFxyXG5cIjAwMDEwMDEwXCIsXHJcblwiMDAwMTAwMTBcIixcclxuXCIwMDAxMDAxMFwiLFxyXG5cIjAwMTAwMTAwXCIsXHJcblwiMDAwMDAwMDBcIlxyXG5dLFxyXG4vLyAjMHgwOTUgXHJcblsgXHJcblwiMDAwMDEwMDBcIixcclxuXCIwMDAwMTAwMFwiLFxyXG5cIjAwMTExMTEwXCIsXHJcblwiMDAwMDEwMDBcIixcclxuXCIwMDAwMTAwMFwiLFxyXG5cIjAwMDEwMDAwXCIsXHJcblwiMDAxMDAwMDBcIixcclxuXCIwMDAwMDAwMFwiXHJcbl0sXHJcbi8vICMweDA5NiBcclxuWyBcclxuXCIwMDEwMDAwMFwiLFxyXG5cIjAwMTAwMDAwXCIsXHJcblwiMDAxMTExMTBcIixcclxuXCIwMDEwMDAwMFwiLFxyXG5cIjAwMTAwMDAwXCIsXHJcblwiMDAxMDAwMDBcIixcclxuXCIwMDAxMTExMFwiLFxyXG5cIjAwMDAwMDAwXCJcclxuXSxcclxuLy8gIzB4MDk3IFxyXG5bIFxyXG5cIjAwMDExMTAwXCIsXHJcblwiMDAwMDAwMDBcIixcclxuXCIwMDExMTExMFwiLFxyXG5cIjAwMDAxMDAwXCIsXHJcblwiMDAwMDEwMDBcIixcclxuXCIwMDAwMTAwMFwiLFxyXG5cIjAwMDEwMDAwXCIsXHJcblwiMDAwMDAwMDBcIlxyXG5dLFxyXG4vLyAjMHgwOTggXHJcblsgXHJcblwiMDAwMTAxMDBcIixcclxuXCIwMDExMTExMFwiLFxyXG5cIjAwMDEwMTAwXCIsXHJcblwiMDAwMTAxMDBcIixcclxuXCIwMDAwMDEwMFwiLFxyXG5cIjAwMDAxMDAwXCIsXHJcblwiMDAwMTAwMDBcIixcclxuXCIwMDAwMDAwMFwiXHJcbl0sXHJcbi8vICMweDA5OSBcclxuWyBcclxuXCIwMDAwMDAwMFwiLFxyXG5cIjAwMTEwMDAwXCIsXHJcblwiMDAwMDAwMDBcIixcclxuXCIwMDAwMDAxMFwiLFxyXG5cIjAwMDAwMDEwXCIsXHJcblwiMDAwMDAxMDBcIixcclxuXCIwMDExMTAwMFwiLFxyXG5cIjAwMDAwMDAwXCJcclxuXSxcclxuLy8gIzB4MDlhIFxyXG5bIFxyXG5cIjAwMDAwMDAwXCIsXHJcblwiMDAxMDEwMTBcIixcclxuXCIwMDEwMTAxMFwiLFxyXG5cIjAwMTAxMDEwXCIsXHJcblwiMDAwMDAwMTBcIixcclxuXCIwMDAwMDEwMFwiLFxyXG5cIjAwMDAxMDAwXCIsXHJcblwiMDAwMDAwMDBcIlxyXG5dLFxyXG4vLyAjMHgwOWIgXHJcblsgXHJcblwiMDAwMDAwMDBcIixcclxuXCIwMDExMTExMFwiLFxyXG5cIjAwMTAwMDEwXCIsXHJcblwiMDAxMDAwMTBcIixcclxuXCIwMDEwMDAxMFwiLFxyXG5cIjAwMTAwMDEwXCIsXHJcblwiMDAxMTExMTBcIixcclxuXCIwMDAwMDAwMFwiXHJcbl0sXHJcbi8vICMweDA5YyBcclxuWyBcclxuXCIwMDAxMDAwMFwiLFxyXG5cIjAwMDExMTEwXCIsXHJcblwiMDAxMDAxMDBcIixcclxuXCIwMDAwMDEwMFwiLFxyXG5cIjAwMDAwMTAwXCIsXHJcblwiMDAwMDAxMDBcIixcclxuXCIwMDAwMTAwMFwiLFxyXG5cIjAwMDAwMDAwXCJcclxuXSxcclxuLy8gIzB4MDlkIFxyXG5bIFxyXG5cIjAwMDExMTEwXCIsXHJcblwiMDAwMTAwMDBcIixcclxuXCIwMDAxMDAwMFwiLFxyXG5cIjAwMDEwMDAwXCIsXHJcblwiMDAwMDAwMDBcIixcclxuXCIwMDAwMDAwMFwiLFxyXG5cIjAwMDAwMDAwXCIsXHJcblwiMDAwMDAwMDBcIlxyXG5dLFxyXG4vLyAjMHgwOWUgXHJcblsgXHJcblwiMDAwMDAwMDBcIixcclxuXCIwMDAwMDAwMFwiLFxyXG5cIjAwMTExMTEwXCIsXHJcblwiMDAwMDAwMTBcIixcclxuXCIwMDAwMTEwMFwiLFxyXG5cIjAwMDAxMDAwXCIsXHJcblwiMDAwMTAwMDBcIixcclxuXCIwMDAwMDAwMFwiXHJcbl0sXHJcbi8vICMweDA5ZiBcclxuWyBcclxuXCIwMDAwMDAwMFwiLFxyXG5cIjAwMDAwMDAwXCIsXHJcblwiMDAwMTAwMDBcIixcclxuXCIwMDExMTExMFwiLFxyXG5cIjAwMDEwMDEwXCIsXHJcblwiMDAwMTAxMDBcIixcclxuXCIwMDAxMDAwMFwiLFxyXG5cIjAwMDAwMDAwXCJcclxuXSxcclxuLy8gIzB4MGEwIFxyXG5bIFxyXG5cIjAwMDAwMDAwXCIsXHJcblwiMDAxMTExMTBcIixcclxuXCIwMDEwMDAxMFwiLFxyXG5cIjAwMTAwMDEwXCIsXHJcblwiMDAwMDAwMTBcIixcclxuXCIwMDAwMDEwMFwiLFxyXG5cIjAwMDAxMDAwXCIsXHJcblwiMDAwMDAwMDBcIlxyXG5dLFxyXG4vLyAjMHgwYTEgXHJcblsgXHJcblwiMDAwMDAwMDBcIixcclxuXCIwMDExMTExMFwiLFxyXG5cIjAwMDAwMDEwXCIsXHJcblwiMDAwMTAxMDBcIixcclxuXCIwMDAwMTAwMFwiLFxyXG5cIjAwMDEwMTAwXCIsXHJcblwiMDAxMDAwMDBcIixcclxuXCIwMDAwMDAwMFwiXHJcbl0sXHJcbi8vICMweDBhMiBcclxuWyBcclxuXCIwMDAwMDAwMFwiLFxyXG5cIjAwMTExMTEwXCIsXHJcblwiMDAwMDAwMTBcIixcclxuXCIwMDAwMDAxMFwiLFxyXG5cIjAwMDAwMDEwXCIsXHJcblwiMDAwMDAxMDBcIixcclxuXCIwMDAxMTAwMFwiLFxyXG5cIjAwMDAwMDAwXCJcclxuXSxcclxuLy8gIzB4MGEzIFxyXG5bIFxyXG5cIjAwMTExMTEwXCIsXHJcblwiMDAwMDAwMTBcIixcclxuXCIwMDAwMTAxMFwiLFxyXG5cIjAwMDAxMTAwXCIsXHJcblwiMDAwMDEwMDBcIixcclxuXCIwMDAwMTAwMFwiLFxyXG5cIjAwMDEwMDAwXCIsXHJcblwiMDAwMDAwMDBcIlxyXG5dLFxyXG4vLyAjMHgwYTQgXHJcblsgXHJcblwiMDAwMDEwMDBcIixcclxuXCIwMDExMTExMFwiLFxyXG5cIjAwMTAwMDEwXCIsXHJcblwiMDAxMDAwMTBcIixcclxuXCIwMDAwMDAxMFwiLFxyXG5cIjAwMDAwMTAwXCIsXHJcblwiMDAwMDEwMDBcIixcclxuXCIwMDAwMDAwMFwiXHJcbl0sXHJcbi8vICMweDBhNSBcclxuWyBcclxuXCIwMDAwMDAwMFwiLFxyXG5cIjAwMTExMTEwXCIsXHJcblwiMDAwMDEwMDBcIixcclxuXCIwMDAwMTAwMFwiLFxyXG5cIjAwMDAxMDAwXCIsXHJcblwiMDAwMDEwMDBcIixcclxuXCIwMDExMTExMFwiLFxyXG5cIjAwMDAwMDAwXCJcclxuXSxcclxuLy8gIzB4MGE2IFxyXG5bIFxyXG5cIjAwMDAwMTAwXCIsXHJcblwiMDAxMTExMTBcIixcclxuXCIwMDAwMDEwMFwiLFxyXG5cIjAwMDAxMTAwXCIsXHJcblwiMDAwMTAxMDBcIixcclxuXCIwMDEwMDEwMFwiLFxyXG5cIjAwMDAwMTAwXCIsXHJcblwiMDAwMDAwMDBcIlxyXG5dLFxyXG4vLyAjMHgwYTcgXHJcblsgXHJcblwiMDAwMTAwMDBcIixcclxuXCIwMDAxMDAwMFwiLFxyXG5cIjAwMTExMTEwXCIsXHJcblwiMDAwMTAwMTBcIixcclxuXCIwMDAxMDEwMFwiLFxyXG5cIjAwMDEwMDAwXCIsXHJcblwiMDAwMTAwMDBcIixcclxuXCIwMDAwMDAwMFwiXHJcbl0sXHJcbi8vICMweDBhOCBcclxuWyBcclxuXCIwMDAwMDAwMFwiLFxyXG5cIjAwMDExMTAwXCIsXHJcblwiMDAwMDAxMDBcIixcclxuXCIwMDAwMDEwMFwiLFxyXG5cIjAwMDAwMTAwXCIsXHJcblwiMDAwMDAxMDBcIixcclxuXCIwMDExMTExMFwiLFxyXG5cIjAwMDAwMDAwXCJcclxuXSxcclxuLy8gIzB4MGE5IFxyXG5bIFxyXG5cIjAwMDAwMDAwXCIsXHJcblwiMDAxMTExMTBcIixcclxuXCIwMDAwMDAxMFwiLFxyXG5cIjAwMTExMTEwXCIsXHJcblwiMDAwMDAwMTBcIixcclxuXCIwMDAwMDAxMFwiLFxyXG5cIjAwMTExMTEwXCIsXHJcblwiMDAwMDAwMDBcIlxyXG5dLFxyXG4vLyAjMHgwYWEgXHJcblsgXHJcblwiMDAwMDEwMDBcIixcclxuXCIwMDExMTExMFwiLFxyXG5cIjAwMDAxMDAwXCIsXHJcblwiMDAwMDEwMDBcIixcclxuXCIwMDEwMTAxMFwiLFxyXG5cIjAwMTAxMDEwXCIsXHJcblwiMDAwMDEwMDBcIixcclxuXCIwMDAwMDAwMFwiXHJcbl0sXHJcbi8vICMweDBhYiBcclxuWyBcclxuXCIwMDAwMDAwMFwiLFxyXG5cIjAwMDEwMDAwXCIsXHJcblwiMDAxMDEwMDBcIixcclxuXCIwMDAwMDEwMFwiLFxyXG5cIjAwMDAwMDEwXCIsXHJcblwiMDAwMDAwMTBcIixcclxuXCIwMDAwMDAwMFwiLFxyXG5cIjAwMDAwMDAwXCJcclxuXSxcclxuLy8gIzB4MGFjIFxyXG5bIFxyXG5cIjAwMDAwMDAwXCIsXHJcblwiMDAxMDAwMDBcIixcclxuXCIwMDEwMDAwMFwiLFxyXG5cIjAwMTAwMDEwXCIsXHJcblwiMDAxMDAxMDBcIixcclxuXCIwMDEwMTAwMFwiLFxyXG5cIjAwMTEwMDAwXCIsXHJcblwiMDAwMDAwMDBcIlxyXG5dLFxyXG4vLyAjMHgwYWQgXHJcblsgXHJcblwiMDAwMDAwMDBcIixcclxuXCIwMDAwMDAxMFwiLFxyXG5cIjAwMDAwMDEwXCIsXHJcblwiMDAwMTAxMDBcIixcclxuXCIwMDAwMTAwMFwiLFxyXG5cIjAwMDEwMTAwXCIsXHJcblwiMDAxMDAwMDBcIixcclxuXCIwMDAwMDAwMFwiXHJcbl0sXHJcbi8vICMweDBhZSBcclxuWyBcclxuXCIwMDAwMDAwMFwiLFxyXG5cIjAwMDAxMDAwXCIsXHJcblwiMDAxMDEwMDBcIixcclxuXCIwMDEwMTAwMFwiLFxyXG5cIjAwMTAxMDEwXCIsXHJcblwiMDAxMDEwMTBcIixcclxuXCIwMDEwMTEwMFwiLFxyXG5cIjAwMDAwMDAwXCJcclxuXSxcclxuLy8gIzB4MGFmIFxyXG5bIFxyXG5cIjAwMDAxMDAwXCIsXHJcblwiMDAxMTExMTBcIixcclxuXCIwMDAwMDEwMFwiLFxyXG5cIjAwMDAxMDAwXCIsXHJcblwiMDAwMTExMDBcIixcclxuXCIwMDEwMTAxMFwiLFxyXG5cIjAwMDAxMDAwXCIsXHJcblwiMDAwMDAwMDBcIlxyXG5dLFxyXG4vLyAjMHgwYjAgXHJcblsgXHJcblwiMDAwMDAwMDBcIixcclxuXCIwMDAwMTAwMFwiLFxyXG5cIjAwMDEwMDAwXCIsXHJcblwiMDAxMDAwMDBcIixcclxuXCIwMDEwMDAxMFwiLFxyXG5cIjAwMTExMTEwXCIsXHJcblwiMDAwMDAwMTBcIixcclxuXCIwMDAwMDAwMFwiXHJcbl0sXHJcbi8vICMweDBiMSBcclxuWyBcclxuXCIwMDAwMDAwMFwiLFxyXG5cIjAwMDAwMDAwXCIsXHJcblwiMDAwMDAwMDBcIixcclxuXCIwMDAwMTAwMFwiLFxyXG5cIjAwMDAxMDAwXCIsXHJcblwiMDAwMDEwMDBcIixcclxuXCIwMTExMTAwMFwiLFxyXG5cIjAwMDAwMDAwXCJcclxuXSxcclxuLy8gIzB4MGIyIFxyXG5bIFxyXG5cIjAwMDAwMDAwXCIsXHJcblwiMDAwMDAwMDBcIixcclxuXCIwMDAwMDEwMFwiLFxyXG5cIjAwMDAxMDAwXCIsXHJcblwiMDAwMTEwMDBcIixcclxuXCIwMDEwMTAwMFwiLFxyXG5cIjAwMDAxMDAwXCIsXHJcblwiMDAwMDAwMDBcIlxyXG5dLFxyXG4vLyAjMHgwYjMgXHJcblsgXHJcblwiMDAwMDAwMDBcIixcclxuXCIwMDAwMDAwMFwiLFxyXG5cIjAwMDAwMDAwXCIsXHJcblwiMDAwMTExMDBcIixcclxuXCIwMDAwMDEwMFwiLFxyXG5cIjAwMDAwMTAwXCIsXHJcblwiMDAxMTExMTBcIixcclxuXCIwMDAwMDAwMFwiXHJcbl0sXHJcbi8vICMweDBiNCBcclxuWyBcclxuXCIwMDAwMDAwMFwiLFxyXG5cIjAwMTExMTEwXCIsXHJcblwiMDAwMDAwMTBcIixcclxuXCIwMDExMTExMFwiLFxyXG5cIjAwMDAwMDEwXCIsXHJcblwiMDAwMDAxMDBcIixcclxuXCIwMDAwMTAwMFwiLFxyXG5cIjAwMDAwMDAwXCJcclxuXSxcclxuLy8gIzB4MGI1IFxyXG5bIFxyXG5cIjAwMDAwMDAwXCIsXHJcblwiMDAwMDAwMDBcIixcclxuXCIwMDAwMDAwMFwiLFxyXG5cIjAwMDAwMDAwXCIsXHJcblwiMDEwMDAwMDBcIixcclxuXCIwMDEwMDAwMFwiLFxyXG5cIjAwMDEwMDAwXCIsXHJcblwiMDAwMDAwMDBcIlxyXG5dLFxyXG4vLyAjMHgwYjYgXHJcblsgXHJcblwiMDAwMDAwMDBcIixcclxuXCIwMDAwMDAwMFwiLFxyXG5cIjAwMDAxMDAwXCIsXHJcblwiMDAxMTExMTBcIixcclxuXCIwMDEwMDAxMFwiLFxyXG5cIjAwMDAwMDEwXCIsXHJcblwiMDAwMDExMDBcIixcclxuXCIwMDAwMDAwMFwiXHJcbl0sXHJcbi8vICMweDBiNyBcclxuWyBcclxuXCIwMDAwMDAwMFwiLFxyXG5cIjAwMDAwMDAwXCIsXHJcblwiMDAxMTExMDBcIixcclxuXCIwMDAwMDEwMFwiLFxyXG5cIjAwMTExMTAwXCIsXHJcblwiMDAwMDAxMDBcIixcclxuXCIwMDExMTEwMFwiLFxyXG5cIjAwMDAwMDAwXCJcclxuXSxcclxuLy8gIzB4MGI4IFxyXG5bIFxyXG5cIjAxMTEwMDAwXCIsXHJcblwiMDEwMTAwMDBcIixcclxuXCIwMTExMDAwMFwiLFxyXG5cIjAwMDAwMDAwXCIsXHJcblwiMDAwMDAwMDBcIixcclxuXCIwMDAwMDAwMFwiLFxyXG5cIjAwMDAwMDAwXCIsXHJcblwiMDAwMDAwMDBcIlxyXG5dLFxyXG4vLyAjMHgwYjkgXHJcblsgXHJcblwiMDAwMDAwMDBcIixcclxuXCIwMDAwMDAwMFwiLFxyXG5cIjAwMDAwMDAwXCIsXHJcblwiMDAwMDAwMDBcIixcclxuXCIwMDAwMDAwMFwiLFxyXG5cIjAwMDAwMDAwXCIsXHJcblwiMDAxMDAwMDBcIixcclxuXCIwMDAwMDAwMFwiXHJcbl0sXHJcbi8vICMweDBiYSBcclxuWyBcclxuXCIwMDAwMDAwMFwiLFxyXG5cIjAwMDAwMDAwXCIsXHJcblwiMDAwMDAwMDBcIixcclxuXCIwMDExMTExMFwiLFxyXG5cIjAwMDAxMDAwXCIsXHJcblwiMDAwMDEwMDBcIixcclxuXCIwMDExMTExMFwiLFxyXG5cIjAwMDAwMDAwXCJcclxuXSxcclxuLy8gIzB4MGJiIFxyXG5bIFxyXG5cIjAwMDAwMDAwXCIsXHJcblwiMDAwMDAwMDBcIixcclxuXCIwMDAwMDAwMFwiLFxyXG5cIjAwMTAxMDEwXCIsXHJcblwiMDAxMDEwMTBcIixcclxuXCIwMDAwMDAxMFwiLFxyXG5cIjAwMDAxMTAwXCIsXHJcblwiMDAwMDAwMDBcIlxyXG5dLFxyXG4vLyAjMHgwYmMgXHJcblsgXHJcblwiMDAwMTAwMDBcIixcclxuXCIwMTAwMTAwMFwiLFxyXG5cIjAwMTAwMDAwXCIsXHJcblwiMDAwMDAwMDBcIixcclxuXCIwMDAwMDAwMFwiLFxyXG5cIjAwMDAwMDAwXCIsXHJcblwiMDAwMDAwMDBcIixcclxuXCIwMDAwMDAwMFwiXHJcbl0sXHJcbi8vICMweDBiZCBcclxuWyBcclxuXCIwMDAwMDAwMFwiLFxyXG5cIjAwMDAwMDAwXCIsXHJcblwiMDAwMDAwMDBcIixcclxuXCIwMDAwMDAwMFwiLFxyXG5cIjAxMTEwMDAwXCIsXHJcblwiMDEwMTAwMDBcIixcclxuXCIwMTExMDAwMFwiLFxyXG5cIjAwMDAwMDAwXCJcclxuXSxcclxuLy8gIzB4MGJlIFxyXG5bIFxyXG5cIjAwMDAwMDAwXCIsXHJcblwiMDAwMDAwMDBcIixcclxuXCIwMDAwMDEwMFwiLFxyXG5cIjAwMTExMTEwXCIsXHJcblwiMDAwMDExMDBcIixcclxuXCIwMDAxMDEwMFwiLFxyXG5cIjAwMTAwMTAwXCIsXHJcblwiMDAwMDAwMDBcIlxyXG5dLFxyXG4vLyAjMHgwYmYgXHJcblsgXHJcblwiMDAwMDAwMDBcIixcclxuXCIwMDAwMDAwMFwiLFxyXG5cIjAwMDAwMDAwXCIsXHJcblwiMDAwMTExMDBcIixcclxuXCIwMDAwMDAwMFwiLFxyXG5cIjAwMDAwMDAwXCIsXHJcblwiMDAwMDAwMDBcIixcclxuXCIwMDAwMDAwMFwiXHJcbl0sXHJcbi8vICMweDBjMCBcclxuWyBcclxuXCIwMDAxMTEwMFwiLFxyXG5cIjAwMDExMTAwXCIsXHJcblwiMDAxMTExMTBcIixcclxuXCIwMDAxMTEwMFwiLFxyXG5cIjAwMDAxMDAwXCIsXHJcblwiMDAwMDAwMDBcIixcclxuXCIwMDExMTExMFwiLFxyXG5cIjAwMDAwMDAwXCJcclxuXSxcclxuLy8gIzB4MGMxIFxyXG5bIFxyXG5cIjExMTExMTExXCIsXHJcblwiMTExMTAxMTFcIixcclxuXCIxMTExMDExMVwiLFxyXG5cIjExMTEwMTExXCIsXHJcblwiMTEwMTAxMDFcIixcclxuXCIxMTEwMDAxMVwiLFxyXG5cIjExMTEwMTExXCIsXHJcblwiMTExMTExMTFcIlxyXG5dLFxyXG4vLyAjMHgwYzIgXHJcblsgXHJcblwiMTExMTExMTFcIixcclxuXCIxMTExMDExMVwiLFxyXG5cIjExMTAwMDExXCIsXHJcblwiMTEwMTAxMDFcIixcclxuXCIxMTExMDExMVwiLFxyXG5cIjExMTEwMTExXCIsXHJcblwiMTExMTAxMTFcIixcclxuXCIxMTExMTExMVwiXHJcbl0sXHJcbi8vICMweDBjMyBcclxuWyBcclxuXCIxMTExMTExMVwiLFxyXG5cIjExMTExMTExXCIsXHJcblwiMTExMTAxMTFcIixcclxuXCIxMTExMTAxMVwiLFxyXG5cIjEwMDAwMDAxXCIsXHJcblwiMTExMTEwMTFcIixcclxuXCIxMTExMDExMVwiLFxyXG5cIjExMTExMTExXCJcclxuXSxcclxuLy8gIzB4MGM0IFxyXG5bIFxyXG5cIjExMTExMTExXCIsXHJcblwiMTExMTExMTFcIixcclxuXCIxMTEwMTExMVwiLFxyXG5cIjExMDExMTExXCIsXHJcblwiMTAwMDAwMDFcIixcclxuXCIxMTAxMTExMVwiLFxyXG5cIjExMTAxMTExXCIsXHJcblwiMTExMTExMTFcIlxyXG5dLFxyXG4vLyAjMHgwYzUgXHJcblsgXHJcblwiMTAxMTEwMTFcIixcclxuXCIxMDExMTAxMVwiLFxyXG5cIjEwMTExMDExXCIsXHJcblwiMTAwMDAwMTFcIixcclxuXCIxMDExMTAxMVwiLFxyXG5cIjEwMTExMDExXCIsXHJcblwiMTAxMTEwMTFcIixcclxuXCIxMTExMTExMVwiXHJcbl0sXHJcbi8vICMweDBjNiBcclxuWyBcclxuXCIxMTEwMDAxMVwiLFxyXG5cIjExMDExMTAxXCIsXHJcblwiMTAxMTExMTFcIixcclxuXCIxMDExMTExMVwiLFxyXG5cIjEwMTExMTExXCIsXHJcblwiMTEwMTExMDFcIixcclxuXCIxMTEwMDAxMVwiLFxyXG5cIjExMTExMTExXCJcclxuXSxcclxuLy8gIzB4MGM3IFxyXG5bIFxyXG5cIjAwMDExMDAwXCIsXHJcblwiMDAxMDAxMDBcIixcclxuXCIwMTExMTExMFwiLFxyXG5cIjExMTExMTExXCIsXHJcblwiMDEwMTEwMTBcIixcclxuXCIwMDEwMDEwMFwiLFxyXG5cIjAwMDAwMDAwXCIsXHJcblwiMDAwMDAwMDBcIlxyXG5dLFxyXG4vLyAjMHgwYzggXHJcblsgXHJcblwiMTExMDAwMDBcIixcclxuXCIwMTAwMDExMVwiLFxyXG5cIjAxMDAwMDEwXCIsXHJcblwiMDExMTExMTBcIixcclxuXCIwMTAwMDAxMFwiLFxyXG5cIjAxMDAwMTExXCIsXHJcblwiMTExMDAwMDBcIixcclxuXCIwMDAwMDAwMFwiXHJcbl0sXHJcbi8vICMweDBjOSBcclxuWyBcclxuXCIwMDEwMDAxMFwiLFxyXG5cIjAwMTExMTEwXCIsXHJcblwiMDAxMDEwMTBcIixcclxuXCIwMDAwMTAwMFwiLFxyXG5cIjAwMDAxMDAwXCIsXHJcblwiMDEwMDEwMDFcIixcclxuXCIwMTExMTExMVwiLFxyXG5cIjAxMDAwMDAxXCJcclxuXSxcclxuLy8gIzB4MGNhIFxyXG5bIFxyXG5cIjAwMDExMTAwXCIsXHJcblwiMDAwMTExMDBcIixcclxuXCIwMDAwMTAwMFwiLFxyXG5cIjAwMTExMTEwXCIsXHJcblwiMDAwMDEwMDBcIixcclxuXCIwMDAwMTAwMFwiLFxyXG5cIjAwMDEwMTAwXCIsXHJcblwiMDAxMDAwMTBcIlxyXG5dLFxyXG4vLyAjMHgwY2IgXHJcblsgXHJcblwiMDAwMDAwMDBcIixcclxuXCIwMDAxMDAwMVwiLFxyXG5cIjExMDEwMDEwXCIsXHJcblwiMTExMTExMDBcIixcclxuXCIxMTAxMDAxMFwiLFxyXG5cIjAwMDEwMDAxXCIsXHJcblwiMDAwMDAwMDBcIixcclxuXCIwMDAwMDAwMFwiXHJcbl0sXHJcbi8vICMweDBjYyBcclxuWyBcclxuXCIwMDAwMDAwMFwiLFxyXG5cIjEwMDAxMDAwXCIsXHJcblwiMDEwMDEwMTFcIixcclxuXCIwMDExMTExMVwiLFxyXG5cIjAxMDAxMDExXCIsXHJcblwiMTAwMDEwMDBcIixcclxuXCIwMDAwMDAwMFwiLFxyXG5cIjAwMDAwMDAwXCJcclxuXSxcclxuLy8gIzB4MGNkIFxyXG5bIFxyXG5cIjAwMTAwMDEwXCIsXHJcblwiMDAwMTAxMDBcIixcclxuXCIwMDAwMTAwMFwiLFxyXG5cIjAwMDAxMDAwXCIsXHJcblwiMDAxMTExMTBcIixcclxuXCIwMDAwMTAwMFwiLFxyXG5cIjAwMDExMTAwXCIsXHJcblwiMDAwMTExMDBcIlxyXG5dLFxyXG4vLyAjMHgwY2UgXHJcblsgXHJcblwiMDAxMTExMDBcIixcclxuXCIwMTExMTExMFwiLFxyXG5cIjExMTExMTExXCIsXHJcblwiMTEwMTEwMTFcIixcclxuXCIxMTExMTExMVwiLFxyXG5cIjExMTAwMTExXCIsXHJcblwiMDExMTExMTBcIixcclxuXCIwMDExMTEwMFwiXHJcbl0sXHJcbi8vICMweDBjZiBcclxuWyBcclxuXCIwMDExMTEwMFwiLFxyXG5cIjAxMDAwMDEwXCIsXHJcblwiMTAwMDAwMDFcIixcclxuXCIxMDEwMDEwMVwiLFxyXG5cIjEwMDAwMDAxXCIsXHJcblwiMTAwMTEwMDFcIixcclxuXCIwMTAwMDAxMFwiLFxyXG5cIjAwMTExMTAwXCJcclxuXSxcclxuLy8gIzB4MGQwIFxyXG5bIFxyXG5cIjAwMTExMTEwXCIsXHJcblwiMDAxMDAwMTBcIixcclxuXCIwMDEwMDAxMFwiLFxyXG5cIjAwMTExMTEwXCIsXHJcblwiMDAxMDAwMTBcIixcclxuXCIwMDEwMDAxMFwiLFxyXG5cIjAwMTExMTEwXCIsXHJcblwiMDAwMDAwMDBcIlxyXG5dLFxyXG4vLyAjMHgwZDEgXHJcblsgXHJcblwiMDAxMTExMTBcIixcclxuXCIwMDEwMDAxMFwiLFxyXG5cIjAwMTExMTEwXCIsXHJcblwiMDAxMDAwMTBcIixcclxuXCIwMDExMTExMFwiLFxyXG5cIjAwMTAwMDEwXCIsXHJcblwiMDEwMDAwMTBcIixcclxuXCIwMDAwMDAwMFwiXHJcbl0sXHJcbi8vICMweDBkMiBcclxuWyBcclxuXCIwMDAwMTAwMFwiLFxyXG5cIjAwMTAxMDEwXCIsXHJcblwiMDAxMDEwMTBcIixcclxuXCIwMDAwMTAwMFwiLFxyXG5cIjAwMDEwMTAwXCIsXHJcblwiMDAxMDAwMTBcIixcclxuXCIwMTAwMDAwMVwiLFxyXG5cIjAwMDAwMDAwXCJcclxuXSxcclxuLy8gIzB4MGQzIFxyXG5bIFxyXG5cIjAwMDAxMDAwXCIsXHJcblwiMDAwMDEwMDFcIixcclxuXCIwMDExMTAxMFwiLFxyXG5cIjAwMDAxMTAwXCIsXHJcblwiMDAwMTExMDBcIixcclxuXCIwMDEwMTAxMFwiLFxyXG5cIjAxMDAxMDAxXCIsXHJcblwiMDAwMDAwMDBcIlxyXG5dLFxyXG4vLyAjMHgwZDQgXHJcblsgXHJcblwiMDAwMDEwMDBcIixcclxuXCIwMDAwMTAwMFwiLFxyXG5cIjAwMTExMTEwXCIsXHJcblwiMDAwMDEwMDBcIixcclxuXCIwMDAxMTEwMFwiLFxyXG5cIjAwMTAxMDEwXCIsXHJcblwiMDEwMDEwMDFcIixcclxuXCIwMDAwMDAwMFwiXHJcbl0sXHJcbi8vICMweDBkNSBcclxuWyBcclxuXCIwMDAwMTAwMFwiLFxyXG5cIjAwMDEwMTAwXCIsXHJcblwiMDAxMTExMTBcIixcclxuXCIwMTAwMTAwMVwiLFxyXG5cIjAwMTExMTEwXCIsXHJcblwiMDAwMTExMDBcIixcclxuXCIwMTExMTExMVwiLFxyXG5cIjAwMDAwMDAwXCJcclxuXSxcclxuLy8gIzB4MGQ2IFxyXG5bIFxyXG5cIjAwMDAwMDAwXCIsXHJcblwiMDAwMDEwMDBcIixcclxuXCIwMDAwMTAwMFwiLFxyXG5cIjAwMTExMTEwXCIsXHJcblwiMDAwMDEwMDBcIixcclxuXCIwMDAwMTAwMFwiLFxyXG5cIjAxMTExMTExXCIsXHJcblwiMDAwMDAwMDBcIlxyXG5dLFxyXG4vLyAjMHgwZDcgXHJcblsgXHJcblwiMDAwMDEwMDBcIixcclxuXCIwMTAwMTAwMFwiLFxyXG5cIjAxMTExMTEwXCIsXHJcblwiMDEwMDEwMDBcIixcclxuXCIwMDExMTExMFwiLFxyXG5cIjAwMDAxMDAwXCIsXHJcblwiMDExMTExMTFcIixcclxuXCIwMDAwMDAwMFwiXHJcbl0sXHJcbi8vICMweDBkOCBcclxuWyBcclxuXCIwMDEwMDAwMFwiLFxyXG5cIjAwMTExMTEwXCIsXHJcblwiMDEwMDEwMDBcIixcclxuXCIwMDExMTEwMFwiLFxyXG5cIjAwMTAxMDAwXCIsXHJcblwiMDExMTExMTBcIixcclxuXCIwMDAwMTAwMFwiLFxyXG5cIjAwMDAwMDAwXCJcclxuXSxcclxuLy8gIzB4MGQ5IFxyXG5bIFxyXG5cIjAwMDAwMTAwXCIsXHJcblwiMDExMTExMTBcIixcclxuXCIwMTAxMDEwMFwiLFxyXG5cIjAxMTExMTExXCIsXHJcblwiMDEwMTAwMTBcIixcclxuXCIwMTExMTExMVwiLFxyXG5cIjAwMDAxMDEwXCIsXHJcblwiMDAwMDAwMDBcIlxyXG5dLFxyXG4vLyAjMHgwZGEgXHJcblsgXHJcblwiMDAwMDEwMDBcIixcclxuXCIwMDAxMDEwMFwiLFxyXG5cIjAwMTAwMDEwXCIsXHJcblwiMDExMTExMTFcIixcclxuXCIwMDAxMDAxMFwiLFxyXG5cIjAwMDEwMDEwXCIsXHJcblwiMDAxMDAxMDBcIixcclxuXCIwMDAwMDAwMFwiXHJcbl0sXHJcbi8vICMweDBkYiBcclxuWyBcclxuXCIwMDExMTAwMFwiLFxyXG5cIjAwMDEwMDEwXCIsXHJcblwiMDExMTExMTFcIixcclxuXCIwMDAxMDExMVwiLFxyXG5cIjAwMTExMDExXCIsXHJcblwiMDEwMTAwMTBcIixcclxuXCIwMDAxMDEwMFwiLFxyXG5cIjAwMDAwMDAwXCJcclxuXSxcclxuLy8gIzB4MGRjIFxyXG5bIFxyXG5cIjAxMTExMTExXCIsXHJcblwiMDEwMDEwMDFcIixcclxuXCIwMTAwMTAwMVwiLFxyXG5cIjAxMTExMTExXCIsXHJcblwiMDEwMDAwMDFcIixcclxuXCIwMTAwMDAwMVwiLFxyXG5cIjAxMDAwMDAxXCIsXHJcblwiMDAwMDAwMDBcIlxyXG5dLFxyXG4vLyAjMHgwZGQgXHJcblsgXHJcblwiMDAxMDAwMTBcIixcclxuXCIwMDAxMDEwMFwiLFxyXG5cIjAwMTExMTEwXCIsXHJcblwiMDAwMDEwMDBcIixcclxuXCIwMDExMTExMFwiLFxyXG5cIjAwMDAxMDAwXCIsXHJcblwiMDAwMDEwMDBcIixcclxuXCIwMDAwMDAwMFwiXHJcbl0sXHJcbi8vICMweDBkZSBcclxuWyBcclxuXCIwMDAwMTEwMFwiLFxyXG5cIjAwMDEwMDEwXCIsXHJcblwiMDAwMTAwMDBcIixcclxuXCIwMDExMTAwMFwiLFxyXG5cIjAwMDEwMDAwXCIsXHJcblwiMDAwMTAwMDBcIixcclxuXCIwMDExMTExMFwiLFxyXG5cIjAwMDAwMDAwXCJcclxuXSxcclxuLy8gIzB4MGRmIFxyXG5bIFxyXG5cIjAwMDAwMDAwXCIsXHJcblwiMTEwMDAwMDBcIixcclxuXCIxMTAwMTAwMFwiLFxyXG5cIjAxMDEwMTAwXCIsXHJcblwiMDEwMTAxMDBcIixcclxuXCIwMTAxMDEwMVwiLFxyXG5cIjAwMTAwMDEwXCIsXHJcblwiMDAwMDAwMDBcIlxyXG5dLFxyXG4vLyAjMHgwZTAgXHJcblsgXHJcblwiMDAwMDAwMDBcIixcclxuXCIwMDAwMDAwMFwiLFxyXG5cIjAwMDAwMDAwXCIsXHJcblwiMDAwMDAwMDBcIixcclxuXCIwMDAwMDAwMFwiLFxyXG5cIjAwMDAwMDEwXCIsXHJcblwiMTExMTExMTFcIixcclxuXCIwMDAwMDAxMFwiXHJcbl0sXHJcbi8vICMweDBlMSBcclxuWyBcclxuXCIwMDAwMDAxMFwiLFxyXG5cIjAwMDAwMDEwXCIsXHJcblwiMDAwMDAwMTBcIixcclxuXCIwMDAwMDAxMFwiLFxyXG5cIjAwMDAwMDEwXCIsXHJcblwiMDAwMDAwMTBcIixcclxuXCIwMDAwMDExMVwiLFxyXG5cIjAwMDAwMDEwXCJcclxuXSxcclxuLy8gIzB4MGUyIFxyXG5bIFxyXG5cIjAwMDAwMDEwXCIsXHJcblwiMDAwMDAwMTBcIixcclxuXCIwMDAwMDAxMFwiLFxyXG5cIjAwMDAwMDEwXCIsXHJcblwiMDAwMDAwMTBcIixcclxuXCIwMDAwMDAxMFwiLFxyXG5cIjExMTExMTExXCIsXHJcblwiMDAwMDAwMTBcIlxyXG5dLFxyXG4vLyAjMHgwZTMgXHJcblsgXHJcblwiMDAwMDAwMDBcIixcclxuXCIwMDAwMDAwMFwiLFxyXG5cIjAwMTAwMDAwXCIsXHJcblwiMDEwMTAwMDBcIixcclxuXCIxMDAwMTAwMFwiLFxyXG5cIjAwMDAwMTAxXCIsXHJcblwiMDAwMDAwMTBcIixcclxuXCIwMDAwMDAwMFwiXHJcbl0sXHJcbi8vICMweDBlNCBcclxuWyBcclxuXCIwMDAwMDAwMFwiLFxyXG5cIjAwMDAxMTEwXCIsXHJcblwiMDAwMTAwMDFcIixcclxuXCIwMDEwMDAxMFwiLFxyXG5cIjExMDAwMTAwXCIsXHJcblwiMDAwMDAxMDBcIixcclxuXCIwMDAwMDAxMFwiLFxyXG5cIjAwMDAwMDAxXCJcclxuXSxcclxuLy8gIzB4MGU1IFxyXG5bIFxyXG5cIjAwMDAwMDAwXCIsXHJcblwiMTExMTExMTFcIixcclxuXCIwMDAwMDAwMFwiLFxyXG5cIjEwMDAwMDAxXCIsXHJcblwiMDEwMDAwMTBcIixcclxuXCIwMTAwMDAxMFwiLFxyXG5cIjEwMDAwMDAxXCIsXHJcblwiMDAwMDAwMDBcIlxyXG5dLFxyXG4vLyAjMHgwZTYgXHJcblsgXHJcblwiMDAwMDAwMDBcIixcclxuXCIwMTExMDAwMFwiLFxyXG5cIjEwMDAxMDAwXCIsXHJcblwiMDEwMDAxMDBcIixcclxuXCIwMDEwMDAxMVwiLFxyXG5cIjAwMTAwMDAwXCIsXHJcblwiMDEwMDAwMDBcIixcclxuXCIxMDAwMDAwMFwiXHJcbl0sXHJcbi8vICMweDBlNyBcclxuWyBcclxuXCIwMDAwMDAwMFwiLFxyXG5cIjExMDAwMTAwXCIsXHJcblwiMTAxMDAxMDBcIixcclxuXCIxMDAxMDEwMFwiLFxyXG5cIjEwMDAxMTExXCIsXHJcblwiMTAwMTAxMDBcIixcclxuXCIxMDEwMDEwMFwiLFxyXG5cIjExMDAwMTAwXCJcclxuXSxcclxuLy8gIzB4MGU4IFxyXG5bIFxyXG5cIjAwMDAwMDAwXCIsXHJcblwiMDAxMDAwMTFcIixcclxuXCIwMDEwMDEwMVwiLFxyXG5cIjAwMTAxMDAxXCIsXHJcblwiMTExMTAwMDFcIixcclxuXCIwMDEwMTAwMVwiLFxyXG5cIjAwMTAwMTAxXCIsXHJcblwiMDAxMDAwMTFcIlxyXG5dLFxyXG4vLyAjMHgwZTkgXHJcblsgXHJcblwiMTAwMDEwMDBcIixcclxuXCIxMDAxMDAwMFwiLFxyXG5cIjEwMTAwMDAwXCIsXHJcblwiMTEwMDAwMDBcIixcclxuXCIxMTAwMDAwMFwiLFxyXG5cIjEwMTAxMDAwXCIsXHJcblwiMTAwMTEwMDBcIixcclxuXCIxMDExMTAwMFwiXHJcbl0sXHJcbi8vICMweDBlYSBcclxuWyBcclxuXCIxMDEwMTAwMFwiLFxyXG5cIjEwMTEwMDAwXCIsXHJcblwiMTAxMTEwMDBcIixcclxuXCIxMTAwMDAwMFwiLFxyXG5cIjExMDAwMDAwXCIsXHJcblwiMTAxMDAwMDBcIixcclxuXCIxMDAxMDAwMFwiLFxyXG5cIjEwMDAxMDAwXCJcclxuXSxcclxuLy8gIzB4MGViIFxyXG5bIFxyXG5cIjEwMDAwMDAwXCIsXHJcblwiMDEwMDAwMDBcIixcclxuXCIwMDEwMDAwMFwiLFxyXG5cIjAwMDEwMDAwXCIsXHJcblwiMDAwMTExMTFcIixcclxuXCIwMDEwMDAwMFwiLFxyXG5cIjAxMDAwMDAwXCIsXHJcblwiMTAwMDAwMDBcIlxyXG5dLFxyXG4vLyAjMHgwZWMgXHJcblsgXHJcblwiMDAwMDAwMDBcIixcclxuXCIwMDAwMDAwMFwiLFxyXG5cIjAwMTAwMTAwXCIsXHJcblwiMDAxMDAxMDBcIixcclxuXCIxMTEwMDExMVwiLFxyXG5cIjAwMTAwMTAwXCIsXHJcblwiMDAxMDAxMDBcIixcclxuXCIwMDAwMDAwMFwiXHJcbl0sXHJcbi8vICMweDBlZCBcclxuWyBcclxuXCIwMDAwMTAwMFwiLFxyXG5cIjAwMDAxMDAwXCIsXHJcblwiMDAxMTExMTBcIixcclxuXCIwMDAwMDAwMFwiLFxyXG5cIjAwMDAwMDAwXCIsXHJcblwiMDAxMTExMTBcIixcclxuXCIwMDAwMTAwMFwiLFxyXG5cIjAwMDAxMDAwXCJcclxuXSxcclxuLy8gIzB4MGVlIFxyXG5bIFxyXG5cIjAwMDAxMDAwXCIsXHJcblwiMDAwMTAwMDBcIixcclxuXCIwMDEwMDAwMFwiLFxyXG5cIjAwMDEwMDAwXCIsXHJcblwiMDAwMDEwMDBcIixcclxuXCIwMDAwMDEwMFwiLFxyXG5cIjAwMDAwMDEwXCIsXHJcblwiMDAwMDAxMDBcIlxyXG5dLFxyXG4vLyAjMHgwZWYgXHJcblsgXHJcblwiMDEwMTAxMDFcIixcclxuXCIxMDEwMTAxMFwiLFxyXG5cIjAxMDEwMTAxXCIsXHJcblwiMTAxMDEwMTBcIixcclxuXCIwMTAxMDEwMVwiLFxyXG5cIjEwMTAxMDEwXCIsXHJcblwiMDEwMTAxMDFcIixcclxuXCIxMDEwMTAxMFwiXHJcbl0sXHJcbi8vICMweDBmMCBcclxuWyBcclxuXCIwMDAwMDAwMFwiLFxyXG5cIjAwMDAwMDAwXCIsXHJcblwiMDAwMDAwMDBcIixcclxuXCIwMDAwMDAwMFwiLFxyXG5cIjAwMDAwMDAwXCIsXHJcblwiMDAwMDAwMDBcIixcclxuXCIwMDAwMDAwMFwiLFxyXG5cIjAwMDAwMDAwXCJcclxuXSxcclxuLy8gIzB4MGYxIFxyXG5bIFxyXG5cIjAwMDAwMDAwXCIsXHJcblwiMDExMTAwMDBcIixcclxuXCIwMTExMDAwMFwiLFxyXG5cIjAxMTEwMDAwXCIsXHJcblwiMDAwMDAwMDBcIixcclxuXCIwMDAwMDAwMFwiLFxyXG5cIjAwMDAwMDAwXCIsXHJcblwiMDAwMDAwMDBcIlxyXG5dLFxyXG4vLyAjMHgwZjIgXHJcblsgXHJcblwiMDAwMDAwMDBcIixcclxuXCIwMDAwMDExMVwiLFxyXG5cIjAwMDAwMTExXCIsXHJcblwiMDAwMDAxMTFcIixcclxuXCIwMDAwMDAwMFwiLFxyXG5cIjAwMDAwMDAwXCIsXHJcblwiMDAwMDAwMDBcIixcclxuXCIwMDAwMDAwMFwiXHJcbl0sXHJcbi8vICMweDBmMyBcclxuWyBcclxuXCIwMDAwMDAwMFwiLFxyXG5cIjAxMTEwMTExXCIsXHJcblwiMDExMTAxMTFcIixcclxuXCIwMTExMDExMVwiLFxyXG5cIjAwMDAwMDAwXCIsXHJcblwiMDAwMDAwMDBcIixcclxuXCIwMDAwMDAwMFwiLFxyXG5cIjAwMDAwMDAwXCJcclxuXSxcclxuLy8gIzB4MGY0IFxyXG5bIFxyXG5cIjAwMDAwMDAwXCIsXHJcblwiMDAwMDAwMDBcIixcclxuXCIwMDAwMDAwMFwiLFxyXG5cIjAwMDAwMDAwXCIsXHJcblwiMDAwMDAwMDBcIixcclxuXCIwMTExMDAwMFwiLFxyXG5cIjAxMTEwMDAwXCIsXHJcblwiMDExMTAwMDBcIlxyXG5dLFxyXG4vLyAjMHgwZjUgXHJcblsgXHJcblwiMDAwMDAwMDBcIixcclxuXCIwMTExMDAwMFwiLFxyXG5cIjAxMTEwMDAwXCIsXHJcblwiMDExMTAwMDBcIixcclxuXCIwMDAwMDAwMFwiLFxyXG5cIjAxMTEwMDAwXCIsXHJcblwiMDExMTAwMDBcIixcclxuXCIwMTExMDAwMFwiXHJcbl0sXHJcbi8vICMweDBmNiBcclxuWyBcclxuXCIwMDAwMDAwMFwiLFxyXG5cIjAwMDAwMTExXCIsXHJcblwiMDAwMDAxMTFcIixcclxuXCIwMDAwMDExMVwiLFxyXG5cIjAwMDAwMDAwXCIsXHJcblwiMDExMTAwMDBcIixcclxuXCIwMTExMDAwMFwiLFxyXG5cIjAxMTEwMDAwXCJcclxuXSxcclxuLy8gIzB4MGY3IFxyXG5bIFxyXG5cIjAwMDAwMDAwXCIsXHJcblwiMDExMTAxMTFcIixcclxuXCIwMTExMDExMVwiLFxyXG5cIjAxMTEwMTExXCIsXHJcblwiMDAwMDAwMDBcIixcclxuXCIwMTExMDAwMFwiLFxyXG5cIjAxMTEwMDAwXCIsXHJcblwiMDExMTAwMDBcIlxyXG5dLFxyXG4vLyAjMHgwZjggXHJcblsgXHJcblwiMDAwMDAwMDBcIixcclxuXCIwMDAwMDAwMFwiLFxyXG5cIjAwMDAwMDAwXCIsXHJcblwiMDAwMDAwMDBcIixcclxuXCIwMDAwMDAwMFwiLFxyXG5cIjAwMDAwMTExXCIsXHJcblwiMDAwMDAxMTFcIixcclxuXCIwMDAwMDExMVwiXHJcbl0sXHJcbi8vICMweDBmOSBcclxuWyBcclxuXCIwMDAwMDAwMFwiLFxyXG5cIjAxMTEwMDAwXCIsXHJcblwiMDExMTAwMDBcIixcclxuXCIwMTExMDAwMFwiLFxyXG5cIjAwMDAwMDAwXCIsXHJcblwiMDAwMDAxMTFcIixcclxuXCIwMDAwMDExMVwiLFxyXG5cIjAwMDAwMTExXCJcclxuXSxcclxuLy8gIzB4MGZhIFxyXG5bIFxyXG5cIjAwMDAwMDAwXCIsXHJcblwiMDAwMDAxMTFcIixcclxuXCIwMDAwMDExMVwiLFxyXG5cIjAwMDAwMTExXCIsXHJcblwiMDAwMDAwMDBcIixcclxuXCIwMDAwMDExMVwiLFxyXG5cIjAwMDAwMTExXCIsXHJcblwiMDAwMDAxMTFcIlxyXG5dLFxyXG4vLyAjMHgwZmIgXHJcblsgXHJcblwiMDAwMDAwMDBcIixcclxuXCIwMTExMDExMVwiLFxyXG5cIjAxMTEwMTExXCIsXHJcblwiMDExMTAxMTFcIixcclxuXCIwMDAwMDAwMFwiLFxyXG5cIjAwMDAwMTExXCIsXHJcblwiMDAwMDAxMTFcIixcclxuXCIwMDAwMDExMVwiXHJcbl0sXHJcbi8vICMweDBmYyBcclxuWyBcclxuXCIwMDAwMDAwMFwiLFxyXG5cIjAwMDAwMDAwXCIsXHJcblwiMDAwMDAwMDBcIixcclxuXCIwMDAwMDAwMFwiLFxyXG5cIjAwMDAwMDAwXCIsXHJcblwiMDExMTAxMTFcIixcclxuXCIwMTExMDExMVwiLFxyXG5cIjAxMTEwMTExXCJcclxuXSxcclxuLy8gIzB4MGZkIFxyXG5bIFxyXG5cIjAwMDAwMDAwXCIsXHJcblwiMDExMTAwMDBcIixcclxuXCIwMTExMDAwMFwiLFxyXG5cIjAxMTEwMDAwXCIsXHJcblwiMDAwMDAwMDBcIixcclxuXCIwMTExMDExMVwiLFxyXG5cIjAxMTEwMTExXCIsXHJcblwiMDExMTAxMTFcIlxyXG5dLFxyXG4vLyAjMHgwZmUgXHJcblsgXHJcblwiMDAwMDAwMDBcIixcclxuXCIwMDAwMDExMVwiLFxyXG5cIjAwMDAwMTExXCIsXHJcblwiMDAwMDAxMTFcIixcclxuXCIwMDAwMDAwMFwiLFxyXG5cIjAxMTEwMTExXCIsXHJcblwiMDExMTAxMTFcIixcclxuXCIwMTExMDExMVwiXHJcbl0sXHJcbi8vICMweDBmZiBcclxuWyBcclxuXCIwMDAwMDAwMFwiLFxyXG5cIjAxMTEwMTExXCIsXHJcblwiMDExMTAxMTFcIixcclxuXCIwMTExMDExMVwiLFxyXG5cIjAwMDAwMDAwXCIsXHJcblwiMDExMTAxMTFcIixcclxuXCIwMTExMDExMVwiLFxyXG5cIjAxMTEwMTExXCJcclxuXSxcclxuLy8gIzB4MTAwIFxyXG5bIFxyXG5cIjAwMDAwMDAwXCIsXHJcblwiMDAwMDAwMDBcIixcclxuXCIwMDAwMDAwMFwiLFxyXG5cIjAwMDAwMDAwXCIsXHJcblwiMDAwMDAwMDBcIixcclxuXCIwMDAwMDAwMFwiLFxyXG5cIjAwMDAwMDAwXCIsXHJcblwiMDAwMDAwMDBcIlxyXG5dLFxyXG4vLyAjMHgxMDEgXHJcblsgXHJcblwiMDAwMDAwMDBcIixcclxuXCIwMDAwMDAwMFwiLFxyXG5cIjAwMTExMDAwXCIsXHJcblwiMDAwMDAxMDBcIixcclxuXCIwMDExMTEwMFwiLFxyXG5cIjAxMDAwMTAwXCIsXHJcblwiMDAxMTEwMTBcIixcclxuXCIwMDAwMDAwMFwiXHJcbl0sXHJcbi8vICMweDEwMiBcclxuWyBcclxuXCIwMTAwMDAwMFwiLFxyXG5cIjAxMDAwMDAwXCIsXHJcblwiMDEwMTExMDBcIixcclxuXCIwMTEwMDAxMFwiLFxyXG5cIjAxMDAwMDEwXCIsXHJcblwiMDExMDAwMTBcIixcclxuXCIwMTAxMTEwMFwiLFxyXG5cIjAwMDAwMDAwXCJcclxuXSxcclxuLy8gIzB4MTAzIFxyXG5bIFxyXG5cIjAwMDAwMDAwXCIsXHJcblwiMDAwMDAwMDBcIixcclxuXCIwMDExMTEwMFwiLFxyXG5cIjAxMDAwMDEwXCIsXHJcblwiMDEwMDAwMDBcIixcclxuXCIwMTAwMDAxMFwiLFxyXG5cIjAwMTExMTAwXCIsXHJcblwiMDAwMDAwMDBcIlxyXG5dLFxyXG4vLyAjMHgxMDQgXHJcblsgXHJcblwiMDAwMDAwMTBcIixcclxuXCIwMDAwMDAxMFwiLFxyXG5cIjAwMTExMDEwXCIsXHJcblwiMDEwMDAxMTBcIixcclxuXCIwMTAwMDAxMFwiLFxyXG5cIjAxMDAwMTEwXCIsXHJcblwiMDAxMTEwMTBcIixcclxuXCIwMDAwMDAwMFwiXHJcbl0sXHJcbi8vICMweDEwNSBcclxuWyBcclxuXCIwMDAwMDAwMFwiLFxyXG5cIjAwMDAwMDAwXCIsXHJcblwiMDAxMTExMDBcIixcclxuXCIwMTAwMDAxMFwiLFxyXG5cIjAxMTExMTEwXCIsXHJcblwiMDEwMDAwMDBcIixcclxuXCIwMDExMTEwMFwiLFxyXG5cIjAwMDAwMDAwXCJcclxuXSxcclxuLy8gIzB4MTA2IFxyXG5bIFxyXG5cIjAwMDAxMTAwXCIsXHJcblwiMDAwMTAwMTBcIixcclxuXCIwMDAxMDAwMFwiLFxyXG5cIjAxMTExMTAwXCIsXHJcblwiMDAwMTAwMDBcIixcclxuXCIwMDAxMDAwMFwiLFxyXG5cIjAwMDEwMDAwXCIsXHJcblwiMDAwMDAwMDBcIlxyXG5dLFxyXG4vLyAjMHgxMDcgXHJcblsgXHJcblwiMDAwMDAwMDBcIixcclxuXCIwMDAwMDAwMFwiLFxyXG5cIjAwMTExMDEwXCIsXHJcblwiMDEwMDAxMTBcIixcclxuXCIwMTAwMDExMFwiLFxyXG5cIjAwMTExMDEwXCIsXHJcblwiMDAwMDAwMTBcIixcclxuXCIwMDExMTEwMFwiXHJcbl0sXHJcbi8vICMweDEwOCBcclxuWyBcclxuXCIwMTAwMDAwMFwiLFxyXG5cIjAxMDAwMDAwXCIsXHJcblwiMDEwMTExMDBcIixcclxuXCIwMTEwMDAxMFwiLFxyXG5cIjAxMDAwMDEwXCIsXHJcblwiMDEwMDAwMTBcIixcclxuXCIwMTAwMDAxMFwiLFxyXG5cIjAwMDAwMDAwXCJcclxuXSxcclxuLy8gIzB4MTA5IFxyXG5bIFxyXG5cIjAwMDAxMDAwXCIsXHJcblwiMDAwMDAwMDBcIixcclxuXCIwMDAxMTAwMFwiLFxyXG5cIjAwMDAxMDAwXCIsXHJcblwiMDAwMDEwMDBcIixcclxuXCIwMDAwMTAwMFwiLFxyXG5cIjAwMDExMTAwXCIsXHJcblwiMDAwMDAwMDBcIlxyXG5dLFxyXG4vLyAjMHgxMGEgXHJcblsgXHJcblwiMDAwMDAxMDBcIixcclxuXCIwMDAwMDAwMFwiLFxyXG5cIjAwMDAxMTAwXCIsXHJcblwiMDAwMDAxMDBcIixcclxuXCIwMDAwMDEwMFwiLFxyXG5cIjAwMDAwMTAwXCIsXHJcblwiMDEwMDAxMDBcIixcclxuXCIwMDExMTAwMFwiXHJcbl0sXHJcbi8vICMweDEwYiBcclxuWyBcclxuXCIwMTAwMDAwMFwiLFxyXG5cIjAxMDAwMDAwXCIsXHJcblwiMDEwMDAxMDBcIixcclxuXCIwMTAwMTAwMFwiLFxyXG5cIjAxMDEwMDAwXCIsXHJcblwiMDExMDEwMDBcIixcclxuXCIwMTAwMDEwMFwiLFxyXG5cIjAwMDAwMDAwXCJcclxuXSxcclxuLy8gIzB4MTBjIFxyXG5bIFxyXG5cIjAwMDExMDAwXCIsXHJcblwiMDAwMDEwMDBcIixcclxuXCIwMDAwMTAwMFwiLFxyXG5cIjAwMDAxMDAwXCIsXHJcblwiMDAwMDEwMDBcIixcclxuXCIwMDAwMTAwMFwiLFxyXG5cIjAwMDExMTAwXCIsXHJcblwiMDAwMDAwMDBcIlxyXG5dLFxyXG4vLyAjMHgxMGQgXHJcblsgXHJcblwiMDAwMDAwMDBcIixcclxuXCIwMDAwMDAwMFwiLFxyXG5cIjAxMTEwMTEwXCIsXHJcblwiMDEwMDEwMDFcIixcclxuXCIwMTAwMTAwMVwiLFxyXG5cIjAxMDAxMDAxXCIsXHJcblwiMDEwMDEwMDFcIixcclxuXCIwMDAwMDAwMFwiXHJcbl0sXHJcbi8vICMweDEwZSBcclxuWyBcclxuXCIwMDAwMDAwMFwiLFxyXG5cIjAwMDAwMDAwXCIsXHJcblwiMDEwMTExMDBcIixcclxuXCIwMTEwMDAxMFwiLFxyXG5cIjAxMDAwMDEwXCIsXHJcblwiMDEwMDAwMTBcIixcclxuXCIwMTAwMDAxMFwiLFxyXG5cIjAwMDAwMDAwXCJcclxuXSxcclxuLy8gIzB4MTBmIFxyXG5bIFxyXG5cIjAwMDAwMDAwXCIsXHJcblwiMDAwMDAwMDBcIixcclxuXCIwMDExMTEwMFwiLFxyXG5cIjAxMDAwMDEwXCIsXHJcblwiMDEwMDAwMTBcIixcclxuXCIwMTAwMDAxMFwiLFxyXG5cIjAwMTExMTAwXCIsXHJcblwiMDAwMDAwMDBcIlxyXG5dLFxyXG4vLyAjMHgxMTAgXHJcblsgXHJcblwiMDAwMDAwMDBcIixcclxuXCIwMDAwMDAwMFwiLFxyXG5cIjAxMDExMTAwXCIsXHJcblwiMDExMDAwMTBcIixcclxuXCIwMTEwMDAxMFwiLFxyXG5cIjAxMDExMTAwXCIsXHJcblwiMDEwMDAwMDBcIixcclxuXCIwMTAwMDAwMFwiXHJcbl0sXHJcbi8vICMweDExMSBcclxuWyBcclxuXCIwMDAwMDAwMFwiLFxyXG5cIjAwMDAwMDAwXCIsXHJcblwiMDAxMTEwMTBcIixcclxuXCIwMTAwMDExMFwiLFxyXG5cIjAxMDAwMTEwXCIsXHJcblwiMDAxMTEwMTBcIixcclxuXCIwMDAwMDAxMFwiLFxyXG5cIjAwMDAwMDEwXCJcclxuXSxcclxuLy8gIzB4MTEyIFxyXG5bIFxyXG5cIjAwMDAwMDAwXCIsXHJcblwiMDAwMDAwMDBcIixcclxuXCIwMTAxMTEwMFwiLFxyXG5cIjAxMTAwMDEwXCIsXHJcblwiMDEwMDAwMDBcIixcclxuXCIwMTAwMDAwMFwiLFxyXG5cIjAxMDAwMDAwXCIsXHJcblwiMDAwMDAwMDBcIlxyXG5dLFxyXG4vLyAjMHgxMTMgXHJcblsgXHJcblwiMDAwMDAwMDBcIixcclxuXCIwMDAwMDAwMFwiLFxyXG5cIjAwMTExMTEwXCIsXHJcblwiMDEwMDAwMDBcIixcclxuXCIwMDExMTEwMFwiLFxyXG5cIjAwMDAwMDEwXCIsXHJcblwiMDExMTExMDBcIixcclxuXCIwMDAwMDAwMFwiXHJcbl0sXHJcbi8vICMweDExNCBcclxuWyBcclxuXCIwMDAxMDAwMFwiLFxyXG5cIjAwMDEwMDAwXCIsXHJcblwiMDExMTExMDBcIixcclxuXCIwMDAxMDAwMFwiLFxyXG5cIjAwMDEwMDAwXCIsXHJcblwiMDAwMTAwMTBcIixcclxuXCIwMDAwMTEwMFwiLFxyXG5cIjAwMDAwMDAwXCJcclxuXSxcclxuLy8gIzB4MTE1IFxyXG5bIFxyXG5cIjAwMDAwMDAwXCIsXHJcblwiMDAwMDAwMDBcIixcclxuXCIwMTAwMDAxMFwiLFxyXG5cIjAxMDAwMDEwXCIsXHJcblwiMDEwMDAwMTBcIixcclxuXCIwMTAwMDAxMFwiLFxyXG5cIjAwMTExMTAwXCIsXHJcblwiMDAwMDAwMDBcIlxyXG5dLFxyXG4vLyAjMHgxMTYgXHJcblsgXHJcblwiMDAwMDAwMDBcIixcclxuXCIwMDAwMDAwMFwiLFxyXG5cIjAxMDAwMDEwXCIsXHJcblwiMDEwMDAwMTBcIixcclxuXCIwMTAwMDAxMFwiLFxyXG5cIjAwMTAwMTAwXCIsXHJcblwiMDAwMTEwMDBcIixcclxuXCIwMDAwMDAwMFwiXHJcbl0sXHJcbi8vICMweDExNyBcclxuWyBcclxuXCIwMDAwMDAwMFwiLFxyXG5cIjAwMDAwMDAwXCIsXHJcblwiMDEwMDAwMDFcIixcclxuXCIwMTAwMTAwMVwiLFxyXG5cIjAxMDAxMDAxXCIsXHJcblwiMDEwMDEwMDFcIixcclxuXCIwMDExMDExMFwiLFxyXG5cIjAwMDAwMDAwXCJcclxuXSxcclxuLy8gIzB4MTE4IFxyXG5bIFxyXG5cIjAwMDAwMDAwXCIsXHJcblwiMDAwMDAwMDBcIixcclxuXCIwMTAwMDEwMFwiLFxyXG5cIjAwMTAxMDAwXCIsXHJcblwiMDAwMTAwMDBcIixcclxuXCIwMDEwMTAwMFwiLFxyXG5cIjAxMDAwMTAwXCIsXHJcblwiMDAwMDAwMDBcIlxyXG5dLFxyXG4vLyAjMHgxMTkgXHJcblsgXHJcblwiMDAwMDAwMDBcIixcclxuXCIwMDAwMDAwMFwiLFxyXG5cIjAxMDAwMDEwXCIsXHJcblwiMDEwMDAwMTBcIixcclxuXCIwMTAwMDExMFwiLFxyXG5cIjAwMTExMDEwXCIsXHJcblwiMDAwMDAwMTBcIixcclxuXCIwMDExMTEwMFwiXHJcbl0sXHJcbi8vICMweDExYSBcclxuWyBcclxuXCIwMDAwMDAwMFwiLFxyXG5cIjAwMDAwMDAwXCIsXHJcblwiMDExMTExMTBcIixcclxuXCIwMDAwMDEwMFwiLFxyXG5cIjAwMDExMDAwXCIsXHJcblwiMDAxMDAwMDBcIixcclxuXCIwMTExMTExMFwiLFxyXG5cIjAwMDAwMDAwXCJcclxuXSxcclxuLy8gIzB4MTFiIFxyXG5bIFxyXG5cIjAwMDAxMDAwXCIsXHJcblwiMDAwMDEwMDBcIixcclxuXCIwMDAwMTAwMFwiLFxyXG5cIjAwMDAxMDAwXCIsXHJcblwiMTExMTExMTFcIixcclxuXCIwMDAwMTAwMFwiLFxyXG5cIjAwMDAxMDAwXCIsXHJcblwiMDAwMDEwMDBcIlxyXG5dLFxyXG4vLyAjMHgxMWMgXHJcblsgXHJcblwiMDAwMDEwMDBcIixcclxuXCIwMDAwMTAwMFwiLFxyXG5cIjAwMDAxMDAwXCIsXHJcblwiMDAwMDEwMDBcIixcclxuXCIwMDAwMTExMVwiLFxyXG5cIjAwMDAwMDAwXCIsXHJcblwiMDAwMDAwMDBcIixcclxuXCIwMDAwMDAwMFwiXHJcbl0sXHJcbi8vICMweDExZCBcclxuWyBcclxuXCIwMDAwMTAwMFwiLFxyXG5cIjAwMDAxMDAwXCIsXHJcblwiMDAwMDEwMDBcIixcclxuXCIwMDAwMTAwMFwiLFxyXG5cIjExMTExMDAwXCIsXHJcblwiMDAwMDAwMDBcIixcclxuXCIwMDAwMDAwMFwiLFxyXG5cIjAwMDAwMDAwXCJcclxuXSxcclxuLy8gIzB4MTFlIFxyXG5bIFxyXG5cIjAwMDAxMDAwXCIsXHJcblwiMDAwMDEwMDBcIixcclxuXCIwMDAwMTAwMFwiLFxyXG5cIjAwMDAxMDAwXCIsXHJcblwiMDAwMDExMTFcIixcclxuXCIwMDAwMTAwMFwiLFxyXG5cIjAwMDAxMDAwXCIsXHJcblwiMDAwMDEwMDBcIlxyXG5dLFxyXG4vLyAjMHgxMWYgXHJcblsgXHJcblwiMDAwMDEwMDBcIixcclxuXCIwMDAwMTAwMFwiLFxyXG5cIjAwMDAxMDAwXCIsXHJcblwiMDAwMDEwMDBcIixcclxuXCIxMTExMTExMVwiLFxyXG5cIjAwMDAwMDAwXCIsXHJcblwiMDAwMDAwMDBcIixcclxuXCIwMDAwMDAwMFwiXHJcbl0sXHJcbi8vICMweDEyMCBcclxuWyBcclxuXCIwMDExMTEwMFwiLFxyXG5cIjAxMDAwMDEwXCIsXHJcblwiMDEwMDAxMTBcIixcclxuXCIwMTAxMTAxMFwiLFxyXG5cIjAxMTAwMDEwXCIsXHJcblwiMDEwMDAwMTBcIixcclxuXCIwMDExMTEwMFwiLFxyXG5cIjAwMDAwMDAwXCJcclxuXSxcclxuLy8gIzB4MTIxIFxyXG5bIFxyXG5cIjAwMDAxMDAwXCIsXHJcblwiMDAwMTEwMDBcIixcclxuXCIwMDEwMTAwMFwiLFxyXG5cIjAwMDAxMDAwXCIsXHJcblwiMDAwMDEwMDBcIixcclxuXCIwMDAwMTAwMFwiLFxyXG5cIjAwMTExMTEwXCIsXHJcblwiMDAwMDAwMDBcIlxyXG5dLFxyXG4vLyAjMHgxMjIgXHJcblsgXHJcblwiMDAxMTExMDBcIixcclxuXCIwMTAwMDAxMFwiLFxyXG5cIjAwMDAwMDEwXCIsXHJcblwiMDAwMDExMDBcIixcclxuXCIwMDExMDAwMFwiLFxyXG5cIjAxMDAwMDAwXCIsXHJcblwiMDExMTExMTBcIixcclxuXCIwMDAwMDAwMFwiXHJcbl0sXHJcbi8vICMweDEyMyBcclxuWyBcclxuXCIwMDExMTEwMFwiLFxyXG5cIjAxMDAwMDEwXCIsXHJcblwiMDAwMDAwMTBcIixcclxuXCIwMDExMTEwMFwiLFxyXG5cIjAwMDAwMDEwXCIsXHJcblwiMDEwMDAwMTBcIixcclxuXCIwMDExMTEwMFwiLFxyXG5cIjAwMDAwMDAwXCJcclxuXSxcclxuLy8gIzB4MTI0IFxyXG5bIFxyXG5cIjAwMDAwMTAwXCIsXHJcblwiMDAwMDExMDBcIixcclxuXCIwMDAxMDEwMFwiLFxyXG5cIjAwMTAwMTAwXCIsXHJcblwiMDExMTExMTBcIixcclxuXCIwMDAwMDEwMFwiLFxyXG5cIjAwMDAwMTAwXCIsXHJcblwiMDAwMDAwMDBcIlxyXG5dLFxyXG4vLyAjMHgxMjUgXHJcblsgXHJcblwiMDExMTExMTBcIixcclxuXCIwMTAwMDAwMFwiLFxyXG5cIjAxMTExMDAwXCIsXHJcblwiMDAwMDAxMDBcIixcclxuXCIwMDAwMDAxMFwiLFxyXG5cIjAxMDAwMTAwXCIsXHJcblwiMDAxMTEwMDBcIixcclxuXCIwMDAwMDAwMFwiXHJcbl0sXHJcbi8vICMweDEyNiBcclxuWyBcclxuXCIwMDAxMTEwMFwiLFxyXG5cIjAwMTAwMDAwXCIsXHJcblwiMDEwMDAwMDBcIixcclxuXCIwMTExMTEwMFwiLFxyXG5cIjAxMDAwMDEwXCIsXHJcblwiMDEwMDAwMTBcIixcclxuXCIwMDExMTEwMFwiLFxyXG5cIjAwMDAwMDAwXCJcclxuXSxcclxuLy8gIzB4MTI3IFxyXG5bIFxyXG5cIjAxMTExMTEwXCIsXHJcblwiMDEwMDAwMTBcIixcclxuXCIwMDAwMDEwMFwiLFxyXG5cIjAwMDAxMDAwXCIsXHJcblwiMDAwMTAwMDBcIixcclxuXCIwMDAxMDAwMFwiLFxyXG5cIjAwMDEwMDAwXCIsXHJcblwiMDAwMDAwMDBcIlxyXG5dLFxyXG4vLyAjMHgxMjggXHJcblsgXHJcblwiMDAxMTExMDBcIixcclxuXCIwMTAwMDAxMFwiLFxyXG5cIjAxMDAwMDEwXCIsXHJcblwiMDAxMTExMDBcIixcclxuXCIwMTAwMDAxMFwiLFxyXG5cIjAxMDAwMDEwXCIsXHJcblwiMDAxMTExMDBcIixcclxuXCIwMDAwMDAwMFwiXHJcbl0sXHJcbi8vICMweDEyOSBcclxuWyBcclxuXCIwMDExMTEwMFwiLFxyXG5cIjAxMDAwMDEwXCIsXHJcblwiMDEwMDAwMTBcIixcclxuXCIwMDExMTExMFwiLFxyXG5cIjAwMDAwMDEwXCIsXHJcblwiMDAwMDAxMDBcIixcclxuXCIwMDExMTAwMFwiLFxyXG5cIjAwMDAwMDAwXCJcclxuXSxcclxuLy8gIzB4MTJhIFxyXG5bIFxyXG5cIjAwMDAwMDAwXCIsXHJcblwiMDAwMDAwMDBcIixcclxuXCIwMDAwMDAwMFwiLFxyXG5cIjAxMTExMTEwXCIsXHJcblwiMDAwMDAwMDBcIixcclxuXCIwMDAwMDAwMFwiLFxyXG5cIjAwMDAwMDAwXCIsXHJcblwiMDAwMDAwMDBcIlxyXG5dLFxyXG4vLyAjMHgxMmIgXHJcblsgXHJcblwiMDAwMDAwMDBcIixcclxuXCIwMDAwMDAwMFwiLFxyXG5cIjAxMTExMTEwXCIsXHJcblwiMDAwMDAwMDBcIixcclxuXCIwMTExMTExMFwiLFxyXG5cIjAwMDAwMDAwXCIsXHJcblwiMDAwMDAwMDBcIixcclxuXCIwMDAwMDAwMFwiXHJcbl0sXHJcbi8vICMweDEyYyBcclxuWyBcclxuXCIwMDAwMDAwMFwiLFxyXG5cIjAwMDAwMDAwXCIsXHJcblwiMDAwMDEwMDBcIixcclxuXCIwMDAwMDAwMFwiLFxyXG5cIjAwMDAwMDAwXCIsXHJcblwiMDAwMDEwMDBcIixcclxuXCIwMDAwMTAwMFwiLFxyXG5cIjAwMDEwMDAwXCJcclxuXSxcclxuLy8gIzB4MTJkIFxyXG5bIFxyXG5cIjAwMDAwMDAwXCIsXHJcblwiMDAwMDAwMTBcIixcclxuXCIwMDAwMDEwMFwiLFxyXG5cIjAwMDAxMDAwXCIsXHJcblwiMDAwMTAwMDBcIixcclxuXCIwMDEwMDAwMFwiLFxyXG5cIjAxMDAwMDAwXCIsXHJcblwiMDAwMDAwMDBcIlxyXG5dLFxyXG4vLyAjMHgxMmUgXHJcblsgXHJcblwiMDAwMDAwMDBcIixcclxuXCIwMDAwMDAwMFwiLFxyXG5cIjAwMDAwMDAwXCIsXHJcblwiMDAwMDAwMDBcIixcclxuXCIwMDAwMDAwMFwiLFxyXG5cIjAwMDExMDAwXCIsXHJcblwiMDAwMTEwMDBcIixcclxuXCIwMDAwMDAwMFwiXHJcbl0sXHJcbi8vICMweDEyZiBcclxuWyBcclxuXCIwMDAwMDAwMFwiLFxyXG5cIjAwMDAwMDAwXCIsXHJcblwiMDAwMDAwMDBcIixcclxuXCIwMDAwMDAwMFwiLFxyXG5cIjAwMDAwMDAwXCIsXHJcblwiMDAwMDEwMDBcIixcclxuXCIwMDAwMTAwMFwiLFxyXG5cIjAwMDEwMDAwXCJcclxuXSxcclxuLy8gIzB4MTMwIFxyXG5bIFxyXG5cIjAwMDAwMDAwXCIsXHJcblwiMTExMTExMTFcIixcclxuXCIwMDAwMDAwMFwiLFxyXG5cIjAwMDAwMDAwXCIsXHJcblwiMDAwMDAwMDBcIixcclxuXCIwMDAwMDAwMFwiLFxyXG5cIjAwMDAwMDAwXCIsXHJcblwiMDAwMDAwMDBcIlxyXG5dLFxyXG4vLyAjMHgxMzEgXHJcblsgXHJcblwiMDEwMDAwMDBcIixcclxuXCIwMTAwMDAwMFwiLFxyXG5cIjAxMDAwMDAwXCIsXHJcblwiMDEwMDAwMDBcIixcclxuXCIwMTAwMDAwMFwiLFxyXG5cIjAxMDAwMDAwXCIsXHJcblwiMDEwMDAwMDBcIixcclxuXCIwMTAwMDAwMFwiXHJcbl0sXHJcbi8vICMweDEzMiBcclxuWyBcclxuXCIxMDAwMDAwMFwiLFxyXG5cIjEwMDAwMDAwXCIsXHJcblwiMTAwMDAwMDBcIixcclxuXCIxMDAwMDAwMFwiLFxyXG5cIjEwMDAwMDAwXCIsXHJcblwiMTAwMDAwMDBcIixcclxuXCIxMDAwMDAwMFwiLFxyXG5cIjExMTExMTExXCJcclxuXSxcclxuLy8gIzB4MTMzIFxyXG5bIFxyXG5cIjAwMDAwMDAxXCIsXHJcblwiMDAwMDAwMDFcIixcclxuXCIwMDAwMDAwMVwiLFxyXG5cIjAwMDAwMDAxXCIsXHJcblwiMDAwMDAwMDFcIixcclxuXCIwMDAwMDAwMVwiLFxyXG5cIjAwMDAwMDAxXCIsXHJcblwiMTExMTExMTFcIlxyXG5dLFxyXG4vLyAjMHgxMzQgXHJcblsgXHJcblwiMDAwMDAwMDBcIixcclxuXCIwMDAwMDAwMFwiLFxyXG5cIjAwMDAwMDAwXCIsXHJcblwiMTExMTExMTFcIixcclxuXCIwMDAwMDAwMFwiLFxyXG5cIjAwMDAwMDAwXCIsXHJcblwiMDAwMDAwMDBcIixcclxuXCIwMDAwMDAwMFwiXHJcbl0sXHJcbi8vICMweDEzNSBcclxuWyBcclxuXCIwMDAxMDAwMFwiLFxyXG5cIjAwMDEwMDAwXCIsXHJcblwiMDAwMTAwMDBcIixcclxuXCIwMDAxMDAwMFwiLFxyXG5cIjAwMDEwMDAwXCIsXHJcblwiMDAwMTAwMDBcIixcclxuXCIwMDAxMDAwMFwiLFxyXG5cIjAwMDEwMDAwXCJcclxuXSxcclxuLy8gIzB4MTM2IFxyXG5bIFxyXG5cIjExMTExMTExXCIsXHJcblwiMTExMTExMTFcIixcclxuXCIwMDAwMDAwMFwiLFxyXG5cIjAwMDAwMDAwXCIsXHJcblwiMDAwMDAwMDBcIixcclxuXCIwMDAwMDAwMFwiLFxyXG5cIjAwMDAwMDAwXCIsXHJcblwiMDAwMDAwMDBcIlxyXG5dLFxyXG4vLyAjMHgxMzcgXHJcblsgXHJcblwiMTEwMDAwMDBcIixcclxuXCIxMTAwMDAwMFwiLFxyXG5cIjExMDAwMDAwXCIsXHJcblwiMTEwMDAwMDBcIixcclxuXCIxMTAwMDAwMFwiLFxyXG5cIjExMDAwMDAwXCIsXHJcblwiMTEwMDAwMDBcIixcclxuXCIxMTAwMDAwMFwiXHJcbl0sXHJcbi8vICMweDEzOCBcclxuWyBcclxuXCIwMDAwMDAwMFwiLFxyXG5cIjAwMDAwMDAwXCIsXHJcblwiMDAwMDAwMDBcIixcclxuXCIwMDAwMDAwMFwiLFxyXG5cIjAwMDAwMDAwXCIsXHJcblwiMTExMTExMTFcIixcclxuXCIwMDAwMDAwMFwiLFxyXG5cIjAwMDAwMDAwXCJcclxuXSxcclxuLy8gIzB4MTM5IFxyXG5bIFxyXG5cIjAwMDAwMTAwXCIsXHJcblwiMDAwMDAxMDBcIixcclxuXCIwMDAwMDEwMFwiLFxyXG5cIjAwMDAwMTAwXCIsXHJcblwiMDAwMDAxMDBcIixcclxuXCIwMDAwMDEwMFwiLFxyXG5cIjAwMDAwMTAwXCIsXHJcblwiMDAwMDAxMDBcIlxyXG5dLFxyXG4vLyAjMHgxM2EgXHJcblsgXHJcblwiMDAwMDAwMDBcIixcclxuXCIwMDAwMDAwMFwiLFxyXG5cIjAwMDAwMDAwXCIsXHJcblwiMDAwMDAwMDBcIixcclxuXCIxMTExMTExMVwiLFxyXG5cIjExMTExMTExXCIsXHJcblwiMTExMTExMTFcIixcclxuXCIxMTExMTExMVwiXHJcbl0sXHJcbi8vICMweDEzYiBcclxuWyBcclxuXCIwMDAwMTExMVwiLFxyXG5cIjAwMDAxMTExXCIsXHJcblwiMDAwMDExMTFcIixcclxuXCIwMDAwMTExMVwiLFxyXG5cIjAwMDAxMTExXCIsXHJcblwiMDAwMDExMTFcIixcclxuXCIwMDAwMTExMVwiLFxyXG5cIjAwMDAxMTExXCJcclxuXSxcclxuLy8gIzB4MTNjIFxyXG5bIFxyXG5cIjAwMDAwMDAwXCIsXHJcblwiMDAwMDAwMDBcIixcclxuXCIwMDAwMDAwMFwiLFxyXG5cIjAwMDAwMDAwXCIsXHJcblwiMDAwMDAwMDBcIixcclxuXCIwMDAwMDAwMFwiLFxyXG5cIjAwMDAwMDAwXCIsXHJcblwiMTExMTExMTFcIlxyXG5dLFxyXG4vLyAjMHgxM2QgXHJcblsgXHJcblwiMDAwMDAwMDFcIixcclxuXCIwMDAwMDAwMVwiLFxyXG5cIjAwMDAwMDAxXCIsXHJcblwiMDAwMDAwMDFcIixcclxuXCIwMDAwMDAwMVwiLFxyXG5cIjAwMDAwMDAxXCIsXHJcblwiMDAwMDAwMDFcIixcclxuXCIwMDAwMDAwMVwiXHJcbl0sXHJcbi8vICMweDEzZSBcclxuWyBcclxuXCIwMDAwMDAwMFwiLFxyXG5cIjAwMDAwMDAwXCIsXHJcblwiMDAwMDAwMDBcIixcclxuXCIwMDAwMDAwMFwiLFxyXG5cIjAwMDAwMDAwXCIsXHJcblwiMDAwMDAwMDBcIixcclxuXCIxMTExMTExMVwiLFxyXG5cIjExMTExMTExXCJcclxuXSxcclxuLy8gIzB4MTNmIFxyXG5bIFxyXG5cIjAwMDAwMDExXCIsXHJcblwiMDAwMDAwMTFcIixcclxuXCIwMDAwMDAxMVwiLFxyXG5cIjAwMDAwMDExXCIsXHJcblwiMDAwMDAwMTFcIixcclxuXCIwMDAwMDAxMVwiLFxyXG5cIjAwMDAwMDExXCIsXHJcblwiMDAwMDAwMTFcIlxyXG5dLFxyXG4vLyAjMHgxNDAgXHJcblsgXHJcblwiMDAwMDAwMDBcIixcclxuXCIwMDAwMDAwMFwiLFxyXG5cIjAwMDAxMDAwXCIsXHJcblwiMDAwMDAxMDBcIixcclxuXCIxMTExMTExMFwiLFxyXG5cIjAwMDAwMTAwXCIsXHJcblwiMDAwMDEwMDBcIixcclxuXCIwMDAwMDAwMFwiXHJcbl0sXHJcbi8vICMweDE0MSBcclxuWyBcclxuXCIwMDAwMTAwMFwiLFxyXG5cIjAwMDExMTAwXCIsXHJcblwiMDAxMTExMTBcIixcclxuXCIwMTExMTExMVwiLFxyXG5cIjAxMTExMTExXCIsXHJcblwiMDAwMTExMDBcIixcclxuXCIwMDExMTExMFwiLFxyXG5cIjAwMDAwMDAwXCJcclxuXSxcclxuLy8gIzB4MTQyIFxyXG5bIFxyXG5cIjExMTExMTExXCIsXHJcblwiMDExMTExMTFcIixcclxuXCIwMDExMTExMVwiLFxyXG5cIjAwMDExMTExXCIsXHJcblwiMDAwMDExMTFcIixcclxuXCIwMDAwMDExMVwiLFxyXG5cIjAwMDAwMDExXCIsXHJcblwiMDAwMDAwMDFcIlxyXG5dLFxyXG4vLyAjMHgxNDMgXHJcblsgXHJcblwiMTExMTExMTFcIixcclxuXCIxMTExMTExMVwiLFxyXG5cIjExMTExMTExXCIsXHJcblwiMTExMTExMTFcIixcclxuXCIxMTExMTExMVwiLFxyXG5cIjExMTExMTExXCIsXHJcblwiMTExMTExMTFcIixcclxuXCIxMTExMTExMVwiXHJcbl0sXHJcbi8vICMweDE0NCBcclxuWyBcclxuXCIwMDAwMTAwMFwiLFxyXG5cIjAwMDExMTAwXCIsXHJcblwiMDAxMTExMTBcIixcclxuXCIwMTExMTExMVwiLFxyXG5cIjAwMTExMTEwXCIsXHJcblwiMDAwMTExMDBcIixcclxuXCIwMDAwMTAwMFwiLFxyXG5cIjAwMDAwMDAwXCJcclxuXSxcclxuLy8gIzB4MTQ1IFxyXG5bIFxyXG5cIjAwMDAwMDAwXCIsXHJcblwiMDAwMDAwMDBcIixcclxuXCIwMDAxMDAwMFwiLFxyXG5cIjAwMTAwMDAwXCIsXHJcblwiMDExMTExMTFcIixcclxuXCIwMDEwMDAwMFwiLFxyXG5cIjAwMDEwMDAwXCIsXHJcblwiMDAwMDAwMDBcIlxyXG5dLFxyXG4vLyAjMHgxNDYgXHJcblsgXHJcblwiMDAwMDEwMDBcIixcclxuXCIwMDAxMTEwMFwiLFxyXG5cIjAwMTAxMDEwXCIsXHJcblwiMDExMTExMTFcIixcclxuXCIwMDEwMTAxMFwiLFxyXG5cIjAwMDAxMDAwXCIsXHJcblwiMDAwMDEwMDBcIixcclxuXCIwMDAwMDAwMFwiXHJcbl0sXHJcbi8vICMweDE0NyBcclxuWyBcclxuXCIwMDAwMDAwMFwiLFxyXG5cIjAwMTExMTAwXCIsXHJcblwiMDExMTExMTBcIixcclxuXCIwMTExMTExMFwiLFxyXG5cIjAxMTExMTEwXCIsXHJcblwiMDExMTExMTBcIixcclxuXCIwMDExMTEwMFwiLFxyXG5cIjAwMDAwMDAwXCJcclxuXSxcclxuLy8gIzB4MTQ4IFxyXG5bIFxyXG5cIjAwMDAwMDAwXCIsXHJcblwiMDAxMTExMDBcIixcclxuXCIwMTAwMDAxMFwiLFxyXG5cIjAxMDAwMDEwXCIsXHJcblwiMDEwMDAwMTBcIixcclxuXCIwMTAwMDAxMFwiLFxyXG5cIjAwMTExMTAwXCIsXHJcblwiMDAwMDAwMDBcIlxyXG5dLFxyXG4vLyAjMHgxNDkgXHJcblsgXHJcblwiMDAxMTExMDBcIixcclxuXCIwMTAwMDAxMFwiLFxyXG5cIjAwMDAwMDEwXCIsXHJcblwiMDAwMDExMDBcIixcclxuXCIwMDAxMDAwMFwiLFxyXG5cIjAwMDAwMDAwXCIsXHJcblwiMDAwMTAwMDBcIixcclxuXCIwMDAwMDAwMFwiXHJcbl0sXHJcbi8vICMweDE0YSBcclxuWyBcclxuXCIxMTExMTExMVwiLFxyXG5cIjExMDAwMDExXCIsXHJcblwiMTAwMDAwMDFcIixcclxuXCIxMDAwMDAwMVwiLFxyXG5cIjEwMDAwMDAxXCIsXHJcblwiMTAwMDAwMDFcIixcclxuXCIxMTAwMDAxMVwiLFxyXG5cIjExMTExMTExXCJcclxuXSxcclxuLy8gIzB4MTRiIFxyXG5bIFxyXG5cIjAwMDAwMDAwXCIsXHJcblwiMDAwMDAwMDBcIixcclxuXCIwMDAwMDAwMFwiLFxyXG5cIjAwMDAwMDAwXCIsXHJcblwiMDAwMDAwMTFcIixcclxuXCIwMDAwMDEwMFwiLFxyXG5cIjAwMDAxMDAwXCIsXHJcblwiMDAwMDEwMDBcIlxyXG5dLFxyXG4vLyAjMHgxNGMgXHJcblsgXHJcblwiMDAwMDAwMDBcIixcclxuXCIwMDAwMDAwMFwiLFxyXG5cIjAwMDAwMDAwXCIsXHJcblwiMDAwMDAwMDBcIixcclxuXCIxMTAwMDAwMFwiLFxyXG5cIjAwMTAwMDAwXCIsXHJcblwiMDAwMTAwMDBcIixcclxuXCIwMDAxMDAwMFwiXHJcbl0sXHJcbi8vICMweDE0ZCBcclxuWyBcclxuXCIxMDAwMDAwMFwiLFxyXG5cIjExMDAwMDAwXCIsXHJcblwiMTExMDAwMDBcIixcclxuXCIxMTExMDAwMFwiLFxyXG5cIjExMTExMDAwXCIsXHJcblwiMTExMTExMDBcIixcclxuXCIxMTExMTExMFwiLFxyXG5cIjExMTExMTExXCJcclxuXSxcclxuLy8gIzB4MTRlIFxyXG5bIFxyXG5cIjAwMDAwMDAxXCIsXHJcblwiMDAwMDAwMTFcIixcclxuXCIwMDAwMDExMVwiLFxyXG5cIjAwMDAxMTExXCIsXHJcblwiMDAwMTExMTFcIixcclxuXCIwMDExMTExMVwiLFxyXG5cIjAxMTExMTExXCIsXHJcblwiMTExMTExMTFcIlxyXG5dLFxyXG4vLyAjMHgxNGYgXHJcblsgXHJcblwiMDAwMDAwMDBcIixcclxuXCIwMDAwMDAwMFwiLFxyXG5cIjAwMDAxMDAwXCIsXHJcblwiMDAwMDAwMDBcIixcclxuXCIwMDAwMDAwMFwiLFxyXG5cIjAwMDAxMDAwXCIsXHJcblwiMDAwMDAwMDBcIixcclxuXCIwMDAwMDAwMFwiXHJcbl0sXHJcbi8vICMweDE1MCBcclxuWyBcclxuXCIwMDAwMDAwMFwiLFxyXG5cIjAwMDAxMDAwXCIsXHJcblwiMDAwMTExMDBcIixcclxuXCIwMDEwMTAxMFwiLFxyXG5cIjAwMDAxMDAwXCIsXHJcblwiMDAwMDEwMDBcIixcclxuXCIwMDAwMTAwMFwiLFxyXG5cIjAwMDAwMDAwXCJcclxuXSxcclxuLy8gIzB4MTUxIFxyXG5bIFxyXG5cIjAwMDAxMTEwXCIsXHJcblwiMDAwMTEwMDBcIixcclxuXCIwMDExMDAwMFwiLFxyXG5cIjAxMTAwMDAwXCIsXHJcblwiMDAxMTAwMDBcIixcclxuXCIwMDAxMTAwMFwiLFxyXG5cIjAwMDAxMTEwXCIsXHJcblwiMDAwMDAwMDBcIlxyXG5dLFxyXG4vLyAjMHgxNTIgXHJcblsgXHJcblwiMDAxMTExMDBcIixcclxuXCIwMDEwMDAwMFwiLFxyXG5cIjAwMTAwMDAwXCIsXHJcblwiMDAxMDAwMDBcIixcclxuXCIwMDEwMDAwMFwiLFxyXG5cIjAwMTAwMDAwXCIsXHJcblwiMDAxMTExMDBcIixcclxuXCIwMDAwMDAwMFwiXHJcbl0sXHJcbi8vICMweDE1MyBcclxuWyBcclxuXCIwMDExMDExMFwiLFxyXG5cIjAxMTExMTExXCIsXHJcblwiMDExMTExMTFcIixcclxuXCIwMTExMTExMVwiLFxyXG5cIjAwMTExMTEwXCIsXHJcblwiMDAwMTExMDBcIixcclxuXCIwMDAwMTAwMFwiLFxyXG5cIjAwMDAwMDAwXCJcclxuXSxcclxuLy8gIzB4MTU0IFxyXG5bIFxyXG5cIjAwMTExMTAwXCIsXHJcblwiMDAwMDAxMDBcIixcclxuXCIwMDAwMDEwMFwiLFxyXG5cIjAwMDAwMTAwXCIsXHJcblwiMDAwMDAxMDBcIixcclxuXCIwMDAwMDEwMFwiLFxyXG5cIjAwMTExMTAwXCIsXHJcblwiMDAwMDAwMDBcIlxyXG5dLFxyXG4vLyAjMHgxNTUgXHJcblsgXHJcblwiMDAwMTExMDBcIixcclxuXCIwMDEwMDAxMFwiLFxyXG5cIjAxMDAxMDEwXCIsXHJcblwiMDEwMTAxMTBcIixcclxuXCIwMTAwMTEwMFwiLFxyXG5cIjAwMTAwMDAwXCIsXHJcblwiMDAwMTExMTBcIixcclxuXCIwMDAwMDAwMFwiXHJcbl0sXHJcbi8vICMweDE1NiBcclxuWyBcclxuXCIxMTExMTExMVwiLFxyXG5cIjExMTExMTEwXCIsXHJcblwiMTExMTExMDBcIixcclxuXCIxMTExMTAwMFwiLFxyXG5cIjExMTEwMDAwXCIsXHJcblwiMTExMDAwMDBcIixcclxuXCIxMTAwMDAwMFwiLFxyXG5cIjEwMDAwMDAwXCJcclxuXSxcclxuLy8gIzB4MTU3IFxyXG5bIFxyXG5cIjAxMTEwMDAwXCIsXHJcblwiMDAwMTEwMDBcIixcclxuXCIwMDAwMTEwMFwiLFxyXG5cIjAwMDAwMTEwXCIsXHJcblwiMDAwMDExMDBcIixcclxuXCIwMDAxMTAwMFwiLFxyXG5cIjAxMTEwMDAwXCIsXHJcblwiMDAwMDAwMDBcIlxyXG5dLFxyXG4vLyAjMHgxNTggXHJcblsgXHJcblwiMTAxMDAwMDBcIixcclxuXCIwMTAxMDAwMFwiLFxyXG5cIjEwMTAwMDAwXCIsXHJcblwiMDEwMTAwMDBcIixcclxuXCIxMDEwMDAwMFwiLFxyXG5cIjAxMDEwMDAwXCIsXHJcblwiMTAxMDAwMDBcIixcclxuXCIwMTAxMDAwMFwiXHJcbl0sXHJcbi8vICMweDE1OSBcclxuWyBcclxuXCIwMDAwMDAwMFwiLFxyXG5cIjAxMDAwMDAwXCIsXHJcblwiMDAxMDAwMDBcIixcclxuXCIwMDAxMDAwMFwiLFxyXG5cIjAwMDAxMDAwXCIsXHJcblwiMDAwMDAxMDBcIixcclxuXCIwMDAwMDAxMFwiLFxyXG5cIjAwMDAwMDAwXCJcclxuXSxcclxuLy8gIzB4MTVhIFxyXG5bIFxyXG5cIjEwMTAxMDEwXCIsXHJcblwiMDEwMTAxMDFcIixcclxuXCIxMDEwMTAxMFwiLFxyXG5cIjAxMDEwMTAxXCIsXHJcblwiMTAxMDEwMTBcIixcclxuXCIwMTAxMDEwMVwiLFxyXG5cIjEwMTAxMDEwXCIsXHJcblwiMDEwMTAxMDFcIlxyXG5dLFxyXG4vLyAjMHgxNWIgXHJcblsgXHJcblwiMTExMTAwMDBcIixcclxuXCIxMTExMDAwMFwiLFxyXG5cIjExMTEwMDAwXCIsXHJcblwiMTExMTAwMDBcIixcclxuXCIwMDAwMTExMVwiLFxyXG5cIjAwMDAxMTExXCIsXHJcblwiMDAwMDExMTFcIixcclxuXCIwMDAwMTExMVwiXHJcbl0sXHJcbi8vICMweDE1YyBcclxuWyBcclxuXCIwMDAwMDAwMFwiLFxyXG5cIjAwMDAwMDAwXCIsXHJcblwiMDAwMDAwMDBcIixcclxuXCIwMDAwMDAwMFwiLFxyXG5cIjAwMDAxMTExXCIsXHJcblwiMDAwMDEwMDBcIixcclxuXCIwMDAwMTAwMFwiLFxyXG5cIjAwMDAxMDAwXCJcclxuXSxcclxuLy8gIzB4MTVkIFxyXG5bIFxyXG5cIjAwMDAwMDAwXCIsXHJcblwiMDAwMDAwMDBcIixcclxuXCIwMDAwMDAwMFwiLFxyXG5cIjAwMDAwMDAwXCIsXHJcblwiMTExMTEwMDBcIixcclxuXCIwMDAwMTAwMFwiLFxyXG5cIjAwMDAxMDAwXCIsXHJcblwiMDAwMDEwMDBcIlxyXG5dLFxyXG4vLyAjMHgxNWUgXHJcblsgXHJcblwiMDAwMDEwMDBcIixcclxuXCIwMDAwMTAwMFwiLFxyXG5cIjAwMDAxMDAwXCIsXHJcblwiMDAwMDEwMDBcIixcclxuXCIxMTExMTAwMFwiLFxyXG5cIjAwMDAxMDAwXCIsXHJcblwiMDAwMDEwMDBcIixcclxuXCIwMDAwMTAwMFwiXHJcbl0sXHJcbi8vICMweDE1ZiBcclxuWyBcclxuXCIwMDAwMDAwMFwiLFxyXG5cIjAwMDAwMDAwXCIsXHJcblwiMDAwMDAwMDBcIixcclxuXCIwMDAwMDAwMFwiLFxyXG5cIjExMTExMTExXCIsXHJcblwiMDAwMDEwMDBcIixcclxuXCIwMDAwMTAwMFwiLFxyXG5cIjAwMDAxMDAwXCJcclxuXSxcclxuLy8gIzB4MTYwIFxyXG5bIFxyXG5cIjAwMDAwMDAwXCIsXHJcblwiMDAwMDAwMDBcIixcclxuXCIwMDAwMDAwMVwiLFxyXG5cIjAwMTExMTEwXCIsXHJcblwiMDEwMTAxMDBcIixcclxuXCIwMDAxMDEwMFwiLFxyXG5cIjAwMDEwMTAwXCIsXHJcblwiMDAwMDAwMDBcIlxyXG5dLFxyXG4vLyAjMHgxNjEgXHJcblsgXHJcblwiMDAwMDEwMDBcIixcclxuXCIwMDAwMTAwMFwiLFxyXG5cIjAwMDAxMDAwXCIsXHJcblwiMDAwMDEwMDBcIixcclxuXCIwMDAwMDAwMFwiLFxyXG5cIjAwMDAwMDAwXCIsXHJcblwiMDAwMDEwMDBcIixcclxuXCIwMDAwMDAwMFwiXHJcbl0sXHJcbi8vICMweDE2MiBcclxuWyBcclxuXCIwMDEwMDEwMFwiLFxyXG5cIjAwMTAwMTAwXCIsXHJcblwiMDAxMDAxMDBcIixcclxuXCIwMDAwMDAwMFwiLFxyXG5cIjAwMDAwMDAwXCIsXHJcblwiMDAwMDAwMDBcIixcclxuXCIwMDAwMDAwMFwiLFxyXG5cIjAwMDAwMDAwXCJcclxuXSxcclxuLy8gIzB4MTYzIFxyXG5bIFxyXG5cIjAwMTAwMTAwXCIsXHJcblwiMDAxMDAxMDBcIixcclxuXCIwMTExMTExMFwiLFxyXG5cIjAwMTAwMTAwXCIsXHJcblwiMDExMTExMTBcIixcclxuXCIwMDEwMDEwMFwiLFxyXG5cIjAwMTAwMTAwXCIsXHJcblwiMDAwMDAwMDBcIlxyXG5dLFxyXG4vLyAjMHgxNjQgXHJcblsgXHJcblwiMDAwMDEwMDBcIixcclxuXCIwMDAxMTExMFwiLFxyXG5cIjAwMTAxMDAwXCIsXHJcblwiMDAwMTExMDBcIixcclxuXCIwMDAwMTAxMFwiLFxyXG5cIjAwMTExMTAwXCIsXHJcblwiMDAwMDEwMDBcIixcclxuXCIwMDAwMDAwMFwiXHJcbl0sXHJcbi8vICMweDE2NSBcclxuWyBcclxuXCIwMDAwMDAwMFwiLFxyXG5cIjAxMTAwMDEwXCIsXHJcblwiMDExMDAxMDBcIixcclxuXCIwMDAwMTAwMFwiLFxyXG5cIjAwMDEwMDAwXCIsXHJcblwiMDAxMDAxMTBcIixcclxuXCIwMTAwMDExMFwiLFxyXG5cIjAwMDAwMDAwXCJcclxuXSxcclxuLy8gIzB4MTY2IFxyXG5bIFxyXG5cIjAwMTEwMDAwXCIsXHJcblwiMDEwMDEwMDBcIixcclxuXCIwMTAwMTAwMFwiLFxyXG5cIjAwMTEwMDAwXCIsXHJcblwiMDEwMDEwMTBcIixcclxuXCIwMTAwMDEwMFwiLFxyXG5cIjAwMTExMDEwXCIsXHJcblwiMDAwMDAwMDBcIlxyXG5dLFxyXG4vLyAjMHgxNjcgXHJcblsgXHJcblwiMDAwMDAxMDBcIixcclxuXCIwMDAwMTAwMFwiLFxyXG5cIjAwMDEwMDAwXCIsXHJcblwiMDAwMDAwMDBcIixcclxuXCIwMDAwMDAwMFwiLFxyXG5cIjAwMDAwMDAwXCIsXHJcblwiMDAwMDAwMDBcIixcclxuXCIwMDAwMDAwMFwiXHJcbl0sXHJcbi8vICMweDE2OCBcclxuWyBcclxuXCIwMDAwMDEwMFwiLFxyXG5cIjAwMDAxMDAwXCIsXHJcblwiMDAwMTAwMDBcIixcclxuXCIwMDAxMDAwMFwiLFxyXG5cIjAwMDEwMDAwXCIsXHJcblwiMDAwMDEwMDBcIixcclxuXCIwMDAwMDEwMFwiLFxyXG5cIjAwMDAwMDAwXCJcclxuXSxcclxuLy8gIzB4MTY5IFxyXG5bIFxyXG5cIjAwMTAwMDAwXCIsXHJcblwiMDAwMTAwMDBcIixcclxuXCIwMDAwMTAwMFwiLFxyXG5cIjAwMDAxMDAwXCIsXHJcblwiMDAwMDEwMDBcIixcclxuXCIwMDAxMDAwMFwiLFxyXG5cIjAwMTAwMDAwXCIsXHJcblwiMDAwMDAwMDBcIlxyXG5dLFxyXG4vLyAjMHgxNmEgXHJcblsgXHJcblwiMDAwMDAwMDBcIixcclxuXCIwMDAwMTAwMFwiLFxyXG5cIjAwMDAxMDAwXCIsXHJcblwiMDAxMTExMTBcIixcclxuXCIwMDAwMTAwMFwiLFxyXG5cIjAwMDAxMDAwXCIsXHJcblwiMDAwMDAwMDBcIixcclxuXCIwMDAwMDAwMFwiXHJcbl0sXHJcbi8vICMweDE2YiBcclxuWyBcclxuXCIwMDAwMTAwMFwiLFxyXG5cIjAwMTAxMDEwXCIsXHJcblwiMDAwMTExMDBcIixcclxuXCIwMDExMTExMFwiLFxyXG5cIjAwMDExMTAwXCIsXHJcblwiMDAxMDEwMTBcIixcclxuXCIwMDAwMTAwMFwiLFxyXG5cIjAwMDAwMDAwXCJcclxuXSxcclxuLy8gIzB4MTZjIFxyXG5bIFxyXG5cIjAwMDAxMTExXCIsXHJcblwiMDAwMDExMTFcIixcclxuXCIwMDAwMTExMVwiLFxyXG5cIjAwMDAxMTExXCIsXHJcblwiMTExMTAwMDBcIixcclxuXCIxMTExMDAwMFwiLFxyXG5cIjExMTEwMDAwXCIsXHJcblwiMTExMTAwMDBcIlxyXG5dLFxyXG4vLyAjMHgxNmQgXHJcblsgXHJcblwiMTAwMDAwMDFcIixcclxuXCIwMTAwMDAxMFwiLFxyXG5cIjAwMTAwMTAwXCIsXHJcblwiMDAwMTEwMDBcIixcclxuXCIwMDAxMTAwMFwiLFxyXG5cIjAwMTAwMTAwXCIsXHJcblwiMDEwMDAwMTBcIixcclxuXCIxMDAwMDAwMVwiXHJcbl0sXHJcbi8vICMweDE2ZSBcclxuWyBcclxuXCIwMDAxMDAwMFwiLFxyXG5cIjAwMDEwMDAwXCIsXHJcblwiMDAxMDAwMDBcIixcclxuXCIxMTAwMDAwMFwiLFxyXG5cIjAwMDAwMDAwXCIsXHJcblwiMDAwMDAwMDBcIixcclxuXCIwMDAwMDAwMFwiLFxyXG5cIjAwMDAwMDAwXCJcclxuXSxcclxuLy8gIzB4MTZmIFxyXG5bIFxyXG5cIjAwMDAxMDAwXCIsXHJcblwiMDAwMDEwMDBcIixcclxuXCIwMDAwMDEwMFwiLFxyXG5cIjAwMDAwMDExXCIsXHJcblwiMDAwMDAwMDBcIixcclxuXCIwMDAwMDAwMFwiLFxyXG5cIjAwMDAwMDAwXCIsXHJcblwiMDAwMDAwMDBcIlxyXG5dLFxyXG4vLyAjMHgxNzAgXHJcblsgXHJcblwiMTExMTExMTFcIixcclxuXCIwMDAwMDAwMFwiLFxyXG5cIjAwMDAwMDAwXCIsXHJcblwiMDAwMDAwMDBcIixcclxuXCIwMDAwMDAwMFwiLFxyXG5cIjAwMDAwMDAwXCIsXHJcblwiMDAwMDAwMDBcIixcclxuXCIwMDAwMDAwMFwiXHJcbl0sXHJcbi8vICMweDE3MSBcclxuWyBcclxuXCIxMDAwMDAwMFwiLFxyXG5cIjEwMDAwMDAwXCIsXHJcblwiMTAwMDAwMDBcIixcclxuXCIxMDAwMDAwMFwiLFxyXG5cIjEwMDAwMDAwXCIsXHJcblwiMTAwMDAwMDBcIixcclxuXCIxMDAwMDAwMFwiLFxyXG5cIjEwMDAwMDAwXCJcclxuXSxcclxuLy8gIzB4MTcyIFxyXG5bIFxyXG5cIjExMTExMTExXCIsXHJcblwiMTAwMDAwMDBcIixcclxuXCIxMDAwMDAwMFwiLFxyXG5cIjEwMDAwMDAwXCIsXHJcblwiMTAwMDAwMDBcIixcclxuXCIxMDAwMDAwMFwiLFxyXG5cIjEwMDAwMDAwXCIsXHJcblwiMTAwMDAwMDBcIlxyXG5dLFxyXG4vLyAjMHgxNzMgXHJcblsgXHJcblwiMTExMTExMTFcIixcclxuXCIwMDAwMDAwMVwiLFxyXG5cIjAwMDAwMDAxXCIsXHJcblwiMDAwMDAwMDFcIixcclxuXCIwMDAwMDAwMVwiLFxyXG5cIjAwMDAwMDAxXCIsXHJcblwiMDAwMDAwMDFcIixcclxuXCIwMDAwMDAwMVwiXHJcbl0sXHJcbi8vICMweDE3NCBcclxuWyBcclxuXCIwMDAwMDAwMFwiLFxyXG5cIjAwMDAwMDAwXCIsXHJcblwiMTExMTExMTFcIixcclxuXCIwMDAwMDAwMFwiLFxyXG5cIjAwMDAwMDAwXCIsXHJcblwiMDAwMDAwMDBcIixcclxuXCIwMDAwMDAwMFwiLFxyXG5cIjAwMDAwMDAwXCJcclxuXSxcclxuLy8gIzB4MTc1IFxyXG5bIFxyXG5cIjAwMTAwMDAwXCIsXHJcblwiMDAxMDAwMDBcIixcclxuXCIwMDEwMDAwMFwiLFxyXG5cIjAwMTAwMDAwXCIsXHJcblwiMDAxMDAwMDBcIixcclxuXCIwMDEwMDAwMFwiLFxyXG5cIjAwMTAwMDAwXCIsXHJcblwiMDAxMDAwMDBcIlxyXG5dLFxyXG4vLyAjMHgxNzYgXHJcblsgXHJcblwiMDAwMDAxMDBcIixcclxuXCIwMDAwMTAwMFwiLFxyXG5cIjAwMDEwMDAxXCIsXHJcblwiMDAxMDAwMTBcIixcclxuXCIwMTAwMDEwMFwiLFxyXG5cIjEwMDAxMDAwXCIsXHJcblwiMDAwMTAwMDBcIixcclxuXCIwMDEwMDAwMFwiXHJcbl0sXHJcbi8vICMweDE3NyBcclxuWyBcclxuXCIwMDEwMDAwMFwiLFxyXG5cIjAwMDEwMDAwXCIsXHJcblwiMTAwMDEwMDBcIixcclxuXCIwMTAwMDEwMFwiLFxyXG5cIjAwMTAwMDEwXCIsXHJcblwiMDAwMTAwMDFcIixcclxuXCIwMDAwMTAwMFwiLFxyXG5cIjAwMDAwMTAwXCJcclxuXSxcclxuLy8gIzB4MTc4IFxyXG5bIFxyXG5cIjAwMDAwMDAwXCIsXHJcblwiMDAwMDAwMDBcIixcclxuXCIwMDAwMDAwMFwiLFxyXG5cIjAwMDAwMDAwXCIsXHJcblwiMTExMTExMTFcIixcclxuXCIwMDAwMDAwMFwiLFxyXG5cIjAwMDAwMDAwXCIsXHJcblwiMDAwMDAwMDBcIlxyXG5dLFxyXG4vLyAjMHgxNzkgXHJcblsgXHJcblwiMDAwMDEwMDBcIixcclxuXCIwMDAwMTAwMFwiLFxyXG5cIjAwMDAxMDAwXCIsXHJcblwiMDAwMDEwMDBcIixcclxuXCIwMDAwMTAwMFwiLFxyXG5cIjAwMDAxMDAwXCIsXHJcblwiMDAwMDEwMDBcIixcclxuXCIwMDAwMTAwMFwiXHJcbl0sXHJcbi8vICMweDE3YSBcclxuWyBcclxuXCIxMTExMTExMVwiLFxyXG5cIjExMTExMTExXCIsXHJcblwiMTExMTExMTFcIixcclxuXCIxMTExMTExMVwiLFxyXG5cIjAwMDAwMDAwXCIsXHJcblwiMDAwMDAwMDBcIixcclxuXCIwMDAwMDAwMFwiLFxyXG5cIjAwMDAwMDAwXCJcclxuXSxcclxuLy8gIzB4MTdiIFxyXG5bIFxyXG5cIjExMTEwMDAwXCIsXHJcblwiMTExMTAwMDBcIixcclxuXCIxMTExMDAwMFwiLFxyXG5cIjExMTEwMDAwXCIsXHJcblwiMTExMTAwMDBcIixcclxuXCIxMTExMDAwMFwiLFxyXG5cIjExMTEwMDAwXCIsXHJcblwiMTExMTAwMDBcIlxyXG5dLFxyXG4vLyAjMHgxN2MgXHJcblsgXHJcblwiMDAwMDAwMDBcIixcclxuXCIwMDAwMDAwMFwiLFxyXG5cIjAwMDAwMDAwXCIsXHJcblwiMDAwMDAwMDBcIixcclxuXCIwMDAwMDAwMFwiLFxyXG5cIjAwMDAwMDAwXCIsXHJcblwiMTExMTExMTFcIixcclxuXCIwMDAwMDAwMFwiXHJcbl0sXHJcbi8vICMweDE3ZCBcclxuWyBcclxuXCIwMDAwMDAxMFwiLFxyXG5cIjAwMDAwMDEwXCIsXHJcblwiMDAwMDAwMTBcIixcclxuXCIwMDAwMDAxMFwiLFxyXG5cIjAwMDAwMDEwXCIsXHJcblwiMDAwMDAwMTBcIixcclxuXCIwMDAwMDAxMFwiLFxyXG5cIjAwMDAwMDEwXCJcclxuXSxcclxuLy8gIzB4MTdlIFxyXG5bIFxyXG5cIjAwMDAwMDAwXCIsXHJcblwiMDAwMDAwMDBcIixcclxuXCIwMDAwMDAwMFwiLFxyXG5cIjAwMDAwMDAwXCIsXHJcblwiMDAwMDAwMDBcIixcclxuXCIxMTExMTExMVwiLFxyXG5cIjExMTExMTExXCIsXHJcblwiMTExMTExMTFcIlxyXG5dLFxyXG4vLyAjMHgxN2YgXHJcblsgXHJcblwiMDAwMDAxMTFcIixcclxuXCIwMDAwMDExMVwiLFxyXG5cIjAwMDAwMTExXCIsXHJcblwiMDAwMDAxMTFcIixcclxuXCIwMDAwMDExMVwiLFxyXG5cIjAwMDAwMTExXCIsXHJcblwiMDAwMDAxMTFcIixcclxuXCIwMDAwMDExMVwiXHJcbl0sXHJcbi8vICMweDE4MCBcclxuWyBcclxuXCIwMDAwMDAwMFwiLFxyXG5cIjAwMDAxMDAwXCIsXHJcblwiMDAwMDEwMDBcIixcclxuXCIwMDAwMTAwMFwiLFxyXG5cIjAwMTAxMDEwXCIsXHJcblwiMDAwMTExMDBcIixcclxuXCIwMDAwMTAwMFwiLFxyXG5cIjAwMDAwMDAwXCJcclxuXSxcclxuLy8gIzB4MTgxIFxyXG5bIFxyXG5cIjAwMDEwMDAwXCIsXHJcblwiMTExMTExMTBcIixcclxuXCIwMDEwMDAwMFwiLFxyXG5cIjAxMTExMTAwXCIsXHJcblwiMDAwMDAwMTBcIixcclxuXCIwMDAwMDAxMFwiLFxyXG5cIjExMTExMTAwXCIsXHJcblwiMDAwMDAwMDBcIlxyXG5dLFxyXG4vLyAjMHgxODIgXHJcblsgXHJcblwiMDAwMDAwMDBcIixcclxuXCIxMTExMTEwMFwiLFxyXG5cIjAwMDAwMDEwXCIsXHJcblwiMDAwMDAwMDBcIixcclxuXCIwMDAwMDAwMFwiLFxyXG5cIjEwMDAwMDAwXCIsXHJcblwiMDExMTExMTBcIixcclxuXCIwMDAwMDAwMFwiXHJcbl0sXHJcbi8vICMweDE4MyBcclxuWyBcclxuXCIwMDExMTEwMFwiLFxyXG5cIjAwMDAxMDAwXCIsXHJcblwiMDAwMTAwMDBcIixcclxuXCIwMTExMTExMFwiLFxyXG5cIjAwMDAxMDAwXCIsXHJcblwiMDAwMTAwMDBcIixcclxuXCIwMDAwMTEwMFwiLFxyXG5cIjAwMDAwMDAwXCJcclxuXSxcclxuLy8gIzB4MTg0IFxyXG5bIFxyXG5cIjAxMDAwMDAwXCIsXHJcblwiMDEwMDAwMDBcIixcclxuXCIwMTAwMDAwMFwiLFxyXG5cIjAxMDAwMDAwXCIsXHJcblwiMDEwMDAxMDBcIixcclxuXCIwMTAwMDEwMFwiLFxyXG5cIjAwMTExMDAwXCIsXHJcblwiMDAwMDAwMDBcIlxyXG5dLFxyXG4vLyAjMHgxODUgXHJcblsgXHJcblwiMTAwMDAxMDBcIixcclxuXCIxMDAwMDAxMFwiLFxyXG5cIjEwMDAwMDEwXCIsXHJcblwiMTAwMDAwMTBcIixcclxuXCIxMDAwMDAxMFwiLFxyXG5cIjEwMDEwMDAwXCIsXHJcblwiMDExMDAwMDBcIixcclxuXCIwMDAwMDAwMFwiXHJcbl0sXHJcbi8vICMweDE4NiBcclxuWyBcclxuXCIxMDAwMDEwMFwiLFxyXG5cIjEwMDExMTEwXCIsXHJcblwiMTAwMDAxMDBcIixcclxuXCIxMDAwMDEwMFwiLFxyXG5cIjEwMDExMTAwXCIsXHJcblwiMTAxMDAxMTBcIixcclxuXCIwMTAxMTEwMFwiLFxyXG5cIjAwMDAwMDAwXCJcclxuXSxcclxuLy8gIzB4MTg3IFxyXG5bIFxyXG5cIjAwMDEwMDAwXCIsXHJcblwiMDExMTExMTBcIixcclxuXCIwMDAwMTAwMFwiLFxyXG5cIjAxMTExMTEwXCIsXHJcblwiMDAwMDAxMDBcIixcclxuXCIwMDAwMDAxMFwiLFxyXG5cIjAxMTAwMDAwXCIsXHJcblwiMDAwMTEwMDBcIlxyXG5dLFxyXG4vLyAjMHgxODggXHJcblsgXHJcblwiMDAwMDExMDBcIixcclxuXCIwMDAxMTAwMFwiLFxyXG5cIjAwMTEwMDAwXCIsXHJcblwiMDExMDAwMDBcIixcclxuXCIwMDExMDAwMFwiLFxyXG5cIjAwMDExMDAwXCIsXHJcblwiMDAwMDExMDBcIixcclxuXCIwMDAwMDAwMFwiXHJcbl0sXHJcbi8vICMweDE4OSBcclxuWyBcclxuXCIxMDAxMTExMFwiLFxyXG5cIjEwMDAwMDAwXCIsXHJcblwiMTAwMDAwMDBcIixcclxuXCIxMDAwMDAwMFwiLFxyXG5cIjEwMDAwMDAwXCIsXHJcblwiMTAwMTAwMDBcIixcclxuXCIxMTAxMTExMFwiLFxyXG5cIjAwMDAwMDAwXCJcclxuXSxcclxuLy8gIzB4MThhIFxyXG5bIFxyXG5cIjAwMDEwMDAwXCIsXHJcblwiMDExMTExMTBcIixcclxuXCIwMDAxMDAwMFwiLFxyXG5cIjAxMTExMTEwXCIsXHJcblwiMDAwMTAwMDBcIixcclxuXCIwMTExMDAwMFwiLFxyXG5cIjEwMDExMTAwXCIsXHJcblwiMDExMTAwMTBcIlxyXG5dLFxyXG4vLyAjMHgxOGIgXHJcblsgXHJcblwiMDAxMTEwMDBcIixcclxuXCIwMTAxMDEwMFwiLFxyXG5cIjEwMDEwMDEwXCIsXHJcblwiMTAwMTAwMTBcIixcclxuXCIxMDAxMDAxMFwiLFxyXG5cIjEwMDEwMDEwXCIsXHJcblwiMDExMDAxMDBcIixcclxuXCIwMDAwMDAwMFwiXHJcbl0sXHJcbi8vICMweDE4YyBcclxuWyBcclxuXCIwMTAwMDEwMFwiLFxyXG5cIjAxMDAwMTAwXCIsXHJcblwiMDEwMDAxMDBcIixcclxuXCIwMTEwMDEwMFwiLFxyXG5cIjAwMDAwMTAwXCIsXHJcblwiMDAwMDEwMDBcIixcclxuXCIwMDAxMDAwMFwiLFxyXG5cIjAwMDAwMDAwXCJcclxuXSxcclxuLy8gIzB4MThkIFxyXG5bIFxyXG5cIjAwMTAwMDAwXCIsXHJcblwiMTExMTEwMDBcIixcclxuXCIwMDEwMDAwMFwiLFxyXG5cIjExMTExMDAwXCIsXHJcblwiMDAxMDAwMTBcIixcclxuXCIwMDEwMDAxMFwiLFxyXG5cIjAwMDExMTAwXCIsXHJcblwiMDAwMDAwMDBcIlxyXG5dLFxyXG4vLyAjMHgxOGUgXHJcblsgXHJcblwiMDExMTAwMDBcIixcclxuXCIwMDAxMDAwMFwiLFxyXG5cIjAwMDEwMTAwXCIsXHJcblwiMDExMTExMTBcIixcclxuXCIxMDAxMDEwMFwiLFxyXG5cIjEwMDEwMTAwXCIsXHJcblwiMDExMDAxMDBcIixcclxuXCIwMDAwMDAwMFwiXHJcbl0sXHJcbi8vICMweDE4ZiBcclxuWyBcclxuXCIwMTEwMDAwMFwiLFxyXG5cIjAwMDAwMDAwXCIsXHJcblwiMTAwMTExMDBcIixcclxuXCIxMDEwMDAxMFwiLFxyXG5cIjExMDAwMDEwXCIsXHJcblwiMTAwMDAwMTBcIixcclxuXCIwMDAxMTEwMFwiLFxyXG5cIjAwMDAwMDAwXCJcclxuXSxcclxuLy8gIzB4MTkwIFxyXG5bIFxyXG5cIjAxMDAwMTAwXCIsXHJcblwiMDEwMDAxMDBcIixcclxuXCIxMTExMTExMFwiLFxyXG5cIjAxMDAwMTAwXCIsXHJcblwiMDEwMTEwMDBcIixcclxuXCIwMTAwMDAwMFwiLFxyXG5cIjAwMTExMTEwXCIsXHJcblwiMDAwMDAwMDBcIlxyXG5dLFxyXG4vLyAjMHgxOTEgXHJcblsgXHJcblwiMDAxMDAwMDBcIixcclxuXCIxMTExMTEwMFwiLFxyXG5cIjAxMDAwMDAwXCIsXHJcblwiMDEwMTExMTBcIixcclxuXCIxMDAwMDAwMFwiLFxyXG5cIjEwMTAwMDAwXCIsXHJcblwiMTAxMTExMTBcIixcclxuXCIwMDAwMDAwMFwiXHJcbl0sXHJcbi8vICMweDE5MiBcclxuWyBcclxuXCIwMDAwMTAwMFwiLFxyXG5cIjExMTExMTEwXCIsXHJcblwiMDAwMDEwMDBcIixcclxuXCIwMDExMTAwMFwiLFxyXG5cIjAxMDAxMDAwXCIsXHJcblwiMDAxMTEwMDBcIixcclxuXCIwMDAwMTAwMFwiLFxyXG5cIjAwMDEwMDAwXCJcclxuXSxcclxuLy8gIzB4MTkzIFxyXG5bIFxyXG5cIjAwMTAwMDAwXCIsXHJcblwiMDAxMDAwMTBcIixcclxuXCIwMDEwMTEwMFwiLFxyXG5cIjAwMTEwMDAwXCIsXHJcblwiMDEwMDAwMDBcIixcclxuXCIxMDAwMDAwMFwiLFxyXG5cIjAxMTExMTEwXCIsXHJcblwiMDAwMDAwMDBcIlxyXG5dLFxyXG4vLyAjMHgxOTQgXHJcblsgXHJcblwiMDAxMDAwMTBcIixcclxuXCIxMTExMTAwMVwiLFxyXG5cIjAwMTAwMTAxXCIsXHJcblwiMDAxMDAxMDBcIixcclxuXCIwMDEwMDEwMFwiLFxyXG5cIjAwMTAwMTAwXCIsXHJcblwiMDEwMDEwMDBcIixcclxuXCIwMDAwMDAwMFwiXHJcbl0sXHJcbi8vICMweDE5NSBcclxuWyBcclxuXCIwMDEwMDAwMFwiLFxyXG5cIjExMTExMDEwXCIsXHJcblwiMDEwMDAwMDFcIixcclxuXCIwMTAwMDEwMFwiLFxyXG5cIjEwMDExMTAwXCIsXHJcblwiMTAxMDAxMTBcIixcclxuXCIwMDAxMTEwMFwiLFxyXG5cIjAwMDAwMDAwXCJcclxuXSxcclxuLy8gIzB4MTk2IFxyXG5bIFxyXG5cIjExMTAwMDAwXCIsXHJcblwiMDAxMDAxMTBcIixcclxuXCIwMTAwMDEwMVwiLFxyXG5cIjEwMDAwMTAwXCIsXHJcblwiMTAwMDAxMDBcIixcclxuXCIxMDAwMTAwMFwiLFxyXG5cIjAxMTEwMDAwXCIsXHJcblwiMDAwMDAwMDBcIlxyXG5dLFxyXG4vLyAjMHgxOTcgXHJcblsgXHJcblwiMTExMTExMTBcIixcclxuXCIwMDAwMDEwMFwiLFxyXG5cIjAwMDAxMDAwXCIsXHJcblwiMDAwMTAwMDBcIixcclxuXCIwMDAxMDAwMFwiLFxyXG5cIjAwMDAxMDAwXCIsXHJcblwiMDAwMDAxMDBcIixcclxuXCIwMDAwMDAwMFwiXHJcbl0sXHJcbi8vICMweDE5OCBcclxuWyBcclxuXCIwMDEwMDAwMFwiLFxyXG5cIjExMTExMTEwXCIsXHJcblwiMDAwMTAwMDBcIixcclxuXCIwMDAwMTAwMFwiLFxyXG5cIjAxMDAwMTAwXCIsXHJcblwiMDAxMDAwMDBcIixcclxuXCIwMDAxMTAwMFwiLFxyXG5cIjAwMDAwMDAwXCJcclxuXSxcclxuLy8gIzB4MTk5IFxyXG5bIFxyXG5cIjAwMDEwMDAwXCIsXHJcblwiMDAxMDAwMDBcIixcclxuXCIwMDEwMDAwMFwiLFxyXG5cIjAxMTEwMDAwXCIsXHJcblwiMDEwMDEwMDBcIixcclxuXCIxMDAwMTAwMFwiLFxyXG5cIjEwMDAwMTEwXCIsXHJcblwiMDAwMDAwMDBcIlxyXG5dLFxyXG4vLyAjMHgxOWEgXHJcblsgXHJcblwiMTAwMDAwMDBcIixcclxuXCIwMTExMTEwMFwiLFxyXG5cIjAwMDAwMDEwXCIsXHJcblwiMDAwMDAwMTBcIixcclxuXCIwMDAwMDAxMFwiLFxyXG5cIjAwMDAwMTAwXCIsXHJcblwiMDAwMTEwMDBcIixcclxuXCIwMDAwMDAwMFwiXHJcbl0sXHJcbi8vICMweDE5YiBcclxuWyBcclxuXCIwMTExMTEwMFwiLFxyXG5cIjAwMDAxMDAwXCIsXHJcblwiMDAwMTAwMDBcIixcclxuXCIwMDEwMTEwMFwiLFxyXG5cIjAxMDAwMDEwXCIsXHJcblwiMDAwMDAwMTBcIixcclxuXCIwMDEwMDEwMFwiLFxyXG5cIjAwMDExMDAwXCJcclxuXSxcclxuLy8gIzB4MTljIFxyXG5bIFxyXG5cIjEwMDAwMTAwXCIsXHJcblwiMTAxMTExMTBcIixcclxuXCIxMDAwMDEwMFwiLFxyXG5cIjEwMDAwMTAwXCIsXHJcblwiMTAwMDAxMDBcIixcclxuXCIxMDAwMDEwMFwiLFxyXG5cIjAxMDAxMDAwXCIsXHJcblwiMDAwMDAwMDBcIlxyXG5dLFxyXG4vLyAjMHgxOWQgXHJcblsgXHJcblwiMDAwMTExMTBcIixcclxuXCIwMDAxMDAwMFwiLFxyXG5cIjAwMDEwMDAwXCIsXHJcblwiMDAwMTAwMDBcIixcclxuXCIwMDAwMDAwMFwiLFxyXG5cIjAwMDAwMDAwXCIsXHJcblwiMDAwMDAwMDBcIixcclxuXCIwMDAwMDAwMFwiXHJcbl0sXHJcbi8vICMweDE5ZSBcclxuWyBcclxuXCIwMDAwMDAwMFwiLFxyXG5cIjAwMTAwMDAwXCIsXHJcblwiMDExMTAwMDBcIixcclxuXCIwMDEwMDAwMFwiLFxyXG5cIjAxMTExMDAwXCIsXHJcblwiMTAwMTAxMDBcIixcclxuXCIwMTEwMTAwMFwiLFxyXG5cIjAwMDAwMDAwXCJcclxuXSxcclxuLy8gIzB4MTlmIFxyXG5bIFxyXG5cIjAwMDAwMDAwXCIsXHJcblwiMDAwMDAwMDBcIixcclxuXCIwMTAxMTAwMFwiLFxyXG5cIjExMTAwMTAwXCIsXHJcblwiMDAxMDEwMDBcIixcclxuXCIwMDEwMDAwMFwiLFxyXG5cIjAwMDEwMDAwXCIsXHJcblwiMDAwMDAwMDBcIlxyXG5dLFxyXG4vLyAjMHgxYTAgXHJcblsgXHJcblwiMDAxMDAwMDBcIixcclxuXCIxMTEwMDEwMFwiLFxyXG5cIjAwMTAxMDEwXCIsXHJcblwiMDAxMTAwMTBcIixcclxuXCIwMTEwMDAxMFwiLFxyXG5cIjEwMTAwMDEwXCIsXHJcblwiMDAxMDAxMDBcIixcclxuXCIwMDAwMDAwMFwiXHJcbl0sXHJcbi8vICMweDFhMSBcclxuWyBcclxuXCIwMDAwMDEwMFwiLFxyXG5cIjAxMDAwMTAwXCIsXHJcblwiMDExMTExMDBcIixcclxuXCIwMTAwMTAxMFwiLFxyXG5cIjEwMTEwMDEwXCIsXHJcblwiMTAwMTAxMTFcIixcclxuXCIwMTEwMDExMFwiLFxyXG5cIjAwMDAwMDAwXCJcclxuXSxcclxuLy8gIzB4MWEyIFxyXG5bIFxyXG5cIjAwMTExMDAwXCIsXHJcblwiMDAwMDAwMDBcIixcclxuXCIwMDAxMDAwMFwiLFxyXG5cIjAxMDAxMDEwXCIsXHJcblwiMDEwMDEwMTBcIixcclxuXCIxMDAwMTAxMFwiLFxyXG5cIjAwMTEwMDAwXCIsXHJcblwiMDAwMDAwMDBcIlxyXG5dLFxyXG4vLyAjMHgxYTMgXHJcblsgXHJcblwiMDAxMDAwMDBcIixcclxuXCIxMTExMTEwMFwiLFxyXG5cIjAwMTAwMDAwXCIsXHJcblwiMDExMTExMDBcIixcclxuXCIxMDEwMTAxMFwiLFxyXG5cIjEwMDEwMDEwXCIsXHJcblwiMDExMDAxMDBcIixcclxuXCIwMDAwMDAwMFwiXHJcbl0sXHJcbi8vICMweDFhNCBcclxuWyBcclxuXCIwMDAxMTAwMFwiLFxyXG5cIjAwMDAwMDAwXCIsXHJcblwiMDAxMTExMDBcIixcclxuXCIwMTAwMDAxMFwiLFxyXG5cIjAwMDAwMDEwXCIsXHJcblwiMDAwMDAxMDBcIixcclxuXCIwMDAwMTAwMFwiLFxyXG5cIjAwMDAwMDAwXCJcclxuXSxcclxuLy8gIzB4MWE1IFxyXG5bIFxyXG5cIjAwMDEwMDAwXCIsXHJcblwiMDAwMDAwMDBcIixcclxuXCIwMTExMTEwMFwiLFxyXG5cIjAwMDAxMDAwXCIsXHJcblwiMDAwMTAwMDBcIixcclxuXCIwMDEwMTAwMFwiLFxyXG5cIjAxMDAwMTEwXCIsXHJcblwiMDAwMDAwMDBcIlxyXG5dLFxyXG4vLyAjMHgxYTYgXHJcblsgXHJcblwiMDAxMDAwMDBcIixcclxuXCIxMTExMTEwMVwiLFxyXG5cIjAwMTAwMDAxXCIsXHJcblwiMDExMTExMDBcIixcclxuXCIxMDEwMDAxMFwiLFxyXG5cIjEwMTAwMDEwXCIsXHJcblwiMDExMDAxMDBcIixcclxuXCIwMDAwMDAwMFwiXHJcbl0sXHJcbi8vICMweDFhNyBcclxuWyBcclxuXCIwMTAwMTAwMFwiLFxyXG5cIjAxMDAxMTAwXCIsXHJcblwiMDAxMTAwMTBcIixcclxuXCIxMTEwMDAxMFwiLFxyXG5cIjAwMTAwMTAwXCIsXHJcblwiMDAwMTAwMDBcIixcclxuXCIwMDAxMDAwMFwiLFxyXG5cIjAwMDAxMDAwXCJcclxuXSxcclxuLy8gIzB4MWE4IFxyXG5bIFxyXG5cIjAwMDAxMDAwXCIsXHJcblwiMTAwMTExMDBcIixcclxuXCIxMDEwMTAxMFwiLFxyXG5cIjExMDAxMDEwXCIsXHJcblwiMTEwMDEwMTBcIixcclxuXCIxMDAwMTEwMFwiLFxyXG5cIjAwMDExMDAwXCIsXHJcblwiMDAwMDAwMDBcIlxyXG5dLFxyXG4vLyAjMHgxYTkgXHJcblsgXHJcblwiMDAwMDEwMDBcIixcclxuXCIwMDAwMTExMFwiLFxyXG5cIjAwMDAxMDAwXCIsXHJcblwiMDAwMDEwMDBcIixcclxuXCIwMTExMTAwMFwiLFxyXG5cIjEwMDAxMTEwXCIsXHJcblwiMDExMTEwMDBcIixcclxuXCIwMDAwMDAwMFwiXHJcbl0sXHJcbi8vICMweDFhYSBcclxuWyBcclxuXCIxMDAxMTExMFwiLFxyXG5cIjEwMDAwMTAwXCIsXHJcblwiMTAwMTExMTBcIixcclxuXCIxMDAwMDEwMFwiLFxyXG5cIjEwMDExMTAwXCIsXHJcblwiMTAxMDAxMTBcIixcclxuXCIxMTAxMTEwMFwiLFxyXG5cIjAwMDAwMDAwXCJcclxuXSxcclxuLy8gIzB4MWFiIFxyXG5bIFxyXG5cIjAwMDAwMDAwXCIsXHJcblwiMDAxMDAwMDBcIixcclxuXCIwMTAxMDAwMFwiLFxyXG5cIjEwMDAxMDAwXCIsXHJcblwiMDAwMDAxMDBcIixcclxuXCIwMDAwMDAxMFwiLFxyXG5cIjAwMDAwMDEwXCIsXHJcblwiMDAwMDAwMDBcIlxyXG5dLFxyXG4vLyAjMHgxYWMgXHJcblsgXHJcblwiMDAxMDAwMDBcIixcclxuXCIxMTEwMDExMFwiLFxyXG5cIjAwMTAxMTAwXCIsXHJcblwiMDAxMTAxMDBcIixcclxuXCIwMTEwMDEwMFwiLFxyXG5cIjEwMTAwMTAwXCIsXHJcblwiMDAxMDAwMTBcIixcclxuXCIwMDAwMDAwMFwiXHJcbl0sXHJcbi8vICMweDFhZCBcclxuWyBcclxuXCIwMDAwMDEwMFwiLFxyXG5cIjAxMDAwMTAwXCIsXHJcblwiMDExMTExMDBcIixcclxuXCIwMTAwMTAxMFwiLFxyXG5cIjEwMTEwMDEwXCIsXHJcblwiMTAwMTAwMTBcIixcclxuXCIwMTEwMDEwMFwiLFxyXG5cIjAwMDAwMDAwXCJcclxuXSxcclxuLy8gIzB4MWFlIFxyXG5bIFxyXG5cIjAxMTExMTAwXCIsXHJcblwiMDAwMDEwMDBcIixcclxuXCIwMDAxMDAwMFwiLFxyXG5cIjAwMTExMTAwXCIsXHJcblwiMDEwMDAwMTBcIixcclxuXCIwMDAxMTAxMFwiLFxyXG5cIjAwMTAwMTAwXCIsXHJcblwiMDAwMTEwMDBcIlxyXG5dLFxyXG4vLyAjMHgxYWYgXHJcblsgXHJcblwiMDAxMDAwMDBcIixcclxuXCIxMTEwMDEwMFwiLFxyXG5cIjAwMTAxMDEwXCIsXHJcblwiMDAxMTAwMTBcIixcclxuXCIwMTEwMDExMFwiLFxyXG5cIjEwMTAxMDExXCIsXHJcblwiMDAxMDAxMTBcIixcclxuXCIwMDAwMDAwMFwiXHJcbl0sXHJcbi8vICMweDFiMCBcclxuWyBcclxuXCIwMDEwMDAwMFwiLFxyXG5cIjExMTExMTAxXCIsXHJcblwiMDAxMDAwMDFcIixcclxuXCIwMTEwMDAwMFwiLFxyXG5cIjEwMTAwMDAwXCIsXHJcblwiMDExMDAwMTBcIixcclxuXCIwMDExMTExMFwiLFxyXG5cIjAwMDAwMDAwXCJcclxuXSxcclxuLy8gIzB4MWIxIFxyXG5bIFxyXG5cIjAwMDAwMDAwXCIsXHJcblwiMDAwMDAwMDBcIixcclxuXCIwMDAwMDAwMFwiLFxyXG5cIjAwMDAwMDAwXCIsXHJcblwiMDAwMDEwMDBcIixcclxuXCIwMDAwMTAwMFwiLFxyXG5cIjAwMDAxMDAwXCIsXHJcblwiMDExMTEwMDBcIlxyXG5dLFxyXG4vLyAjMHgxYjIgXHJcblsgXHJcblwiMDAwMDAwMDBcIixcclxuXCIwMDAwMDAwMFwiLFxyXG5cIjAxMDAxMDAwXCIsXHJcblwiMDEwMDAxMDBcIixcclxuXCIwMTAwMDEwMFwiLFxyXG5cIjAxMDAwMTAwXCIsXHJcblwiMDAxMDAwMDBcIixcclxuXCIwMDAwMDAwMFwiXHJcbl0sXHJcbi8vICMweDFiMyBcclxuWyBcclxuXCIwMDAwMDAwMFwiLFxyXG5cIjAwMDAwMDAwXCIsXHJcblwiMDAwMTAwMDBcIixcclxuXCIxMDExMTAwMFwiLFxyXG5cIjExMDEwMTAwXCIsXHJcblwiMTAwMTEwMDBcIixcclxuXCIwMDExMDAwMFwiLFxyXG5cIjAwMDAwMDAwXCJcclxuXSxcclxuLy8gIzB4MWI0IFxyXG5bIFxyXG5cIjAwMDEwMDAwXCIsXHJcblwiMTExMTExMTBcIixcclxuXCIwMDEwMDAwMFwiLFxyXG5cIjAxMTEwMTAwXCIsXHJcblwiMTAxMTEwMDBcIixcclxuXCIwMTAwMTAwMFwiLFxyXG5cIjAxMTExMTEwXCIsXHJcblwiMDAwMDAwMDBcIlxyXG5dLFxyXG4vLyAjMHgxYjUgXHJcblsgXHJcblwiMDAwMDAwMDBcIixcclxuXCIwMDAwMDAwMFwiLFxyXG5cIjAwMDAwMDAwXCIsXHJcblwiMDAwMDAwMDBcIixcclxuXCIwMDAwMDAwMFwiLFxyXG5cIjAxMDAwMDAwXCIsXHJcblwiMDAxMDAwMDBcIixcclxuXCIwMDAxMDAwMFwiXHJcbl0sXHJcbi8vICMweDFiNiBcclxuWyBcclxuXCIwMDAwMDAwMFwiLFxyXG5cIjAwMTAwMDAwXCIsXHJcblwiMDAwMDAwMDBcIixcclxuXCIwMTExMTAwMFwiLFxyXG5cIjAwMDAwMTAwXCIsXHJcblwiMDAwMDAxMDBcIixcclxuXCIwMDAwMTAwMFwiLFxyXG5cIjAwMDAwMDAwXCJcclxuXSxcclxuLy8gIzB4MWI3IFxyXG5bIFxyXG5cIjAwMDAwMDAwXCIsXHJcblwiMDAwMDAwMDBcIixcclxuXCIwMDEwMDAwMFwiLFxyXG5cIjAwMTExMDAwXCIsXHJcblwiMDAxMDAwMDBcIixcclxuXCIwMTExMTAwMFwiLFxyXG5cIjAxMTAwMDAwXCIsXHJcblwiMDAwMDAwMDBcIlxyXG5dLFxyXG4vLyAjMHgxYjggXHJcblsgXHJcblwiMDExMTAwMDBcIixcclxuXCIwMTAxMDAwMFwiLFxyXG5cIjAxMTEwMDAwXCIsXHJcblwiMDAwMDAwMDBcIixcclxuXCIwMDAwMDAwMFwiLFxyXG5cIjAwMDAwMDAwXCIsXHJcblwiMDAwMDAwMDBcIixcclxuXCIwMDAwMDAwMFwiXHJcbl0sXHJcbi8vICMweDFiOSBcclxuWyBcclxuXCIwMDAwMDAwMFwiLFxyXG5cIjAwMDAwMDAwXCIsXHJcblwiMDAwMDAwMDBcIixcclxuXCIwMDAwMDAwMFwiLFxyXG5cIjAwMDAwMDAwXCIsXHJcblwiMDAwMDAwMDBcIixcclxuXCIwMDEwMDAwMFwiLFxyXG5cIjAwMDAwMDAwXCJcclxuXSxcclxuLy8gIzB4MWJhIFxyXG5bIFxyXG5cIjAwMDAwMDAwXCIsXHJcblwiMDAxMDAwMDBcIixcclxuXCIwMDAwMDAwMFwiLFxyXG5cIjAxMTExMDAwXCIsXHJcblwiMDAwMTAwMDBcIixcclxuXCIwMDExMDAwMFwiLFxyXG5cIjAxMDAxMTAwXCIsXHJcblwiMDAwMDAwMDBcIlxyXG5dLFxyXG4vLyAjMHgxYmIgXHJcblsgXHJcblwiMDAwMDAwMDBcIixcclxuXCIwMDAwMDAwMFwiLFxyXG5cIjAwMDAwMDAwXCIsXHJcblwiMTExMTEwMDBcIixcclxuXCIwMDAwMDEwMFwiLFxyXG5cIjAwMDAwMTAwXCIsXHJcblwiMDAwMTEwMDBcIixcclxuXCIwMDAwMDAwMFwiXHJcbl0sXHJcbi8vICMweDFiYyBcclxuWyBcclxuXCIwMDEwMDAwMFwiLFxyXG5cIjEwMDEwMDAwXCIsXHJcblwiMDEwMDAwMDBcIixcclxuXCIwMDAwMDAwMFwiLFxyXG5cIjAwMDAwMDAwXCIsXHJcblwiMDAwMDAwMDBcIixcclxuXCIwMDAwMDAwMFwiLFxyXG5cIjAwMDAwMDAwXCJcclxuXSxcclxuLy8gIzB4MWJkIFxyXG5bIFxyXG5cIjAwMDAwMDAwXCIsXHJcblwiMDAwMDAwMDBcIixcclxuXCIwMDAwMDAwMFwiLFxyXG5cIjAwMDAwMDAwXCIsXHJcblwiMDAwMDAwMDBcIixcclxuXCIwMTExMDAwMFwiLFxyXG5cIjAxMDEwMDAwXCIsXHJcblwiMDExMTAwMDBcIlxyXG5dLFxyXG4vLyAjMHgxYmUgXHJcblsgXHJcblwiMDAwMDAwMDBcIixcclxuXCIwMDEwMDAwMFwiLFxyXG5cIjAxMTEwMTAwXCIsXHJcblwiMDAxMDAwMDBcIixcclxuXCIwMTExMTAwMFwiLFxyXG5cIjEwMTAwMTAwXCIsXHJcblwiMDExMDEwMDBcIixcclxuXCIwMDAwMDAwMFwiXHJcbl0sXHJcbi8vICMweDFiZiBcclxuWyBcclxuXCIwMDAwMDAwMFwiLFxyXG5cIjAwMDAwMDAwXCIsXHJcblwiMDAwMDAwMDBcIixcclxuXCIwMDAxMTEwMFwiLFxyXG5cIjAwMDAwMDAwXCIsXHJcblwiMDAwMDAwMDBcIixcclxuXCIwMDAwMDAwMFwiLFxyXG5cIjAwMDAwMDAwXCJcclxuXSxcclxuLy8gIzB4MWMwIFxyXG5bIFxyXG5cIjAwMDExMTAwXCIsXHJcblwiMDAwMTExMDBcIixcclxuXCIwMDExMTExMFwiLFxyXG5cIjAwMDExMTAwXCIsXHJcblwiMDAwMDEwMDBcIixcclxuXCIwMDAwMDAwMFwiLFxyXG5cIjAwMTExMTEwXCIsXHJcblwiMDAwMDAwMDBcIlxyXG5dLFxyXG4vLyAjMHgxYzEgXHJcblsgXHJcblwiMTExMTExMTFcIixcclxuXCIxMTExMDExMVwiLFxyXG5cIjExMTEwMTExXCIsXHJcblwiMTExMTAxMTFcIixcclxuXCIxMTAxMDEwMVwiLFxyXG5cIjExMTAwMDExXCIsXHJcblwiMTExMTAxMTFcIixcclxuXCIxMTExMTExMVwiXHJcbl0sXHJcbi8vICMweDFjMiBcclxuWyBcclxuXCIxMTExMTExMVwiLFxyXG5cIjExMTEwMTExXCIsXHJcblwiMTExMDAwMTFcIixcclxuXCIxMTAxMDEwMVwiLFxyXG5cIjExMTEwMTExXCIsXHJcblwiMTExMTAxMTFcIixcclxuXCIxMTExMDExMVwiLFxyXG5cIjExMTExMTExXCJcclxuXSxcclxuLy8gIzB4MWMzIFxyXG5bIFxyXG5cIjExMTExMTExXCIsXHJcblwiMTExMTExMTFcIixcclxuXCIxMTExMDExMVwiLFxyXG5cIjExMTExMDExXCIsXHJcblwiMTAwMDAwMDFcIixcclxuXCIxMTExMTAxMVwiLFxyXG5cIjExMTEwMTExXCIsXHJcblwiMTExMTExMTFcIlxyXG5dLFxyXG4vLyAjMHgxYzQgXHJcblsgXHJcblwiMTExMTExMTFcIixcclxuXCIxMTExMTExMVwiLFxyXG5cIjExMTAxMTExXCIsXHJcblwiMTEwMTExMTFcIixcclxuXCIxMDAwMDAwMVwiLFxyXG5cIjExMDExMTExXCIsXHJcblwiMTExMDExMTFcIixcclxuXCIxMTExMTExMVwiXHJcbl0sXHJcbi8vICMweDFjNSBcclxuWyBcclxuXCIxMDExMTAxMVwiLFxyXG5cIjEwMTExMDExXCIsXHJcblwiMTAxMTEwMTFcIixcclxuXCIxMDAwMDAxMVwiLFxyXG5cIjEwMTExMDExXCIsXHJcblwiMTAxMTEwMTFcIixcclxuXCIxMDExMTAxMVwiLFxyXG5cIjExMTExMTExXCJcclxuXSxcclxuLy8gIzB4MWM2IFxyXG5bIFxyXG5cIjExMTAwMDExXCIsXHJcblwiMTEwMTExMDFcIixcclxuXCIxMDExMTExMVwiLFxyXG5cIjEwMTExMTExXCIsXHJcblwiMTAxMTExMTFcIixcclxuXCIxMTAxMTEwMVwiLFxyXG5cIjExMTAwMDExXCIsXHJcblwiMTExMTExMTFcIlxyXG5dLFxyXG4vLyAjMHgxYzcgXHJcblsgXHJcblwiMDAwMTEwMDBcIixcclxuXCIwMDEwMDEwMFwiLFxyXG5cIjAxMTExMTEwXCIsXHJcblwiMTExMTExMTFcIixcclxuXCIwMTAxMTAxMFwiLFxyXG5cIjAwMTAwMTAwXCIsXHJcblwiMDAwMDAwMDBcIixcclxuXCIwMDAwMDAwMFwiXHJcbl0sXHJcbi8vICMweDFjOCBcclxuWyBcclxuXCIxMTEwMDAwMFwiLFxyXG5cIjAxMDAwMTExXCIsXHJcblwiMDEwMDAwMTBcIixcclxuXCIwMTExMTExMFwiLFxyXG5cIjAxMDAwMDEwXCIsXHJcblwiMDEwMDAxMTFcIixcclxuXCIxMTEwMDAwMFwiLFxyXG5cIjAwMDAwMDAwXCJcclxuXSxcclxuLy8gIzB4MWM5IFxyXG5bIFxyXG5cIjAwMTAwMDEwXCIsXHJcblwiMDAxMTExMTBcIixcclxuXCIwMDEwMTAxMFwiLFxyXG5cIjAwMDAxMDAwXCIsXHJcblwiMDAwMDEwMDBcIixcclxuXCIwMTAwMTAwMVwiLFxyXG5cIjAxMTExMTExXCIsXHJcblwiMDEwMDAwMDFcIlxyXG5dLFxyXG4vLyAjMHgxY2EgXHJcblsgXHJcblwiMDAwMTExMDBcIixcclxuXCIwMDAxMTEwMFwiLFxyXG5cIjAwMDAxMDAwXCIsXHJcblwiMDAxMTExMTBcIixcclxuXCIwMDAwMTAwMFwiLFxyXG5cIjAwMDAxMDAwXCIsXHJcblwiMDAwMTAxMDBcIixcclxuXCIwMDEwMDAxMFwiXHJcbl0sXHJcbi8vICMweDFjYiBcclxuWyBcclxuXCIwMDAwMDAwMFwiLFxyXG5cIjAwMDEwMDAxXCIsXHJcblwiMTEwMTAwMTBcIixcclxuXCIxMTExMTEwMFwiLFxyXG5cIjExMDEwMDEwXCIsXHJcblwiMDAwMTAwMDFcIixcclxuXCIwMDAwMDAwMFwiLFxyXG5cIjAwMDAwMDAwXCJcclxuXSxcclxuLy8gIzB4MWNjIFxyXG5bIFxyXG5cIjAwMDAwMDAwXCIsXHJcblwiMTAwMDEwMDBcIixcclxuXCIwMTAwMTAxMVwiLFxyXG5cIjAwMTExMTExXCIsXHJcblwiMDEwMDEwMTFcIixcclxuXCIxMDAwMTAwMFwiLFxyXG5cIjAwMDAwMDAwXCIsXHJcblwiMDAwMDAwMDBcIlxyXG5dLFxyXG4vLyAjMHgxY2QgXHJcblsgXHJcblwiMDAxMDAwMTBcIixcclxuXCIwMDAxMDEwMFwiLFxyXG5cIjAwMDAxMDAwXCIsXHJcblwiMDAwMDEwMDBcIixcclxuXCIwMDExMTExMFwiLFxyXG5cIjAwMDAxMDAwXCIsXHJcblwiMDAwMTExMDBcIixcclxuXCIwMDAxMTEwMFwiXHJcbl0sXHJcbi8vICMweDFjZSBcclxuWyBcclxuXCIwMDExMTEwMFwiLFxyXG5cIjAxMTExMTEwXCIsXHJcblwiMTExMTExMTFcIixcclxuXCIxMTAxMTAxMVwiLFxyXG5cIjExMTExMTExXCIsXHJcblwiMTExMDAxMTFcIixcclxuXCIwMTExMTExMFwiLFxyXG5cIjAwMTExMTAwXCJcclxuXSxcclxuLy8gIzB4MWNmIFxyXG5bIFxyXG5cIjAwMTExMTAwXCIsXHJcblwiMDEwMDAwMTBcIixcclxuXCIxMDAwMDAwMVwiLFxyXG5cIjEwMTAwMTAxXCIsXHJcblwiMTAwMDAwMDFcIixcclxuXCIxMDAxMTAwMVwiLFxyXG5cIjAxMDAwMDEwXCIsXHJcblwiMDAxMTExMDBcIlxyXG5dLFxyXG4vLyAjMHgxZDAgXHJcblsgXHJcblwiMDAxMTExMTBcIixcclxuXCIwMDEwMDAxMFwiLFxyXG5cIjAwMTAwMDEwXCIsXHJcblwiMDAxMTExMTBcIixcclxuXCIwMDEwMDAxMFwiLFxyXG5cIjAwMTAwMDEwXCIsXHJcblwiMDAxMTExMTBcIixcclxuXCIwMDAwMDAwMFwiXHJcbl0sXHJcbi8vICMweDFkMSBcclxuWyBcclxuXCIwMDExMTExMFwiLFxyXG5cIjAwMTAwMDEwXCIsXHJcblwiMDAxMTExMTBcIixcclxuXCIwMDEwMDAxMFwiLFxyXG5cIjAwMTExMTEwXCIsXHJcblwiMDAxMDAwMTBcIixcclxuXCIwMTAwMDAxMFwiLFxyXG5cIjAwMDAwMDAwXCJcclxuXSxcclxuLy8gIzB4MWQyIFxyXG5bIFxyXG5cIjAwMDAxMDAwXCIsXHJcblwiMDAxMDEwMTBcIixcclxuXCIwMDEwMTAxMFwiLFxyXG5cIjAwMDAxMDAwXCIsXHJcblwiMDAwMTAxMDBcIixcclxuXCIwMDEwMDAxMFwiLFxyXG5cIjAxMDAwMDAxXCIsXHJcblwiMDAwMDAwMDBcIlxyXG5dLFxyXG4vLyAjMHgxZDMgXHJcblsgXHJcblwiMDAwMDEwMDBcIixcclxuXCIwMDAwMTAwMVwiLFxyXG5cIjAwMTExMDEwXCIsXHJcblwiMDAwMDExMDBcIixcclxuXCIwMDAxMTEwMFwiLFxyXG5cIjAwMTAxMDEwXCIsXHJcblwiMDEwMDEwMDFcIixcclxuXCIwMDAwMDAwMFwiXHJcbl0sXHJcbi8vICMweDFkNCBcclxuWyBcclxuXCIwMDAwMTAwMFwiLFxyXG5cIjAwMDAxMDAwXCIsXHJcblwiMDAxMTExMTBcIixcclxuXCIwMDAwMTAwMFwiLFxyXG5cIjAwMDExMTAwXCIsXHJcblwiMDAxMDEwMTBcIixcclxuXCIwMTAwMTAwMVwiLFxyXG5cIjAwMDAwMDAwXCJcclxuXSxcclxuLy8gIzB4MWQ1IFxyXG5bIFxyXG5cIjAwMDAxMDAwXCIsXHJcblwiMDAwMTAxMDBcIixcclxuXCIwMDExMTExMFwiLFxyXG5cIjAxMDAxMDAxXCIsXHJcblwiMDAxMTExMTBcIixcclxuXCIwMDAxMTEwMFwiLFxyXG5cIjAxMTExMTExXCIsXHJcblwiMDAwMDAwMDBcIlxyXG5dLFxyXG4vLyAjMHgxZDYgXHJcblsgXHJcblwiMDAwMDAwMDBcIixcclxuXCIwMDAwMTAwMFwiLFxyXG5cIjAwMDAxMDAwXCIsXHJcblwiMDAxMTExMTBcIixcclxuXCIwMDAwMTAwMFwiLFxyXG5cIjAwMDAxMDAwXCIsXHJcblwiMDExMTExMTFcIixcclxuXCIwMDAwMDAwMFwiXHJcbl0sXHJcbi8vICMweDFkNyBcclxuWyBcclxuXCIwMDAwMTAwMFwiLFxyXG5cIjAxMDAxMDAwXCIsXHJcblwiMDExMTExMTBcIixcclxuXCIwMTAwMTAwMFwiLFxyXG5cIjAwMTExMTEwXCIsXHJcblwiMDAwMDEwMDBcIixcclxuXCIwMTExMTExMVwiLFxyXG5cIjAwMDAwMDAwXCJcclxuXSxcclxuLy8gIzB4MWQ4IFxyXG5bIFxyXG5cIjAwMTAwMDAwXCIsXHJcblwiMDAxMTExMTBcIixcclxuXCIwMTAwMTAwMFwiLFxyXG5cIjAwMTExMTAwXCIsXHJcblwiMDAxMDEwMDBcIixcclxuXCIwMTExMTExMFwiLFxyXG5cIjAwMDAxMDAwXCIsXHJcblwiMDAwMDAwMDBcIlxyXG5dLFxyXG4vLyAjMHgxZDkgXHJcblsgXHJcblwiMDAwMDAxMDBcIixcclxuXCIwMTExMTExMFwiLFxyXG5cIjAxMDEwMTAwXCIsXHJcblwiMDExMTExMTFcIixcclxuXCIwMTAxMDAxMFwiLFxyXG5cIjAxMTExMTExXCIsXHJcblwiMDAwMDEwMTBcIixcclxuXCIwMDAwMDAwMFwiXHJcbl0sXHJcbi8vICMweDFkYSBcclxuWyBcclxuXCIwMDAwMTAwMFwiLFxyXG5cIjAwMDEwMTAwXCIsXHJcblwiMDAxMDAwMTBcIixcclxuXCIwMTExMTExMVwiLFxyXG5cIjAwMDEwMDEwXCIsXHJcblwiMDAwMTAwMTBcIixcclxuXCIwMDEwMDEwMFwiLFxyXG5cIjAwMDAwMDAwXCJcclxuXSxcclxuLy8gIzB4MWRiIFxyXG5bIFxyXG5cIjAwMTExMDAwXCIsXHJcblwiMDAwMTAwMTBcIixcclxuXCIwMTExMTExMVwiLFxyXG5cIjAwMDEwMTExXCIsXHJcblwiMDAxMTEwMTFcIixcclxuXCIwMTAxMDAxMFwiLFxyXG5cIjAwMDEwMTAwXCIsXHJcblwiMDAwMDAwMDBcIlxyXG5dLFxyXG4vLyAjMHgxZGMgXHJcblsgXHJcblwiMDExMTExMTFcIixcclxuXCIwMTAwMTAwMVwiLFxyXG5cIjAxMDAxMDAxXCIsXHJcblwiMDExMTExMTFcIixcclxuXCIwMTAwMDAwMVwiLFxyXG5cIjAxMDAwMDAxXCIsXHJcblwiMDEwMDAwMDFcIixcclxuXCIwMDAwMDAwMFwiXHJcbl0sXHJcbi8vICMweDFkZCBcclxuWyBcclxuXCIwMDEwMDAxMFwiLFxyXG5cIjAwMDEwMTAwXCIsXHJcblwiMDAxMTExMTBcIixcclxuXCIwMDAwMTAwMFwiLFxyXG5cIjAwMTExMTEwXCIsXHJcblwiMDAwMDEwMDBcIixcclxuXCIwMDAwMTAwMFwiLFxyXG5cIjAwMDAwMDAwXCJcclxuXSxcclxuLy8gIzB4MWRlIFxyXG5bIFxyXG5cIjAwMDAxMTAwXCIsXHJcblwiMDAwMTAwMTBcIixcclxuXCIwMDAxMDAwMFwiLFxyXG5cIjAwMTExMDAwXCIsXHJcblwiMDAwMTAwMDBcIixcclxuXCIwMDAxMDAwMFwiLFxyXG5cIjAwMTExMTEwXCIsXHJcblwiMDAwMDAwMDBcIlxyXG5dLFxyXG4vLyAjMHgxZGYgXHJcblsgXHJcblwiMDAwMDAwMDBcIixcclxuXCIxMTAwMDAwMFwiLFxyXG5cIjExMDAxMDAwXCIsXHJcblwiMDEwMTAxMDBcIixcclxuXCIwMTAxMDEwMFwiLFxyXG5cIjAxMDEwMTAxXCIsXHJcblwiMDAxMDAwMTBcIixcclxuXCIwMDAwMDAwMFwiXHJcbl0sXHJcbi8vICMweDFlMCBcclxuWyBcclxuXCIwMDAwMDAwMFwiLFxyXG5cIjAwMDAwMDAwXCIsXHJcblwiMDAwMDAwMDBcIixcclxuXCIwMDAwMDAwMFwiLFxyXG5cIjAwMDAwMDAwXCIsXHJcblwiMDAwMDAwMTBcIixcclxuXCIxMTExMTExMVwiLFxyXG5cIjAwMDAwMDEwXCJcclxuXSxcclxuLy8gIzB4MWUxIFxyXG5bIFxyXG5cIjAwMDAwMDEwXCIsXHJcblwiMDAwMDAwMTBcIixcclxuXCIwMDAwMDAxMFwiLFxyXG5cIjAwMDAwMDEwXCIsXHJcblwiMDAwMDAwMTBcIixcclxuXCIwMDAwMDAxMFwiLFxyXG5cIjAwMDAwMTExXCIsXHJcblwiMDAwMDAwMTBcIlxyXG5dLFxyXG4vLyAjMHgxZTIgXHJcblsgXHJcblwiMDAwMDAwMTBcIixcclxuXCIwMDAwMDAxMFwiLFxyXG5cIjAwMDAwMDEwXCIsXHJcblwiMDAwMDAwMTBcIixcclxuXCIwMDAwMDAxMFwiLFxyXG5cIjAwMDAwMDEwXCIsXHJcblwiMTExMTExMTFcIixcclxuXCIwMDAwMDAxMFwiXHJcbl0sXHJcbi8vICMweDFlMyBcclxuWyBcclxuXCIwMDAwMDAwMFwiLFxyXG5cIjAwMDAwMDAwXCIsXHJcblwiMDAxMDAwMDBcIixcclxuXCIwMTAxMDAwMFwiLFxyXG5cIjEwMDAxMDAwXCIsXHJcblwiMDAwMDAxMDFcIixcclxuXCIwMDAwMDAxMFwiLFxyXG5cIjAwMDAwMDAwXCJcclxuXSxcclxuLy8gIzB4MWU0IFxyXG5bIFxyXG5cIjAwMDAwMDAwXCIsXHJcblwiMDAwMDExMTBcIixcclxuXCIwMDAxMDAwMVwiLFxyXG5cIjAwMTAwMDEwXCIsXHJcblwiMTEwMDAxMDBcIixcclxuXCIwMDAwMDEwMFwiLFxyXG5cIjAwMDAwMDEwXCIsXHJcblwiMDAwMDAwMDFcIlxyXG5dLFxyXG4vLyAjMHgxZTUgXHJcblsgXHJcblwiMDAwMDAwMDBcIixcclxuXCIxMTExMTExMVwiLFxyXG5cIjAwMDAwMDAwXCIsXHJcblwiMTAwMDAwMDFcIixcclxuXCIwMTAwMDAxMFwiLFxyXG5cIjAxMDAwMDEwXCIsXHJcblwiMTAwMDAwMDFcIixcclxuXCIwMDAwMDAwMFwiXHJcbl0sXHJcbi8vICMweDFlNiBcclxuWyBcclxuXCIwMDAwMDAwMFwiLFxyXG5cIjAxMTEwMDAwXCIsXHJcblwiMTAwMDEwMDBcIixcclxuXCIwMTAwMDEwMFwiLFxyXG5cIjAwMTAwMDExXCIsXHJcblwiMDAxMDAwMDBcIixcclxuXCIwMTAwMDAwMFwiLFxyXG5cIjEwMDAwMDAwXCJcclxuXSxcclxuLy8gIzB4MWU3IFxyXG5bIFxyXG5cIjAwMDAwMDAwXCIsXHJcblwiMTEwMDAxMDBcIixcclxuXCIxMDEwMDEwMFwiLFxyXG5cIjEwMDEwMTAwXCIsXHJcblwiMTAwMDExMTFcIixcclxuXCIxMDAxMDEwMFwiLFxyXG5cIjEwMTAwMTAwXCIsXHJcblwiMTEwMDAxMDBcIlxyXG5dLFxyXG4vLyAjMHgxZTggXHJcblsgXHJcblwiMDAwMDAwMDBcIixcclxuXCIwMDEwMDAxMVwiLFxyXG5cIjAwMTAwMTAxXCIsXHJcblwiMDAxMDEwMDFcIixcclxuXCIxMTExMDAwMVwiLFxyXG5cIjAwMTAxMDAxXCIsXHJcblwiMDAxMDAxMDFcIixcclxuXCIwMDEwMDAxMVwiXHJcbl0sXHJcbi8vICMweDFlOSBcclxuWyBcclxuXCIxMDAwMTAwMFwiLFxyXG5cIjEwMDEwMDAwXCIsXHJcblwiMTAxMDAwMDBcIixcclxuXCIxMTAwMDAwMFwiLFxyXG5cIjExMDAwMDAwXCIsXHJcblwiMTAxMDEwMDBcIixcclxuXCIxMDAxMTAwMFwiLFxyXG5cIjEwMTExMDAwXCJcclxuXSxcclxuLy8gIzB4MWVhIFxyXG5bIFxyXG5cIjEwMTAxMDAwXCIsXHJcblwiMTAxMTAwMDBcIixcclxuXCIxMDExMTAwMFwiLFxyXG5cIjExMDAwMDAwXCIsXHJcblwiMTEwMDAwMDBcIixcclxuXCIxMDEwMDAwMFwiLFxyXG5cIjEwMDEwMDAwXCIsXHJcblwiMTAwMDEwMDBcIlxyXG5dLFxyXG4vLyAjMHgxZWIgXHJcblsgXHJcblwiMTAwMDAwMDBcIixcclxuXCIwMTAwMDAwMFwiLFxyXG5cIjAwMTAwMDAwXCIsXHJcblwiMDAwMTAwMDBcIixcclxuXCIwMDAxMTExMVwiLFxyXG5cIjAwMTAwMDAwXCIsXHJcblwiMDEwMDAwMDBcIixcclxuXCIxMDAwMDAwMFwiXHJcbl0sXHJcbi8vICMweDFlYyBcclxuWyBcclxuXCIwMDAwMDAwMFwiLFxyXG5cIjAwMDAwMDAwXCIsXHJcblwiMDAxMDAxMDBcIixcclxuXCIwMDEwMDEwMFwiLFxyXG5cIjExMTAwMTExXCIsXHJcblwiMDAxMDAxMDBcIixcclxuXCIwMDEwMDEwMFwiLFxyXG5cIjAwMDAwMDAwXCJcclxuXSxcclxuLy8gIzB4MWVkIFxyXG5bIFxyXG5cIjAwMDAxMDAwXCIsXHJcblwiMDAwMDEwMDBcIixcclxuXCIwMDExMTExMFwiLFxyXG5cIjAwMDAwMDAwXCIsXHJcblwiMDAwMDAwMDBcIixcclxuXCIwMDExMTExMFwiLFxyXG5cIjAwMDAxMDAwXCIsXHJcblwiMDAwMDEwMDBcIlxyXG5dLFxyXG4vLyAjMHgxZWUgXHJcblsgXHJcblwiMDAwMDEwMDBcIixcclxuXCIwMDAxMDAwMFwiLFxyXG5cIjAwMTAwMDAwXCIsXHJcblwiMDAwMTAwMDBcIixcclxuXCIwMDAwMTAwMFwiLFxyXG5cIjAwMDAwMTAwXCIsXHJcblwiMDAwMDAwMTBcIixcclxuXCIwMDAwMDEwMFwiXHJcbl0sXHJcbi8vICMweDFlZiBcclxuWyBcclxuXCIwMTAxMDEwMVwiLFxyXG5cIjEwMTAxMDEwXCIsXHJcblwiMDEwMTAxMDFcIixcclxuXCIxMDEwMTAxMFwiLFxyXG5cIjAxMDEwMTAxXCIsXHJcblwiMTAxMDEwMTBcIixcclxuXCIwMTAxMDEwMVwiLFxyXG5cIjEwMTAxMDEwXCJcclxuXSxcclxuLy8gIzB4MWYwIFxyXG5bIFxyXG5cIjAwMDAwMDAwXCIsXHJcblwiMDAwMDAwMDBcIixcclxuXCIwMDAwMDAwMFwiLFxyXG5cIjAwMDAwMDAwXCIsXHJcblwiMDAwMDAwMDBcIixcclxuXCIwMDAwMDAwMFwiLFxyXG5cIjAwMDAwMDAwXCIsXHJcblwiMDAwMDAwMDBcIlxyXG5dLFxyXG4vLyAjMHgxZjEgXHJcblsgXHJcblwiMDAwMDAwMDBcIixcclxuXCIwMTExMDAwMFwiLFxyXG5cIjAxMTEwMDAwXCIsXHJcblwiMDExMTAwMDBcIixcclxuXCIwMDAwMDAwMFwiLFxyXG5cIjAwMDAwMDAwXCIsXHJcblwiMDAwMDAwMDBcIixcclxuXCIwMDAwMDAwMFwiXHJcbl0sXHJcbi8vICMweDFmMiBcclxuWyBcclxuXCIwMDAwMDAwMFwiLFxyXG5cIjAwMDAwMTExXCIsXHJcblwiMDAwMDAxMTFcIixcclxuXCIwMDAwMDExMVwiLFxyXG5cIjAwMDAwMDAwXCIsXHJcblwiMDAwMDAwMDBcIixcclxuXCIwMDAwMDAwMFwiLFxyXG5cIjAwMDAwMDAwXCJcclxuXSxcclxuLy8gIzB4MWYzIFxyXG5bIFxyXG5cIjAwMDAwMDAwXCIsXHJcblwiMDExMTAxMTFcIixcclxuXCIwMTExMDExMVwiLFxyXG5cIjAxMTEwMTExXCIsXHJcblwiMDAwMDAwMDBcIixcclxuXCIwMDAwMDAwMFwiLFxyXG5cIjAwMDAwMDAwXCIsXHJcblwiMDAwMDAwMDBcIlxyXG5dLFxyXG4vLyAjMHgxZjQgXHJcblsgXHJcblwiMDAwMDAwMDBcIixcclxuXCIwMDAwMDAwMFwiLFxyXG5cIjAwMDAwMDAwXCIsXHJcblwiMDAwMDAwMDBcIixcclxuXCIwMDAwMDAwMFwiLFxyXG5cIjAxMTEwMDAwXCIsXHJcblwiMDExMTAwMDBcIixcclxuXCIwMTExMDAwMFwiXHJcbl0sXHJcbi8vICMweDFmNSBcclxuWyBcclxuXCIwMDAwMDAwMFwiLFxyXG5cIjAxMTEwMDAwXCIsXHJcblwiMDExMTAwMDBcIixcclxuXCIwMTExMDAwMFwiLFxyXG5cIjAwMDAwMDAwXCIsXHJcblwiMDExMTAwMDBcIixcclxuXCIwMTExMDAwMFwiLFxyXG5cIjAxMTEwMDAwXCJcclxuXSxcclxuLy8gIzB4MWY2IFxyXG5bIFxyXG5cIjAwMDAwMDAwXCIsXHJcblwiMDAwMDAxMTFcIixcclxuXCIwMDAwMDExMVwiLFxyXG5cIjAwMDAwMTExXCIsXHJcblwiMDAwMDAwMDBcIixcclxuXCIwMTExMDAwMFwiLFxyXG5cIjAxMTEwMDAwXCIsXHJcblwiMDExMTAwMDBcIlxyXG5dLFxyXG4vLyAjMHgxZjcgXHJcblsgXHJcblwiMDAwMDAwMDBcIixcclxuXCIwMTExMDExMVwiLFxyXG5cIjAxMTEwMTExXCIsXHJcblwiMDExMTAxMTFcIixcclxuXCIwMDAwMDAwMFwiLFxyXG5cIjAxMTEwMDAwXCIsXHJcblwiMDExMTAwMDBcIixcclxuXCIwMTExMDAwMFwiXHJcbl0sXHJcbi8vICMweDFmOCBcclxuWyBcclxuXCIwMDAwMDAwMFwiLFxyXG5cIjAwMDAwMDAwXCIsXHJcblwiMDAwMDAwMDBcIixcclxuXCIwMDAwMDAwMFwiLFxyXG5cIjAwMDAwMDAwXCIsXHJcblwiMDAwMDAxMTFcIixcclxuXCIwMDAwMDExMVwiLFxyXG5cIjAwMDAwMTExXCJcclxuXSxcclxuLy8gIzB4MWY5IFxyXG5bIFxyXG5cIjAwMDAwMDAwXCIsXHJcblwiMDExMTAwMDBcIixcclxuXCIwMTExMDAwMFwiLFxyXG5cIjAxMTEwMDAwXCIsXHJcblwiMDAwMDAwMDBcIixcclxuXCIwMDAwMDExMVwiLFxyXG5cIjAwMDAwMTExXCIsXHJcblwiMDAwMDAxMTFcIlxyXG5dLFxyXG4vLyAjMHgxZmEgXHJcblsgXHJcblwiMDAwMDAwMDBcIixcclxuXCIwMDAwMDExMVwiLFxyXG5cIjAwMDAwMTExXCIsXHJcblwiMDAwMDAxMTFcIixcclxuXCIwMDAwMDAwMFwiLFxyXG5cIjAwMDAwMTExXCIsXHJcblwiMDAwMDAxMTFcIixcclxuXCIwMDAwMDExMVwiXHJcbl0sXHJcbi8vICMweDFmYiBcclxuWyBcclxuXCIwMDAwMDAwMFwiLFxyXG5cIjAxMTEwMTExXCIsXHJcblwiMDExMTAxMTFcIixcclxuXCIwMTExMDExMVwiLFxyXG5cIjAwMDAwMDAwXCIsXHJcblwiMDAwMDAxMTFcIixcclxuXCIwMDAwMDExMVwiLFxyXG5cIjAwMDAwMTExXCJcclxuXSxcclxuLy8gIzB4MWZjIFxyXG5bIFxyXG5cIjAwMDAwMDAwXCIsXHJcblwiMDAwMDAwMDBcIixcclxuXCIwMDAwMDAwMFwiLFxyXG5cIjAwMDAwMDAwXCIsXHJcblwiMDAwMDAwMDBcIixcclxuXCIwMTExMDExMVwiLFxyXG5cIjAxMTEwMTExXCIsXHJcblwiMDExMTAxMTFcIlxyXG5dLFxyXG4vLyAjMHgxZmQgXHJcblsgXHJcblwiMDAwMDAwMDBcIixcclxuXCIwMTExMDAwMFwiLFxyXG5cIjAxMTEwMDAwXCIsXHJcblwiMDExMTAwMDBcIixcclxuXCIwMDAwMDAwMFwiLFxyXG5cIjAxMTEwMTExXCIsXHJcblwiMDExMTAxMTFcIixcclxuXCIwMTExMDExMVwiXSxcclxuLy8gIzB4MWZlIFxyXG5bIFxyXG5cIjAwMDAwMDAwXCIsXHJcblwiMDAwMDAxMTFcIixcclxuXCIwMDAwMDExMVwiLFxyXG5cIjAwMDAwMTExXCIsXHJcblwiMDAwMDAwMDBcIixcclxuXCIwMTExMDExMVwiLFxyXG5cIjAxMTEwMTExXCIsXHJcblwiMDExMTAxMTFcIlxyXG5dLC8vICMweDFmZiBcclxuWyBcclxuXCIwMDAwMDAwMFwiLFxyXG5cIjAxMTEwMTExXCIsXHJcblwiMDExMTAxMTFcIixcclxuXCIwMTExMDExMVwiLFxyXG5cIjAwMDAwMDAwXCIsXHJcblwiMDExMTAxMTFcIixcclxuXCIwMTExMDExMVwiLFxyXG5cIjAxMTEwMTExXCJcclxuXVxyXG5dO1xyXG5cclxuIiwiXCJ1c2Ugc3RyaWN0XCI7XHJcbmltcG9ydCBcImJhYmVsLXBvbHlmaWxsXCI7XHJcbmltcG9ydCB7Zm9udERhdGF9IGZyb20gXCIuL216NzAwZm9uXCI7XHJcbmltcG9ydCB7Y2hhckNvZGVzLGNhbmFDb2Rlc30gZnJvbSBcIi4vY2hhckNvZGVzXCI7XHJcbmltcG9ydCAqIGFzIGF1ZGlvIGZyb20gXCIuL2F1ZGlvXCI7XHJcbmltcG9ydCB7c2VxRGF0YX0gZnJvbSAnLi9zZXFEYXRhJztcclxuXHJcbi8vIOODleODrOODvOODoOODkOODg+ODleOCoeOBq+abuOOBjei+vOOCgOOCt+OCp+ODvOODgOODvFxyXG4vLyB2YXIgdnNoYWRlckZTcmMgPSBcclxuLy8gYHByZWNpc2lvbiBtZWRpdW1wIGZsb2F0O1xyXG4vLyBhdHRyaWJ1dGUgdmVjMiBwb3NpdGlvbjtcclxuLy8gYXR0cmlidXRlIGZsb2F0IGNvbG9yO1xyXG4vLyB1bmlmb3JtIHZlYzIgYnVmZmVyU2l6ZTtcclxuLy8gdmFyeWluZyBmbG9hdCB2Y29sb3I7XHJcbiBcclxuLy8gdm9pZCBtYWluKHZvaWQpIHtcclxuLy8gICAgIHZlYzIgYnMgPSBidWZmZXJTaXplIC0gYnVmZmVyU2l6ZSAvICAyLjA7XHJcbi8vICAgICBicy55ID0gLWJzLnk7XHJcbi8vICAgICBnbF9Qb3NpdGlvbiA9IHZlYzQocG9zaXRpb24gLyBicywgMC4wLDEuMCk7XHJcbi8vICAgICB2Y29sb3IgPSBjb2xvcjtcclxuLy8gfVxyXG4vLyBgO1xyXG5cclxuLy8gdmFyIGZzaGFkZXJGU3JjID0gXHJcbi8vIGBwcmVjaXNpb24gbWVkaXVtcCBmbG9hdDtcclxuLy8gdmFyeWluZyBmbG9hdCB2Y29sb3I7XHJcbi8vIHZvaWQgbWFpbih2b2lkKXtcclxuLy8gIGdsX0ZyYWdDb2xvciA9IHZlYzQodmNvbG9yLCAwLiAsIDAuICwgMS4pO1xyXG4vLyB9XHJcbi8vIGA7XHJcblxyXG4vLyDjg5Hjg6zjg4Pjg4jjgqjjg5/jg6Xjg6zjg7zjg4jjgrfjgqfjg7zjg4Djg7xcclxudmFyIHZzaGFkZXJQU3JjID0gXHJcbmBwcmVjaXNpb24gbWVkaXVtcCBmbG9hdDtcclxuYXR0cmlidXRlIHZlYzIgcG9zaXRpb247XHJcbmF0dHJpYnV0ZSB2ZWMyIHRleHR1cmVfY29vcmQ7XHJcbnZhcnlpbmcgdmVjMiB2dGV4dHVyZV9jb29yZDtcclxuIFxyXG52b2lkIG1haW4odm9pZCkge1xyXG4gICAgZ2xfUG9zaXRpb24gPSB2ZWM0KHBvc2l0aW9uLDAuMCwxLjApO1xyXG4gICAgdnRleHR1cmVfY29vcmQgPSB0ZXh0dXJlX2Nvb3JkO1xyXG59XHJcbmA7XHJcblxyXG52YXIgZnNoYWRlclBTcmMgPSBcclxuYHByZWNpc2lvbiBtZWRpdW1wIGZsb2F0O1xyXG5cclxudW5pZm9ybSBzYW1wbGVyMkQgdGV4dHVyZUI7XHJcbnVuaWZvcm0gc2FtcGxlcjJEIHRleHR1cmVHO1xyXG51bmlmb3JtIHNhbXBsZXIyRCB0ZXh0dXJlUjtcclxudW5pZm9ybSBzYW1wbGVyMkQgcGFsbGV0X2NvbG9yO1xyXG51bmlmb3JtIHNhbXBsZXIyRCB0ZXh0dXJlRm9udDtcclxudW5pZm9ybSBzYW1wbGVyMkQgdGV4dHVyZUNoYXJDb2RlO1xyXG51bmlmb3JtIHNhbXBsZXIyRCB0ZXh0dXJlQ2hhckF0dHI7XHJcbnVuaWZvcm0gZmxvYXQgdGltZTtcclxuXHJcbnZhcnlpbmcgdmVjMiB2dGV4dHVyZV9jb29yZDtcclxuXHJcbi8vIOOCsOODqeODleOCo+ODg+OCr+ihqOekulxyXG52ZWM0IGdyYXBoaWNQbGFuZSh2b2lkKVxyXG57XHJcbiAgLy/jg4bjgq/jgrnjg4Hjg6PluqfmqJnjgojjgorjg5Pjg4Pjg4jkvY3nva7jgpLmsYLjgoHjgIHjgZ3jga7jg5Pjg4Pjg4jjgYznq4vjgaPjgZ8y6YCy5pWw5YCk44KS5b6X44KL44CCXHJcbiAgZmxvYXQgdCA9IGV4cDIoZmxvb3IobW9kKHZ0ZXh0dXJlX2Nvb3JkLnggKiA1MTIuMCw4LjApKSk7XHJcbiAgLy8gUkdC5ZCE44OX44Os44O844Oz44Gu54++5Zyo5bqn5qiZ44Gu44OQ44Kk44OI44OH44O844K/44KS6Kqt44G/6L6844KAXHJcbiAgdmVjNCBydCA9IHRleHR1cmUyRCh0ZXh0dXJlUiwgdnRleHR1cmVfY29vcmQpO1xyXG4gIHZlYzQgZ3QgPSB0ZXh0dXJlMkQodGV4dHVyZUcsIHZ0ZXh0dXJlX2Nvb3JkKTtcclxuICB2ZWM0IGJ0ID0gdGV4dHVyZTJEKHRleHR1cmVCLCB2dGV4dHVyZV9jb29yZCk7XHJcbiAgXHJcbiAgLy8g44OQ44Kk44OI44OH44O844K/44Gu5Lit44Gn44OT44OD44OI44GM56uL44Gj44Gm44GE44KL44GL44Gp44GG44GL44KS6Kq/44G544KLXHJcbiAgLy8gUuODl+ODrOODvOODs1xyXG4gIGZsb2F0IHIgPSBmbG9vcihtb2QobWluKHJ0LnggKiAyNTYuMCwyNTUuMCkgLyB0LDIuMCkpICogNC4wO1xyXG4gIC8vIEfjg5fjg6zjg7zjg7NcclxuICBmbG9hdCBnID0gZmxvb3IobW9kKG1pbihndC54ICogMjU2LjAsMjU1LjApIC8gdCwyLjApKSAqIDIuMDtcclxuICAvLyBC44OX44Os44O844OzXHJcbiAgZmxvYXQgYiA9IGZsb29yKG1vZChtaW4oYnQueCAqIDI1Ni4wLDI1NS4wKSAvIHQsMi4wKSk7XHJcblxyXG4gIC8vIOWQhOiJsuOBruWApOOCkui2s+OBl+OBpuato+imj+WMluOCkuihjOOBhOOAgeODkeODrOODg+ODiOOCpOODs+ODh+ODg+OCr+OCueOBi+OCieWun+mam+OBruiJsuOCkuW+l+OCiyBcclxuICB2ZWM0IHAgPSB0ZXh0dXJlMkQocGFsbGV0X2NvbG9yLHZlYzIoKHIgKyBnICsgYikgLyA4LjAgLDAuNSkpO1xyXG4gIGZsb2F0IGkgPSBtaW4ocC54ICogMjU2LjAsMjU1LjApO1xyXG4gIGZsb2F0IGFyID0gZmxvb3IobW9kKGkgKiAwLjUsMi4wKSk7IC8vIGJpdDNcclxuICBmbG9hdCBhZyA9IGZsb29yKG1vZChpICogMC4yNSwyLjApKTsgIC8vIGJpdDJcclxuICBmbG9hdCBhYiA9IGZsb29yKG1vZChpLDIuMCkpOyAvLyBiaXQxXHJcbiAgcmV0dXJuIHZlYzQoYXIsYWcsYWIsMS4wKTtcclxufVxyXG5cclxuLy8g5paH5a2X6KGo56S6XHJcbnZlYzQgdGV4dFBsYW5lKHZvaWQpe1xyXG4gIC8vIOOCreODo+ODqeOCr+OCv+OCs+ODvOODieOCkuiqreOBv+WHuuOBl1xyXG4gIHZlYzQgY2N0ID0gdGV4dHVyZTJEKHRleHR1cmVDaGFyQ29kZSwgdnRleHR1cmVfY29vcmQpO1xyXG4gIGZsb2F0IGNjID0gbWluKGNjdC54ICogMjU2LjAsMjU1LjApOy8vIOOCreODo+ODqeOCr+OCv+ODvOOCs+ODvOODiVxyXG5cclxuICAvLyDjgqLjg4jjg6rjg5Pjg6Xjg7zjg4jjgpLoqq3jgb/lh7rjgZdcclxuICB2ZWM0IGF0dHJ0ID0gdGV4dHVyZTJEKHRleHR1cmVDaGFyQXR0ciwgdnRleHR1cmVfY29vcmQpO1xyXG4gIFxyXG4gIC8vIOihqOekuuWvvuixoeOBruaWh+Wtl+OBruODk+ODg+ODiOS9jee9ruOCkuaxguOCgeOCi1xyXG4gIGZsb2F0IHggPSBleHAyKGZsb29yKG1vZCh2dGV4dHVyZV9jb29yZC54ICogNTEyLjAsOC4wKSkpO1xyXG4gIC8vIOihqOekuuWvvuixoeOBruaWh+Wtl+OBrlnkvY3nva7jgpLmsYLjgoHjgotcclxuICBmbG9hdCB5ID0gZmxvb3IobW9kKHZ0ZXh0dXJlX2Nvb3JkLnkgKiAyNTYuMCw4LjApKTtcclxuICBcclxuICAvLyDjgqLjg4jjg6rjg5Pjg6Xjg7zjg4jjga7oqZXkvqEgXHJcblxyXG4gIGZsb2F0IGkgPSBtaW4oYXR0cnQueCAqIDI1Ni4wLDI1NS4wKTsvLyDjgqLjg4jjg6rjg5Pjg6Xjg7zjg4jjg4fjg7zjgr9cclxuICBcclxuICAvLyDjgq3jg6Pjg6njgq/jgr/jgrvjg4Pjg4goMC4wIC4uIOOCu+ODg+ODiDAsIDEuMCAuLiDjgrvjg4Pjg4gxIClcclxuICBmbG9hdCBhdHQgPSBmbG9vcihtb2QoaSAvIDEyOC4wLDIuMCkpICogOC4wOy8vIGJpdCA3XHJcblxyXG4gIC8vIOaWh+Wtl+iJslxyXG4gIGZsb2F0IGNjZyA9IGZsb29yKG1vZChpIC8gNjQuMCwyLjApKTsvLyBiaXQgNlxyXG4gIGZsb2F0IGNjciA9IGZsb29yKG1vZChpIC8gMzIuMCwyLjApKTsvLyBiaXQgNVxyXG4gIGZsb2F0IGNjYiA9IGZsb29yKG1vZChpIC8gMTYuMCwyLjApKTsvLyBiaXQgNFxyXG5cclxuICAvLyDog4zmma/oibJcclxuICBmbG9hdCBiZ2cgPSBmbG9vcihtb2QoaSAvIDQuMCwyLjApKTsvLyBiaXQgMlxyXG4gIGZsb2F0IGJnciA9IGZsb29yKG1vZChpIC8gMi4wLDIuMCkpOy8vIGJpdCAxXHJcbiAgZmxvYXQgYmdiID0gZmxvb3IobW9kKGkgLDIuMCkpOy8vIGJpdCAwXHJcbiAgXHJcblxyXG4gIC8vIOODleOCqeODs+ODiOiqreOBv+WHuuOBl+S9jee9rlxyXG4gIHZlYzIgZm9udHBvcyA9IHZlYzIoY2MgLyAyNTYuMCwoeSArIGF0dCkgLyAxNi4wKTtcclxuICAvLyDjg5Xjgqnjg7Pjg4jjg4fjg7zjgr/jga7oqq3jgb/lh7rjgZdcclxuICB2ZWM0IHBpeEJ5dGUgPSB0ZXh0dXJlMkQodGV4dHVyZUZvbnQsZm9udHBvcyk7XHJcbiAgLy8g5oyH5a6a5L2N572u44Gu44OT44OD44OI44GM56uL44Gj44Gm44GE44KL44GL44OB44Kn44OD44KvXHJcbiAgZmxvYXQgcGl4Qml0ID0gZmxvb3IobW9kKG1pbihwaXhCeXRlLnggKiAyNTYuMCwyNTUuMCkgLyB4LDIuMCkpO1xyXG4gIFxyXG4gIGlmKHBpeEJpdCA9PSAxLjApe1xyXG4gICAgLy8g44OT44OD44OI44GM56uL44Gj44Gm44GE44KL44Go44GN44Gv44CB5paH5a2X6Imy44KS6Kit5a6aXHJcbiAgICByZXR1cm4gdmVjNChjY3IsY2NnLGNjYiwxLjApO1xyXG4gIH0gXHJcbiAgLy8g44OT44OD44OI44GM56uL44Gj44Gm44GE44Gq44GE44Go44GN44Gv6IOM5pmv6Imy44KS6Kit5a6aXHJcbiAgcmV0dXJuIHZlYzQoYmdyLGJnZyxiZ2IsMS4wKTtcclxufVxyXG5cclxudm9pZCBtYWluKHZvaWQpe1xyXG4gIHZlYzQgdGV4dENvbG9yID0gdGV4dFBsYW5lKCk7XHJcbiAgaWYoKHRleHRDb2xvci5yICsgdGV4dENvbG9yLmcgKyB0ZXh0Q29sb3IuYikgPiAwLjApe1xyXG4gICAgZ2xfRnJhZ0NvbG9yID0gdGV4dENvbG9yOyAgXHJcbiAgfSBlbHNlIHtcclxuICAgIHZlYzQgY29sb3IgPSBncmFwaGljUGxhbmUoKTtcclxuICAgIGdsX0ZyYWdDb2xvciA9IGNvbG9yO1xyXG4gIH1cclxufVxyXG5gO1xyXG4vLyBgcHJlY2lzaW9uIG1lZGl1bXAgZmxvYXQ7XHJcblxyXG4vLyB1bmlmb3JtIHNhbXBsZXIyRCB0ZXg7XHJcbi8vIHVuaWZvcm0gc2FtcGxlcjJEIHBhbGxldF9jb2xvcjtcclxuXHJcbi8vIHZhcnlpbmcgdmVjMiB2dGV4dHVyZV9jb29yZDtcclxuXHJcbi8vIHZvaWQgbWFpbih2b2lkKXtcclxuLy8gIHZlYzQgc2FtcGNvbG9yID0gdGV4dHVyZTJEKHRleCwgdnRleHR1cmVfY29vcmQpO1xyXG4vLyAgdmVjNCBjb2xvciA9IHRleHR1cmUyRChwYWxsZXRfY29sb3IsdmVjMihzYW1wY29sb3IueCAqIDMyLjAsMC41KSk7XHJcbi8vICBnbF9GcmFnQ29sb3IgPSBjb2xvcjtcclxuLy8gfVxyXG4vLyBgO1xyXG5cclxuXHJcbndpbmRvdy5hZGRFdmVudExpc3RlbmVyKCdsb2FkJywoKT0+e1xyXG4gIC8vIOOCs+ODs+OCveODvOODq+OBruS9nOaIkFxyXG4gIHZhciB2aWV3ID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoJ3ZpZXcnKTtcclxuICB2YXIgZ2w7XHJcbiAgdmFyIHdpZHRoLGhlaWdodDtcclxuICBjb25zdCB2aXJ0dWFsV2lkdGggPSAzMjAsdmlydHVhbEhlaWdodCA9IDIwMDtcclxuICBjb25zdCBidWZmZXJXaWR0aCA9IDUxMiAsYnVmZmVySGVpZ2h0ID0gMjU2LGJ1ZmZlclhTaXplID0gYnVmZmVyV2lkdGggLyA4O1xyXG4gIGNvbnN0IGZvbnRUZXhXaWR0aCA9IDI1Nixmb250VGV4SGVpZ2h0ID0gMTY7Ly84ICogMTYgKiAyO1xyXG4gIGNvbnN0IGNoYXJDb2RlQnVmZmVyV2lkdGggPSA1MTIgLyA4LGNoYXJDb2RlQnVmZmVySGVpZ2h0ID0gMzIsY29uc29sZVdpZHRoID0gNDAsY29uc29sZUhlaWdodCA9IDI1O1xyXG4gIHZhciBydW5CdG4gPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgncnVuJyksXHJcbiAgICAgIHBhdXNlQnRuID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoJ3BhdXNlJyksXHJcbiAgICAgIHN0b3BCdG4gPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgnc3RvcCcpO1xyXG4vLyAgICAgIHJlc2V0QnRuID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoJ3Jlc2V0Jyk7XHJcblx0dmFyIGJ1ZmZlckIgPSBuZXcgVWludDhBcnJheShidWZmZXJYU2l6ZSAqIGJ1ZmZlckhlaWdodCksXHJcbiAgYnVmZmVyRyA9IG5ldyBVaW50OEFycmF5KGJ1ZmZlclhTaXplICogYnVmZmVySGVpZ2h0KSxcclxuICBidWZmZXJSID0gbmV3IFVpbnQ4QXJyYXkoYnVmZmVyWFNpemUgKiBidWZmZXJIZWlnaHQpLFxyXG4gIHBhbGxldENvbG9ycyA9IG5ldyBVaW50OEFycmF5KFtcclxuICAgIDAsMSwyLDMsNCw1LDYsNyAgICBcclxuICBdKTtcclxuICB2YXIgY2hhckNvZGVCdWZmZXIgPSBuZXcgVWludDhBcnJheShjaGFyQ29kZUJ1ZmZlcldpZHRoICogY2hhckNvZGVCdWZmZXJIZWlnaHQpLFxyXG4gICAgICBjaGFyQXR0ckJ1ZmZlciA9IG5ldyBVaW50OEFycmF5KGNoYXJDb2RlQnVmZmVyV2lkdGggKiBjaGFyQ29kZUJ1ZmZlckhlaWdodCk7XHJcbiAgdmFyIGZvbnRCdWZmZXIgPSBuZXcgVWludDhBcnJheShmb250VGV4V2lkdGggKiBmb250VGV4SGVpZ2h0KTtcclxuICBcclxuICAvLyDjg5Pjg4Pjg4jjga5NU0LjgahMU0LjgpLlhaXjgozmm7/jgYjjgovjg6Hjgr3jg4Pjg4lcclxuICBmdW5jdGlvbiByZXYoeCl7XHJcbiAgICB4ID0geCAmIDB4ZmY7XHJcbiAgICAvLyAwYml044GoMWJpdOOAgTJiaXTjgagzYml044CBNGJpdOOBqDViaXTjgIE2Yml044GoN+ODk+ODg+ODiOOBruWPjei7olxyXG4gICAgeCA9ICgoeCAmIDB4NTUpIDw8IDEpIHwgKCh4ID4+PiAxKSAmIDB4NTUpO1xyXG4gICAgLy8gMC0xYml044GoMi0zYml044CBNC01Yml044GoNi03Yml044Gu5Y+N6LuiXHJcbiAgICB4ID0gKCh4ICYgMHgzMykgPDwgMikgfCAoKHggPj4+IDIpICYgMHgzMyk7XHJcbiAgICAvLyAwLTNiaXTjgIE0LTdiaXTjga7lj43ou6JcclxuICAgIHggPSAoKHggJiAweDBGKSA8PCA0KSB8ICgoeCA+Pj4gNCkgJiAweDBGKTtcclxuICAgIHJldHVybiB4O1xyXG4gIH1cclxuICBcclxuICAvLyDjg5Xjgqnjg7Pjg4jjg4fjg7zjgr/jga7oqq3jgb/ovrzjgb9cclxuICB7XHJcbiAgICBsZXQgaWR4ID0gMDtcclxuICAgIGxldCBvZmZzZXQgPSAwO1xyXG4gICAgZm9udERhdGEuZm9yRWFjaCgoZCxpKT0+e1xyXG4gICAgICBvZmZzZXQgPSAoKGkgLyAyNTYpIHwgMCkgKiA4OyBcclxuICAgICAgaWR4ID0gaSAlIDI1NjtcclxuICAgICAgZC5mb3JFYWNoKChieXRlQ2hhcixpeSk9PntcclxuICAgICAgICBsZXQgYnl0ZSA9IHBhcnNlSW50KGJ5dGVDaGFyLDIpO1xyXG4gICAgICAgIGZvbnRCdWZmZXJbaWR4ICsgKGl5ICsgb2Zmc2V0KSAqIDI1Nl0gPSByZXYoYnl0ZSk7XHJcbiAgICAgIH0pO1xyXG4gICAgfSk7XHJcbiAgfVxyXG5cclxuICB2YXIgbWFpbjtcclxuICAgICAgXHJcbiAgcnVuQnRuLmRpc2FibGVkID0gXCJkaXNhYmxlZFwiO1xyXG4gIHBhdXNlQnRuLmRpc2FibGVkID0gXCJkaXNhYmxlZFwiO1xyXG4gIHN0b3BCdG4uZGlzYWJsZWQgPSBcImRpc2FibGVkXCI7XHJcbi8vICByZXNldEJ0bi5kaXNhYmxlZCA9IFwiZGlzYWJsZWRcIjtcclxuXHJcbiAgY29uc3QgU1RBVFVTID0ge1xyXG4gICAgc3RvcDowLFxyXG4gICAgcnVuOjEsXHJcbiAgICBwYXVzZToyLFxyXG4gICAgcmVzZXQ6M1xyXG4gIH07XHJcblxyXG4gIHZhciBzdGF0dXMgPSBTVEFUVVMuc3RvcDtcclxuICAgICAgXHJcbiAgLy8gY29uLndpZHRoID0gY29uLm9mZnNldFdpZHRoO1xyXG4gIC8vIGNvbi5oZWlnaHQgPSAoY29uLm9mZnNldFdpZHRoICogMyAvIDQpIHwgMCA7XHJcbiAgZ2wgPSB2aWV3LmdldENvbnRleHQoJ3dlYmdsJyx7YW50aWFsaWFzOmZhbHNlfSkgfHwgdmlldy5nZXRDb250ZXh0KCdleHBlcmltZW50YWwtd2ViZ2wnLHthbnRpYWxpYXM6ZmFsc2V9KTtcclxuXHJcbiAgXHJcbiAgLy8g44K344Kn44O844OA44Gu5L2c5oiQXHJcbiAgZnVuY3Rpb24gY3JlYXRlU2hhZGVyKHNyYyxzaGFkZXJUeXBlKXtcclxuICAgIGxldCBzaGFkZXI7XHJcbiAgICBzaGFkZXIgPSBnbC5jcmVhdGVTaGFkZXIoc2hhZGVyVHlwZSk7XHJcbiAgICBnbC5zaGFkZXJTb3VyY2Uoc2hhZGVyLHNyYyk7XHJcbiAgICBnbC5jb21waWxlU2hhZGVyKHNoYWRlcik7XHJcbiAgICBpZighZ2wuZ2V0U2hhZGVyUGFyYW1ldGVyKHNoYWRlciwgZ2wuQ09NUElMRV9TVEFUVVMpKXtcclxuICAgICAgICB0aHJvdyBuZXcgRXJyb3IoZ2wuZ2V0U2hhZGVySW5mb0xvZyhzaGFkZXIpKTtcclxuICAgIH1cclxuICAgIHJldHVybiBzaGFkZXI7XHJcbiAgfVxyXG4gIFxyXG4gIC8vIOODl+ODreOCsOODqeODoOOCquODluOCuOOCp+OCr+ODiOOBruS9nOaIkFxyXG4gIGZ1bmN0aW9uIGNyZWF0ZVByb2dyYW0odnMsZnMpe1xyXG4gICAgLy8g44OX44Ot44Kw44Op44Og44Kq44OW44K444Kn44Kv44OI44Gu55Sf5oiQXHJcbiAgICB2YXIgcHJvZ3JhbSA9IGdsLmNyZWF0ZVByb2dyYW0oKTtcclxuICAgIFxyXG4gICAgLy8g44OX44Ot44Kw44Op44Og44Kq44OW44K444Kn44Kv44OI44Gr44K344Kn44O844OA44KS5Ymy44KK5b2T44Gm44KLXHJcbiAgICBnbC5hdHRhY2hTaGFkZXIocHJvZ3JhbSwgdnMpO1xyXG4gICAgZ2wuYXR0YWNoU2hhZGVyKHByb2dyYW0sIGZzKTtcclxuICAgIFxyXG4gICAgLy8g44K344Kn44O844OA44KS44Oq44Oz44KvXHJcbiAgICBnbC5saW5rUHJvZ3JhbShwcm9ncmFtKTtcclxuICAgIFxyXG4gICAgLy8g44K344Kn44O844OA44Gu44Oq44Oz44Kv44GM5q2j44GX44GP6KGM44Gq44KP44KM44Gf44GL44OB44Kn44OD44KvXHJcbiAgICBpZighZ2wuZ2V0UHJvZ3JhbVBhcmFtZXRlcihwcm9ncmFtLCBnbC5MSU5LX1NUQVRVUykpe1xyXG4gICAgICAgIHRocm93IG5ldyBFcnJvcihnbC5nZXRQcm9ncmFtSW5mb0xvZyhwcm9ncmFtKSk7XHJcbiAgICB9ICAgIFxyXG4gICAgZ2wudXNlUHJvZ3JhbShwcm9ncmFtKTtcclxuICAgIHJldHVybiBwcm9ncmFtO1xyXG4gIH1cclxuICBcclxuICAvL1ZCT+OBruS9nOaIkFxyXG4gIGZ1bmN0aW9uIGNyZWF0ZVZibyhkYXRhKXtcclxuICAgIHZhciB2Ym8gPSBnbC5jcmVhdGVCdWZmZXIoKTtcclxuICAgIGdsLmJpbmRCdWZmZXIoZ2wuQVJSQVlfQlVGRkVSLCB2Ym8pO1xyXG4gICAgZ2wuYnVmZmVyRGF0YShnbC5BUlJBWV9CVUZGRVIsIG5ldyBGbG9hdDMyQXJyYXkoZGF0YSksIGdsLlNUQVRJQ19EUkFXKTtcclxuICAgIGdsLmJpbmRCdWZmZXIoZ2wuQVJSQVlfQlVGRkVSLCBudWxsKTtcclxuICAgIHJldHVybiB2Ym87XHJcbiAgfVxyXG4gIFxyXG4gIFxyXG4gIC8vIOODleODrOODvOODoOODkOODg+ODleOCoeOCkuOCquODluOCuOOCp+OCr+ODiOOBqOOBl+OBpueUn+aIkOOBmeOCi+mWouaVsFxyXG4gIGZ1bmN0aW9uIGNyZWF0ZUZyYW1lYnVmZmVyKHdpZHRoLCBoZWlnaHQpe1xyXG4gICAgdmFyIGZyYW1lQnVmZmVyID0gZ2wuY3JlYXRlRnJhbWVidWZmZXIoKTtcclxuICAgIFxyXG4gICAgZ2wuYmluZEZyYW1lYnVmZmVyKGdsLkZSQU1FQlVGRkVSLCBmcmFtZUJ1ZmZlcik7XHJcbiAgICBcclxuICAgIHZhciBkZXB0aFJlbmRlckJ1ZmZlciA9IGdsLmNyZWF0ZVJlbmRlcmJ1ZmZlcigpO1xyXG4gICAgZ2wuYmluZFJlbmRlcmJ1ZmZlcihnbC5SRU5ERVJCVUZGRVIsIGRlcHRoUmVuZGVyQnVmZmVyKTtcclxuICAgIGdsLnJlbmRlcmJ1ZmZlclN0b3JhZ2UoZ2wuUkVOREVSQlVGRkVSLCBnbC5ERVBUSF9DT01QT05FTlQxNiwgd2lkdGgsIGhlaWdodCk7XHJcbiAgICBnbC5mcmFtZWJ1ZmZlclJlbmRlcmJ1ZmZlcihnbC5GUkFNRUJVRkZFUiwgZ2wuREVQVEhfQVRUQUNITUVOVCwgZ2wuUkVOREVSQlVGRkVSLCBkZXB0aFJlbmRlckJ1ZmZlcik7XHJcbiAgICBcclxuICAgIHZhciBmVGV4dHVyZSA9IGdsLmNyZWF0ZVRleHR1cmUoKTtcclxuICAgIGdsLmJpbmRUZXh0dXJlKGdsLlRFWFRVUkVfMkQsIGZUZXh0dXJlKTtcclxuICAgIGdsLnRleEltYWdlMkQoZ2wuVEVYVFVSRV8yRCwgMCwgZ2wuUkdCQSwgd2lkdGgsIGhlaWdodCwgMCwgZ2wuUkdCQSwgZ2wuVU5TSUdORURfQllURSwgbnVsbCk7XHJcbiAgICBnbC50ZXhQYXJhbWV0ZXJpKGdsLlRFWFRVUkVfMkQsIGdsLlRFWFRVUkVfTUFHX0ZJTFRFUiwgZ2wuTElORUFSKTtcclxuICAgIGdsLnRleFBhcmFtZXRlcmkoZ2wuVEVYVFVSRV8yRCwgZ2wuVEVYVFVSRV9NSU5fRklMVEVSLCBnbC5MSU5FQVIpO1xyXG4gICAgZ2wuZnJhbWVidWZmZXJUZXh0dXJlMkQoZ2wuRlJBTUVCVUZGRVIsIGdsLkNPTE9SX0FUVEFDSE1FTlQwLCBnbC5URVhUVVJFXzJELCBmVGV4dHVyZSwgMCk7XHJcbiAgICBcclxuICAgIGdsLmJpbmRUZXh0dXJlKGdsLlRFWFRVUkVfMkQsIG51bGwpO1xyXG4gICAgZ2wuYmluZFJlbmRlcmJ1ZmZlcihnbC5SRU5ERVJCVUZGRVIsIG51bGwpO1xyXG4gICAgZ2wuYmluZEZyYW1lYnVmZmVyKGdsLkZSQU1FQlVGRkVSLCBudWxsKTtcclxuICAgIFxyXG4gICAgcmV0dXJuIHtmIDogZnJhbWVCdWZmZXIsIGQgOiBkZXB0aFJlbmRlckJ1ZmZlciwgdCA6IGZUZXh0dXJlfTtcclxuICB9XHJcbiAgXHJcbiAgLy8gVkJP44KS44OQ44Kk44Oz44OJ44GX55m76Yyy44GZ44KL6Zai5pWwXHJcbiAgZnVuY3Rpb24gc2V0QXR0cmlidXRlKHZibywgYXR0TCwgYXR0Uyl7XHJcbiAgICAgIGZvcihsZXQgaSBpbiB2Ym8pe1xyXG4gICAgICAgICAgZ2wuYmluZEJ1ZmZlcihnbC5BUlJBWV9CVUZGRVIsIHZib1tpXSk7XHJcbiAgICAgICAgICBnbC5lbmFibGVWZXJ0ZXhBdHRyaWJBcnJheShhdHRMW2ldKTtcclxuICAgICAgICAgIGdsLnZlcnRleEF0dHJpYlBvaW50ZXIoYXR0TFtpXSwgYXR0U1tpXSwgZ2wuRkxPQVQsIGZhbHNlLCAwLCAwKTtcclxuICAgICAgfVxyXG4gIH1cclxuICBcclxuXHQvLyBJQk/jgpLnlJ/miJDjgZnjgovplqLmlbBcclxuXHRmdW5jdGlvbiBjcmVhdGVJYm8oZGF0YSl7XHJcblx0XHR2YXIgaWJvID0gZ2wuY3JlYXRlQnVmZmVyKCk7XHJcblx0XHRcclxuXHRcdGdsLmJpbmRCdWZmZXIoZ2wuRUxFTUVOVF9BUlJBWV9CVUZGRVIsIGlibyk7XHJcblx0XHRnbC5idWZmZXJEYXRhKGdsLkVMRU1FTlRfQVJSQVlfQlVGRkVSLCBuZXcgSW50MTZBcnJheShkYXRhKSwgZ2wuU1RBVElDX0RSQVcpO1xyXG5cdFx0Z2wuYmluZEJ1ZmZlcihnbC5FTEVNRU5UX0FSUkFZX0JVRkZFUiwgbnVsbCk7XHJcblx0XHRyZXR1cm4gaWJvO1xyXG5cdH0gIFxyXG4gIFxyXG4gXHQvLyDmnb/jg53jg6rjgrTjg7NcclxuXHR2YXIgcG9zaXRpb24gPSBbXHJcblx0XHQtMS4wLCAgMS4wLFxyXG5cdFx0IDEuMCwgIDEuMCxcclxuXHRcdC0xLjAsIC0xLjAsXHJcblx0XHQgMS4wLCAtMS4wXHJcblx0XTtcclxuICBcclxuXHR2YXIgdGV4Q29vcmQgPSBbXHJcblx0MC4wLCAwLjAsXHJcblx0IFx0dmlydHVhbFdpZHRoIC8gYnVmZmVyV2lkdGggLCAwLjAsXHJcblx0IFx0MC4wLCB2aXJ0dWFsSGVpZ2h0IC8gYnVmZmVySGVpZ2h0LFxyXG5cdCBcdHZpcnR1YWxXaWR0aCAvIGJ1ZmZlcldpZHRoLCB2aXJ0dWFsSGVpZ2h0IC8gYnVmZmVySGVpZ2h0XHJcblx0IF07XHJcbiAgXHJcblx0dmFyIGluZGV4ID0gW1xyXG5cdFx0MCwgMiwgMSxcclxuXHRcdDIsIDMsIDFcclxuXHRdO1xyXG4gIFxyXG5cdHZhciB2UG9zaXRpb24gPSBjcmVhdGVWYm8ocG9zaXRpb24pO1xyXG5cdHZhciB2VGV4Q29vcmQgPSBjcmVhdGVWYm8odGV4Q29vcmQpO1xyXG5cdHZhciBpSW5kZXggICAgPSBjcmVhdGVJYm8oaW5kZXgpO1xyXG4gICBcclxuICAvLyBjYW52YXPjgpLpu5Ljgafjgq/jg6rjgqIo5Yid5pyf5YyWKeOBmeOCi1xyXG4gIGdsLmNsZWFyQ29sb3IoMC4wLCAwLjAsIDAuMCwgMS4wKTtcclxuICBnbC52aWV3cG9ydCgwLDAsdmlydHVhbFdpZHRoLHZpcnR1YWxIZWlnaHQpO1xyXG4gIGdsLmNsZWFyRGVwdGgoMS4wKTtcclxuICBnbC5jbGVhcihnbC5DT0xPUl9CVUZGRVJfQklUIHwgZ2wuREVQVEhfQlVGRkVSX0JJVCk7XHJcblxyXG4gIGxldCB2c1AgPSBjcmVhdGVTaGFkZXIodnNoYWRlclBTcmMsZ2wuVkVSVEVYX1NIQURFUik7XHJcbiAgbGV0IGZzUCA9IGNyZWF0ZVNoYWRlcihmc2hhZGVyUFNyYyxnbC5GUkFHTUVOVF9TSEFERVIpO1xyXG4gIFxyXG4gIGxldCBwcmdQID0gY3JlYXRlUHJvZ3JhbSh2c1AsZnNQKTtcclxuICBcclxuICBsZXQgcHJnUFBvcyA9IGdsLmdldEF0dHJpYkxvY2F0aW9uKHByZ1AsJ3Bvc2l0aW9uJyk7XHJcbiAgbGV0IHByZ1BUZXhDb29yZCA9IGdsLmdldEF0dHJpYkxvY2F0aW9uKHByZ1AsJ3RleHR1cmVfY29vcmQnKTtcclxuICBcclxuICBsZXQgYXR0U3RyaWRlID0gNDtcclxuICBcclxuICBzZXRBdHRyaWJ1dGUoW3ZQb3NpdGlvbix2VGV4Q29vcmRdLFtwcmdQUG9zLHByZ1BUZXhDb29yZF0sWzIsMl0pO1xyXG4gIC8vc2V0QXR0cmlidXRlKFt2UG9zaXRpb25dLFtwcmdQUG9zXSxbMl0pO1xyXG4gIGdsLmJpbmRCdWZmZXIoZ2wuRUxFTUVOVF9BUlJBWV9CVUZGRVIsaUluZGV4KTtcclxuICBcclxuICB2YXIgcHJnUFRleEJQb3MgPSBnbC5nZXRVbmlmb3JtTG9jYXRpb24ocHJnUCwndGV4dHVyZUInKTtcclxuICB2YXIgcHJnUFRleEdQb3MgPSBnbC5nZXRVbmlmb3JtTG9jYXRpb24ocHJnUCwndGV4dHVyZUcnKTtcclxuICB2YXIgcHJnUFRleFJQb3MgPSBnbC5nZXRVbmlmb3JtTG9jYXRpb24ocHJnUCwndGV4dHVyZVInKTtcclxuICB2YXIgcHJnUFBhbGV0dFBvcyA9IGdsLmdldFVuaWZvcm1Mb2NhdGlvbihwcmdQLCdwYWxsZXRfY29sb3InKTtcclxuICB2YXIgcHJnUFRleEZvbnQgPSBnbC5nZXRVbmlmb3JtTG9jYXRpb24ocHJnUCwndGV4dHVyZUZvbnQnKTtcclxuICB2YXIgcHJnUFRleENoYXJDb2RlID0gZ2wuZ2V0VW5pZm9ybUxvY2F0aW9uKHByZ1AsJ3RleHR1cmVDaGFyQ29kZScpO1xyXG4gIHZhciBwcmdQVGV4Q2hhckF0dHIgPSBnbC5nZXRVbmlmb3JtTG9jYXRpb24ocHJnUCwndGV4dHVyZUNoYXJBdHRyJyk7XHJcbiAgdmFyIHByZ1BUaW1lID0gZ2wuZ2V0VW5pZm9ybUxvY2F0aW9uKHByZ1AsJ3RpbWUnKTtcclxuICBcclxuICAvLyDku67mg7Pjg5Pjg4Pjg4jjg57jg4Pjg5fjg4bjgq/jgrnjg4Hjg6PjgpLkvZzjgotcclxuICBcclxuICBmdW5jdGlvbiBjcmVhdGVMdW1pbmFjZVRleHR1cmUodGV4dHVyZU5vLHdpZHRoLGhlaWdodCxzcmNCdWZmZXIpXHJcbiAge1xyXG4gICAgdmFyIHRleHR1cmUgPSBnbC5jcmVhdGVUZXh0dXJlKCk7XHJcbiAgICBnbC5hY3RpdmVUZXh0dXJlKHRleHR1cmVObyk7XHJcbiAgICBnbC5iaW5kVGV4dHVyZShnbC5URVhUVVJFXzJELHRleHR1cmUpO1xyXG4gIC8vXHRnbC5waXhlbFN0b3JlaShnbC5VTlBBQ0tfRkxJUF9ZX1dFQkdMLCB0cnVlKTtcclxuICAgIGdsLnRleEltYWdlMkQoZ2wuVEVYVFVSRV8yRCwgMCwgZ2wuTFVNSU5BTkNFLCB3aWR0aCwgaGVpZ2h0LCAwLCBnbC5MVU1JTkFOQ0UsIFx0Z2wuVU5TSUdORURfQllURSwgc3JjQnVmZmVyKTtcclxuICAgIGdsLnRleFBhcmFtZXRlcmkoZ2wuVEVYVFVSRV8yRCwgZ2wuVEVYVFVSRV9NQUdfRklMVEVSLCBnbC5ORUFSRVNUKTtcclxuICAgIGdsLnRleFBhcmFtZXRlcmkoZ2wuVEVYVFVSRV8yRCwgZ2wuVEVYVFVSRV9NSU5fRklMVEVSLCBnbC5ORUFSRVNUKTtcclxuICAgIGdsLnRleFBhcmFtZXRlcmkoZ2wuVEVYVFVSRV8yRCwgZ2wuVEVYVFVSRV9XUkFQX1MsIGdsLkNMQU1QX1RPX0VER0UpO1xyXG4gICAgZ2wudGV4UGFyYW1ldGVyaShnbC5URVhUVVJFXzJELCBnbC5URVhUVVJFX1dSQVBfVCwgZ2wuQ0xBTVBfVE9fRURHRSk7XHJcbiAgICByZXR1cm4gdGV4dHVyZTsgICBcclxuICB9XHJcbiAgXHJcbiAgZnVuY3Rpb24gdXBkYXRlTHVtaW5hbmNlVGV4dHVyZSh0ZXh0dXJlTm8sdGV4dHVyZSx3aWR0aCxoZWlnaHQsc3JjQnVmZmVyKVxyXG4gIHtcclxuICAgIGdsLmFjdGl2ZVRleHR1cmUodGV4dHVyZU5vKTtcclxuICAgIGdsLmJpbmRUZXh0dXJlKGdsLlRFWFRVUkVfMkQsdGV4dHVyZSk7XHJcbiAgICBnbC50ZXhJbWFnZTJEKGdsLlRFWFRVUkVfMkQsIDAsIGdsLkxVTUlOQU5DRSwgd2lkdGgsIGhlaWdodCwgMCwgZ2wuTFVNSU5BTkNFLCBcdGdsLlVOU0lHTkVEX0JZVEUsIHNyY0J1ZmZlcik7XHJcbiAgfVxyXG4gIFxyXG4gIHZhciB0ZXh0dXJlQiA9IGNyZWF0ZUx1bWluYWNlVGV4dHVyZShnbC5URVhUVVJFMCxidWZmZXJYU2l6ZSxidWZmZXJIZWlnaHQsYnVmZmVyQik7XHJcbiAgdmFyIHRleHR1cmVHID0gY3JlYXRlTHVtaW5hY2VUZXh0dXJlKGdsLlRFWFRVUkUxLGJ1ZmZlclhTaXplLGJ1ZmZlckhlaWdodCxidWZmZXJHKTtcclxuICB2YXIgdGV4dHVyZVIgPSBjcmVhdGVMdW1pbmFjZVRleHR1cmUoZ2wuVEVYVFVSRTIsYnVmZmVyWFNpemUsYnVmZmVySGVpZ2h0LGJ1ZmZlclIpO1xyXG4gIFxyXG5cdHZhciBwYWxldHRlVGV4dHVyZSA9IGNyZWF0ZUx1bWluYWNlVGV4dHVyZShnbC5URVhUVVJFMyxwYWxsZXRDb2xvcnMubGVuZ3RoLDEscGFsbGV0Q29sb3JzKTtcclxuXHR2YXIgZm9udFRleHR1cmUgPSBjcmVhdGVMdW1pbmFjZVRleHR1cmUoZ2wuVEVYVFVSRTQsZm9udFRleFdpZHRoLGZvbnRUZXhIZWlnaHQsZm9udEJ1ZmZlcik7XHJcblx0dmFyIGNoYXJDb2RlVGV4dHVyZSA9IGNyZWF0ZUx1bWluYWNlVGV4dHVyZShnbC5URVhUVVJFNSxjaGFyQ29kZUJ1ZmZlcldpZHRoLGNoYXJDb2RlQnVmZmVySGVpZ2h0LGNoYXJDb2RlQnVmZmVyKTtcclxuXHR2YXIgY2hhckF0dHJUZXh0dXJlID0gY3JlYXRlTHVtaW5hY2VUZXh0dXJlKGdsLlRFWFRVUkU2LGNoYXJDb2RlQnVmZmVyV2lkdGgsY2hhckNvZGVCdWZmZXJIZWlnaHQsY2hhckF0dHJCdWZmZXIpO1xyXG5cclxuXHRnbC51bmlmb3JtMWkocHJnUFRleEJQb3MsIDApO1xyXG5cdGdsLnVuaWZvcm0xaShwcmdQVGV4R1BvcywgMSk7XHJcblx0Z2wudW5pZm9ybTFpKHByZ1BUZXhSUG9zLCAyKTtcclxuXHRnbC51bmlmb3JtMWkocHJnUFBhbGV0dFBvcywgMyk7XHJcblx0Z2wudW5pZm9ybTFpKHByZ1BUZXhGb250LCA0KTtcclxuXHRnbC51bmlmb3JtMWkocHJnUFRleENoYXJDb2RlLCA1KTtcclxuXHRnbC51bmlmb3JtMWkocHJnUFRleENoYXJBdHRyLCA2KTtcclxuXHJcbiAgZnVuY3Rpb24gcmVzaXplKCl7XHJcbiAgICB2YXIgY29udCA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCdjb250ZW50Jyk7XHJcbiAgICBpZihjb250Lm9mZnNldFdpZHRoID4gNzAwKXtcclxuICAgICAgdmlldy53aWR0aCA9IHZpcnR1YWxXaWR0aCAqIDI7Ly9jb250Lm9mZnNldFdpZHRoO1xyXG4gICAgICB2aWV3LmhlaWdodCA9IHZpcnR1YWxIZWlnaHQgKiAyOy8vY29udC5vZmZzZXRXaWR0aCAqIDMgLyA0O1xyXG4gICAgfSBlbHNlIHtcclxuICAgICAgdmlldy53aWR0aCA9IHZpcnR1YWxXaWR0aDtcclxuICAgICAgdmlldy5oZWlnaHQgPSB2aXJ0dWFsSGVpZ2h0O1xyXG4gICAgfVxyXG4gICAgd2lkdGggPSB2aWV3Lm9mZnNldFdpZHRoO1xyXG4gICAgaGVpZ2h0ID0gdmlldy5vZmZzZXRIZWlnaHQ7XHJcbiAgICBcclxuICAgIGdsLnZpZXdwb3J0KDAsMCx3aWR0aCxoZWlnaHQpO1xyXG5cclxuICAgIFxyXG4gICAgZ2wuY2xlYXJDb2xvcigwLjAsIDAuMCwgMC4wLCAxLjApO1xyXG4gICAgZ2wuY2xlYXIoZ2wuQ09MT1JfQlVGRkVSX0JJVCk7XHJcbiAgICBcclxuICB9XHJcbiAgcmVzaXplKCk7XHJcbiAgd2luZG93LmFkZEV2ZW50TGlzdGVuZXIoJ3Jlc2l6ZScscmVzaXplKTtcclxuXHJcbiAgLy8g44Os44Oz44OA44Oq44Oz44KwXHJcbiAgZnVuY3Rpb24gcmVuZGVyKCl7XHJcbiAgICByZXF1ZXN0QW5pbWF0aW9uRnJhbWUocmVuZGVyKTtcclxuXHRcdGdsLmNsZWFyQ29sb3IoMC4wLCAwLjAsIDAuMCwgMS4wKTtcclxuXHRcdGdsLmNsZWFyKGdsLkNPTE9SX0JVRkZFUl9CSVQgfCBnbC5ERVBUSF9CVUZGRVJfQklUKTtcclxuXHJcblxyXG4gICAgdXBkYXRlTHVtaW5hbmNlVGV4dHVyZShnbC5URVhUVVJFMCx0ZXh0dXJlQixidWZmZXJYU2l6ZSxidWZmZXJIZWlnaHQsYnVmZmVyQik7XHJcbiAgICB1cGRhdGVMdW1pbmFuY2VUZXh0dXJlKGdsLlRFWFRVUkUxLHRleHR1cmVHLGJ1ZmZlclhTaXplLGJ1ZmZlckhlaWdodCxidWZmZXJHKTtcclxuICAgIHVwZGF0ZUx1bWluYW5jZVRleHR1cmUoZ2wuVEVYVFVSRTIsdGV4dHVyZVIsYnVmZmVyWFNpemUsYnVmZmVySGVpZ2h0LGJ1ZmZlclIpO1xyXG4gXHJcbiAgICB1cGRhdGVMdW1pbmFuY2VUZXh0dXJlKGdsLlRFWFRVUkUzLHBhbGV0dGVUZXh0dXJlLHBhbGxldENvbG9ycy5sZW5ndGgsMSxwYWxsZXRDb2xvcnMpO1xyXG5cclxuICAgIHVwZGF0ZUx1bWluYW5jZVRleHR1cmUoZ2wuVEVYVFVSRTUsY2hhckNvZGVUZXh0dXJlLGNoYXJDb2RlQnVmZmVyV2lkdGgsY2hhckNvZGVCdWZmZXJIZWlnaHQsY2hhckNvZGVCdWZmZXIpO1xyXG4gICAgdXBkYXRlTHVtaW5hbmNlVGV4dHVyZShnbC5URVhUVVJFNixjaGFyQXR0clRleHR1cmUsY2hhckNvZGVCdWZmZXJXaWR0aCxjaGFyQ29kZUJ1ZmZlckhlaWdodCxjaGFyQXR0ckJ1ZmZlcik7XHJcblxyXG4gICAgZ2wuZHJhd0VsZW1lbnRzKGdsLlRSSUFOR0xFUywgaW5kZXgubGVuZ3RoLCBnbC5VTlNJR05FRF9TSE9SVCwgMCk7XHJcblx0XHRnbC5mbHVzaCgpO1xyXG4gICAgaWYoc3RhdHVzID09IFNUQVRVUy5ydW4pe1xyXG4gICAgICBtYWluICYmIG1haW4oKTtcclxuICAgIH1cclxuICB9XHJcbiAgXHJcbiAgZnVuY3Rpb24gdXBkYXRlU3RhdHVzKHMpe1xyXG4gICAgc3RhdHVzID0gcztcclxuICAgIHN3aXRjaChzKXtcclxuICAgICAgY2FzZSBTVEFUVVMuc3RvcDpcclxuICAgICAgICBydW5CdG4uZGlzYWJsZWQgPSBcIlwiO1xyXG4gICAgICAgIHBhdXNlQnRuLmRpc2FibGVkID0gXCJkaXNhYmxlZFwiO1xyXG4gICAgICAgIHN0b3BCdG4uZGlzYWJsZWQgPSBcImRpc2FibGVkXCI7XHJcbiAgICAgICAgYnJlYWs7XHJcbiAgICAgIGNhc2UgU1RBVFVTLnJ1bjpcclxuICAgICAgICBydW5CdG4uZGlzYWJsZWQgPSBcImRpc2FibGVkXCI7XHJcbiAgICAgICAgcGF1c2VCdG4uZGlzYWJsZWQgPSBcIlwiO1xyXG4gICAgICAgIHN0b3BCdG4uZGlzYWJsZWQgPSBcIlwiO1xyXG4gICAgICAgIGJyZWFrO1xyXG4gICAgICBjYXNlIFNUQVRVUy5wYXVzZTpcclxuICAgICAgICBydW5CdG4uZGlzYWJsZWQgPSBcImRpc2FibGVkXCI7XHJcbiAgICAgICAgcGF1c2VCdG4uZGlzYWJsZWQgPSBcIlwiO1xyXG4gICAgICAgIHN0b3BCdG4uZGlzYWJsZWQgPSBcIlwiO1xyXG4gICAgICAgIGJyZWFrO1xyXG4gICAgfVxyXG4gIH1cclxuICBcclxuICAvLyDjgrDjg6njg5XjgqPjg4Pjgq/jga7jg6Hjgr3jg4Pjg4njgZ/jgaFcclxuXHJcbiAgZnVuY3Rpb24gcHNldCh4LHksY29sb3Ipe1xyXG4gICAgdmFyIG9mZnNldCA9ICh5ICogYnVmZmVyWFNpemUgKyB4IC8gOCkgfCAwO1xyXG4gICAgdmFyIGJpdHBvcyA9IHggJSA4O1xyXG5cclxuICAgIFxyXG4gICAgbGV0IGIgPSAoY29sb3IgJiAxKSA8PCBiaXRwb3M7XHJcbiAgICBsZXQgbSA9IH4oMSA8PCBiaXRwb3MpICYgMHhmZjtcclxuICAgIGxldCBnID0gKChjb2xvciA+Pj4gMSkgJiAxKSA8PCBiaXRwb3M7XHJcbiAgICBsZXQgciA9ICgoY29sb3IgPj4+IDIpICYgMSkgPDwgYml0cG9zO1xyXG5cclxuICAgIGJ1ZmZlckJbb2Zmc2V0XSA9IChidWZmZXJCW29mZnNldF0gJiBtKSB8IGI7XHJcbiAgICBidWZmZXJHW29mZnNldF0gPSAoYnVmZmVyR1tvZmZzZXRdICYgbSkgfCBnO1xyXG4gICAgYnVmZmVyUltvZmZzZXRdID0gKGJ1ZmZlclJbb2Zmc2V0XSAmIG0pIHwgcjtcclxuICB9XHJcblxyXG4gIGZ1bmN0aW9uIHByZXNldCh4LHkpe1xyXG4gICAgdmFyIG9mZnNldCA9ICh5ICogYnVmZmVyWFNpemUgKyB4IC8gOCkgfCAwO1xyXG4gICAgdmFyIGJpdCA9IH4oMSA8PCAoeCAlIDgpKTtcclxuICAgIGJ1ZmZlckJbb2Zmc2V0XSAmPSBiaXQ7XHJcbiAgICBidWZmZXJHW29mZnNldF0gJj0gYml0O1xyXG4gICAgYnVmZmVyUltvZmZzZXRdICY9IGJpdDtcclxuICB9XHJcblxyXG4gIGZ1bmN0aW9uIGNscygpe1xyXG4gICAgZm9yKHZhciBpID0gMCxlID0gYnVmZmVyWFNpemUgKiBidWZmZXJIZWlnaHQ7aSA8IGU7KytpKSB7XHJcbiAgICAgICBidWZmZXJCW2ldID0gMDtcclxuICAgICAgIGJ1ZmZlckdbaV0gPSAwO1xyXG4gICAgICAgYnVmZmVyUltpXSA9IDA7XHJcbiAgICB9XHJcbiAgICBcclxuICAgIGZvcih2YXIgaSA9IDAsZSA9IGNoYXJDb2RlQnVmZmVyV2lkdGggKiBjaGFyQ29kZUJ1ZmZlckhlaWdodDtpIDwgZTsrK2kpe1xyXG4gICAgICBjaGFyQ29kZUJ1ZmZlcltpXSA9IDA7XHJcbiAgICAgIGNoYXJBdHRyQnVmZmVyW2ldID0gMDtcclxuICAgIH1cclxuICB9XHJcbiAgXHJcbiAgLy8g5paH5a2X5YiX44Gu6KGo56S6XHJcbiAgZnVuY3Rpb24gYWRkUG9zaXRpb24ob2Zmc2V0LGRlbHRhKVxyXG4gIHtcclxuICAgIG9mZnNldCArPSBkZWx0YTtcclxuICB9XHJcbiAgXHJcbiAgZnVuY3Rpb24gcHJpbnQoeCx5LHN0cixjb2xvcixiZ2NvbG9yLGhpcmFrYW5hID0gZmFsc2Upe1xyXG4gICAgbGV0IG9mZnNldCA9IHggKyB5ICogY2hhckNvZGVCdWZmZXJXaWR0aDtcclxuICAgIGZvcihsZXQgaSA9IDAsZSA9IHN0ci5sZW5ndGg7aSA8IGU7KytpKXtcclxuICAgICAgbGV0IGNvZGUgPSBzdHIuY2hhckNvZGVBdChpKTtcclxuICAgICAgaWYoY29kZSA+PSAweGZmNjAgJiYgY29kZSA8IDB4ZmZhMCl7XHJcbiAgICAgICAgY29kZSAtPSAweGZmNjA7XHJcbiAgICAgICAgY2hhckNvZGVCdWZmZXJbb2Zmc2V0XSA9IGNhbmFDb2Rlc1tjb2RlXVswXTtcclxuICAgICAgICBjaGFyQXR0ckJ1ZmZlcltvZmZzZXRdID0gKGNvbG9yIDw8IDQpIHwgYmdjb2xvciB8IGNhbmFDb2Rlc1tjb2RlXVsxXTtcclxuICAgICAgICBpZihoaXJha2FuYSkgY2hhckF0dHJCdWZmZXJbb2Zmc2V0XSB8PSAweDgwO1xyXG4gICAgICAgIG9mZnNldCArPSAxO1xyXG4gICAgICB9IGVsc2UgaWYoY29kZSA8IDB4ODApe1xyXG4gICAgICAgIGNoYXJDb2RlQnVmZmVyW29mZnNldF0gPSBjaGFyQ29kZXNbY29kZV1bMF07XHJcbiAgICAgICAgY2hhckF0dHJCdWZmZXJbb2Zmc2V0XSA9IChjb2xvciA8PCA0KSB8IGJnY29sb3IgfCBjaGFyQ29kZXNbY29kZV1bMV07XHJcbiAgICAgICAgaWYoaGlyYWthbmEpIGNoYXJBdHRyQnVmZmVyW29mZnNldF0gfD0gMHg4MDtcclxuICAgICAgICBvZmZzZXQgKz0gMTtcclxuICAgICAgfSBlbHNlIGlmKGNvZGUgPD0gMHhmZil7XHJcbiAgICAgICAgY2hhckNvZGVCdWZmZXJbb2Zmc2V0XSA9IGNvZGU7XHJcbiAgICAgICAgY2hhckF0dHJCdWZmZXJbb2Zmc2V0XSA9IChjb2xvciA8PCA0KSB8IGJnY29sb3I7XHJcbiAgICAgICAgaWYoaGlyYWthbmEpIGNoYXJBdHRyQnVmZmVyW29mZnNldF0gfD0gMHg4MDtcclxuICAgICAgICBvZmZzZXQgKz0gMTtcclxuICAgICAgfSBlbHNlIHtcclxuICAgICAgICBvZmZzZXQgKz0gMTtcclxuICAgICAgfVxyXG4gICAgfVxyXG4gIH1cclxuICBcclxuICBmdW5jdGlvbiBwcmludERpcmVjdCh4LHksc3RyLGNvbG9yLGJnY29sb3IsY2hhcnNldCA9IDApe1xyXG4gICAgbGV0IG9mZnNldCA9IHggKyB5ICogY2hhckNvZGVCdWZmZXJXaWR0aDtcclxuICAgIGZvcihsZXQgaSA9IDAsZSA9IHN0ci5sZW5ndGg7aSA8IGU7KytpKXtcclxuICAgICAgICBsZXQgY29kZSA9IHN0ci5jaGFyQ29kZUF0KGkpO1xyXG4gICAgICAgIGNoYXJDb2RlQnVmZmVyW29mZnNldF0gPSBjb2RlO1xyXG4gICAgICAgIGNoYXJBdHRyQnVmZmVyW29mZnNldF0gPSAoY29sb3IgPDwgNCkgfCBiZ2NvbG9yO1xyXG4gICAgICAgIGNoYXJBdHRyQnVmZmVyW29mZnNldF0gfD0gKGNoYXJzZXQgPDwgNyk7XHJcbiAgICAgICAgb2Zmc2V0ICs9IDE7XHJcbiAgICB9XHJcbiAgfVxyXG5cclxuICBmdW5jdGlvbiBzZXRDb2xvcih4LHksY29sb3IsYmdjb2xvcilcclxuICB7XHJcbiAgICBsZXQgb2Zmc2V0ID0geCArIHkgKiBjaGFyQ29kZUJ1ZmZlcldpZHRoO1xyXG4gICAgY2hhckF0dHJCdWZmZXJbb2Zmc2V0XSA9IChjb2xvciA8PCA0KSB8IGJnY29sb3IgfCAoY2hhckF0dHJCdWZmZXJbb2Zmc2V0XSAmIDB4ODApO1xyXG4gIH1cclxuICBcclxuICBmdW5jdGlvbiAqY2lyY2xlTG9vcChjb2xvcnMsY3gsY3ksdCkgXHJcbiAge1xyXG4gICAgICAvL3doaWxlICh0cnVlKSB7XHJcbiAgICAgIC8vY2xzKCk7XHJcbiAgICAgIFxyXG4gICAgICBmb3IobGV0IGkgPSAwO2kgPCAyNTY7KytpKVxyXG4gICAgICB7XHJcbiAgICAgICAgZm9yKGxldCB4ID0gMCxleCA9IDQwO3ggPCBleDsrK3gpe1xyXG4gICAgICAgICAgZm9yKGxldCB5ID0gMCxleSA9IDI1O3kgPCBleTsrK3kpe1xyXG4gICAgICAgICAgICBsZXQgZHggPSBNYXRoLmFicyh4IC0gY3gpLGR5ID0gTWF0aC5hYnMoeSAtIGN5KTtcclxuICAgICAgICAgICAgbGV0IGMgPSBjb2xvcnNbKE1hdGguc2luKE1hdGguc3FydChkeCpkeCArIGR5KmR5KSArIHQpICogMTggKyAxOCkgfCAwXTtcclxuICAgICAgICAgICAgc2V0Q29sb3IoeCx5LGMuYmFjayxjLmZyb250KTsgICAgICAgICBcclxuICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgICAgICAgdCArPSAwLjI7XHJcbiAgICAgICAgeWllbGQ7XHJcbiAgICAgIH1cclxuICAgICAgXHJcbiAgICAgIHJldHVybiB0OyAgXHJcbiAgfVxyXG5cclxuICBmdW5jdGlvbiAqcmVjdExvb3AoY29sb3JzLGN4LGN5LHQpIFxyXG4gIHtcclxuICAgICAgLy93aGlsZSAodHJ1ZSkge1xyXG4gICAgICAvL2NscygpO1xyXG4gICAgICBcclxuICAgICAgZm9yKGxldCBpID0gMDtpIDwgMjU2OysraSlcclxuICAgICAge1xyXG4gICAgICAgIGZvcihsZXQgeCA9IDAsZXggPSA0MDt4IDwgZXg7Kyt4KXtcclxuICAgICAgICAgIGZvcihsZXQgeSA9IDAsZXkgPSAyNTt5IDwgZXk7Kyt5KXtcclxuICAgICAgICAgICAgbGV0IGR4ID0gTWF0aC5hYnMoeCAtIGN4KSxkeSA9IE1hdGguYWJzKHkgLSBjeSk7XHJcbiAgICAgICAgICAgIGxldCBjO1xyXG4gICAgICAgICAgICBpZihkeCA+IGR5KSB7XHJcbiAgICAgICAgICAgICAgYyA9IGNvbG9yc1soTWF0aC5zaW4oZHggKyB0KSAqIDE4ICsgMTgpIHwgMF07XHJcbiAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgYyA9IGNvbG9yc1soTWF0aC5zaW4oZHkgKyB0KSAqIDE4ICsgMTgpIHwgMF07XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgc2V0Q29sb3IoeCx5LGMuYmFjayxjLmZyb250KTsgICAgICAgICBcclxuICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgICAgICAgdCArPSAwLjI7XHJcbiAgICAgICAgeWllbGQ7XHJcbiAgICAgIH1cclxuICAgICAgXHJcbiAgICAgIHJldHVybiB0OyAgXHJcbiAgfVxyXG5cclxuICBcclxuICAvLyDjg6HjgqTjg7NcclxuICBmdW5jdGlvbiBydW4oKXtcclxuICAgIHZhciBnZW4gPSAoZnVuY3Rpb24gKiAoKXtcclxuICAgICAgLy93aGlsZSAodHJ1ZSkge1xyXG4gICAgICAgIC8vIHBhbGxldENvbG9ycy5zZXQoWzAsMSwyLDMsNCw1LDYsN10pO1xyXG4gICAgICAgIC8vIGZvciAobGV0IHkgPSAwOyB5IDwgdmlydHVhbEhlaWdodDsgKyt5KSB7XHJcbiAgICAgICAgLy8gICBmb3IgKGxldCB4ID0gMDsgeCA8IHZpcnR1YWxXaWR0aDsgKyt4KSB7XHJcbiAgICAgICAgLy8gICAgIGlmKCgoKHkgLyA4KSB8IDApICYgMSkgPiAwKXtcclxuICAgICAgICAvLyAgICAgICBpZih4ICUgMTYgPCA4KXtcclxuICAgICAgICAvLyAgICAgICAgIHBzZXQoeCwgeSwgeSAlIDgpO1xyXG4gICAgICAgIC8vICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgLy8gICAgICAgICBwc2V0KHgsIHksIHggJSA4KTtcclxuICAgICAgICAvLyAgICAgICB9XHJcbiAgICAgICAgLy8gICAgIH0gZWxzZSB7XHJcbiAgICAgICAgLy8gICAgICAgaWYoeCAlIDE2ID49IDgpe1xyXG4gICAgICAgIC8vICAgICAgICAgcHNldCh4LCB5LCA3IC0geSAlIDgpO1xyXG4gICAgICAgIC8vICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgLy8gICAgICAgICBwc2V0KHgsIHksIDcgLSB4ICUgOCk7XHJcbiAgICAgICAgLy8gICAgICAgfVxyXG4gICAgICAgIC8vICAgICB9IFxyXG4gICAgICAgIC8vICAgfVxyXG4gICAgICAgIC8vICAgeWllbGQ7XHJcbiAgICAgICAgLy8gfVxyXG5cclxuICAgICAgICAvLyDjg5Hjg6zjg4Pjg4jjga7jgrnjgq/jg63jg7zjg6tcclxuICAgICAgICAvLyBmb3IobGV0IHQgPSAwO3QgPCAxMjg7Kyt0KVxyXG4gICAgICAgIC8vIHtcclxuICAgICAgICAvLyAgIGxldCBwID0gcGFsbGV0Q29sb3JzWzBdO1xyXG4gICAgICAgIC8vICAgZm9yIChsZXQgaSA9IDA7IGkgPCA3OyArK2kpIHtcclxuICAgICAgICAvLyAgICAgcGFsbGV0Q29sb3JzW2ldID0gcGFsbGV0Q29sb3JzW2kgKyAxXTtcclxuICAgICAgICAvLyAgIH1cclxuICAgICAgICAvLyAgIHBhbGxldENvbG9yc1s3XSA9IHA7XHJcbiAgICAgICAgLy8gICB5aWVsZDtcclxuICAgICAgICAvLyAgIHlpZWxkO1xyXG4gICAgICAgIC8vIH1cclxuICAgICAgICBcclxuICAgICAgICAvLyBmb3IobGV0IHQgPSAwO3QgPCA2NDA7Kyt0KXtcclxuICAgICAgICAvLyAgIGZvcihsZXQgdSA9IDA7dSA8IDEyODsrK3Upe1xyXG4gICAgICAgIC8vICAgICBwc2V0KE1hdGgucmFuZG9tKCkgKiAzMjAsTWF0aC5yYW5kb20oKSAqIDI0MCxNYXRoLnJhbmRvbSgpICogOCk7XHJcbiAgICAgICAgLy8gICB9XHJcbiAgICAgICAgLy8gICB5aWVsZDtcclxuICAgICAgICAvLyB9XHJcbiAgICAgICAgLy8gLy/jg5Hjg6zjg4Pjg4jjga7jgrnjgq/jg63jg7zjg6tcclxuICAgICAgICAvLyBmb3IobGV0IHQgPSAwO3QgPCAxMjg7Kyt0KVxyXG4gICAgICAgIC8vIHtcclxuICAgICAgICAvLyAgIGZvciAobGV0IGkgPSAwOyBpIDwgODsgKytpKSB7XHJcbiAgICAgICAgLy8gICAgIHBhbGxldENvbG9yc1tpXSA9IDA7XHJcbiAgICAgICAgLy8gICB9XHJcblxyXG4gICAgICAgIC8vICAgcGFsbGV0Q29sb3JzW3QgJSA3ICsgMV0gPSB0ICUgNyArIDE7XHJcblxyXG4gICAgICAgIC8vICAgZm9yKGxldCBpID0gMDtpIDwgNDsrK2kpe1xyXG4gICAgICAgIC8vICAgICB5aWVsZDtcclxuICAgICAgICAvLyAgIH1cclxuICAgICAgICAvLyB9XHJcbiAgICAgICAgLy8ge1xyXG4gICAgICAgIC8vICAgZm9yKGxldCBjb2xvciA9IDA7Y29sb3IgPCA4OysrY29sb3Ipe1xyXG4gICAgICAgIC8vICAgICBsZXQgaSA9IDB4MDtcclxuICAgICAgICAvLyAgICAgZm9yKGxldCB5ID0gMDt5IDwgMTY7Kyt5KXtcclxuICAgICAgICAvLyAgICAgICBmb3IobGV0IHggPSAwO3ggPCAxNjsrK3gpe1xyXG4gICAgICAgIC8vICAgICAgICAgY2hhckNvZGVCdWZmZXJbeCArIHkgKiBjaGFyQ29kZUJ1ZmZlcldpZHRoXSA9IGkgJSAyNTY7XHJcbiAgICAgICAgLy8gICAgICAgICBjaGFyQXR0ckJ1ZmZlclt4ICsgeSAqIGNoYXJDb2RlQnVmZmVyV2lkdGhdID0gY29sb3IgPDwgNCB8ICg3IC0gY29sb3IpO1xyXG4gICAgICAgIC8vICAgICAgICAgY2hhckNvZGVCdWZmZXJbeCArIDE2ICsgeSAqIGNoYXJDb2RlQnVmZmVyV2lkdGhdID0gaSAlIDI1NjtcclxuICAgICAgICAvLyAgICAgICAgIGNoYXJBdHRyQnVmZmVyW3ggKyAxNiArIHkgKiBjaGFyQ29kZUJ1ZmZlcldpZHRoXSA9IDB4ODAgfCBjb2xvciA8PCA0IHwgKDctY29sb3IpO1xyXG4gICAgICAgIC8vICAgICAgICAgKytpO1xyXG4gICAgICAgIC8vICAgICAgIH1cclxuICAgICAgICAvLyAgICAgICB5aWVsZDtcclxuICAgICAgICAvLyAgICAgfVxyXG4gICAgICAgIC8vICAgfVxyXG4gICAgICAgIC8vIH1cclxuICAgICAgICBcclxuICAgICAgICAvLyB5aWVsZDtcclxuICAgICAgICAvLyBmb3IobGV0IGkgPSAyNTY7aSA8IDUxMjsrK2kpe1xyXG4gICAgICAgIC8vICAgY2hhckNvZGVCdWZmZXJbKGkgLyA0MCAqIDY0KSB8IDAgKyBpICUgNDBdID0gaSAtIDI1NjtcclxuICAgICAgICAvLyAgIGNoYXJBdHRyQnVmZmVyWyhpIC8gNDAgKiA2NCkgfCAwICsgaSAlIDQwXSA9MHgxNztcclxuICAgICAgICAvLyB9XHJcbiAgICAgICAgLy8geWllbGQ7XHJcbiAgICAgICAgLy8gZm9yKGxldCBpID0gNTEyO2kgPCA3Njg7KytpKXtcclxuICAgICAgICAvLyAgIGNoYXJDb2RlQnVmZmVyWyhpIC8gNDAgKiA2NCkgfCAwICsgaSAlIDQwXSA9IGkgLSA1MTI7XHJcbiAgICAgICAgLy8gICBjaGFyQXR0ckJ1ZmZlclsoaSAvIDQwICogNjQpIHwgMCArIGkgJSA0MF0gPTB4ZjE7XHJcbiAgICAgICAgLy8gfVxyXG4gICAgICAgIC8vIHlpZWxkO1xyXG4gICAgICAgIC8vIGxldCBtZXMgPSAgJ01aLTcwMO++jO+9q+++ne++hO+9pu++i++9ru+9s++9vO++nu++g+++nu++kyc7XHJcbiAgICAgICAgLy8gbGV0IG1lczEgPSAnICAgICAgICAgICAgICAgICAgICc7XHJcbiAgICAgICAgXHJcbiAgICAgICAgLy8gZm9yKGxldCBpID0gMDtpIDwgNTsrK2kpe1xyXG4gICAgICAgIC8vICAgcHJpbnQoMjAgLSAobWVzLmxlbmd0aCAvIDIpIHwgMCwxMCxtZXMsNywwKTtcclxuICAgICAgICAvLyAgIGZvcihsZXQgaiA9IDA7aiA8IDE2Oysrail7XHJcbiAgICAgICAgLy8gICAgIHlpZWxkO1xyXG4gICAgICAgIC8vICAgfVxyXG4gICAgICAgIC8vICAgcHJpbnQoMjAgLSAobWVzMS5sZW5ndGggLyAyKSB8IDAsMTAsbWVzMSw3LDApO1xyXG4gICAgICAgIC8vICAgZm9yKGxldCBqID0gMDtqIDwgMTY7KytqKXtcclxuICAgICAgICAvLyAgICAgeWllbGQ7XHJcbiAgICAgICAgLy8gICB9XHJcbiAgICAgICAgLy8gfVxyXG4gICAgICAgIC8vIHtcclxuICAgICAgICAvLyAgIGxldCBpID0gMDtcclxuICAgICAgICAvLyAgIGxldCB4cyA9IDAsIHhlID0gNDAgLHlzID0gMCx5ZSA9IDI1O1xyXG4gICAgICAgIC8vICAgbGV0IHggPSAwICwgeSA9IDAsIGMgPSAwO1xyXG4gICAgICAgIC8vICAgd2hpbGUodHJ1ZSl7XHJcbiAgICAgICAgLy8gICAgIGZvcih4ID0geHM7IHggPCB4ZTsgKyt4KXtcclxuICAgICAgICAvLyAgICAgICBwcmludERpcmVjdCh4LHksU3RyaW5nLmZyb21DaGFyQ29kZShpICUgMjU2KSxjICUgOCw3IC0gYyAlIDgsaSA+IDI1NT8xOjApO1xyXG4gICAgICAgIC8vICAgICAgICsraTtcclxuICAgICAgICAvLyAgICAgICBpID0gaSAlIDUxMjtcclxuICAgICAgICAvLyAgICAgICB5aWVsZDtcclxuICAgICAgICAvLyAgICAgfVxyXG4gICAgICAgIC8vICAgICArK2M7XHJcbiAgICAgICAgLy8gICAgIC0teDtcclxuICAgICAgICAvLyAgICAgKyt5cztcclxuICAgICAgICAvLyAgICAgaWYoKHhzID49IHhlKSB8fCAoeXMgPj0geWUpKSBicmVhaztcclxuICAgICAgICAvLyAgICAgZm9yKHkgPSB5czsgeSA8IHllOyArK3kpe1xyXG4gICAgICAgIC8vICAgICAgIHByaW50RGlyZWN0KHgseSxTdHJpbmcuZnJvbUNoYXJDb2RlKGkgJSAyNTYpLGMgJSA4LDcgLSBjICUgOCxpID4gMjU1PzE6MCk7XHJcbiAgICAgICAgLy8gICAgICAgKytpO1xyXG4gICAgICAgIC8vICAgICAgIGkgPSBpICUgNTEyO1xyXG4gICAgICAgIC8vICAgICAgIHlpZWxkO1xyXG4gICAgICAgIC8vICAgICB9XHJcbiAgICAgICAgLy8gICAgICsrYztcclxuICAgICAgICAvLyAgICAgLS15O1xyXG4gICAgICAgIC8vICAgICAtLXhlO1xyXG4gICAgICAgIC8vICAgICBpZigoeHMgPj0geGUpIHx8ICh5cyA+PSB5ZSkpIGJyZWFrO1xyXG4gICAgICAgIC8vICAgICBmb3IoeCA9IHhlIC0gMTsgeCA+PSB4cyA7IC0teCl7XHJcbiAgICAgICAgLy8gICAgICAgcHJpbnREaXJlY3QoeCx5LFN0cmluZy5mcm9tQ2hhckNvZGUoaSAlIDI1NiksYyAlIDgsNyAtIGMgJSA4LGkgPiAyNTU/MTowKTtcclxuICAgICAgICAvLyAgICAgICArK2k7XHJcbiAgICAgICAgLy8gICAgICAgaSA9IGkgJSA1MTI7XHJcbiAgICAgICAgLy8gICAgICAgeWllbGQ7XHJcbiAgICAgICAgLy8gICAgIH1cclxuICAgICAgICAvLyAgICAgKytjO1xyXG4gICAgICAgIC8vICAgICAtLXllO1xyXG4gICAgICAgIC8vICAgICArK3g7XHJcbiAgICAgICAgLy8gICAgIGlmKCh4cyA+PSB4ZSkgfHwgKHlzID49IHllKSkgYnJlYWs7XHJcbiAgICAgICAgLy8gICAgIGZvcih5ID0geWUgLSAxOyB5ID49IHlzOy0teSl7XHJcbiAgICAgICAgLy8gICAgICAgcHJpbnREaXJlY3QoeCx5LFN0cmluZy5mcm9tQ2hhckNvZGUoaSAlIDI1NiksYyAlIDgsNyAtIGMgJSA4LGkgPiAyNTU/MTowKTtcclxuICAgICAgICAvLyAgICAgICArK2k7XHJcbiAgICAgICAgLy8gICAgICAgaSA9IGkgJSA1MTI7XHJcbiAgICAgICAgLy8gICAgICAgeWllbGQ7XHJcbiAgICAgICAgLy8gICAgIH1cclxuICAgICAgICAvLyAgICAgKytjO1xyXG4gICAgICAgIC8vICAgICArK3k7XHJcbiAgICAgICAgLy8gICAgICsreHM7XHJcbiAgICAgICAgLy8gICAgIGlmKCh4cyA+PSB4ZSkgfHwgKHlzID49IHllKSkgYnJlYWs7XHJcbiAgICAgICAgLy8gICB9XHJcbiAgICAgICAgICBcclxuICAgICAgICAvLyB9XHJcbiAgICAgICAgLy8gZm9yKGxldCBqID0gMDtqIDwgNjQ7KytqKXtcclxuICAgICAgICAvLyAgIHlpZWxkO1xyXG4gICAgICAgIC8vIH1cclxuICAgICAgICAvLyBjbHMoKTtcclxuICAgICAgLy99XHJcbiAgICAgIFxyXG4gICAgICBsZXQgY3ggPSAyMCxjeSA9IDEzO1xyXG4gICAgICBsZXQgaSA9IDA7XHJcbiAgICAgIGxldCBjb2xvcnMgPSBbXTtcclxuICAgICAgbGV0IGNoZWNrZXIgPSBTdHJpbmcuZnJvbUNoYXJDb2RlKDB4ZWYpO1xyXG4gICAgICBmb3IobGV0IGJhY2sgPSAwO2JhY2sgPCA4OysrYmFjayl7XHJcbiAgICAgICAgZm9yKGxldCBmcm9udCA9IGJhY2s7ZnJvbnQgPCA4OysrZnJvbnQpe1xyXG4gICAgICAgICAgY29sb3JzLnB1c2goe2JhY2s6YmFjayxmcm9udDpmcm9udH0pO1xyXG4gICAgICAgIH1cclxuICAgICAgfVxyXG5cclxuICAgICAgZm9yKGxldCB4ID0gMCxleCA9IDQwO3ggPCBleDsrK3gpe1xyXG4gICAgICAgIGZvcihsZXQgeSA9IDAsZXkgPSAyNTt5IDwgZXk7Kyt5KXtcclxuICAgICAgICAgIHByaW50RGlyZWN0KHgseSxjaGVja2VyLDAsMCk7ICAgICAgICAgXHJcbiAgICAgICAgfVxyXG4gICAgICB9XHJcblxyXG4gICAgICB3aGlsZSh0cnVlKXtcclxuICAgICAgICBpID0geWllbGQgKiBjaXJjbGVMb29wKGNvbG9ycyxjeCxjeSxpKTtcclxuICAgICAgICBpID0geWllbGQgKiByZWN0TG9vcChjb2xvcnMsY3gsY3ksaSk7XHJcbiAgICAgIH1cclxuXHJcbiAgICAgIHVwZGF0ZVN0YXR1cyhTVEFUVVMuc3RvcCk7XHJcbiAgICB9KSgpOyAgXHJcbiAgICBtYWluID0gZ2VuLm5leHQuYmluZChnZW4pO1xyXG4gIH1cclxuICBsZXQgYXVkaW9fID0gbmV3IGF1ZGlvLkF1ZGlvKCk7XHJcbiAgbGV0IHNlcXVlbmNlciA9IG5ldyBhdWRpby5TZXF1ZW5jZXIoYXVkaW9fKTtcclxuICBzZXF1ZW5jZXIubG9hZChzZXFEYXRhKTtcclxuXHJcbiAgcnVuQnRuLmFkZEV2ZW50TGlzdGVuZXIoJ2NsaWNrJywoKT0+e1xyXG4gICAgdXBkYXRlU3RhdHVzKFNUQVRVUy5ydW4pO1xyXG4gICAgc2VxdWVuY2VyLnN0YXJ0KCk7XHJcbiAgICBydW4oKTtcclxuICB9KTtcclxuICBcclxuICBwYXVzZUJ0bi5hZGRFdmVudExpc3RlbmVyKCdjbGljaycsKCk9PntcclxuICAgIGlmKHN0YXR1cyA9PSBTVEFUVVMucGF1c2Upe1xyXG4gICAgICB1cGRhdGVTdGF0dXMoU1RBVFVTLnJ1bik7XHJcbiAgICAgIHNlcXVlbmNlci5yZXN1bWUoKTtcclxuICAgIH0gZWxzZSB7XHJcbiAgICAgIHNlcXVlbmNlci5wYXVzZSgpO1xyXG4gICAgICB1cGRhdGVTdGF0dXMoU1RBVFVTLnBhdXNlKTtcclxuICAgIH1cclxuICB9KTtcclxuXHJcbiAgc3RvcEJ0bi5hZGRFdmVudExpc3RlbmVyKCdjbGljaycsKCk9PntcclxuICAgIHNlcXVlbmNlci5zdG9wKCk7XHJcbiAgICB1cGRhdGVTdGF0dXMoU1RBVFVTLnN0b3ApO1xyXG4gIH0pO1xyXG4gIFxyXG4gIGRvY3VtZW50LmFkZEV2ZW50TGlzdGVuZXIoXCJ2aXNpYmlsaXR5Y2hhbmdlXCIsICgpPT4ge1xyXG4gICAgaWYoZG9jdW1lbnQuaGlkZGVuKXtcclxuICAgICAgaWYoc2VxdWVuY2VyLnN0YXR1cyA9PSBzZXF1ZW5jZXIuUExBWSl7XHJcbiAgICAgICAgc2VxdWVuY2VyLnBhdXNlKCk7XHJcbiAgICAgICAgc2VxdWVuY2VyLmlzSGlkZGVuUGF1c2UgPSB0cnVlO1xyXG4gICAgICB9XHJcbiAgICB9IGVsc2Uge1xyXG4gICAgICBpZihzZXF1ZW5jZXIuaXNIaWRkZW5QYXVzZSl7XHJcbiAgICAgICAgc2VxdWVuY2VyLnJlc3VtZSgpO1xyXG4gICAgICAgIHNlcXVlbmNlci5pc0hpZGRlblBhdXNlID0gZmFsc2U7XHJcbiAgICAgIH1cclxuICAgIH1cclxuICB9KTtcclxuICAvLyByZXNldEJ0bi5hZGRFdmVudExpc3RlbmVyKCdjbGljaycsKCk9PntcclxuICAvLyAgIHVwZGF0ZVN0YXR1cyhTVEFUVVMucmVzZXQpO1xyXG4gIC8vIH0pO1xyXG5cclxuICB1cGRhdGVTdGF0dXMoU1RBVFVTLnN0b3ApO1xyXG4gIHJlbmRlcigpO1xyXG59KTtcclxuIiwiXHJcbmV4cG9ydCB2YXIgc2VxRGF0YSA9IHtcclxuICBuYW1lOiAnVGVzdCcsXHJcbiAgdHJhY2tzOiBbXHJcbiAgICAvLyB7XHJcbiAgICAvLyAgIG5hbWU6ICdwYXJ0MScsXHJcbiAgICAvLyAgIGNoYW5uZWw6IDAsXHJcbiAgICAvLyAgIG1tbDpcclxuICAgIC8vICAgYFxyXG4gICAgLy8gICAgczAuMDEsMC4yLDAuMiwwLjAzIEAyIFxyXG4gICAgLy8gICAgdDE0MCAgcTM1IHYzMCBsMXIxcjFyMXIxICRsMTZvMyBjY2NjY2NjYzxnZ2dnYWFiYj4gY2NjY2NjY2M8Z2dnZz5jYzxiYiBiLWItYi1iLWItYi1iLWItZmZmZmdnZytnKyBnK2crZytnK2crZytnK2crZ2dnZ2FhYmIgPlxyXG4gICAgLy8gICAgICAgICAgYFxyXG4gICAgLy8gICB9LFxyXG4gICAge1xyXG4gICAgICBuYW1lOiAncGFydDMnLFxyXG4gICAgICBjaGFubmVsOiAxLFxyXG4gICAgICBtbWw6XHJcbiAgICAgIGBzMC4wMSwwLjAxLDEuMCwwLjA1IG81IHQxNTAgQDEwIHY1MCBxMzAgJGw0Z3JnOGc4cmBcclxuICAgIH1cclxuICAgICAsXHJcbiAgICB7XHJcbiAgICAgIG5hbWU6ICdwYXJ0NCcsXHJcbiAgICAgIGNoYW5uZWw6IDIsXHJcbiAgICAgIG1tbDpcclxuICAgICAgYHMwLjAxLDAuMDEsMS4wLDAuMDUgbzUgdDE1MCBAMjIgdjYwIHE4MCAkLzpsNHJ2NjBiOC52MzBiMTZybDE2djYwYjhyODovM2w0cmI4LmIxNnJsMTZicjE2YmJgXHJcbiAgICB9XHJcbiAgICAgLFxyXG4gICAge1xyXG4gICAgICBuYW1lOiAncGFydDUnLFxyXG4gICAgICBjaGFubmVsOiAzLFxyXG4gICAgICBtbWw6XHJcbiAgICAgIGBzMC4wMSwwLjAxLDEuMCwwLjA1IG81IHQxNTAgQDExIGw4ICQgcTIwIHYzMCByOGE4IHI4YThgXHJcbiAgICB9XHJcbiAgICAvLyAgLFxyXG4gICAgLy8ge1xyXG4gICAgLy8gICBuYW1lOiAncGFydDUnLFxyXG4gICAgLy8gICBjaGFubmVsOiA0LFxyXG4gICAgLy8gICBtbWw6XHJcbiAgICAvLyAgIGBzMC4wMSwwLjAxLDEuMCwwLjA1IG81IHQxNTAgQDE0IHE5NSAkdjQ1IGw0IGBcclxuICAgIC8vIH1cclxuICBdXHJcbn0iXX0=
